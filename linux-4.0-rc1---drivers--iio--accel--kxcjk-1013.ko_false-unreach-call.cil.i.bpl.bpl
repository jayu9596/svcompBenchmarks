var $M.0: [ref]i8;

var $M.1: i8;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: [ref]ref;

var $M.10: [ref]i16;

var $M.11: [ref]i32;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]i8;

var $M.15: [ref]i8;

var $M.16: [ref]i32;

var $M.17: [ref]i32;

var $M.18: i32;

var $M.19: [ref]i8;

var $M.20: [ref]i8;

var $M.21: [ref]i32;

var $M.22: [ref]i32;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i16;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $M.117: [ref]i32;

var $M.118: [ref]i32;

var $M.119: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 478544);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 25689);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_kxcjk1013_data: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_kxcjk1013_data == $sub.ref(0, 26714);

const {:count 5} __mod_acpi__kx_acpi_match_device_table: ref;

axiom __mod_acpi__kx_acpi_match_device_table == $sub.ref(0, 27858);

const {:count 5} __mod_i2c__kxcjk1013_id_device_table: ref;

axiom __mod_i2c__kxcjk1013_id_device_table == $sub.ref(0, 29042);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 30082);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 31122);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 32162);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 33202);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 34242);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 35282);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 36322);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 37362);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 38390);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 39418);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 40446);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 41474);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 42502);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 43530);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 44558);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 45586);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 46611);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 47639);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 48667);

const {:count 3} odr_start_up_times: ref;

axiom odr_start_up_times == $sub.ref(0, 49979);

const kxcjk1013_trigger_ops: ref;

axiom kxcjk1013_trigger_ops == $sub.ref(0, 51035);

const iio_const_attr_in_accel_scale_available: ref;

axiom iio_const_attr_in_accel_scale_available == $sub.ref(0, 52115);

const iio_const_attr_sampling_frequency_available: ref;

axiom iio_const_attr_sampling_frequency_available == $sub.ref(0, 53195);

const {:count 3} kxcjk1013_attributes: ref;

axiom kxcjk1013_attributes == $sub.ref(0, 54243);

const kxcjk1013_attrs_group: ref;

axiom kxcjk1013_attrs_group == $sub.ref(0, 55299);

const kxcjk1013_info: ref;

axiom kxcjk1013_info == $sub.ref(0, 56443);

const kxcjk1013_event: ref;

axiom kxcjk1013_event == $sub.ref(0, 57507);

const {:count 4} kxcjk1013_channels: ref;

axiom kxcjk1013_channels == $sub.ref(0, 59011);

const {:count 12} wake_odr_data_rate_table: ref;

axiom wake_odr_data_rate_table == $sub.ref(0, 60179);

const {:count 12} samp_freq_table: ref;

axiom samp_freq_table == $sub.ref(0, 61347);

const {:count 3} KXCJK1013_scale_table: ref;

axiom KXCJK1013_scale_table == $sub.ref(0, 62383);

const {:count 5} kxcjk1013_id: ref;

axiom kxcjk1013_id == $sub.ref(0, 63567);

const kxcjk1013_pm_ops: ref;

axiom kxcjk1013_pm_ops == $sub.ref(0, 64775);

const {:count 5} kx_acpi_match: ref;

axiom kx_acpi_match == $sub.ref(0, 65919);

const kxcjk1013_driver: ref;

axiom kxcjk1013_driver == $sub.ref(0, 67159);

const {:count 10} .str.1: ref;

axiom .str.1 == $sub.ref(0, 68193);

const {:count 25} .str.6: ref;

axiom .str.6 == $sub.ref(0, 69242);

const {:count 25} .str.7: ref;

axiom .str.7 == $sub.ref(0, 70291);

const {:count 13} .str.15: ref;

axiom .str.15 == $sub.ref(0, 71328);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 72368);

const {:count 9} .str.17: ref;

axiom .str.17 == $sub.ref(0, 73401);

const {:count 20} .str.18: ref;

axiom .str.18 == $sub.ref(0, 74445);

const {:count 35} .str.19: ref;

axiom .str.19 == $sub.ref(0, 75504);

const {:count 31} .str.20: ref;

axiom .str.20 == $sub.ref(0, 76559);

const {:count 35} .str.3: ref;

axiom .str.3 == $sub.ref(0, 77618);

const {:count 42} .str.2: ref;

axiom .str.2 == $sub.ref(0, 78684);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 79737);

const {:count 29} .str.5: ref;

axiom .str.5 == $sub.ref(0, 80790);

const {:count 30} .str.8: ref;

axiom .str.8 == $sub.ref(0, 81844);

const {:count 30} .str.9: ref;

axiom .str.9 == $sub.ref(0, 82898);

const {:count 27} .str.10: ref;

axiom .str.10 == $sub.ref(0, 83949);

const {:count 25} .str.11: ref;

axiom .str.11 == $sub.ref(0, 84998);

const {:count 25} .str.12: ref;

axiom .str.12 == $sub.ref(0, 86047);

const {:count 28} .str.13: ref;

axiom .str.13 == $sub.ref(0, 87099);

const {:count 28} .str.14: ref;

axiom .str.14 == $sub.ref(0, 88151);

const {:count 14} .str.33: ref;

axiom .str.33 == $sub.ref(0, 89189);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 90241);

const {:count 11} .str.23: ref;

axiom .str.23 == $sub.ref(0, 91276);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 92321);

const {:count 31} .str.25: ref;

axiom .str.25 == $sub.ref(0, 93376);

const {:count 29} .str.36: ref;

axiom .str.36 == $sub.ref(0, 94429);

const {:count 24} .str.22: ref;

axiom .str.22 == $sub.ref(0, 95477);

const {:count 20} .str.24: ref;

axiom .str.24 == $sub.ref(0, 96521);

const {:count 22} .str.26: ref;

axiom .str.26 == $sub.ref(0, 97567);

const {:count 24} .str.27: ref;

axiom .str.27 == $sub.ref(0, 98615);

const {:count 29} .str.28: ref;

axiom .str.28 == $sub.ref(0, 99668);

const {:count 8} .str.21: ref;

axiom .str.21 == $sub.ref(0, 100700);

const {:count 28} .str.37: ref;

axiom .str.37 == $sub.ref(0, 101752);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 73} .str.29: ref;

axiom .str.29 == $sub.ref(0, 102849);

const {:count 29} .str.30: ref;

axiom .str.30 == $sub.ref(0, 103902);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 104953);

const {:count 25} .str.32: ref;

axiom .str.32 == $sub.ref(0, 106002);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const .str: ref;

axiom .str == $sub.ref(0, 107027);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 108059);

const {:count 3} .str.1.86: ref;

axiom .str.1.86 == $sub.ref(0, 109086);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 110124);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 111152);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 112184);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const kxcjk1013_probe: ref;

axiom kxcjk1013_probe == $sub.ref(0, 113216);

procedure kxcjk1013_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.18, $M.1, $M.19, $M.13, $M.20, assertsPassed;



implementation kxcjk1013_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p31: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i135: i32;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $i128: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i68: i32;
  var $i7: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p4 := devm_iio_device_alloc($p3, 240);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p8 := iio_priv($p4);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} i2c_set_clientdata($p0, $p10);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p13 := dev_get_platdata($p12);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1)), $mul.ref(1240, 1)), $mul.ref(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p36 := acpi_device_handle($p35);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(236, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p42 := kxcjk1013_match_acpi_device($p39, $p40, $p41);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $p42;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i43 := kxcjk1013_chip_init($p9);
    call {:si_unique_call 7} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} __mutex_init($p45, .str.15, $p2);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p46);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1680, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, kxcjk1013_channels);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1688, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 4);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1744, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p31);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(4, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1752, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, kxcjk1013_info);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(1448, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(1448, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i61 := $sge.i32($i60, 0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i132 := iio_device_register($p4);
    call {:si_unique_call 27} {:cexpr "ret"} boogie_si_record_i32($i132);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i132, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i137 := pm_runtime_set_active($p136);
    call {:si_unique_call 30} {:cexpr "ret"} boogie_si_record_i32($i137);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} pm_runtime_enable($p139);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} pm_runtime_set_autosuspend_delay($p140, 2000);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} pm_runtime_use_autosuspend($p141);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb47:
    assume $i138 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} iio_device_unregister($p4);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i135 := $i137;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i128 := $i135;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i68 := $i128;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_12 := kxcjk1013_set_mode($p9, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i7 := $i68;
    goto $bb3;

  $bb57:
    assume $i155 == 1;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} ldv_iio_trigger_unregister_130($p157);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i149 == 1;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} ldv_iio_trigger_unregister_129($p151);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i145 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} ldv_iio_triggered_buffer_cleanup_128($p4);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i133 == 1;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} dev_err.ref.ref($p134, .str.20);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i135 := $i132;
    goto $bb45;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(1448, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i66 := ldv_devm_request_threaded_irq_124($p62, $i64, kxcjk1013_data_rdy_trig_poll, kxcjk1013_event_handler, 1, .str.16, $p65);
    call {:si_unique_call 12} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1744, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(0, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p74 := devm_iio_trigger_alloc.ref.ref.ref.i32($p69, .str.17, $p71, $i73);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p74);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1744, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(0, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p85 := devm_iio_trigger_alloc.ref.ref.ref.i32($p80, .str.18, $p82, $i84);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 1880)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p91);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 1880)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, kxcjk1013_trigger_ops);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p4);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} iio_trigger_set_drvdata($p100, $p101);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1664, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p103);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1664, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_13 := iio_trigger_get($p106);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i110 := ldv_iio_trigger_register_125($p109);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 19} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p114, $mul.ref(0, 1880)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $p112);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1880)), $mul.ref(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, kxcjk1013_trigger_ops);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p4);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} iio_trigger_set_drvdata($p121, $p122);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i125 := ldv_iio_trigger_register_126($p124);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 22} {:cexpr "ret"} boogie_si_record_i32($i125);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i129 := ldv_iio_triggered_buffer_setup_127($p4, iio_pollfunc_store_time, kxcjk1013_trigger_handler, $0.ref);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 24} {:cexpr "ret"} boogie_si_record_i32($i129);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i130 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} dev_err.ref.ref($p131, .str.19);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i128 := $i129;
    goto $bb37;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i126 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $0.ref);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i128 := $i125;
    goto $bb37;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i68 := $i110;
    goto $bb24;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i90 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb24;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb24;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    goto $bb24;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i57 := kxcjk1013_gpio_probe($p0, $p9);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(1448, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i7 := $i43;
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p31 := $p1;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i19);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i21);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const kxcjk1013_remove: ref;

axiom kxcjk1013_remove == $sub.ref(0, 114248);

procedure kxcjk1013_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation kxcjk1013_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p1 := i2c_get_clientdata($p0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p3 := iio_priv($p2);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} pm_runtime_disable($p5);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} pm_runtime_set_suspended($p6);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} pm_runtime_put_noidle($p7);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} iio_device_unregister($p2);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_mutex_lock_134($p16);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_14 := kxcjk1013_set_mode($p4, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} ldv_mutex_unlock_135($p18);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} ldv_iio_triggered_buffer_cleanup_131($p2);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ldv_iio_trigger_unregister_132($p13);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_iio_trigger_unregister_133($p15);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_get_clientdata: ref;

axiom i2c_get_clientdata == $sub.ref(0, 115280);

procedure i2c_get_clientdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_clientdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const iio_priv: ref;

axiom iio_priv == $sub.ref(0, 116312);

procedure iio_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iio_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(2368, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pm_runtime_disable: ref;

axiom pm_runtime_disable == $sub.ref(0, 117344);

procedure pm_runtime_disable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} __pm_runtime_disable($p0, 1);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_suspended: ref;

axiom pm_runtime_set_suspended == $sub.ref(0, 118376);

procedure pm_runtime_set_suspended($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_set_suspended($p0: ref)
{
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_15 := __pm_runtime_set_status($p0, 2);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put_noidle: ref;

axiom pm_runtime_put_noidle == $sub.ref(0, 119408);

procedure pm_runtime_put_noidle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_put_noidle($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(520, 1)), $mul.ref(520, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_16 := atomic_add_unless($p2, $sub.i32(0, 1), 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    return;
}



const iio_device_unregister: ref;

axiom iio_device_unregister == $sub.ref(0, 120440);

procedure iio_device_unregister($p0: ref);
  free requires assertsPassed;



implementation iio_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_cleanup_131: ref;

axiom ldv_iio_triggered_buffer_cleanup_131 == $sub.ref(0, 121472);

procedure ldv_iio_triggered_buffer_cleanup_131($p0: ref);
  free requires assertsPassed;



implementation ldv_iio_triggered_buffer_cleanup_131($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} iio_triggered_buffer_cleanup($p0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} ldv_iio_triggered_buffer_cleanup($0.ref, $p0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_trigger_unregister_132: ref;

axiom ldv_iio_trigger_unregister_132 == $sub.ref(0, 122504);

procedure ldv_iio_trigger_unregister_132($p0: ref);
  free requires assertsPassed;



implementation ldv_iio_trigger_unregister_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} iio_trigger_unregister($p0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} ldv_iio_trigger_unregister($0.ref, $p0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_trigger_unregister_133: ref;

axiom ldv_iio_trigger_unregister_133 == $sub.ref(0, 123536);

procedure ldv_iio_trigger_unregister_133($p0: ref);
  free requires assertsPassed;



implementation ldv_iio_trigger_unregister_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} iio_trigger_unregister($p0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} ldv_iio_trigger_unregister($0.ref, $p0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_134: ref;

axiom ldv_mutex_lock_134 == $sub.ref(0, 124568);

procedure ldv_mutex_lock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const kxcjk1013_set_mode: ref;

axiom kxcjk1013_set_mode == $sub.ref(0, 125600);

procedure kxcjk1013_set_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_set_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} {:cexpr "kxcjk1013_set_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i4 := i2c_smbus_read_byte_data($p3, 27);
    call {:si_unique_call 63} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i4, 128);
    call {:si_unique_call 66} {:cexpr "ret"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i12);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i19 := i2c_smbus_write_byte_data($p15, 27, $i18);
    call {:si_unique_call 68} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} dev_err.ref.ref($p23, .str.7);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i9 := $i19;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i4, $sub.i32(0, 129));
    call {:si_unique_call 65} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} dev_err.ref.ref($p8, .str.6);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const ldv_mutex_unlock_135: ref;

axiom ldv_mutex_unlock_135 == $sub.ref(0, 126632);

procedure ldv_mutex_unlock_135($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data == $sub.ref(0, 127664);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 72} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_kxcjk1013_data"} boogie_si_record_i8(0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 128696);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_smbus_read_byte_data: ref;

axiom i2c_smbus_read_byte_data == $sub.ref(0, 129728);

procedure i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 75} {:cexpr "i2c_smbus_read_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 76} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 77} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 130760);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    return;
}



const i2c_smbus_write_byte_data: ref;

axiom i2c_smbus_write_byte_data == $sub.ref(0, 131792);

procedure i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 78} {:cexpr "i2c_smbus_write_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 79} {:cexpr "i2c_smbus_write_byte_data:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data == $sub.ref(0, 132824);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 83} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_kxcjk1013_data"} boogie_si_record_i8(1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 133856);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} __VERIFIER_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iio_trigger_unregister: ref;

axiom iio_trigger_unregister == $sub.ref(0, 134888);

procedure iio_trigger_unregister($p0: ref);
  free requires assertsPassed;



implementation iio_trigger_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_trigger_unregister: ref;

axiom ldv_iio_trigger_unregister == $sub.ref(0, 135920);

procedure ldv_iio_trigger_unregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_iio_trigger_unregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_dispatch_deregister_11_1($p1);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_11_1: ref;

axiom ldv_dispatch_deregister_11_1 == $sub.ref(0, 136952);

procedure ldv_dispatch_deregister_11_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_11_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    return;
}



const iio_triggered_buffer_cleanup: ref;

axiom iio_triggered_buffer_cleanup == $sub.ref(0, 137984);

procedure iio_triggered_buffer_cleanup($p0: ref);
  free requires assertsPassed;



implementation iio_triggered_buffer_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_cleanup: ref;

axiom ldv_iio_triggered_buffer_cleanup == $sub.ref(0, 139016);

procedure ldv_iio_triggered_buffer_cleanup($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_iio_triggered_buffer_cleanup($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} ldv_dispatch_irq_deregister_8_1($p1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_irq_deregister_8_1: ref;

axiom ldv_dispatch_irq_deregister_8_1 == $sub.ref(0, 140048);

procedure ldv_dispatch_irq_deregister_8_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_irq_deregister_8_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 141080);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 89} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 91} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 142112);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 93} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i3 := atomic_read($p0);
    call {:si_unique_call 95} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 97} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 99} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 101} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 143144);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 144176);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 105} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 145208);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 107} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 108} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 109} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 110} $i10 := devirtbounce.2(0, $p9, $i2, $i1, $p9);
    call {:si_unique_call 111} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 146240);

procedure __cmpxchg_wrong_size();



const __pm_runtime_set_status: ref;

axiom __pm_runtime_set_status == $sub.ref(0, 147272);

procedure __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} {:cexpr "__pm_runtime_set_status:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pm_runtime_disable: ref;

axiom __pm_runtime_disable == $sub.ref(0, 148304);

procedure __pm_runtime_disable($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_disable($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} {:cexpr "__pm_runtime_disable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 149336);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const devm_iio_device_alloc: ref;

axiom devm_iio_device_alloc == $sub.ref(0, 150368);

procedure devm_iio_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_iio_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "devm_iio_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p2 := external_alloc();
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const i2c_set_clientdata: ref;

axiom i2c_set_clientdata == $sub.ref(0, 151400);

procedure i2c_set_clientdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2c_set_clientdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} dev_set_drvdata($p2, $p1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 152432);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(504, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const acpi_device_handle: ref;

axiom acpi_device_handle == $sub.ref(0, 153464);

procedure acpi_device_handle($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_device_handle($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2248)), $mul.ref(8, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const kxcjk1013_match_acpi_device: ref;

axiom kxcjk1013_match_acpi_device == $sub.ref(0, 154496);

procedure kxcjk1013_match_acpi_device($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_match_acpi_device($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(496, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p7 := acpi_match_device($p6, $p0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i13 := strcmp($p12, .str.21);
    call {:si_unique_call 125} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i17);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p18 := dev_name($p0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p10 := $p18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;
}



const kxcjk1013_chip_init: ref;

axiom kxcjk1013_chip_init == $sub.ref(0, 155528);

procedure kxcjk1013_chip_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $CurrAddr;



implementation kxcjk1013_chip_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $i70: i32;
  var $i72: i32;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i4 := i2c_smbus_read_byte_data($p3, 15);
    call {:si_unique_call 129} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.23);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.24);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.25);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.26);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.6, $p15);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 301);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p15, $i18);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 132} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i29 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 135} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i33 := i2c_smbus_read_byte_data($p32, 27);
    call {:si_unique_call 137} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i33, 64);
    call {:si_unique_call 139} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i38);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i44 := i2c_smbus_write_byte_data($p40, 27, $i43);
    call {:si_unique_call 141} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i49 := kxcjk1013_set_range($p0, 1);
    call {:si_unique_call 144} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i53 := i2c_smbus_read_byte_data($p52, 33);
    call {:si_unique_call 146} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i53);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i58);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i62 := i2c_smbus_read_byte_data($p61, 30);
    call {:si_unique_call 149} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i69 == 1);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i62, $sub.i32(0, 17));
    call {:si_unique_call 152} {:cexpr "ret"} boogie_si_record_i32($i72);
    assume {:verifier.code 0} true;
    $i71 := $i72;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i71);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i78 := i2c_smbus_write_byte_data($p74, 30, $i77);
    call {:si_unique_call 154} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i83 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 157} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i9 := $i83;
    goto $bb3;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} dev_err.ref.ref($p82, .str.5);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i9 := $i78;
    goto $bb3;

  $bb26:
    assume $i69 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i62, 16);
    call {:si_unique_call 151} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb28;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} dev_err.ref.ref($p66, .str.4);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i9 := $i62;
    goto $bb3;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} dev_err.ref.ref($p57, .str.28);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i9 := $i53;
    goto $bb3;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i9 := $i49;
    goto $bb3;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} dev_err.ref.ref($p48, .str.27);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i9 := $i44;
    goto $bb3;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} dev_err.ref.ref($p37, .str.6);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb3;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i9 := $i29;
    goto $bb3;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p28, .str.26, $i4);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} dev_err.ref.ref($p8, .str.22);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 156560);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    return;
}



const kxcjk1013_gpio_probe: ref;

axiom kxcjk1013_gpio_probe == $sub.ref(0, 157592);

procedure kxcjk1013_gpio_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation kxcjk1013_gpio_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(236, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p10 := __devm_gpiod_get_index($p9, .str.33, 0, 0);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i12 := IS_ERR($p11);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 161} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i18 := gpiod_direction_input($p10);
    call {:si_unique_call 166} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i20 := gpiod_to_irq($p10);
    call {:si_unique_call 168} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, .str.23);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p22, .str.35);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.25);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p24, .str.36);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.6, $p26);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 1184);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p26, $i29);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p30, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.7, $p31);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 170} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i37 := desc_to_gpio($p10);
    call {:si_unique_call 172} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p9, .str.36, $i37, $i20);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} dev_err.ref.ref($p9, .str.34);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p10);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i16 := PTR_ERR($p15);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 524);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const kxcjk1013_data_rdy_trig_poll: ref;

axiom kxcjk1013_data_rdy_trig_poll == $sub.ref(0, 158624);

procedure kxcjk1013_data_rdy_trig_poll($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $CurrAddr;



implementation kxcjk1013_data_rdy_trig_poll($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "kxcjk1013_data_rdy_trig_poll:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p3 := iio_priv($p2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i5 := iio_get_time_ns();
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(213, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i20 := 2;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} iio_trigger_poll($p16);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} iio_trigger_poll($p11);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kxcjk1013_event_handler: ref;

axiom kxcjk1013_event_handler == $sub.ref(0, 159656);

procedure kxcjk1013_event_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_event_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "kxcjk1013_event_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p3 := iio_priv($p2);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i7 := i2c_smbus_read_byte_data($p6, 22);
    call {:si_unique_call 182} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i7, 2);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(213, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i61 := i2c_smbus_read_byte_data($p60, 26);
    call {:si_unique_call 194} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb33:
    assume $i62 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} dev_err.ref.ref($p65, .str.10);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i58 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i16 := i2c_smbus_read_byte_data($p15, 23);
    call {:si_unique_call 185} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i16);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 32);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i16);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 16);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i16);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 8);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i16);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 4);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i16);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 2);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i16, 1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_22 := iio_push_event($p2, 284786396495872, $i54);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_21 := iio_push_event($p2, 566261373206528, $i49);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_20 := iio_push_event($p2, 283686884868096, $i43);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_19 := iio_push_event($p2, 565161861578752, $i37);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_18 := iio_push_event($p2, 282587373240320, $i31);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_17 := iio_push_event($p2, 564062349950976, $i25);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} dev_err.ref.ref($p20, .str.14);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} dev_err.ref.ref($p11, .str.13);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_devm_request_threaded_irq_124: ref;

axiom ldv_devm_request_threaded_irq_124 == $sub.ref(0, 160688);

procedure ldv_devm_request_threaded_irq_124($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.19, $M.20;



implementation ldv_devm_request_threaded_irq_124($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "ldv_devm_request_threaded_irq_124:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 197} {:cexpr "ldv_devm_request_threaded_irq_124:arg:ldv_func_arg5"} boogie_si_record_i64($i4);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i7 := devm_request_threaded_irq($p0, $i1, $p2, $p3, $i4, $p5, $p6);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i8 := ldv_devm_request_threaded_irq($i7, $p0, $i1, $p2, $p3, $i4, $p5, $p6);
    call {:si_unique_call 201} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const devm_iio_trigger_alloc: ref;

axiom devm_iio_trigger_alloc == $sub.ref(0, 161720);

procedure devm_iio_trigger_alloc.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_iio_trigger_alloc.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p2 := external_alloc();
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const iio_trigger_set_drvdata: ref;

axiom iio_trigger_set_drvdata == $sub.ref(0, 162752);

procedure iio_trigger_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation iio_trigger_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1880)), $mul.ref(24, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} dev_set_drvdata($p2, $p1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    return;
}



const iio_trigger_get: ref;

axiom iio_trigger_get == $sub.ref(0, 163784);

procedure iio_trigger_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation iio_trigger_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1880)), $mul.ref(24, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_23 := get_device($p1);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1880)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ldv___module_get_98($p6);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_iio_trigger_register_125: ref;

axiom ldv_iio_trigger_register_125 == $sub.ref(0, 164816);

procedure ldv_iio_trigger_register_125($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.13, assertsPassed;



implementation ldv_iio_trigger_register_125($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i1 := iio_trigger_register($p0);
    call {:si_unique_call 207} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i2 := ldv_iio_trigger_register($i1, $p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 209} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_iio_trigger_register_126: ref;

axiom ldv_iio_trigger_register_126 == $sub.ref(0, 165848);

procedure ldv_iio_trigger_register_126($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.13, assertsPassed;



implementation ldv_iio_trigger_register_126($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i1 := iio_trigger_register($p0);
    call {:si_unique_call 211} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i2 := ldv_iio_trigger_register($i1, $p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 213} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const iio_pollfunc_store_time: ref;

axiom iio_pollfunc_store_time == $sub.ref(0, 166880);

procedure iio_pollfunc_store_time($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_pollfunc_store_time($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} {:cexpr "iio_pollfunc_store_time:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_trigger_handler: ref;

axiom kxcjk1013_trigger_handler == $sub.ref(0, 167912);

procedure kxcjk1013_trigger_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation kxcjk1013_trigger_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i20: i32;
  var $i21: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "kxcjk1013_trigger_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.8, $p3);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p5 := iio_priv($p4);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} ldv_mutex_lock_114($p7);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1440, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1640, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i15 := ldv_find_first_bit_115($p11, $i14);
    call {:si_unique_call 221} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    call {:si_unique_call 222} {:cexpr "bit"} boogie_si_record_i32($i16);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1640, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32($i16, $i18);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} ldv_mutex_unlock_118($p43);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(184, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_24 := iio_push_to_buffers_with_timestamp($p4, $p45, $i47);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1664, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} iio_trigger_notify_done($p50);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i20, $i21 := 0, $i16;
    goto $bb4;

  $bb4:
    call $i22, $i23, $i25, $i26, $i27, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i20, $i21 := kxcjk1013_trigger_handler_loop_$bb4($p4, $p6, $p17, $i22, $i23, $i25, $i26, $i27, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i20, $i21);
    goto $bb4_last;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i22 := kxcjk1013_get_acc_reg($p6, $i21);
    call {:si_unique_call 224} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i20, 1);
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i22);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i20);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(184, 1)), $mul.ref($i27, 2));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i26);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1440, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 2352)), $mul.ref(1640, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i21, 1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i39 := ldv_find_next_bit_117($p33, $i36, $i38);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 229} {:cexpr "tmp___2"} boogie_si_record_i64($i39);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    call {:si_unique_call 230} {:cexpr "bit"} boogie_si_record_i32($i40);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p17);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i40, $i41);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21 := $i25, $i40;
    goto $bb10_dummy;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} ldv_mutex_unlock_116($p24);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_913;
}



const ldv_iio_triggered_buffer_setup_127: ref;

axiom ldv_iio_triggered_buffer_setup_127 == $sub.ref(0, 168944);

procedure ldv_iio_triggered_buffer_setup_127($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, assertsPassed;



implementation ldv_iio_triggered_buffer_setup_127($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i4 := iio_triggered_buffer_setup($p0, $p1, $p2, $p3);
    call {:si_unique_call 234} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i5 := ldv_iio_triggered_buffer_setup($i4, $p0, $p1, $p2, $p3);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 236} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const iio_device_register: ref;

axiom iio_device_register == $sub.ref(0, 169976);

procedure iio_device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 237} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_set_active: ref;

axiom pm_runtime_set_active == $sub.ref(0, 171008);

procedure pm_runtime_set_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_set_active($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i1 := __pm_runtime_set_status($p0, 0);
    call {:si_unique_call 240} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_enable: ref;

axiom pm_runtime_enable == $sub.ref(0, 172040);

procedure pm_runtime_enable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 173072);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_use_autosuspend: ref;

axiom pm_runtime_use_autosuspend == $sub.ref(0, 174104);

procedure pm_runtime_use_autosuspend($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_use_autosuspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} __pm_runtime_use_autosuspend($p0, 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_cleanup_128: ref;

axiom ldv_iio_triggered_buffer_cleanup_128 == $sub.ref(0, 175136);

procedure ldv_iio_triggered_buffer_cleanup_128($p0: ref);
  free requires assertsPassed;



implementation ldv_iio_triggered_buffer_cleanup_128($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} iio_triggered_buffer_cleanup($p0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_iio_triggered_buffer_cleanup($0.ref, $p0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_trigger_unregister_129: ref;

axiom ldv_iio_trigger_unregister_129 == $sub.ref(0, 176168);

procedure ldv_iio_trigger_unregister_129($p0: ref);
  free requires assertsPassed;



implementation ldv_iio_trigger_unregister_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} iio_trigger_unregister($p0);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} ldv_iio_trigger_unregister($0.ref, $p0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_trigger_unregister_130: ref;

axiom ldv_iio_trigger_unregister_130 == $sub.ref(0, 177200);

procedure ldv_iio_trigger_unregister_130($p0: ref);
  free requires assertsPassed;



implementation ldv_iio_trigger_unregister_130($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} iio_trigger_unregister($p0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_iio_trigger_unregister($0.ref, $p0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    return;
}



const __pm_runtime_use_autosuspend: ref;

axiom __pm_runtime_use_autosuspend == $sub.ref(0, 178232);

procedure __pm_runtime_use_autosuspend($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_use_autosuspend($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "__pm_runtime_use_autosuspend:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    return;
}



const iio_triggered_buffer_setup: ref;

axiom iio_triggered_buffer_setup == $sub.ref(0, 179264);

procedure iio_triggered_buffer_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_triggered_buffer_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 1} true;
    call {:si_unique_call 250} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 251} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_iio_triggered_buffer_setup: ref;

axiom ldv_iio_triggered_buffer_setup == $sub.ref(0, 180296);

procedure ldv_iio_triggered_buffer_setup($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, assertsPassed;



implementation ldv_iio_triggered_buffer_setup($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "ldv_iio_triggered_buffer_setup:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i5 := ldv_undef_int();
    call {:si_unique_call 254} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i0, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} ldv_assume($i10);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} ldv_assume($i8);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ldv_dispatch_irq_register_9_2($p1, $p2, $p3);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 181328);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 182360);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_dispatch_irq_register_9_2: ref;

axiom ldv_dispatch_irq_register_9_2 == $sub.ref(0, 183392);

procedure ldv_dispatch_irq_register_9_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, assertsPassed;



implementation ldv_dispatch_irq_register_9_2($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p3 := ldv_xmalloc(32);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p2);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} ldv_iio_triggered_buffer_iio_triggered_buffer_instance_1($p8);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 184424);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p1 := malloc($i0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} ldv_assume($i4);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i5 := ldv_is_err($p1);
    call {:si_unique_call 268} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} ldv_assume($i7);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_iio_triggered_buffer_iio_triggered_buffer_instance_1: ref;

axiom ldv_iio_triggered_buffer_iio_triggered_buffer_instance_1 == $sub.ref(0, 185456);

procedure ldv_iio_triggered_buffer_iio_triggered_buffer_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation ldv_iio_triggered_buffer_iio_triggered_buffer_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p9, $p10 := $u1, $u1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} ldv_switch_to_interrupt_context();
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i11 := ldv_iio_triggered_buffer_instance_handler_1_5($p9, $u2, $u3);
    call {:si_unique_call 273} {:cexpr "ldv_1_ret_val_default"} boogie_si_record_i32($i11);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} ldv_switch_to_process_context();
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i12 := ldv_undef_int();
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i11, 2);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} ldv_assume($i17);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 2);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} ldv_assume($i15);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} ldv_iio_triggered_buffer_instance_thread_1_3($p10, $u2, $u3);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv_free($p8);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p5, $p7;
    goto $bb3;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 186488);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} free_($p0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    return;
}



const ldv_switch_to_interrupt_context: ref;

axiom ldv_switch_to_interrupt_context == $sub.ref(0, 187520);

procedure ldv_switch_to_interrupt_context();
  free requires assertsPassed;



implementation ldv_switch_to_interrupt_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_instance_handler_1_5: ref;

axiom ldv_iio_triggered_buffer_instance_handler_1_5 == $sub.ref(0, 188552);

procedure ldv_iio_triggered_buffer_instance_handler_1_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_iio_triggered_buffer_instance_handler_1_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "ldv_iio_triggered_buffer_instance_handler_1_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i3 := iio_pollfunc_store_time($i1, $p2);
    call {:si_unique_call 284} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_switch_to_process_context: ref;

axiom ldv_switch_to_process_context == $sub.ref(0, 189584);

procedure ldv_switch_to_process_context();
  free requires assertsPassed;



implementation ldv_switch_to_process_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_instance_thread_1_3: ref;

axiom ldv_iio_triggered_buffer_instance_thread_1_3 == $sub.ref(0, 190616);

procedure ldv_iio_triggered_buffer_instance_thread_1_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation ldv_iio_triggered_buffer_instance_thread_1_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "ldv_iio_triggered_buffer_instance_thread_1_3:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_25 := kxcjk1013_trigger_handler($i1, $p2);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 191648);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 288} $free($p0);
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 192680);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 289} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 193712);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mutex_lock_114: ref;

axiom ldv_mutex_lock_114 == $sub.ref(0, 194744);

procedure ldv_mutex_lock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_find_first_bit_115: ref;

axiom ldv_find_first_bit_115 == $sub.ref(0, 195776);

procedure ldv_find_first_bit_115($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_find_first_bit_115($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "ldv_find_first_bit_115:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i2 := ldv_linux_lib_find_bit_find_first_bit($i1);
    call {:si_unique_call 293} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_get_acc_reg: ref;

axiom kxcjk1013_get_acc_reg == $sub.ref(0, 196808);

procedure kxcjk1013_get_acc_reg($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_get_acc_reg($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} {:cexpr "kxcjk1013_get_acc_reg:arg:axis"} boogie_si_record_i32($i1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 295} {:cexpr "reg"} boogie_si_record_i8($i6);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i6);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i11 := i2c_smbus_read_word_data($p8, $i10);
    call {:si_unique_call 297} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i1, 120);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} dev_err.ref.ref.i32($p15, .str.3, $i16);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_116: ref;

axiom ldv_mutex_unlock_116 == $sub.ref(0, 197840);

procedure ldv_mutex_unlock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_find_next_bit_117: ref;

axiom ldv_find_next_bit_117 == $sub.ref(0, 198872);

procedure ldv_find_next_bit_117($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_find_next_bit_117($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "ldv_find_next_bit_117:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 301} {:cexpr "ldv_find_next_bit_117:arg:offset"} boogie_si_record_i64($i2);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i3 := ldv_linux_lib_find_bit_find_next_bit($i1, $i2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 303} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_118: ref;

axiom ldv_mutex_unlock_118 == $sub.ref(0, 199904);

procedure ldv_mutex_unlock_118($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_118($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const iio_push_to_buffers_with_timestamp: ref;

axiom iio_push_to_buffers_with_timestamp == $sub.ref(0, 200936);

procedure iio_push_to_buffers_with_timestamp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation iio_push_to_buffers_with_timestamp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "iio_push_to_buffers_with_timestamp:arg:timestamp"} boogie_si_record_i64($i2);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2352)), $mul.ref(1656, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i13 := iio_push_to_buffers($p0, $p1);
    call {:si_unique_call 308} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2352)), $mul.ref(1464, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i64($i8, 8);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i9, 1);
    call {:si_unique_call 306} {:cexpr "ts_offset"} boogie_si_record_i64($i10);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($i10, 8));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iio_trigger_notify_done: ref;

axiom iio_trigger_notify_done == $sub.ref(0, 201968);

procedure iio_trigger_notify_done($p0: ref);
  free requires assertsPassed;



implementation iio_trigger_notify_done($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    return;
}



const iio_push_to_buffers: ref;

axiom iio_push_to_buffers == $sub.ref(0, 203000);

procedure iio_push_to_buffers($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_push_to_buffers($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_lib_find_bit_find_next_bit: ref;

axiom ldv_linux_lib_find_bit_find_next_bit == $sub.ref(0, 204032);

procedure ldv_linux_lib_find_bit_find_next_bit($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_find_bit_find_next_bit($i0: i64, $i1: i64) returns ($r: i64)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} {:cexpr "ldv_linux_lib_find_bit_find_next_bit:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 312} {:cexpr "ldv_linux_lib_find_bit_find_next_bit:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i2 := ldv_undef_ulong();
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i1, $i0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} ldv_assert_linux_lib_find_bit__offset_out_of_range($i4);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i2, $i0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} ldv_assume($i6);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} ldv_assume(1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_undef_ulong: ref;

axiom ldv_undef_ulong == $sub.ref(0, 205064);

procedure ldv_undef_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation ldv_undef_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 320} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_lib_find_bit__offset_out_of_range: ref;

axiom ldv_assert_linux_lib_find_bit__offset_out_of_range == $sub.ref(0, 206096);

procedure ldv_assert_linux_lib_find_bit__offset_out_of_range($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_find_bit__offset_out_of_range($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} {:cexpr "ldv_assert_linux_lib_find_bit__offset_out_of_range:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} __VERIFIER_error();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_smbus_read_word_data: ref;

axiom i2c_smbus_read_word_data == $sub.ref(0, 207128);

procedure i2c_smbus_read_word_data($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_word_data($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} {:cexpr "i2c_smbus_read_word_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 324} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_lib_find_bit_find_first_bit: ref;

axiom ldv_linux_lib_find_bit_find_first_bit == $sub.ref(0, 208160);

procedure ldv_linux_lib_find_bit_find_first_bit($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_find_first_bit($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "ldv_linux_lib_find_bit_find_first_bit:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i1 := ldv_undef_ulong();
    call {:si_unique_call 328} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i2 := $ule.i64($i1, $i0);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} ldv_assume($i3);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} ldv_assume(1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iio_trigger_register: ref;

axiom iio_trigger_register == $sub.ref(0, 209192);

procedure iio_trigger_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_trigger_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_iio_trigger_register: ref;

axiom ldv_iio_trigger_register == $sub.ref(0, 210224);

procedure ldv_iio_trigger_register($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.13, assertsPassed;



implementation ldv_iio_trigger_register($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "ldv_iio_trigger_register:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i2 := ldv_undef_int();
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i0, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} ldv_assume($i7);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} ldv_assume($i5);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ldv_dispatch_register_12_2($p1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_12_2: ref;

axiom ldv_dispatch_register_12_2 == $sub.ref(0, 211256);

procedure ldv_dispatch_register_12_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.13, assertsPassed;



implementation ldv_dispatch_register_12_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p1 := ldv_xmalloc(16);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6($p4);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6: ref;

axiom ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6 == $sub.ref(0, 212288);

procedure ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.13, $CurrAddr, assertsPassed;



implementation ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32 := ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6_loop_$bb4($p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32);
    goto $bb4_last;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 2);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 3);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 4);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 5);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 6);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, 7);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i8, 8);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i8, 9);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i18 := $i8;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 10);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} ldv_stop();
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i19 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume $i17 == 1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_dummy_resourceless_instance_callback_6_3($u17, $u6, $u7, $u2, $u2);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb46_dummy;

  $bb33:
    assume $i16 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p27 := ldv_xmalloc(4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p29 := ldv_xmalloc(4);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_dummy_resourceless_instance_callback_6_7($u16, $u6, $u7, $u2, $u2, $u2, $p28, $p30);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p28);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} ldv_free($p31);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p30);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} ldv_free($p32);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb29:
    assume $i15 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p21 := ldv_xmalloc(4);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p23 := ldv_xmalloc(4);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} ldv_dummy_resourceless_instance_callback_6_10($u15, $u6, $u7, $p22, $p24, $u8);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p22);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} ldv_free($p25);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p24);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} ldv_free($p26);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i14 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($u13);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_dummy_resourceless_instance_callback_6_13($u14, $p7, $i20);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i13 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_dummy_resourceless_instance_callback_6_16($u12, $p7);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb17:
    assume $i12 == 1;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ldv_dummy_resourceless_instance_callback_6_17($u11, $u6, $p7);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} ldv_dummy_resourceless_instance_callback_6_18($u10, $u6, $u7, $u2, $u2, $u2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_dummy_resourceless_instance_callback_6_21($u9, $u6, $u7, $u2, $u2, $u2, $u2, $u2);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} ldv_dummy_resourceless_instance_callback_6_24($u5, $u6, $u7, $u2, $u2, $u8);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} ldv_free($p6);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb46_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i8 := ldv_undef_int();
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1211;
}



const ldv_dummy_resourceless_instance_callback_6_24: ref;

axiom ldv_dummy_resourceless_instance_callback_6_24 == $sub.ref(0, 213320);

procedure ldv_dummy_resourceless_instance_callback_6_24($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i64);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.0, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_24($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i64)
{
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} {:cexpr "ldv_dummy_resourceless_instance_callback_6_24:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 363} {:cexpr "ldv_dummy_resourceless_instance_callback_6_24:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 364} {:cexpr "ldv_dummy_resourceless_instance_callback_6_24:arg:arg5"} boogie_si_record_i64($i5);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_26 := kxcjk1013_write_raw($p1, $p2, $i3, $i4, $i5);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_21: ref;

axiom ldv_dummy_resourceless_instance_callback_6_21 == $sub.ref(0, 214352);

procedure ldv_dummy_resourceless_instance_callback_6_21($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_dummy_resourceless_instance_callback_6_21($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32)
{
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 367} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 368} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 369} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 370} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg7"} boogie_si_record_i32($i7);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_27 := kxcjk1013_write_event($p1, $p2, $i3, $i4, $i5, $i6, $i7);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_18: ref;

axiom ldv_dummy_resourceless_instance_callback_6_18 == $sub.ref(0, 215384);

procedure ldv_dummy_resourceless_instance_callback_6_18($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.13, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_18($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32)
{
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "ldv_dummy_resourceless_instance_callback_6_18:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 373} {:cexpr "ldv_dummy_resourceless_instance_callback_6_18:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 374} {:cexpr "ldv_dummy_resourceless_instance_callback_6_18:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_28 := kxcjk1013_write_event_config($p1, $p2, $i3, $i4, $i5);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_17: ref;

axiom ldv_dummy_resourceless_instance_callback_6_17 == $sub.ref(0, 216416);

procedure ldv_dummy_resourceless_instance_callback_6_17($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_17($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_29 := kxcjk1013_validate_trigger($p1, $p2);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_16: ref;

axiom ldv_dummy_resourceless_instance_callback_6_16 == $sub.ref(0, 217448);

procedure ldv_dummy_resourceless_instance_callback_6_16($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_30 := kxcjk1013_trig_try_reen($p1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_13: ref;

axiom ldv_dummy_resourceless_instance_callback_6_13 == $sub.ref(0, 218480);

procedure ldv_dummy_resourceless_instance_callback_6_13($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.13, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_13($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 378} {:cexpr "ldv_dummy_resourceless_instance_callback_6_13:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_31 := kxcjk1013_data_rdy_trigger_set_state($p1, $i4);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_10: ref;

axiom ldv_dummy_resourceless_instance_callback_6_10 == $sub.ref(0, 219512);

procedure ldv_dummy_resourceless_instance_callback_6_10($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_10($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i64)
{
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "ldv_dummy_resourceless_instance_callback_6_10:arg:arg5"} boogie_si_record_i64($i5);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_32 := kxcjk1013_read_raw($p1, $p2, $p3, $p4, $i5);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_7: ref;

axiom ldv_dummy_resourceless_instance_callback_6_7 == $sub.ref(0, 220544);

procedure ldv_dummy_resourceless_instance_callback_6_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_dummy_resourceless_instance_callback_6_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $p7: ref)
{
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} {:cexpr "ldv_dummy_resourceless_instance_callback_6_7:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 383} {:cexpr "ldv_dummy_resourceless_instance_callback_6_7:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 384} {:cexpr "ldv_dummy_resourceless_instance_callback_6_7:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_33 := kxcjk1013_read_event($p1, $p2, $i3, $i4, $i5, $p6, $p7);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 221576);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32)
{
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "ldv_dummy_resourceless_instance_callback_6_3:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 387} {:cexpr "ldv_dummy_resourceless_instance_callback_6_3:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_34 := kxcjk1013_read_event_config($p1, $p2, $i3, $i4);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 222608);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const kxcjk1013_read_event_config: ref;

axiom kxcjk1013_read_event_config == $sub.ref(0, 223640);

procedure kxcjk1013_read_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_read_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "kxcjk1013_read_event_config:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 390} {:cexpr "kxcjk1013_read_event_config:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p4 := iio_priv($p0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const kxcjk1013_read_event: ref;

axiom kxcjk1013_read_event == $sub.ref(0, 224672);

procedure kxcjk1013_read_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_read_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "kxcjk1013_read_event:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 393} {:cexpr "kxcjk1013_read_event:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 394} {:cexpr "kxcjk1013_read_event:arg:info"} boogie_si_record_i32($i4);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p7 := iio_priv($p0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, 3);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i14);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i12);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const kxcjk1013_read_raw: ref;

axiom kxcjk1013_read_raw == $sub.ref(0, 225704);

procedure kxcjk1013_read_raw($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation kxcjk1013_read_raw($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i14: i32;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i18: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} {:cexpr "kxcjk1013_read_raw:arg:mask"} boogie_si_record_i64($i4);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p5 := iio_priv($p0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i4, 2);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i4, 11);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} ldv_mutex_lock_103($p38);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i39 := kxcjk1013_get_odr($p6, $p2, $p3);
    call {:si_unique_call 403} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} ldv_mutex_unlock_104($p40);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i18 := $i39;
    goto $bb19;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(201, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref($i33, 4)), $mul.ref(0, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.10, $p35);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i37);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i18 := 2;
    goto $bb19;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} ldv_mutex_lock_99($p10);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i11 := iio_buffer_enabled($p0);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i15 := kxcjk1013_set_power_state($p6, 1);
    call {:si_unique_call 406} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i21 := kxcjk1013_get_acc_reg($p6, $i20);
    call {:si_unique_call 410} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i25 := $ashr.i32($i21, 4);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i26 := sign_extend32($i25, 11);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i27 := kxcjk1013_set_power_state($p6, 0);
    call {:si_unique_call 415} {:cexpr "ret"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    $i14 := $i27;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} ldv_mutex_unlock_102($p28);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i14, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb19;

  $bb24:
    assume $i29 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb19;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_35 := kxcjk1013_set_power_state($p6, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_mutex_unlock_101($p24);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb19;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} ldv_mutex_unlock_100($p17);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    goto $bb19;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb16;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_99: ref;

axiom ldv_mutex_lock_99 == $sub.ref(0, 226736);

procedure ldv_mutex_lock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const iio_buffer_enabled: ref;

axiom iio_buffer_enabled == $sub.ref(0, 227768);

procedure iio_buffer_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation iio_buffer_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2352)), $mul.ref(8, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 14);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kxcjk1013_set_power_state: ref;

axiom kxcjk1013_set_power_state == $sub.ref(0, 228800);

procedure kxcjk1013_set_power_state($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_set_power_state($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i8: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 417} {:cexpr "kxcjk1013_set_power_state:arg:on"} boogie_si_record_i1($i1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} pm_runtime_mark_last_busy($p11);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i15 := pm_runtime_put_autosuspend($p14);
    call {:si_unique_call 422} {:cexpr "ret"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i2);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} dev_err.ref.ref.i32($p19, .str.2, $i21);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i2);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $i8;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} pm_runtime_put_noidle($p25);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i7 := pm_runtime_get_sync($p6);
    call {:si_unique_call 419} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const ldv_mutex_unlock_100: ref;

axiom ldv_mutex_unlock_100 == $sub.ref(0, 229832);

procedure ldv_mutex_unlock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_101: ref;

axiom ldv_mutex_unlock_101 == $sub.ref(0, 230864);

procedure ldv_mutex_unlock_101($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const sign_extend32: ref;

axiom sign_extend32 == $sub.ref(0, 231896);

procedure sign_extend32($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sign_extend32($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} {:cexpr "sign_extend32:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 428} {:cexpr "sign_extend32:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(31, $i3);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 429} {:cexpr "shift"} boogie_si_record_i8($i5);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i0, $i6);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i5);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i7, $i8);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const ldv_mutex_unlock_102: ref;

axiom ldv_mutex_unlock_102 == $sub.ref(0, 232928);

procedure ldv_mutex_unlock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_103: ref;

axiom ldv_mutex_lock_103 == $sub.ref(0, 233960);

procedure ldv_mutex_lock_103($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const kxcjk1013_get_odr: ref;

axiom kxcjk1013_get_odr == $sub.ref(0, 234992);

procedure kxcjk1013_get_odr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_get_odr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(8, $i5);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32(9, $i19);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(10, $i23);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32(11, $i27);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32(0, $i31);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume {:branchcond $i32} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32(1, $i35);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume {:branchcond $i36} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32(2, $i39);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32(3, $i43);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume {:branchcond $i44} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32(4, $i47);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i7 := 8;
    assume {:branchcond $i48} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32(5, $i51);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i7 := 9;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32(6, $i55);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i7 := 10;
    assume {:branchcond $i56} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32(7, $i59);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i7 := 11;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref($i8, 12)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.11, $p10);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i11);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref($i12, 12)), $mul.ref(4, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.12, $p14);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i15);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb6;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const ldv_mutex_unlock_104: ref;

axiom ldv_mutex_unlock_104 == $sub.ref(0, 236024);

procedure ldv_mutex_unlock_104($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const pm_runtime_get_sync: ref;

axiom pm_runtime_get_sync == $sub.ref(0, 237056);

procedure pm_runtime_get_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_get_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i1 := __pm_runtime_resume($p0, 4);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 238088);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(520, 1)), $mul.ref(552, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put_autosuspend: ref;

axiom pm_runtime_put_autosuspend == $sub.ref(0, 239120);

procedure pm_runtime_put_autosuspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put_autosuspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i1 := __pm_runtime_suspend($p0, 13);
    call {:si_unique_call 436} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_suspend: ref;

axiom __pm_runtime_suspend == $sub.ref(0, 240152);

procedure __pm_runtime_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} {:cexpr "__pm_runtime_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 438} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 439} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pm_runtime_resume: ref;

axiom __pm_runtime_resume == $sub.ref(0, 241184);

procedure __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 440} {:cexpr "__pm_runtime_resume:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 442} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_data_rdy_trigger_set_state: ref;

axiom kxcjk1013_data_rdy_trigger_set_state == $sub.ref(0, 242216);

procedure kxcjk1013_data_rdy_trigger_set_state($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.13, assertsPassed, $CurrAddr;



implementation kxcjk1013_data_rdy_trigger_set_state($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i30: i1;
  var $i31: i32;
  var $i29: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $i17: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 443} {:cexpr "kxcjk1013_data_rdy_trigger_set_state:arg:state"} boogie_si_record_i1($i1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p3 := iio_trigger_get_drvdata($p0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p5 := iio_priv($p4);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_mutex_lock_119($p7);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i2);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i19 := kxcjk1013_set_power_state($p6, $i18);
    call {:si_unique_call 449} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i24, $i25);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i2);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i31 := kxcjk1013_setup_new_data_interrupt($p6, $i30);
    call {:si_unique_call 454} {:cexpr "ret"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    $i29 := $i31;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i29, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i37, $i38);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i2);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(213, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i43);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i45);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ldv_mutex_unlock_123($p46);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i2);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i40);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i42);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_36 := kxcjk1013_set_power_state($p6, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ldv_mutex_unlock_122($p34);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i17 := $i29;
    goto $bb8;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i2);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i28 := kxcjk1013_setup_any_motion_interrupt($p6, $i27);
    call {:si_unique_call 452} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ldv_mutex_unlock_121($p21);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb8;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb2;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} ldv_mutex_unlock_120($p16);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const iio_trigger_get_drvdata: ref;

axiom iio_trigger_get_drvdata == $sub.ref(0, 243248);

procedure iio_trigger_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iio_trigger_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1880)), $mul.ref(24, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_119: ref;

axiom ldv_mutex_lock_119 == $sub.ref(0, 244280);

procedure ldv_mutex_lock_119($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_119($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_120: ref;

axiom ldv_mutex_unlock_120 == $sub.ref(0, 245312);

procedure ldv_mutex_unlock_120($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_121: ref;

axiom ldv_mutex_unlock_121 == $sub.ref(0, 246344);

procedure ldv_mutex_unlock_121($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const kxcjk1013_setup_any_motion_interrupt: ref;

axiom kxcjk1013_setup_any_motion_interrupt == $sub.ref(0, 247376);

procedure kxcjk1013_setup_any_motion_interrupt($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $CurrAddr;



implementation kxcjk1013_setup_any_motion_interrupt($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $i42: i32;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 463} {:cexpr "kxcjk1013_setup_any_motion_interrupt:arg:status"} boogie_si_record_i1($i1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i4 := kxcjk1013_get_mode($p0, $p2);
    call {:si_unique_call 465} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i7 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 467} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i9 := kxcjk1013_chip_update_thresholds($p0);
    call {:si_unique_call 469} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i13 := i2c_smbus_read_byte_data($p12, 30);
    call {:si_unique_call 471} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i13, $sub.i32(0, 33));
    call {:si_unique_call 474} {:cexpr "ret"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i20);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i27 := i2c_smbus_write_byte_data($p23, 30, $i26);
    call {:si_unique_call 476} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i34 := i2c_smbus_read_byte_data($p33, 27);
    call {:si_unique_call 479} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i3);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i34, $sub.i32(0, 3));
    call {:si_unique_call 482} {:cexpr "ret"} boogie_si_record_i32($i42);
    assume {:verifier.code 0} true;
    $i41 := $i42;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i41);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i48 := i2c_smbus_write_byte_data($p44, 27, $i47);
    call {:si_unique_call 484} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.13, $p2);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i55 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 487} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i56 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i6 := $i55;
    goto $bb3;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} dev_err.ref.ref($p52, .str.7);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i6 := $i48;
    goto $bb3;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i34, 2);
    call {:si_unique_call 481} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb25;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} dev_err.ref.ref($p38, .str.6);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i6 := $i34;
    goto $bb3;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} dev_err.ref.ref($p31, .str.5);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i13, 32);
    call {:si_unique_call 473} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb16;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} dev_err.ref.ref($p17, .str.4);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const kxcjk1013_setup_new_data_interrupt: ref;

axiom kxcjk1013_setup_new_data_interrupt == $sub.ref(0, 248408);

procedure kxcjk1013_setup_new_data_interrupt($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $CurrAddr;



implementation kxcjk1013_setup_new_data_interrupt($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i32;
  var $i40: i32;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 489} {:cexpr "kxcjk1013_setup_new_data_interrupt:arg:status"} boogie_si_record_i1($i1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i4 := kxcjk1013_get_mode($p0, $p2);
    call {:si_unique_call 491} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i7 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 493} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i11 := i2c_smbus_read_byte_data($p10, 30);
    call {:si_unique_call 495} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i3);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i11, $sub.i32(0, 33));
    call {:si_unique_call 498} {:cexpr "ret"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i18);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i25 := i2c_smbus_write_byte_data($p21, 30, $i24);
    call {:si_unique_call 500} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i32 := i2c_smbus_read_byte_data($p31, 27);
    call {:si_unique_call 503} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i3);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i32, $sub.i32(0, 33));
    call {:si_unique_call 506} {:cexpr "ret"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i39);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i46 := i2c_smbus_write_byte_data($p42, 27, $i45);
    call {:si_unique_call 508} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.13, $p2);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i53 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 511} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i54 == 1;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i6 := $i53;
    goto $bb3;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} dev_err.ref.ref($p50, .str.7);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i6 := $i46;
    goto $bb3;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i32, 32);
    call {:si_unique_call 505} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb22;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} dev_err.ref.ref($p36, .str.6);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i6 := $i32;
    goto $bb3;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} dev_err.ref.ref($p29, .str.5);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i11, 32);
    call {:si_unique_call 497} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} dev_err.ref.ref($p15, .str.4);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const ldv_mutex_unlock_122: ref;

axiom ldv_mutex_unlock_122 == $sub.ref(0, 249440);

procedure ldv_mutex_unlock_122($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_123: ref;

axiom ldv_mutex_unlock_123 == $sub.ref(0, 250472);

procedure ldv_mutex_unlock_123($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_123($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const kxcjk1013_get_mode: ref;

axiom kxcjk1013_get_mode == $sub.ref(0, 251504);

procedure kxcjk1013_get_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13;



implementation kxcjk1013_get_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i4 := i2c_smbus_read_byte_data($p3, 27);
    call {:si_unique_call 515} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i4);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 128);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p1, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p1, 1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} dev_err.ref.ref($p8, .str.6);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const kxcjk1013_chip_update_thresholds: ref;

axiom kxcjk1013_chip_update_thresholds == $sub.ref(0, 252536);

procedure kxcjk1013_chip_update_thresholds($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_chip_update_thresholds($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i8 := i2c_smbus_write_byte_data($p2, 41, $i7);
    call {:si_unique_call 518} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i21 := i2c_smbus_write_byte_data($p15, 106, $i20);
    call {:si_unique_call 521} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} dev_err.ref.ref($p25, .str.9);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i13 := $i21;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} dev_err.ref.ref($p12, .str.8);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i13 := $i8;
    goto $bb3;
}



const kxcjk1013_trig_try_reen: ref;

axiom kxcjk1013_trig_try_reen == $sub.ref(0, 253568);

procedure kxcjk1013_trig_try_reen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_trig_try_reen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p1 := iio_trigger_get_drvdata($p0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p3 := iio_priv($p2);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i7 := i2c_smbus_read_byte_data($p6, 26);
    call {:si_unique_call 526} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} dev_err.ref.ref($p11, .str.10);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb3;
}



const kxcjk1013_validate_trigger: ref;

axiom kxcjk1013_validate_trigger == $sub.ref(0, 254600);

procedure kxcjk1013_validate_trigger($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_validate_trigger($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p2 := iio_priv($p0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i6, $i7);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;
}



const kxcjk1013_write_event_config: ref;

axiom kxcjk1013_write_event_config == $sub.ref(0, 255632);

procedure kxcjk1013_write_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.13, $CurrAddr, assertsPassed;



implementation kxcjk1013_write_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i11: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "kxcjk1013_write_event_config:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 530} {:cexpr "kxcjk1013_write_event_config:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 531} {:cexpr "kxcjk1013_write_event_config:arg:state"} boogie_si_record_i32($i4);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p5 := iio_priv($p0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i4, 0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_mutex_lock_109($p12);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i4, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i20 := kxcjk1013_set_power_state($p6, $i19);
    call {:si_unique_call 536} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i24 := kxcjk1013_setup_any_motion_interrupt($p6, $i23);
    call {:si_unique_call 539} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i4);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ldv_mutex_unlock_113($p30);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_37 := kxcjk1013_set_power_state($p6, 0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_mutex_unlock_112($p28);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb6;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} ldv_mutex_unlock_111($p22);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb6;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_mutex_unlock_110($p18);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;
}



const ldv_mutex_lock_109: ref;

axiom ldv_mutex_lock_109 == $sub.ref(0, 256664);

procedure ldv_mutex_lock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_110: ref;

axiom ldv_mutex_unlock_110 == $sub.ref(0, 257696);

procedure ldv_mutex_unlock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111: ref;

axiom ldv_mutex_unlock_111 == $sub.ref(0, 258728);

procedure ldv_mutex_unlock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_112: ref;

axiom ldv_mutex_unlock_112 == $sub.ref(0, 259760);

procedure ldv_mutex_unlock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 260792);

procedure ldv_mutex_unlock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const kxcjk1013_write_event: ref;

axiom kxcjk1013_write_event == $sub.ref(0, 261824);

procedure kxcjk1013_write_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_write_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} {:cexpr "kxcjk1013_write_event:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 549} {:cexpr "kxcjk1013_write_event:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 550} {:cexpr "kxcjk1013_write_event:arg:info"} boogie_si_record_i32($i4);
    call {:si_unique_call 551} {:cexpr "kxcjk1013_write_event:arg:val"} boogie_si_record_i32($i5);
    call {:si_unique_call 552} {:cexpr "kxcjk1013_write_event:arg:val2"} boogie_si_record_i32($i6);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p7 := iio_priv($p0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 1);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i4, 3);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i5);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i5);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const kxcjk1013_write_raw: ref;

axiom kxcjk1013_write_raw == $sub.ref(0, 262856);

procedure kxcjk1013_write_raw($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.0, assertsPassed, $CurrAddr;



implementation kxcjk1013_write_raw($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i12: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "kxcjk1013_write_raw:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 555} {:cexpr "kxcjk1013_write_raw:arg:val2"} boogie_si_record_i32($i3);
    call {:si_unique_call 556} {:cexpr "kxcjk1013_write_raw:arg:mask"} boogie_si_record_i64($i4);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p5 := iio_priv($p0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, 11);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i4, 2);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i2, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_mutex_lock_107($p15);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i16 := kxcjk1013_set_scale($p6, $i3);
    call {:si_unique_call 564} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_mutex_unlock_108($p17);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i12 := $i16;
    goto $bb10;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb13;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_mutex_lock_105($p9);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i10 := kxcjk1013_set_odr($p6, $i2, $i3);
    call {:si_unique_call 560} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_mutex_unlock_106($p11);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb10;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_105: ref;

axiom ldv_mutex_lock_105 == $sub.ref(0, 263888);

procedure ldv_mutex_lock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const kxcjk1013_set_odr: ref;

axiom kxcjk1013_set_odr == $sub.ref(0, 264920);

procedure kxcjk1013_set_odr($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $CurrAddr;



implementation kxcjk1013_set_odr($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 568} {:cexpr "kxcjk1013_set_odr:arg:val"} boogie_si_record_i32($i1);
    call {:si_unique_call 569} {:cexpr "kxcjk1013_set_odr:arg:val2"} boogie_si_record_i32($i2);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i4 := kxcjk1013_get_mode($p0, $p3);
    call {:si_unique_call 571} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i7 := kxcjk1013_convert_freq_to_bit($i1, $i2);
    call {:si_unique_call 573} {:cexpr "odr_bits"} boogie_si_record_i32($i7);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i9 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 575} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i7);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i16 := i2c_smbus_write_byte_data($p12, 33, $i15);
    call {:si_unique_call 577} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i7);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i23 := kxcjk1013_convert_wake_odr_to_bit($i1, $i2);
    call {:si_unique_call 580} {:cexpr "odr_bits"} boogie_si_record_i32($i23);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i23);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i30 := i2c_smbus_write_byte_data($p26, 29, $i29);
    call {:si_unique_call 582} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.13, $p3);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i37 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 585} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i6 := $i37;
    goto $bb3;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} dev_err.ref.ref($p34, .str.12);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i6 := $i30;
    goto $bb3;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} dev_err.ref.ref($p20, .str.11);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const ldv_mutex_unlock_106: ref;

axiom ldv_mutex_unlock_106 == $sub.ref(0, 265952);

procedure ldv_mutex_unlock_106($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_106($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_107: ref;

axiom ldv_mutex_lock_107 == $sub.ref(0, 266984);

procedure ldv_mutex_lock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const kxcjk1013_set_scale: ref;

axiom kxcjk1013_set_scale == $sub.ref(0, 268016);

procedure kxcjk1013_set_scale($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $CurrAddr;



implementation kxcjk1013_set_scale($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i7: i32;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 589} {:cexpr "kxcjk1013_set_scale:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(9582, $i1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(19163, $i1);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32(38326, $i1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i5 := kxcjk1013_get_mode($p0, $p2);
    call {:si_unique_call 591} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i8 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 593} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i10 := kxcjk1013_set_range($p0, $i4);
    call {:si_unique_call 595} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.13, $p2);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i14 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 597} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i15 == 1;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb8;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb8;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb8;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb8;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_mutex_unlock_108: ref;

axiom ldv_mutex_unlock_108 == $sub.ref(0, 269048);

procedure ldv_mutex_unlock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const kxcjk1013_set_range: ref;

axiom kxcjk1013_set_range == $sub.ref(0, 270080);

procedure kxcjk1013_set_range($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_set_range($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "kxcjk1013_set_range:arg:range_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i4 := i2c_smbus_read_byte_data($p3, 27);
    call {:si_unique_call 601} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i4, $sub.i32(0, 25));
    call {:si_unique_call 603} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref($i11, 4)), $mul.ref(2, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.14, $p13);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 3);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i10, $i16);
    call {:si_unique_call 604} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref($i18, 4)), $mul.ref(3, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.15, $p20);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 4);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i17, $i23);
    call {:si_unique_call 605} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i24);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i30 := i2c_smbus_write_byte_data($p26, 27, $i29);
    call {:si_unique_call 607} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(201, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_err.ref.ref($p34, .str.7);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} dev_err.ref.ref($p8, .str.6);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const kxcjk1013_convert_freq_to_bit: ref;

axiom kxcjk1013_convert_freq_to_bit == $sub.ref(0, 271112);

procedure kxcjk1013_convert_freq_to_bit($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_convert_freq_to_bit($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} {:cexpr "kxcjk1013_convert_freq_to_bit:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 610} {:cexpr "kxcjk1013_convert_freq_to_bit:arg:val2"} boogie_si_record_i32($i1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $i0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(1, $i0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32(3, $i0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32(6, $i0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(12, $i0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32(25, $i0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32(50, $i0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32(100, $i0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(200, $i0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32(400, $i0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32(800, $i0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32(1600, $i0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb83:
    assume $i30 == 1;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32(0, $i1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume {:branchcond $i31} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb85;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref($i5, 12)), $mul.ref(8, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.16, $p7);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb9;

  $bb76:
    assume $i28 == 1;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32(0, $i1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb78;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb7;

  $bb69:
    assume $i26 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(0, $i1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb71;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb7;

  $bb62:
    assume $i24 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32(0, $i1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb64;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb7;

  $bb55:
    assume $i22 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32(0, $i1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb57;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb7;

  $bb48:
    assume $i20 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32(0, $i1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb7;

  $bb41:
    assume $i18 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(0, $i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb43;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb7;

  $bb34:
    assume $i16 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32(500000, $i1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb7;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32(250000, $i1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb20:
    assume $i12 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(125000, $i1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb7;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(563000, $i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb7;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(781000, $i1);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb7;
}



const kxcjk1013_convert_wake_odr_to_bit: ref;

axiom kxcjk1013_convert_wake_odr_to_bit == $sub.ref(0, 272144);

procedure kxcjk1013_convert_wake_odr_to_bit($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_convert_wake_odr_to_bit($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "kxcjk1013_convert_wake_odr_to_bit:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 612} {:cexpr "kxcjk1013_convert_wake_odr_to_bit:arg:val2"} boogie_si_record_i32($i1);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $i0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(1, $i0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32(3, $i0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32(6, $i0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(12, $i0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32(25, $i0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32(50, $i0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32(100, $i0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(200, $i0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32(400, $i0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32(800, $i0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32(1600, $i0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb83:
    assume $i30 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32(0, $i1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume {:branchcond $i31} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb85;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref($i5, 12)), $mul.ref(8, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.17, $p7);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb9;

  $bb76:
    assume $i28 == 1;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32(0, $i1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb78;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb7;

  $bb69:
    assume $i26 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(0, $i1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb71;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb7;

  $bb62:
    assume $i24 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32(0, $i1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb64;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb7;

  $bb55:
    assume $i22 == 1;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32(0, $i1);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb57;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb7;

  $bb48:
    assume $i20 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32(0, $i1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb7;

  $bb41:
    assume $i18 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(0, $i1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb43;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb7;

  $bb34:
    assume $i16 == 1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32(500000, $i1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb7;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32(250000, $i1);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb20:
    assume $i12 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(125000, $i1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb7;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(563000, $i1);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb7;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(781000, $i1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb7;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 273176);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p1 := external_alloc();
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv___module_get_98: ref;

axiom ldv___module_get_98 == $sub.ref(0, 274208);

procedure ldv___module_get_98($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv___module_get_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} ldv_linux_kernel_module_module_get($p0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_module_module_get: ref;

axiom ldv_linux_kernel_module_module_get == $sub.ref(0, 275240);

procedure ldv_linux_kernel_module_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_linux_kernel_module_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i3 := $M.18;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.18 := $i4;
    call {:si_unique_call 615} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32($i4);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 276272);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 616} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 617} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 277304);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 278336);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 618} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 619} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 621} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_devm_request_threaded_irq: ref;

axiom ldv_devm_request_threaded_irq == $sub.ref(0, 279368);

procedure ldv_devm_request_threaded_irq($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.19, $M.20;



implementation ldv_devm_request_threaded_irq($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "ldv_devm_request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 623} {:cexpr "ldv_devm_request_threaded_irq:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 624} {:cexpr "ldv_devm_request_threaded_irq:arg:arg5"} boogie_si_record_i64($i5);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i8 := ldv_undef_int();
    call {:si_unique_call 626} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i0, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} ldv_assume($i13);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} ldv_assume($i11);
    call {:si_unique_call 628} {:cexpr "ldv_devm_request_threaded_irq:arg:ldv_7_line_line"} boogie_si_record_i32($i2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} ldv_dispatch_irq_register_7_2($i2, $p3, $p4, $p7);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_dispatch_irq_register_7_2: ref;

axiom ldv_dispatch_irq_register_7_2 == $sub.ref(0, 280400);

procedure ldv_dispatch_irq_register_7_2($i0: i32, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.19, $M.20;



implementation ldv_dispatch_irq_register_7_2($i0: i32, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} {:cexpr "ldv_dispatch_irq_register_7_2:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p4 := ldv_xmalloc(40);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p2);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} ldv_interrupt_interrupt_instance_2($p10);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_interrupt_instance_2: ref;

axiom ldv_interrupt_interrupt_instance_2 == $sub.ref(0, 281432);

procedure ldv_interrupt_interrupt_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $CurrAddr;



implementation ldv_interrupt_interrupt_instance_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u2, $u3, $u1, $u1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} ldv_switch_to_interrupt_context();
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i17 := ldv_interrupt_instance_handler_2_5($p15, $i13, $p14);
    call {:si_unique_call 638} {:cexpr "ldv_2_ret_val_default"} boogie_si_record_i32($i17);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} ldv_switch_to_process_context();
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i18 := ldv_undef_int();
    call {:si_unique_call 641} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i17, 2);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} ldv_assume($i23);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 2);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} ldv_assume($i21);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ldv_interrupt_instance_thread_2_3($p16, $i13, $p14);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 634} {:cexpr "ldv_2_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} ldv_free($p12);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_interrupt_instance_handler_2_5: ref;

axiom ldv_interrupt_instance_handler_2_5 == $sub.ref(0, 282464);

procedure ldv_interrupt_instance_handler_2_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $CurrAddr;



implementation ldv_interrupt_instance_handler_2_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} {:cexpr "ldv_interrupt_instance_handler_2_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i3 := kxcjk1013_data_rdy_trig_poll($i1, $p2);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_interrupt_instance_thread_2_3: ref;

axiom ldv_interrupt_instance_thread_2_3 == $sub.ref(0, 283496);

procedure ldv_interrupt_instance_thread_2_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_interrupt_instance_thread_2_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} {:cexpr "ldv_interrupt_instance_thread_2_3:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_38 := kxcjk1013_event_handler($i1, $p2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    return;
}



const iio_push_event: ref;

axiom iio_push_event == $sub.ref(0, 284528);

procedure iio_push_event($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation iio_push_event($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 650} {:cexpr "iio_push_event:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 651} {:cexpr "iio_push_event:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 653} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iio_get_time_ns: ref;

axiom iio_get_time_ns == $sub.ref(0, 285560);

procedure iio_get_time_ns() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.19, $M.20, $CurrAddr, $M.0;



implementation iio_get_time_ns() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i0 := ktime_get_real_ns();
    call {:si_unique_call 655} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const iio_trigger_poll: ref;

axiom iio_trigger_poll == $sub.ref(0, 286592);

procedure iio_trigger_poll($p0: ref);
  free requires assertsPassed;



implementation iio_trigger_poll($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get_real_ns: ref;

axiom ktime_get_real_ns == $sub.ref(0, 287624);

procedure ktime_get_real_ns() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.19, $M.20, $CurrAddr, $M.0;



implementation ktime_get_real_ns() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i2 := ktime_get_real();
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p3, $i2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.19;
    cmdloc_dummy_var_1 := $M.19;
    call {:si_unique_call 659} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p4, $p5, 8, $zext.i32.i64(8), 0 == 1);
    $M.19 := cmdloc_dummy_var_2;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.19, $p6);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ktime_get_real: ref;

axiom ktime_get_real == $sub.ref(0, 288656);

procedure ktime_get_real() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr;



implementation ktime_get_real() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i3 := ktime_get_with_offset(0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p4, $i3);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.20;
    cmdloc_dummy_var_4 := $M.20;
    call {:si_unique_call 664} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.20 := cmdloc_dummy_var_5;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.20;
    cmdloc_dummy_var_7 := $M.20;
    call {:si_unique_call 665} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.20 := cmdloc_dummy_var_8;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.20, $p9);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 289688);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ktime_get_with_offset: ref;

axiom ktime_get_with_offset == $sub.ref(0, 290720);

procedure ktime_get_with_offset($i0: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get_with_offset($i0: i32) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 667} {:cexpr "ktime_get_with_offset:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p2 := external_alloc();
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} __VERIFIER_assume($i5);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 670} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __devm_gpiod_get_index: ref;

axiom __devm_gpiod_get_index == $sub.ref(0, 291752);

procedure __devm_gpiod_get_index($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __devm_gpiod_get_index($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "__devm_gpiod_get_index:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 672} {:cexpr "__devm_gpiod_get_index:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p4 := external_alloc();
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 292784);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 293816);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpiod_direction_input: ref;

axiom gpiod_direction_input == $sub.ref(0, 294848);

procedure gpiod_direction_input($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_direction_input($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 679} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpiod_to_irq: ref;

axiom gpiod_to_irq == $sub.ref(0, 295880);

procedure gpiod_to_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_to_irq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 1} true;
    call {:si_unique_call 680} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const desc_to_gpio: ref;

axiom desc_to_gpio == $sub.ref(0, 296912);

procedure desc_to_gpio($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation desc_to_gpio($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 297944);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 298976);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acpi_match_device: ref;

axiom acpi_match_device == $sub.ref(0, 300008);

procedure acpi_match_device($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_match_device($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p2 := external_alloc();
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 301040);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const dev_name: ref;

axiom dev_name == $sub.ref(0, 302072);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(16, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p9 := kobject_name($p8);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 303104);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kxcjk1013_suspend: ref;

axiom kxcjk1013_suspend == $sub.ref(0, 304136);

procedure kxcjk1013_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation kxcjk1013_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1480));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p5 := iio_priv($p4);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_mutex_lock_136($p7);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i8 := kxcjk1013_set_mode($p6, 0);
    call {:si_unique_call 690} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} ldv_mutex_unlock_137($p9);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const kxcjk1013_resume: ref;

axiom kxcjk1013_resume == $sub.ref(0, 305168);

procedure kxcjk1013_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation kxcjk1013_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1480));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p5 := iio_priv($p4);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_mutex_lock_138($p7);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i8 := kxcjk1013_set_mode($p6, 1);
    call {:si_unique_call 696} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} ldv_mutex_unlock_139($p9);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const kxcjk1013_runtime_suspend: ref;

axiom kxcjk1013_runtime_suspend == $sub.ref(0, 306200);

procedure kxcjk1013_runtime_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_runtime_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1480));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p5 := iio_priv($p4);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i7 := kxcjk1013_set_mode($p6, 0);
    call {:si_unique_call 701} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1480)), $mul.ref(32, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} dev_err.ref.ref($p11, .str.37);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 11);
    goto $bb3;
}



const kxcjk1013_runtime_resume: ref;

axiom kxcjk1013_runtime_resume == $sub.ref(0, 307232);

procedure kxcjk1013_runtime_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_runtime_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i32;
  var $i9: i32;
  var vslice_dummy_var_39: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1480));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p5 := iio_priv($p4);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i7 := kxcjk1013_set_mode($p6, 1);
    call {:si_unique_call 706} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i10 := kxcjk1013_get_startup_times($p6);
    call {:si_unique_call 708} {:cexpr "sleep_val"} boogie_si_record_i32($i10);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 19999);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i10, 1000);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_39 := msleep_interruptible($i13);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} usleep_range($i12, 20000);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const kxcjk1013_get_startup_times: ref;

axiom kxcjk1013_get_startup_times == $sub.ref(0, 308264);

procedure kxcjk1013_get_startup_times($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_get_startup_times($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i64;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $i110: i64;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 711} {:cexpr "idx"} boogie_si_record_i32($i2);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i3, 96)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.21, $p6);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, $i10);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i20, 96)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.21, $p23);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, $i27);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i12 := 1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i2);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i29, 96)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.21, $p32);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i33, $i36);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i12 := 2;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i2);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i38, 96)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.21, $p41);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i42, $i45);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i12 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i2);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i47, 96)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.21, $p50);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, $i54);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i12 := 4;
    assume {:branchcond $i55} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i2);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i56, 96)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.21, $p59);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i60, $i63);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i12 := 5;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i2);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i65, 96)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.21, $p68);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i69, $i72);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i12 := 6;
    assume {:branchcond $i73} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i2);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i74, 96)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.21, $p77);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i78, $i81);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i12 := 7;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i2);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i83, 96)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.21, $p86);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i87, $i90);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i12 := 8;
    assume {:branchcond $i91} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i2);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i92, 96)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.21, $p95);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i96, $i99);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i12 := 9;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i2);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i101, 96)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.21, $p104);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i105, $i108);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i12 := 10;
    assume {:branchcond $i109} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i2);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i110, 96)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.21, $p113);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i114, $i117);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i12 := 11;
    assume {:branchcond $i118} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := 100000;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i14, 96)), $mul.ref($i13, 8)), $mul.ref(4, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.22, $p17);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 309296);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 713} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    return;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 310328);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 714} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 716} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_138: ref;

axiom ldv_mutex_lock_138 == $sub.ref(0, 311360);

procedure ldv_mutex_lock_138($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_138($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_139: ref;

axiom ldv_mutex_unlock_139 == $sub.ref(0, 312392);

procedure ldv_mutex_unlock_139($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_139($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_136: ref;

axiom ldv_mutex_lock_136 == $sub.ref(0, 313424);

procedure ldv_mutex_lock_136($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_lock_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_137: ref;

axiom ldv_mutex_unlock_137 == $sub.ref(0, 314456);

procedure ldv_mutex_unlock_137($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_mutex_unlock_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_kxcjk1013_data($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const iio_read_const_attr: ref;

axiom iio_read_const_attr == $sub.ref(0, 315488);

procedure iio_read_const_attr($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation iio_read_const_attr($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 721} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 722} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_EMGentry_exit_kxcjk1013_driver_exit_13_2: ref;

axiom ldv_EMGentry_exit_kxcjk1013_driver_exit_13_2 == $sub.ref(0, 316520);

procedure ldv_EMGentry_exit_kxcjk1013_driver_exit_13_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_kxcjk1013_driver_exit_13_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} kxcjk1013_driver_exit();
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    return;
}



const kxcjk1013_driver_exit: ref;

axiom kxcjk1013_driver_exit == $sub.ref(0, 317552);

procedure kxcjk1013_driver_exit();
  free requires assertsPassed;



implementation kxcjk1013_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} i2c_del_driver(kxcjk1013_driver);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    return;
}



const i2c_del_driver: ref;

axiom i2c_del_driver == $sub.ref(0, 318584);

procedure i2c_del_driver($p0: ref);
  free requires assertsPassed;



implementation i2c_del_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_kxcjk1013_driver_init_13_12: ref;

axiom ldv_EMGentry_init_kxcjk1013_driver_init_13_12 == $sub.ref(0, 319616);

procedure ldv_EMGentry_init_kxcjk1013_driver_init_13_12($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.18, assertsPassed, $M.19, $M.13, $M.20;



implementation ldv_EMGentry_init_kxcjk1013_driver_init_13_12($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i1 := kxcjk1013_driver_init();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const kxcjk1013_driver_init: ref;

axiom kxcjk1013_driver_init == $sub.ref(0, 320648);

procedure kxcjk1013_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.18, assertsPassed, $M.19, $M.13, $M.20;



implementation kxcjk1013_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i0 := ldv_i2c_register_driver_140(__this_module, kxcjk1013_driver);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 728} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_i2c_register_driver_140: ref;

axiom ldv_i2c_register_driver_140 == $sub.ref(0, 321680);

procedure ldv_i2c_register_driver_140($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.18, assertsPassed, $M.19, $M.13, $M.20;



implementation ldv_i2c_register_driver_140($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i2 := i2c_register_driver($p0, $p1);
    call {:si_unique_call 730} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i3 := ldv_i2c_register_driver($i2, $p0, $p1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 732} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const i2c_register_driver: ref;

axiom i2c_register_driver == $sub.ref(0, 322712);

procedure i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_i2c_register_driver: ref;

axiom ldv_i2c_register_driver == $sub.ref(0, 323744);

procedure ldv_i2c_register_driver($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.18, assertsPassed, $M.19, $M.13, $M.20;



implementation ldv_i2c_register_driver($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} {:cexpr "ldv_i2c_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i3 := ldv_undef_int();
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} ldv_assume($i8);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_assume($i6);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} ldv_dispatch_register_10_2($p2);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_10_2: ref;

axiom ldv_dispatch_register_10_2 == $sub.ref(0, 324776);

procedure ldv_dispatch_register_10_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.18, assertsPassed, $M.19, $M.13, $M.20;



implementation ldv_dispatch_register_10_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p1 := ldv_xmalloc(16);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_i2c_io_instance_0($p4);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const ldv_i2c_io_instance_0: ref;

axiom ldv_i2c_io_instance_0 == $sub.ref(0, 325808);

procedure ldv_i2c_io_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.1, $M.18, assertsPassed, $M.19, $M.13, $M.20;



implementation ldv_i2c_io_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p8 := ldv_xmalloc(1472);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p10 := ldv_xmalloc(32);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i12 := ldv_undef_int();
    call {:si_unique_call 747} {:cexpr "tmp___2"} boogie_si_record_i32($i12);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p9);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ldv_free($p26);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p11);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} ldv_free($p27);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i28, $i29, $p30, $p31 := ldv_i2c_io_instance_0_loop_$bb7($p7, $p9, $p11, $p14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i28, $i29, $p30, $p31);
    goto $bb7_last;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i16 := ldv_io_instance_probe_0_11($p15, $p9, $p11);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 751} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i16);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i17 := ldv_filter_err_code($i16);
    call {:si_unique_call 753} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i18 := ldv_undef_int();
    call {:si_unique_call 755} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i17, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ldv_assume($i23);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i24 := ldv_undef_int();
    call {:si_unique_call 761} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ldv_assume($i21);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i28, $i29 := ldv_i2c_io_instance_0_loop_$bb10($i28, $i29);
    goto $bb10_last;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_io_instance_release_0_2($p31, $p9);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb14_dummy;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_free($p6);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i28 := ldv_undef_int();
    call {:si_unique_call 759} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_2845;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_2828;
}



const ldv_io_instance_probe_0_11: ref;

axiom ldv_io_instance_probe_0_11 == $sub.ref(0, 326840);

procedure ldv_io_instance_probe_0_11($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.18, $M.1, $M.19, $M.13, $M.20, assertsPassed;



implementation ldv_io_instance_probe_0_11($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i3 := kxcjk1013_probe($p1, $p2);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 764} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 327872);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 767} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_io_instance_release_0_2: ref;

axiom ldv_io_instance_release_0_2 == $sub.ref(0, 328904);

procedure ldv_io_instance_release_0_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation ldv_io_instance_release_0_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_40 := kxcjk1013_remove($p1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 329936);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} ldv_assume($i2);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_10_13_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_10_13_4 == $sub.ref(0, 330968);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_10_13_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_10_13_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_io_instance_4_13_5: ref;

axiom ldv_dispatch_deregister_io_instance_4_13_5 == $sub.ref(0, 332000);

procedure ldv_dispatch_deregister_io_instance_4_13_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_4_13_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_platform_instance_9_13_6: ref;

axiom ldv_dispatch_deregister_platform_instance_9_13_6 == $sub.ref(0, 333032);

procedure ldv_dispatch_deregister_platform_instance_9_13_6();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_platform_instance_9_13_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_deregister_4_5: ref;

axiom ldv_dispatch_pm_deregister_4_5 == $sub.ref(0, 334064);

procedure ldv_dispatch_pm_deregister_4_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_4_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_4_6: ref;

axiom ldv_dispatch_pm_register_4_6 == $sub.ref(0, 335096);

procedure ldv_dispatch_pm_register_4_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.1, assertsPassed, $M.0;



implementation ldv_dispatch_pm_register_4_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p0 := ldv_xmalloc(4);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} ldv_pm_pm_ops_instance_3($p2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv_pm_pm_ops_instance_3: ref;

axiom ldv_pm_pm_ops_instance_3 == $sub.ref(0, 336128);

procedure ldv_pm_pm_ops_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_pm_ops_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $p27, $p28, $i29, $i30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $i93, $i94, $p95, $p96, $p97, $p98, $i99, $i100, $p101, $p102, $p103, $p104, $i105, $i106, $p107, $p108, $p109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $p121, $p122 := ldv_pm_pm_ops_instance_3_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $p27, $p28, $i29, $i30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $i93, $i94, $p95, $p96, $p97, $p98, $i99, $i100, $p101, $p102, $p103, $p104, $i105, $i106, $p107, $p108, $p109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $p121, $p122);
    goto $bb1_last;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} ldv_stop();
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.27, $p17);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i23 := ldv_undef_int();
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, 2);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 3);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_stop();
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.59, $p117);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb86:
    assume $i120 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.60, $p121);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} ldv_pm_ops_instance_complete_3_3($p122, $u20);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb34:
    assume $i26 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.49, $p87);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_pm_ops_instance_poweroff_3_9($p88, $u20);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i89 := ldv_undef_int();
    call {:si_unique_call 790} {:cexpr "tmp___3"} boogie_si_record_i32($i89);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i90 == 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.54, $p103);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.56, $p109);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.58, $p115);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_pm_ops_instance_restore_3_4($p116, $u20);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i112 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.57, $p113);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_pm_ops_instance_restore_noirq_3_5($p114, $u20);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i106 == 1;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.55, $p107);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_pm_ops_instance_poweroff_noirq_3_6($p108, $u20);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i90 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.50, $p91);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.52, $p97);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i100 == 1;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.53, $p101);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_pm_ops_instance_restore_early_3_7($p102, $u20);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i94 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.51, $p95);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_pm_ops_instance_poweroff_late_3_8($p96, $u20);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i25 == 1;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.39, $p57);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} ldv_pm_ops_instance_freeze_3_15($p58, $u20);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i59 := ldv_undef_int();
    call {:si_unique_call 787} {:cexpr "tmp___2"} boogie_si_record_i32($i59);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i60 == 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.44, $p73);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.46, $p79);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.48, $p85);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_pm_ops_instance_thaw_3_10($p86, $u20);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i82 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.47, $p83);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_pm_ops_instance_thaw_noirq_3_11($p84, $u20);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i76 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.45, $p77);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_pm_ops_instance_freeze_noirq_3_12($p78, $u20);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i60 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.40, $p61);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.42, $p67);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i70 == 1;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.43, $p71);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_pm_ops_instance_thaw_early_3_13($p72, $u20);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i64 == 1;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.41, $p65);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_pm_ops_instance_freeze_late_3_14($p66, $u20);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.29, $p27);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_pm_ops_instance_suspend_3_21($p28, $u20);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i29 := ldv_undef_int();
    call {:si_unique_call 784} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i30 == 1);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.34, $p43);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.36, $p49);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.38, $p55);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ldv_pm_ops_instance_resume_3_16($p56, $u20);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i52 == 1;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.37, $p53);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ldv_pm_ops_instance_resume_early_3_17($p54, $u20);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i46 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.35, $p47);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_pm_ops_instance_suspend_late_3_18($p48, $u20);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i30 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.30, $p31);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.32, $p37);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i40 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.33, $p41);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_pm_ops_instance_resume_noirq_3_19($p42, $u20);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i34 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.31, $p35);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} ldv_pm_ops_instance_suspend_noirq_3_20($p36, $u20);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.28, $p21);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} ldv_pm_ops_instance_prepare_3_22($p22, $u20);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.25, $p13);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_pm_ops_instance_runtime_suspend_3_25($p14, $u20);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.26, $p15);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_pm_ops_instance_runtime_resume_3_24($p16, $u20);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.23, $p7);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.24, $p11);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_pm_ops_instance_runtime_idle_3_27($p12, $u20);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i1 := ldv_undef_int();
    call {:si_unique_call 774} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2888;
}



const ldv_pm_ops_instance_runtime_idle_3_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_3_27 == $sub.ref(0, 337160);

procedure ldv_pm_ops_instance_runtime_idle_3_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_runtime_idle_3_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_41 := devirtbounce.4($p0, $p1);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_3_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_3_25 == $sub.ref(0, 338192);

procedure ldv_pm_ops_instance_runtime_suspend_3_25($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pm_ops_instance_runtime_suspend_3_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_42 := kxcjk1013_runtime_suspend($p1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pm_ops_instance_runtime_resume_3_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_3_24 == $sub.ref(0, 339224);

procedure ldv_pm_ops_instance_runtime_resume_3_24($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pm_ops_instance_runtime_resume_3_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_43 := kxcjk1013_runtime_resume($p1);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pm_ops_instance_prepare_3_22: ref;

axiom ldv_pm_ops_instance_prepare_3_22 == $sub.ref(0, 340256);

procedure ldv_pm_ops_instance_prepare_3_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_prepare_3_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_44 := devirtbounce.4($p0, $p1);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_3_21: ref;

axiom ldv_pm_ops_instance_suspend_3_21 == $sub.ref(0, 341288);

procedure ldv_pm_ops_instance_suspend_3_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_pm_ops_instance_suspend_3_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_45 := kxcjk1013_suspend($p1);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_3_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_3_20 == $sub.ref(0, 342320);

procedure ldv_pm_ops_instance_suspend_noirq_3_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_suspend_noirq_3_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_46 := devirtbounce.4($p0, $p1);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_3_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_3_19 == $sub.ref(0, 343352);

procedure ldv_pm_ops_instance_resume_noirq_3_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_resume_noirq_3_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_47 := devirtbounce.4($p0, $p1);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_3_18: ref;

axiom ldv_pm_ops_instance_suspend_late_3_18 == $sub.ref(0, 344384);

procedure ldv_pm_ops_instance_suspend_late_3_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_suspend_late_3_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_48 := devirtbounce.4($p0, $p1);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_3_17: ref;

axiom ldv_pm_ops_instance_resume_early_3_17 == $sub.ref(0, 345416);

procedure ldv_pm_ops_instance_resume_early_3_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_resume_early_3_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_49 := devirtbounce.4($p0, $p1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_3_16: ref;

axiom ldv_pm_ops_instance_resume_3_16 == $sub.ref(0, 346448);

procedure ldv_pm_ops_instance_resume_3_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_pm_ops_instance_resume_3_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_50 := kxcjk1013_resume($p1);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_3_15: ref;

axiom ldv_pm_ops_instance_freeze_3_15 == $sub.ref(0, 347480);

procedure ldv_pm_ops_instance_freeze_3_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_pm_ops_instance_freeze_3_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_51 := kxcjk1013_suspend($p1);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_3_14: ref;

axiom ldv_pm_ops_instance_freeze_late_3_14 == $sub.ref(0, 348512);

procedure ldv_pm_ops_instance_freeze_late_3_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_freeze_late_3_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_52 := devirtbounce.4($p0, $p1);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_3_13: ref;

axiom ldv_pm_ops_instance_thaw_early_3_13 == $sub.ref(0, 349544);

procedure ldv_pm_ops_instance_thaw_early_3_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_thaw_early_3_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_53 := devirtbounce.4($p0, $p1);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_3_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_3_12 == $sub.ref(0, 350576);

procedure ldv_pm_ops_instance_freeze_noirq_3_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_freeze_noirq_3_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_54 := devirtbounce.4($p0, $p1);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_3_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_3_11 == $sub.ref(0, 351608);

procedure ldv_pm_ops_instance_thaw_noirq_3_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_thaw_noirq_3_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_55 := devirtbounce.4($p0, $p1);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_3_10: ref;

axiom ldv_pm_ops_instance_thaw_3_10 == $sub.ref(0, 352640);

procedure ldv_pm_ops_instance_thaw_3_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_pm_ops_instance_thaw_3_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_56 := kxcjk1013_resume($p1);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_3_9: ref;

axiom ldv_pm_ops_instance_poweroff_3_9 == $sub.ref(0, 353672);

procedure ldv_pm_ops_instance_poweroff_3_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_3_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_57 := kxcjk1013_suspend($p1);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_3_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_3_8 == $sub.ref(0, 354704);

procedure ldv_pm_ops_instance_poweroff_late_3_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_poweroff_late_3_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_58 := devirtbounce.4($p0, $p1);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_3_7: ref;

axiom ldv_pm_ops_instance_restore_early_3_7 == $sub.ref(0, 355736);

procedure ldv_pm_ops_instance_restore_early_3_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_restore_early_3_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_59 := devirtbounce.4($p0, $p1);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_3_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_3_6 == $sub.ref(0, 356768);

procedure ldv_pm_ops_instance_poweroff_noirq_3_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_poweroff_noirq_3_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_60 := devirtbounce.4($p0, $p1);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_3_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_3_5 == $sub.ref(0, 357800);

procedure ldv_pm_ops_instance_restore_noirq_3_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_pm_ops_instance_restore_noirq_3_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_61 := devirtbounce.4($p0, $p1);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_3_4: ref;

axiom ldv_pm_ops_instance_restore_3_4 == $sub.ref(0, 358832);

procedure ldv_pm_ops_instance_restore_3_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_pm_ops_instance_restore_3_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_62 := kxcjk1013_resume($p1);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_3_3: ref;

axiom ldv_pm_ops_instance_complete_3_3 == $sub.ref(0, 359864);

procedure ldv_pm_ops_instance_complete_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pm_ops_instance_complete_3_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} devirtbounce.5($p0, $p1);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_10_13_7: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_10_13_7 == $sub.ref(0, 360896);

procedure ldv_dispatch_register_dummy_resourceless_instance_10_13_7();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_dispatch_register_dummy_resourceless_instance_10_13_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p0 := ldv_xmalloc(4);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} ldv_struct_iio_const_attr_dummy_resourceless_instance_5($p2);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_iio_const_attr_dummy_resourceless_instance_5: ref;

axiom ldv_struct_iio_const_attr_dummy_resourceless_instance_5 == $sub.ref(0, 361928);

procedure ldv_struct_iio_const_attr_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_iio_const_attr_dummy_resourceless_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i1 := ldv_undef_int();
    call {:si_unique_call 834} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_iio_const_attr_dummy_resourceless_instance_5_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i4 := ldv_undef_int();
    call {:si_unique_call 837} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} ldv_dummy_resourceless_instance_callback_5_3($u23, $u20, $u22, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_free($p3);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i9 := ldv_undef_int();
    call {:si_unique_call 844} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p6 := ldv_xmalloc(1);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u21);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_free($p6);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_dummy_resourceless_instance_callback_5_9($u21, $u20, $u22, $p6, $u8);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p3 := ldv_xmalloc(1);
    goto corral_source_split_3181;
}



const ldv_dummy_resourceless_instance_callback_5_9: ref;

axiom ldv_dummy_resourceless_instance_callback_5_9 == $sub.ref(0, 362960);

procedure ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} {:cexpr "ldv_dummy_resourceless_instance_callback_5_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 846} vslice_dummy_var_63 := devirtbounce.6($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 363992);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_64: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_64 := iio_read_const_attr($p1, $p2, $p3);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_platform_instance_9_13_8: ref;

axiom ldv_dispatch_register_platform_instance_9_13_8 == $sub.ref(0, 365024);

procedure ldv_dispatch_register_platform_instance_9_13_8();
  free requires assertsPassed;
  modifies $CurrAddr, $M.65, $M.66, $M.1, assertsPassed, $M.0;



implementation ldv_dispatch_register_platform_instance_9_13_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p0 := ldv_xmalloc(4);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_pm_platform_instance_4($p2);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_pm_platform_instance_4: ref;

axiom ldv_pm_platform_instance_4 == $sub.ref(0, 366056);

procedure ldv_pm_platform_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.65, $M.66, $CurrAddr, $M.1, assertsPassed, $M.0;



implementation ldv_pm_platform_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i22: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i1 := ldv_undef_int();
    call {:si_unique_call 851} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40 := ldv_pm_platform_instance_4_loop_$bb4($i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40);
    goto $bb4_last;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p4 := ldv_xmalloc(1464);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} ldv_ldv_pre_probe_145();
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.61, $p6);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i14 := ldv_ldv_post_probe_146($i13);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 857} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_free($p15);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i16 := ldv_undef_int();
    call {:si_unique_call 860} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_assume($i24);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i26 := ldv_undef_int();
    call {:si_unique_call 866} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i25;
    goto $bb15_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_assume($i19);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i20 := ldv_undef_int();
    call {:si_unique_call 863} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb13;

  $bb13:
    call $i22, $i28, $i29, $i39, $i40 := ldv_pm_platform_instance_4_loop_$bb13($i22, $i28, $i29, $i39, $i40);
    goto $bb13_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 2);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 3);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_stop();
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_dispatch_pm_register_4_6();
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_dispatch_pm_deregister_4_5();
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i39 := ldv_undef_int();
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb34_dummy;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p30 := ldv_xmalloc(1464);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.63, $p32);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_free($p38);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.64, $p36);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_platform_instance_release_4_3($p37, $p31);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.62, $p10);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i12 := ldv_platform_instance_probe_4_14($p11, $p5);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 855} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32($i12);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;
}



const ldv_ldv_pre_probe_145: ref;

axiom ldv_ldv_pre_probe_145 == $sub.ref(0, 367088);

procedure ldv_ldv_pre_probe_145();
  free requires assertsPassed;
  modifies $M.65, $M.66;



implementation ldv_ldv_pre_probe_145()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_pre_probe();
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_4_14: ref;

axiom ldv_platform_instance_probe_4_14 == $sub.ref(0, 368120);

procedure ldv_platform_instance_probe_4_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_platform_instance_probe_4_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i2 := devirtbounce.7($p0, $p1);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 879} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_146: ref;

axiom ldv_ldv_post_probe_146 == $sub.ref(0, 369152);

procedure ldv_ldv_post_probe_146($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.66, assertsPassed;



implementation ldv_ldv_post_probe_146($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} {:cexpr "ldv_ldv_post_probe_146:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 884} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_release_4_3: ref;

axiom ldv_platform_instance_release_4_3 == $sub.ref(0, 370184);

procedure ldv_platform_instance_release_4_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_platform_instance_release_4_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_65 := devirtbounce.7($p0, $p1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 371216);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 372248);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.66, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i1 := $M.66;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_439:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 373280);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 894} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 374312);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 896} __VERIFIER_error();
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 375344);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 897} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 376376);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 899} __VERIFIER_error();
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 377408);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.65;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 900} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 378440);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_13: ref;

axiom ldv_entry_EMGentry_13 == $sub.ref(0, 379472);

procedure ldv_entry_EMGentry_13($p0: ref);
  free requires assertsPassed;
  modifies $M.65, $M.66, $CurrAddr, $M.0, assertsPassed, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.18, $M.19, $M.13, $M.20;



implementation ldv_entry_EMGentry_13($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i1 := ldv_EMGentry_init_kxcjk1013_driver_init_13_12($u25);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    call {:si_unique_call 902} {:cexpr "ldv_13_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i2 := ldv_ldv_post_init_141($i1);
    call {:si_unique_call 904} {:cexpr "ldv_13_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i3 := ldv_undef_int();
    call {:si_unique_call 906} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_assume($i8);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i9 := ldv_undef_int();
    call {:si_unique_call 912} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ldv_EMGentry_exit_kxcjk1013_driver_exit_13_2($u26);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_ldv_check_final_state_143();
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_stop();
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ldv_dispatch_register_platform_instance_9_13_8();
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_dispatch_register_dummy_resourceless_instance_10_13_7();
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ldv_dispatch_deregister_platform_instance_9_13_6();
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_dispatch_deregister_io_instance_4_13_5();
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_dispatch_deregister_dummy_resourceless_instance_10_13_4();
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_assume($i6);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_ldv_check_final_state_142();
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} ldv_stop();
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_141: ref;

axiom ldv_ldv_post_init_141 == $sub.ref(0, 380504);

procedure ldv_ldv_post_init_141($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.66;



implementation ldv_ldv_post_init_141($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} {:cexpr "ldv_ldv_post_init_141:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i1 := ldv_post_init($i0);
    call {:si_unique_call 925} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_142: ref;

axiom ldv_ldv_check_final_state_142 == $sub.ref(0, 381536);

procedure ldv_ldv_check_final_state_142();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_142()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} ldv_linux_block_request_check_final_state();
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_143: ref;

axiom ldv_ldv_check_final_state_143 == $sub.ref(0, 382568);

procedure ldv_ldv_check_final_state_143();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_143()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} ldv_linux_block_request_check_final_state();
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 383600);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i0 := $M.67;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 384632);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i0 := $M.68;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 385664);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i0 := $M.69;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 386696);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i0 := $M.70;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 387728);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i0 := $M.71;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 388760);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 389792);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i0 := $M.73;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 390824);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i0 := $M.74;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i3 := $M.75;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 391856);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i0 := $M.18;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 392888);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i0 := $M.76;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 393920);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i0 := $M.77;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 394952);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i0 := $M.78;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 395984);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i0 := $M.79;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 397016);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i0 := $M.80;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i3 := $M.80;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 398048);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i0 := $M.81;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 399080);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i0 := $M.82;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 400112);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i0 := $M.83;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 401144);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i0 := $M.84;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 402176);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i0 := $M.85;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 403208);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i0 := $M.86;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 404240);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 988} __VERIFIER_error();
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 405272);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} __VERIFIER_error();
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 406304);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} __VERIFIER_error();
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 407336);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 994} __VERIFIER_error();
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 408368);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} __VERIFIER_error();
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 409400);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 998} __VERIFIER_error();
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 410432);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} __VERIFIER_error();
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 411464);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} __VERIFIER_error();
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 412496);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} __VERIFIER_error();
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 413528);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} __VERIFIER_error();
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 414560);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1008} __VERIFIER_error();
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 415592);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} __VERIFIER_error();
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 416624);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1012} __VERIFIER_error();
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 417656);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1014} __VERIFIER_error();
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 418688);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1016} __VERIFIER_error();
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 419720);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} __VERIFIER_error();
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 420752);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1020} __VERIFIER_error();
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 421784);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} __VERIFIER_error();
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 422816);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1024} __VERIFIER_error();
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 423848);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1026} __VERIFIER_error();
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 424880);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1028} __VERIFIER_error();
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 425912);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 426944);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.18, $M.79, $M.76, $M.77, $M.78, $M.81, $M.65, $M.82, $M.83, $M.84, $M.85, $M.66, $M.86, $M.1, $M.92, $M.93, $M.80, $M.69, $M.68, $M.21, $M.22, $M.0, $M.117, $M.118, $M.17, $M.11, $M.12, $M.16, $M.10, $M.14, $M.15, $M.119, $CurrAddr, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.19, $M.13, $M.20;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1032} $initialize();
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_ldv_initialize_144();
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_entry_EMGentry_13($0.ref);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_144: ref;

axiom ldv_ldv_initialize_144 == $sub.ref(0, 427976);

procedure ldv_ldv_initialize_144();
  free requires assertsPassed;



implementation ldv_ldv_initialize_144()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 429008);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_assume($i2);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 430040);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 1} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 431072);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 432104);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 433136);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 434168);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 435200);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 436232);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 437264);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 438296);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 439328);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 440360);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 441392);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 442424);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 443456);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1040} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1041} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} __VERIFIER_assume($i4);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 444488);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 445520);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 446552);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 447584);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 448616);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1043} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1044} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1045} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1046} __VERIFIER_assume($i4);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 449648);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 450680);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 451712);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 452744);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 453776);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1047} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1048} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1049} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1050} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1051} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1052} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1053} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1054} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1055} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1056} __VERIFIER_assume($i7);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} __VERIFIER_assume($i11);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 454808);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 455840);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 456872);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 457904);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 458936);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 459968);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 461000);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 462032);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 463064);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1059} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1060} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 464096);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1062} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 465128);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 466160);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1063} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1064} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 467192);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 468224);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 469256);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 470288);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.67, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.18, $M.79, $M.76, $M.77, $M.78, $M.81, $M.65, $M.82, $M.83, $M.84, $M.85, $M.66, $M.86, $M.1, $M.92, $M.93, $M.80, $M.69, $M.68, $M.21, $M.22, $M.0, $M.117, $M.118, $M.17, $M.11, $M.12, $M.16, $M.10, $M.14, $M.15, $M.119;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1065} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.67 := 0;
    call {:si_unique_call 1066} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1067} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1068} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1069} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1070} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.74 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.75 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.18 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.79 := 0;
    call {:si_unique_call 1074} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1075} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1076} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1077} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1078} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.65 := 0;
    call {:si_unique_call 1079} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1080} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1081} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1082} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1083} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1084} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1085} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1086} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1087} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 1088} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1089} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.1 := 0;
    call {:si_unique_call 1090} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_kxcjk1013_data"} boogie_si_record_i8(0);
    $M.92 := $store.i8($M.92, __mod_acpi__kx_acpi_match_device_table, 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i8($M.93, __mod_i2c__kxcjk1013_id_device_table, 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.80 := 0;
    call {:si_unique_call 1091} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 1092} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 1093} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1094} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 1095} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1096} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1097} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 1098} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1099} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.69 := 0;
    call {:si_unique_call 1100} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1101} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.21 := $store.i32($M.21, odr_start_up_times, 8);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(0, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(1, 8)), $mul.ref(0, 1)), 9);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(1, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(2, 8)), $mul.ref(0, 1)), 10);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(2, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(3, 8)), $mul.ref(0, 1)), 11);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(3, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(4, 8)), $mul.ref(4, 1)), 80000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(5, 8)), $mul.ref(4, 1)), 41000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(6, 8)), $mul.ref(4, 1)), 21000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(7, 8)), $mul.ref(0, 1)), 3);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(7, 8)), $mul.ref(4, 1)), 11000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(8, 8)), $mul.ref(0, 1)), 4);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(8, 8)), $mul.ref(4, 1)), 6400);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(9, 8)), $mul.ref(0, 1)), 5);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(9, 8)), $mul.ref(4, 1)), 3900);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(10, 8)), $mul.ref(0, 1)), 6);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(10, 8)), $mul.ref(4, 1)), 2700);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(11, 8)), $mul.ref(4, 1)), 2100);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(0, 8)), $mul.ref(0, 1)), 8);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(0, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(1, 8)), $mul.ref(0, 1)), 9);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(1, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(2, 8)), $mul.ref(0, 1)), 10);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(2, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(3, 8)), $mul.ref(0, 1)), 11);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(3, 8)), $mul.ref(4, 1)), 100000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(4, 8)), $mul.ref(4, 1)), 80000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(5, 8)), $mul.ref(4, 1)), 41000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(6, 8)), $mul.ref(4, 1)), 21000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(7, 8)), $mul.ref(0, 1)), 3);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(7, 8)), $mul.ref(4, 1)), 11000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(8, 8)), $mul.ref(0, 1)), 4);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(8, 8)), $mul.ref(4, 1)), 6400);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(9, 8)), $mul.ref(0, 1)), 5);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(9, 8)), $mul.ref(4, 1)), 3900);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(10, 8)), $mul.ref(0, 1)), 6);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(10, 8)), $mul.ref(4, 1)), 2700);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(11, 8)), $mul.ref(4, 1)), 2100);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(0, 8)), $mul.ref(0, 1)), 8);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(0, 8)), $mul.ref(4, 1)), 1240000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(1, 8)), $mul.ref(0, 1)), 9);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(1, 8)), $mul.ref(4, 1)), 621000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(2, 8)), $mul.ref(0, 1)), 10);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(2, 8)), $mul.ref(4, 1)), 309000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(3, 8)), $mul.ref(0, 1)), 11);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(3, 8)), $mul.ref(4, 1)), 151000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(4, 8)), $mul.ref(4, 1)), 80000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(5, 8)), $mul.ref(4, 1)), 41000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(6, 8)), $mul.ref(4, 1)), 21000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(7, 8)), $mul.ref(0, 1)), 3);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(7, 8)), $mul.ref(4, 1)), 11000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(8, 8)), $mul.ref(0, 1)), 4);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(8, 8)), $mul.ref(4, 1)), 6000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(9, 8)), $mul.ref(0, 1)), 5);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(9, 8)), $mul.ref(4, 1)), 4000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(10, 8)), $mul.ref(0, 1)), 6);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(10, 8)), $mul.ref(4, 1)), 3000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(11, 8)), $mul.ref(4, 1)), 2000);
    $M.0 := $store.ref($M.0, kxcjk1013_trigger_ops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_trigger_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), kxcjk1013_data_rdy_trigger_set_state);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_trigger_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), kxcjk1013_trig_try_reen);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_trigger_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, iio_const_attr_in_accel_scale_available, .str.31);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(32, 1)), iio_read_const_attr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, iio_const_attr_sampling_frequency_available, .str.29);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.30);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(32, 1)), iio_read_const_attr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, kxcjk1013_attributes, $add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attributes, $mul.ref(0, 24)), $mul.ref(1, 8)), $add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attributes, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, kxcjk1013_attrs_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attrs_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attrs_group, $mul.ref(0, 32)), $mul.ref(16, 1)), kxcjk1013_attributes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attrs_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, kxcjk1013_info, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(16, 1)), kxcjk1013_attrs_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(24, 1)), kxcjk1013_read_raw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(40, 1)), kxcjk1013_write_raw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(56, 1)), kxcjk1013_read_event_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(64, 1)), kxcjk1013_write_event_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(72, 1)), kxcjk1013_read_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(80, 1)), kxcjk1013_write_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(88, 1)), kxcjk1013_validate_trigger);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i32($M.0, kxcjk1013_event, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(8, 1)), 11);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, kxcjk1013_channels, 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(8, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(40, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(48, 1)), 2052);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(72, 1)), kxcjk1013_event);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(80, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(112, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(8, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(40, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(48, 1)), 2052);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(72, 1)), kxcjk1013_event);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(80, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(112, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(8, 1)), 3);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(40, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(48, 1)), 2052);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(72, 1)), kxcjk1013_event);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(80, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(112, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(0, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(24, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(80, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(112, 1)), 0);
    $M.117 := $store.i32($M.117, wake_odr_data_rate_table, 0);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 781000);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 563000);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 3);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 125000);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 2);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 6);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 250000);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 3);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 12);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 500000);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 4);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 25);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 5);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 50);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 6);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 100);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 6);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 200);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 6);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 400);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 6);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 800);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 6);
    $M.117 := $store.i32($M.117, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 1600);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 0);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 6);
    $M.11 := $store.i32($M.11, samp_freq_table, 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 781000);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 8);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 563000);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 9);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 3);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 125000);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 10);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 6);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 250000);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 11);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 12);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 500000);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 25);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 1);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 50);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 2);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 100);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 3);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 200);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 4);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 400);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 5);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 800);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 6);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 1600);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 7);
    $M.10 := $store.i16($M.10, KXCJK1013_scale_table, 9582);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.15 := $store.i8($M.15, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.10 := $store.i16($M.10, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1)), 19163);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1)), 1);
    $M.15 := $store.i8($M.15, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(3, 1)), 0);
    $M.10 := $store.i16($M.10, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1)), $sub.i16(0, 27210));
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1)), 0);
    $M.15 := $store.i8($M.15, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(3, 1)), 1);
    $M.0 := $store.i8($M.0, kxcjk1013_id, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, kxcjk1013_pm_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), kxcjk1013_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), kxcjk1013_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), kxcjk1013_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), kxcjk1013_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), kxcjk1013_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), kxcjk1013_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), kxcjk1013_runtime_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), kxcjk1013_runtime_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.i8($M.0, kx_acpi_match, 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(1, 24)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(2, 24)), $mul.ref(16, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(3, 24)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 120)), $mul.ref(4, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, kxcjk1013_driver, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(16, 1)), kxcjk1013_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(24, 1)), kxcjk1013_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(0, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(48, 1)), kx_acpi_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(104, 1)), kxcjk1013_pm_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(56, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(176, 1)), kxcjk1013_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_driver, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.119 := $store.i8($M.119, .str.21, 83);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(1, 1)), 77);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(2, 1)), 79);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(3, 1)), 56);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(4, 1)), 53);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(5, 1)), 48);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    call {:si_unique_call 1102} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 471320);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 472352);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 473384);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 474416);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 475448);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(kxcjk1013_runtime_resume, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i14 == 1);
    $i13 := $eq.ref(kxcjk1013_runtime_suspend, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i13 == 1);
    $i12 := $eq.ref(kxcjk1013_resume, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i12 == 1);
    $i11 := $eq.ref(kxcjk1013_suspend, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i11 == 1);
    $i10 := $eq.ref(kxcjk1013_trig_try_reen, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i10 == 1);
    $i9 := $eq.ref(kxcjk1013_remove, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1103} $i2 := kxcjk1013_remove($p1);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    $r := $i2;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1104} $i4 := kxcjk1013_trig_try_reen($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 1105} $i5 := kxcjk1013_suspend(arg);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    $r := $i5;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 1106} $i6 := kxcjk1013_resume(arg);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    $r := $i6;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 1107} $i7 := kxcjk1013_runtime_suspend(arg);
    $r := $i7;
    return;

  $bb7:
    assume $i14 == 1;
    call {:si_unique_call 1108} $i8 := kxcjk1013_runtime_resume(arg);
    $r := $i8;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 476480);

procedure devirtbounce.5(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 477512);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 478544);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(kxcjk1013_runtime_resume, $p0);
    assume {:branchcond $i18} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(kxcjk1013_runtime_suspend, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(kxcjk1013_resume, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(kxcjk1013_suspend, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(kxcjk1013_trig_try_reen, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(kxcjk1013_remove, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1109} $i2 := kxcjk1013_remove($p1);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    $r := $i2;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1110} $i4 := kxcjk1013_trig_try_reen($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1111} $i6 := kxcjk1013_suspend($p5);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    $r := $i6;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1112} $i8 := kxcjk1013_resume($p7);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    $r := $i8;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1113} $i10 := kxcjk1013_runtime_suspend($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1114} $i12 := kxcjk1013_runtime_resume($p11);
    $r := $i12;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: i8;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: i32;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u26: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: i64;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.67, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.18, $M.79, $M.76, $M.77, $M.78, $M.81, $M.65, $M.82, $M.83, $M.84, $M.85, $M.66, $M.86, $M.1, $M.92, $M.93, $M.80, $M.69, $M.68, $M.21, $M.22, $M.0, $M.117, $M.118, $M.17, $M.11, $M.12, $M.16, $M.10, $M.14, $M.15, $M.119, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1115} __SMACK_static_init();
    call {:si_unique_call 1116} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.67, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.18, $M.79, $M.76, $M.77, $M.78, $M.81, $M.65, $M.82, $M.83, $M.84, $M.85, $M.66, $M.86, $M.1, $M.92, $M.93, $M.80, $M.69, $M.68, $M.21, $M.22, $M.0, $M.117, $M.118, $M.17, $M.11, $M.12, $M.16, $M.10, $M.14, $M.15, $M.119, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.19, $M.13, $M.20;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_435;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_434;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 101} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 99} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_425;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_424;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);
  modifies $M.0;



implementation kxcjk1013_trigger_handler_loop_$bb4(in_$p4: ref, in_$p6: ref, in_$p17: ref, in_$i22: i32, in_$i23: i1, in_$i25: i32, in_$i26: i16, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i20: i32, in_$i21: i32) returns (out_$i22: i32, out_$i23: i1, out_$i25: i32, out_$i26: i16, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i20: i32, out_$i21: i32)
{

  entry:
    out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i20, out_$i21 := in_$i22, in_$i23, in_$i25, in_$i26, in_$i27, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i20, in_$i21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  $bb10:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i25, out_$i40;
    goto $bb10_dummy;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i40, out_$i41);
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, in_$p17);
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i64.i32(out_$i39);
    call {:si_unique_call 230} {:cexpr "bit"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_941;

  SeqInstr_48:
    call {:si_unique_call 229} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_940;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} out_$i39 := ldv_find_next_bit_117(out_$p33, out_$i36, out_$i38);
    goto SeqInstr_47;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i21, 1);
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i35);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2352)), $mul.ref(1640, 1));
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2352)), $mul.ref(1440, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p29, out_$i26);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 240)), $mul.ref(184, 1)), $mul.ref(out_$i27, 2));
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i20);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i22);
    goto corral_source_split_927;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i20, 1);
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_926;

  $bb7:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 0);
    goto corral_source_split_916;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} out_$i22 := kxcjk1013_get_acc_reg(in_$p6, out_$i21);
    call {:si_unique_call 224} {:cexpr "ret"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i20, out_$i21 := kxcjk1013_trigger_handler_loop_$bb4(in_$p4, in_$p6, in_$p17, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i20, out_$i21);
    return;

  exit:
    return;
}



procedure kxcjk1013_trigger_handler_loop_$bb4(in_$p4: ref, in_$p6: ref, in_$p17: ref, in_$i22: i32, in_$i23: i1, in_$i25: i32, in_$i26: i16, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i20: i32, in_$i21: i32) returns (out_$i22: i32, out_$i23: i1, out_$i25: i32, out_$i26: i16, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i20: i32, out_$i21: i32);
  modifies assertsPassed, $M.0;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6_loop_$bb4(in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} out_$i8 := ldv_undef_int();
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1211;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb46_dummy;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_93:
    goto corral_source_split_1216;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} ldv_dummy_resourceless_instance_callback_6_24($u5, $u6, $u7, $u2, $u2, $u8);
    goto SeqInstr_92;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 1);
    goto corral_source_split_1212;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_dummy_resourceless_instance_callback_6_21($u9, $u6, $u7, $u2, $u2, $u2, $u2, $u2);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i10 == 1;
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 2);
    goto corral_source_split_1218;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_96:
    goto corral_source_split_1228;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} ldv_dummy_resourceless_instance_callback_6_18($u10, $u6, $u7, $u2, $u2, $u2);
    goto SeqInstr_95;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i11 == 1;
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i8, 3);
    goto corral_source_split_1224;

  $bb10:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ldv_dummy_resourceless_instance_callback_6_17($u11, $u6, in_$p7);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i12 == 1;
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i8, 4);
    goto corral_source_split_1230;

  $bb14:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_dummy_resourceless_instance_callback_6_16($u12, in_$p7);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i13 == 1;
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i8, 5);
    goto corral_source_split_1236;

  $bb18:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_99:
    goto corral_source_split_1247;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_dummy_resourceless_instance_callback_6_13($u14, in_$p7, out_$i20);
    goto SeqInstr_98;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1($u13);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i14 == 1;
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i8, 6);
    goto corral_source_split_1242;

  $bb22:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} ldv_free(out_$p26);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} ldv_free(out_$p25);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_1258;

  SeqInstr_102:
    goto corral_source_split_1257;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} ldv_dummy_resourceless_instance_callback_6_10($u15, $u6, $u7, out_$p22, out_$p24, $u8);
    goto SeqInstr_101;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} out_$p23 := ldv_xmalloc(4);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1254;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} out_$p21 := ldv_xmalloc(4);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i15 == 1;
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i8, 7);
    goto corral_source_split_1249;

  $bb26:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} ldv_free(out_$p32);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} ldv_free(out_$p31);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_dummy_resourceless_instance_callback_6_7($u16, $u6, $u7, $u2, $u2, $u2, out_$p28, out_$p30);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} out_$p29 := ldv_xmalloc(4);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1268;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} out_$p27 := ldv_xmalloc(4);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i16 == 1;
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i8, 8);
    goto corral_source_split_1263;

  $bb30:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_dummy_resourceless_instance_callback_6_3($u17, $u6, $u7, $u2, $u2);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i17 == 1;
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i8;
    assume true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i8, 9);
    goto corral_source_split_1277;

  $bb34:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32 := ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6_loop_$bb4(in_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32);
    return;

  exit:
    return;
}



procedure ldv_struct_iio_trigger_ops_dummy_resourceless_instance_6_loop_$bb4(in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref);
  modifies $M.1, $M.13, $M.0, assertsPassed, $CurrAddr;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_i2c_io_instance_0_loop_$bb10(in_$i28: i32, in_$i29: i1) returns (out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i28, out_$i29 := in_$i28, in_$i29;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i28 := ldv_undef_int();
    call {:si_unique_call 759} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2845;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb14_dummy;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2846;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29 := ldv_i2c_io_instance_0_loop_$bb10(out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_i2c_io_instance_0_loop_$bb10(in_$i28: i32, in_$i29: i1) returns (out_$i28: i32, out_$i29: i1);



implementation ldv_i2c_io_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$p30, out_$p31 := in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i28, in_$i29, in_$p30, in_$p31;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p7, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_2828;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i25 == 1;
    goto $bb12_dummy;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_2849;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$i24 := ldv_undef_int();
    call {:si_unique_call 761} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2848;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_279:
    goto corral_source_split_2856;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_io_instance_release_0_2(out_$p31, in_$p9);
    goto SeqInstr_278;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p7, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2854;

  $bb15:
    assume !(out_$i29 == 1);
    goto corral_source_split_2853;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2846;

  $bb10:
    call out_$i28, out_$i29 := ldv_i2c_io_instance_0_loop_$bb10(out_$i28, out_$i29);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i28 := ldv_undef_int();
    call {:si_unique_call 759} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2845;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    assume false;
    return;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ldv_assume(out_$i21);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i1.i32(out_$i20);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i17, 0);
    goto corral_source_split_2836;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$i18 := ldv_undef_int();
    call {:si_unique_call 755} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$i17 := ldv_filter_err_code(out_$i16);
    call {:si_unique_call 753} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2831;

  SeqInstr_276:
    call {:si_unique_call 751} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2830;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} out_$i16 := ldv_io_instance_probe_0_11(out_$p15, in_$p9, in_$p11);
    goto SeqInstr_275;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2829;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ldv_assume(out_$i23);
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i17, 0);
    goto corral_source_split_2841;

  $bb9:
    assume !(out_$i19 == 1);
    goto corral_source_split_2840;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$p30, out_$p31 := ldv_i2c_io_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure ldv_i2c_io_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref);
  modifies $M.1, $M.0, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.18, $M.19, $M.13, $M.20;



implementation ldv_pm_pm_ops_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$i93, in_$i94, in_$p95, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$p107, in_$p108, in_$p109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i1 := ldv_undef_int();
    call {:si_unique_call 774} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_2888;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_291:
    goto corral_source_split_2927;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_pm_ops_instance_runtime_idle_3_27(out_$p12, $u20);
    goto SeqInstr_290;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.24, out_$p11);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_2925;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_2924;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.23, out_$p7);
    goto corral_source_split_2894;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_2889;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_pm_ops_instance_runtime_resume_3_24(out_$p16, $u20);
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.26, out_$p15);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2905;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_pm_ops_instance_runtime_suspend_3_25(out_$p14, $u20);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.25, out_$p13);
    goto corral_source_split_2903;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_2898;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb87:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} ldv_pm_ops_instance_complete_3_3(out_$p122, $u20);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.60, out_$p121);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3111;

  $bb86:
    assume out_$i120 == 1;
    goto corral_source_split_3110;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i119, 0);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.59, out_$p117);
    goto corral_source_split_3014;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3013;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_312:
    goto corral_source_split_2996;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ldv_pm_ops_instance_resume_3_16(out_$p56, $u20);
    goto SeqInstr_311;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.38, out_$p55);
    goto corral_source_split_2995;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_2994;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_309:
    goto corral_source_split_2992;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_pm_ops_instance_resume_noirq_3_19(out_$p42, $u20);
    goto SeqInstr_308;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.33, out_$p41);
    goto corral_source_split_2991;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_2990;

  $bb44:
    assume out_$i40 == 1;
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.32, out_$p37);
    goto corral_source_split_2985;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_2984;

  $bb42:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_306:
    goto corral_source_split_2982;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} ldv_pm_ops_instance_suspend_noirq_3_20(out_$p36, $u20);
    goto SeqInstr_305;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.31, out_$p35);
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_2980;

  $bb41:
    assume out_$i34 == 1;
    goto corral_source_split_2979;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.30, out_$p31);
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_2968;

  $bb39:
    assume out_$i30 == 1;
    goto corral_source_split_2967;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$i29 := ldv_undef_int();
    call {:si_unique_call 784} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_2942;

  SeqInstr_297:
    goto corral_source_split_2941;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_pm_ops_instance_suspend_3_21(out_$p28, $u20);
    goto SeqInstr_296;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.29, out_$p27);
    goto corral_source_split_2940;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i24 == 1;
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 1);
    goto corral_source_split_2935;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_$i23 := ldv_undef_int();
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2934;

  $bb24:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_294:
    goto corral_source_split_2932;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} ldv_pm_ops_instance_prepare_3_22(out_$p22, $u20);
    goto SeqInstr_293;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.28, out_$p21);
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2930;

  $bb23:
    assume out_$i20 == 1;
    goto corral_source_split_2929;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.27, out_$p17);
    goto corral_source_split_2914;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_2909;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb52:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_318:
    goto corral_source_split_3011;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ldv_pm_ops_instance_resume_early_3_17(out_$p54, $u20);
    goto SeqInstr_317;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.37, out_$p53);
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_3009;

  $bb51:
    assume out_$i52 == 1;
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.36, out_$p49);
    goto corral_source_split_3004;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_3003;

  $bb49:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_315:
    goto corral_source_split_3001;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_pm_ops_instance_suspend_late_3_18(out_$p48, $u20);
    goto SeqInstr_314;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.35, out_$p47);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_2999;

  $bb48:
    assume out_$i46 == 1;
    goto corral_source_split_2998;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_2977;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_2976;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.34, out_$p43);
    goto corral_source_split_2975;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_2974;

  $bb40:
    assume !(out_$i30 == 1);
    goto corral_source_split_2973;

  SeqInstr_327:
    goto corral_source_split_3047;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_pm_ops_instance_thaw_3_10(out_$p86, $u20);
    goto SeqInstr_326;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.48, out_$p85);
    goto corral_source_split_3046;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_3045;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_324:
    goto corral_source_split_3043;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_pm_ops_instance_thaw_early_3_13(out_$p72, $u20);
    goto SeqInstr_323;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.43, out_$p71);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_3041;

  $bb60:
    assume out_$i70 == 1;
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.42, out_$p67);
    goto corral_source_split_3036;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_3035;

  $bb58:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_321:
    goto corral_source_split_3033;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_pm_ops_instance_freeze_late_3_14(out_$p66, $u20);
    goto SeqInstr_320;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.41, out_$p65);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_3031;

  $bb57:
    assume out_$i64 == 1;
    goto corral_source_split_3030;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.40, out_$p61);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_3019;

  $bb55:
    assume out_$i60 == 1;
    goto corral_source_split_3018;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} out_$i59 := ldv_undef_int();
    call {:si_unique_call 787} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_2952;

  SeqInstr_300:
    goto corral_source_split_2951;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} ldv_pm_ops_instance_freeze_3_15(out_$p58, $u20);
    goto SeqInstr_299;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.39, out_$p57);
    goto corral_source_split_2950;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i25 == 1;
    goto corral_source_split_2947;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i23, 2);
    goto corral_source_split_2945;

  $bb27:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb68:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_333:
    goto corral_source_split_3062;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_pm_ops_instance_thaw_noirq_3_11(out_$p84, $u20);
    goto SeqInstr_332;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.47, out_$p83);
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_3060;

  $bb67:
    assume out_$i82 == 1;
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.46, out_$p79);
    goto corral_source_split_3055;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_3054;

  $bb65:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_330:
    goto corral_source_split_3052;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_pm_ops_instance_freeze_noirq_3_12(out_$p78, $u20);
    goto SeqInstr_329;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.45, out_$p77);
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_3050;

  $bb64:
    assume out_$i76 == 1;
    goto corral_source_split_3049;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_3027;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.44, out_$p73);
    goto corral_source_split_3026;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_3025;

  $bb56:
    assume !(out_$i60 == 1);
    goto corral_source_split_3024;

  SeqInstr_342:
    goto corral_source_split_3093;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_pm_ops_instance_restore_3_4(out_$p116, $u20);
    goto SeqInstr_341;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.58, out_$p115);
    goto corral_source_split_3092;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_3091;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_339:
    goto corral_source_split_3089;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_pm_ops_instance_restore_early_3_7(out_$p102, $u20);
    goto SeqInstr_338;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.53, out_$p101);
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_3087;

  $bb75:
    assume out_$i100 == 1;
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i64(out_$i99, 0);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$i99 := $p2i.ref.i64(out_$p98);
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.52, out_$p97);
    goto corral_source_split_3082;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_3081;

  $bb73:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_336:
    goto corral_source_split_3079;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_pm_ops_instance_poweroff_late_3_8(out_$p96, $u20);
    goto SeqInstr_335;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.51, out_$p95);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_3077;

  $bb72:
    assume out_$i94 == 1;
    goto corral_source_split_3076;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, 0);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.50, out_$p91);
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_3065;

  $bb70:
    assume out_$i90 == 1;
    goto corral_source_split_3064;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_2963;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_$i89 := ldv_undef_int();
    call {:si_unique_call 790} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_2962;

  SeqInstr_303:
    goto corral_source_split_2961;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_pm_ops_instance_poweroff_3_9(out_$p88, $u20);
    goto SeqInstr_302;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.49, out_$p87);
    goto corral_source_split_2960;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_2959;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i26 == 1;
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i23, 3);
    goto corral_source_split_2955;

  $bb31:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb83:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_348:
    goto corral_source_split_3108;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_pm_ops_instance_restore_noirq_3_5(out_$p114, $u20);
    goto SeqInstr_347;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.57, out_$p113);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_3106;

  $bb82:
    assume out_$i112 == 1;
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i64(out_$i111, 0);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(out_$p110);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.56, out_$p109);
    goto corral_source_split_3101;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_3100;

  $bb80:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_345:
    goto corral_source_split_3098;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_pm_ops_instance_poweroff_noirq_3_6(out_$p108, $u20);
    goto SeqInstr_344;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.55, out_$p107);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_3096;

  $bb79:
    assume out_$i106 == 1;
    goto corral_source_split_3095;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, 0);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.54, out_$p103);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u19, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_3071;

  $bb71:
    assume !(out_$i90 == 1);
    goto corral_source_split_3070;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_stop();
    goto corral_source_split_2965;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122 := ldv_pm_pm_ops_instance_3_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122);
    return;

  exit:
    return;
}



procedure ldv_pm_pm_ops_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref);
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_struct_iio_const_attr_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_3181;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i9 := ldv_undef_int();
    call {:si_unique_call 844} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_3198;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_free(out_$p3);
    goto corral_source_split_3197;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} ldv_dummy_resourceless_instance_callback_5_3($u23, $u20, $u22, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_free(out_$p6);
    goto corral_source_split_3195;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_dummy_resourceless_instance_callback_5_9($u21, $u20, $u22, out_$p6, $u8);
    goto corral_source_split_3193;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_3192;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u21);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_3186;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_$i4 := ldv_undef_int();
    call {:si_unique_call 837} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_3182;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_3190;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_iio_const_attr_dummy_resourceless_instance_5_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_iio_const_attr_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr;



implementation ldv_pm_platform_instance_4_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := in_$i22, in_$i28, in_$i29, in_$i39, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    goto $bb34_dummy;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_3292;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i39 := ldv_undef_int();
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3291;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_3270;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_dispatch_pm_deregister_4_5();
    goto corral_source_split_3279;

  SeqInstr_420:
    goto corral_source_split_3278;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_dispatch_pm_register_4_6();
    goto SeqInstr_419;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_3274;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_4_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_4_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1);
  modifies $CurrAddr, $M.1, assertsPassed, $M.0;



implementation ldv_pm_platform_instance_4_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i22, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i25;
    goto $bb15_dummy;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_$i26 := ldv_undef_int();
    call {:si_unique_call 866} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_3256;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    goto $bb14;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i25 := 1;
    goto $bb14;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_free(out_$p38);
    goto corral_source_split_3289;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3288;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_423:
    goto corral_source_split_3286;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_platform_instance_release_4_3(out_$p37, out_$p31);
    goto SeqInstr_422;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.64, out_$p36);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_3284;

  $bb30:
    assume out_$i35 == 1;
    goto corral_source_split_3283;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.63, out_$p32);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_3264;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_$p30 := ldv_xmalloc(1464);
    goto corral_source_split_3263;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb11;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_$i20 := ldv_undef_int();
    call {:si_unique_call 863} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_assume(out_$i19);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 0);
    goto corral_source_split_3242;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_$i16 := ldv_undef_int();
    call {:si_unique_call 860} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_free(out_$p15);
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_3236;

  SeqInstr_417:
    call {:si_unique_call 857} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3235;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} out_$i14 := ldv_ldv_post_probe_146(out_$i13);
    goto SeqInstr_416;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i3;
    goto $bb7;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb7;

  SeqInstr_414:
    call {:si_unique_call 855} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3232;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_$i12 := ldv_platform_instance_probe_4_14(out_$p11, out_$p5);
    goto SeqInstr_413;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.62, out_$p10);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.61, out_$p6);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($u24, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} ldv_ldv_pre_probe_145();
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_$p4 := ldv_xmalloc(1464);
    goto corral_source_split_3221;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_3261;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_3292;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i39 := ldv_undef_int();
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3291;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_3270;

  $bb13:
    call out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_4_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    goto $bb13;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    assume false;
    return;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_3253;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_dispatch_pm_deregister_4_5();
    goto corral_source_split_3279;

  SeqInstr_420:
    goto corral_source_split_3278;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_dispatch_pm_register_4_6();
    goto SeqInstr_419;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_3274;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_assume(out_$i24);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_3249;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_3248;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := ldv_pm_platform_instance_4_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_4_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1);
  modifies $M.1, assertsPassed, $M.0, $CurrAddr, $M.65, $M.66;


