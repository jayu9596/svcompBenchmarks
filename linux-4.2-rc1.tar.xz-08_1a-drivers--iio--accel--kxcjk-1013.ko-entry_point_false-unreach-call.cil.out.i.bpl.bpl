var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: [ref]ref;

var $M.9: ref;

var $M.10: i32;

var $M.11: i32;

var $M.13: i32;

var $M.14: ref;

var $M.15: i32;

var $M.17: i32;

var $M.18: ref;

var $M.19: i32;

var $M.21: i32;

var $M.22: ref;

var $M.23: i32;

var $M.25: i32;

var $M.26: ref;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]i16;

var $M.34: [ref]i32;

var $M.35: [ref]i32;

var $M.36: [ref]i32;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: [ref]i8;

var $M.41: ref;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: ref;

var $M.48: i32;

var $M.49: i32;

var $M.50: ref;

var $M.51: i32;

var $M.52: i32;

var $M.53: ref;

var $M.54: i32;

var $M.55: i32;

var $M.56: ref;

var $M.57: i32;

var $M.58: i32;

var $M.59: ref;

var $M.60: ref;

var $M.61: ref;

var $M.62: ref;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.123: [ref]i8;

var $M.147: [ref]i8;

var $M.176: [ref]i32;

var $M.177: [ref]i32;

var $M.178: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 380625);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_3_1: ref;

axiom ldv_irq_3_1 == $sub.ref(0, 1028);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 2056);

const ldv_irq_3_2: ref;

axiom ldv_irq_3_2 == $sub.ref(0, 3084);

const ldv_irq_4_2: ref;

axiom ldv_irq_4_2 == $sub.ref(0, 4112);

const ldv_irq_4_0: ref;

axiom ldv_irq_4_0 == $sub.ref(0, 5140);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 6168);

const ldv_irq_3_0: ref;

axiom ldv_irq_3_0 == $sub.ref(0, 7196);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 8224);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 9252);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 10280);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 11308);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 12336);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 13364);

const ldv_irq_4_3: ref;

axiom ldv_irq_4_3 == $sub.ref(0, 14392);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 15420);

const ldv_irq_3_3: ref;

axiom ldv_irq_3_3 == $sub.ref(0, 16448);

const ldv_irq_4_1: ref;

axiom ldv_irq_4_1 == $sub.ref(0, 17476);

const ldv_irq_line_4_0: ref;

axiom ldv_irq_line_4_0 == $sub.ref(0, 18508);

const ldv_irq_line_4_1: ref;

axiom ldv_irq_line_4_1 == $sub.ref(0, 19540);

const ldv_irq_line_4_2: ref;

axiom ldv_irq_line_4_2 == $sub.ref(0, 20572);

const ldv_irq_line_4_3: ref;

axiom ldv_irq_line_4_3 == $sub.ref(0, 21604);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 22632);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 23664);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 24692);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 25724);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 26752);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 27784);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 28812);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 29844);

const ldv_irq_dev_2_0: ref;

axiom ldv_irq_dev_2_0 == $sub.ref(0, 30876);

const ldv_irq_dev_2_1: ref;

axiom ldv_irq_dev_2_1 == $sub.ref(0, 31908);

const ldv_irq_dev_2_2: ref;

axiom ldv_irq_dev_2_2 == $sub.ref(0, 32940);

const ldv_irq_dev_2_3: ref;

axiom ldv_irq_dev_2_3 == $sub.ref(0, 33972);

const kxcjk1013_driver_group0: ref;

axiom kxcjk1013_driver_group0 == $sub.ref(0, 35004);

const ldv_irq_line_3_0: ref;

axiom ldv_irq_line_3_0 == $sub.ref(0, 36036);

const ldv_irq_line_3_1: ref;

axiom ldv_irq_line_3_1 == $sub.ref(0, 37068);

const ldv_irq_line_3_2: ref;

axiom ldv_irq_line_3_2 == $sub.ref(0, 38100);

const ldv_irq_line_3_3: ref;

axiom ldv_irq_line_3_3 == $sub.ref(0, 39132);

const ldv_irq_line_4: ref;

axiom ldv_irq_line_4 == $sub.ref(0, 40160);

const kxcjk1013_buffer_setup_ops_group1: ref;

axiom kxcjk1013_buffer_setup_ops_group1 == $sub.ref(0, 41192);

const kxcjk1013_trigger_ops_group0: ref;

axiom kxcjk1013_trigger_ops_group0 == $sub.ref(0, 42224);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 43252);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 44284);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 45312);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 46344);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 47372);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 48404);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 49432);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 50464);

const kxcjk1013_pm_ops_group1: ref;

axiom kxcjk1013_pm_ops_group1 == $sub.ref(0, 51496);

const kxcjk1013_info_group0: ref;

axiom kxcjk1013_info_group0 == $sub.ref(0, 52528);

const kxcjk1013_info_group1: ref;

axiom kxcjk1013_info_group1 == $sub.ref(0, 53560);

const ldv_irq_dev_1_0: ref;

axiom ldv_irq_dev_1_0 == $sub.ref(0, 54592);

const ldv_irq_dev_1_1: ref;

axiom ldv_irq_dev_1_1 == $sub.ref(0, 55624);

const ldv_irq_dev_1_2: ref;

axiom ldv_irq_dev_1_2 == $sub.ref(0, 56656);

const ldv_irq_dev_1_3: ref;

axiom ldv_irq_dev_1_3 == $sub.ref(0, 57688);

const ldv_irq_line_3: ref;

axiom ldv_irq_line_3 == $sub.ref(0, 58716);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 59744);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 60772);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 61800);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 62828);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 63856);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 64884);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 65912);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 66940);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 67968);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 68996);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 70024);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 71052);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 72080);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 73108);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 74136);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 75164);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 76192);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 77220);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 78248);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 79276);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 80304);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 81332);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 82360);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 83388);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 84416);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 85444);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 86472);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 87500);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 88528);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 89556);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 90584);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 91612);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 92640);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 93668);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 94696);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 95724);

const ldv_retval_23: ref;

axiom ldv_retval_23 == $sub.ref(0, 96752);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 97780);

const {:count 6} __mod_acpi__kx_acpi_match_device_table: ref;

axiom __mod_acpi__kx_acpi_match_device_table == $sub.ref(0, 98948);

const {:count 5} __mod_i2c__kxcjk1013_id_device_table: ref;

axiom __mod_i2c__kxcjk1013_id_device_table == $sub.ref(0, 100132);

const kxcjk1013_buffer_setup_ops: ref;

axiom kxcjk1013_buffer_setup_ops == $sub.ref(0, 101196);

const kxcjk1013_trigger_ops: ref;

axiom kxcjk1013_trigger_ops == $sub.ref(0, 102252);

const iio_const_attr_in_accel_scale_available: ref;

axiom iio_const_attr_in_accel_scale_available == $sub.ref(0, 103332);

const iio_const_attr_sampling_frequency_available: ref;

axiom iio_const_attr_sampling_frequency_available == $sub.ref(0, 104412);

const {:count 3} kxcjk1013_attributes: ref;

axiom kxcjk1013_attributes == $sub.ref(0, 105460);

const kxcjk1013_attrs_group: ref;

axiom kxcjk1013_attrs_group == $sub.ref(0, 106516);

const kxcjk1013_info: ref;

axiom kxcjk1013_info == $sub.ref(0, 107676);

const kxcjk1013_event: ref;

axiom kxcjk1013_event == $sub.ref(0, 108740);

const {:count 4} kxcjk1013_channels: ref;

axiom kxcjk1013_channels == $sub.ref(0, 110244);

const {:count 5} kxcjk1013_id: ref;

axiom kxcjk1013_id == $sub.ref(0, 111428);

const kxcjk1013_pm_ops: ref;

axiom kxcjk1013_pm_ops == $sub.ref(0, 112636);

const {:count 6} kx_acpi_match: ref;

axiom kx_acpi_match == $sub.ref(0, 113804);

const kxcjk1013_driver: ref;

axiom kxcjk1013_driver == $sub.ref(0, 115044);

const {:count 3} KXCJK1013_scale_table: ref;

axiom KXCJK1013_scale_table == $sub.ref(0, 116080);

const {:count 12} wake_odr_data_rate_table: ref;

axiom wake_odr_data_rate_table == $sub.ref(0, 117248);

const {:count 12} samp_freq_table: ref;

axiom samp_freq_table == $sub.ref(0, 118416);

const {:count 3} odr_start_up_times: ref;

axiom odr_start_up_times == $sub.ref(0, 119728);

const {:count 10} .str.14: ref;

axiom .str.14 == $sub.ref(0, 120762);

const {:count 25} .str.4: ref;

axiom .str.4 == $sub.ref(0, 121811);

const {:count 25} .str.5: ref;

axiom .str.5 == $sub.ref(0, 122860);

const {:count 13} .str.15: ref;

axiom .str.15 == $sub.ref(0, 123897);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 124937);

const {:count 9} .str.17: ref;

axiom .str.17 == $sub.ref(0, 125970);

const {:count 20} .str.18: ref;

axiom .str.18 == $sub.ref(0, 127014);

const {:count 35} .str.19: ref;

axiom .str.19 == $sub.ref(0, 128073);

const {:count 31} .str.20: ref;

axiom .str.20 == $sub.ref(0, 129128);

const .str: ref;

axiom .str == $sub.ref(0, 130187);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 131239);

const {:count 28} .str.2: ref;

axiom .str.2 == $sub.ref(0, 132291);

const {:count 27} .str.3: ref;

axiom .str.3 == $sub.ref(0, 133342);

const {:count 14} .str.33: ref;

axiom .str.33 == $sub.ref(0, 134380);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 135432);

const {:count 11} .str.23: ref;

axiom .str.23 == $sub.ref(0, 136467);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 137512);

const {:count 208} .str.25: ref;

axiom .str.25 == $sub.ref(0, 138744);

const {:count 29} .str.36: ref;

axiom .str.36 == $sub.ref(0, 139797);

const {:count 24} .str.22: ref;

axiom .str.22 == $sub.ref(0, 140845);

const {:count 20} .str.24: ref;

axiom .str.24 == $sub.ref(0, 141889);

const {:count 22} .str.26: ref;

axiom .str.26 == $sub.ref(0, 142935);

const {:count 24} .str.27: ref;

axiom .str.27 == $sub.ref(0, 143983);

const {:count 29} .str.28: ref;

axiom .str.28 == $sub.ref(0, 145036);

const {:count 29} .str.8: ref;

axiom .str.8 == $sub.ref(0, 146089);

const {:count 29} .str.9: ref;

axiom .str.9 == $sub.ref(0, 147142);

const {:count 8} .str.21: ref;

axiom .str.21 == $sub.ref(0, 148174);

const {:count 28} .str.6: ref;

axiom .str.6 == $sub.ref(0, 149226);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 30} .str.10: ref;

axiom .str.10 == $sub.ref(0, 150280);

const {:count 30} .str.11: ref;

axiom .str.11 == $sub.ref(0, 151334);

const {:count 42} .str.7: ref;

axiom .str.7 == $sub.ref(0, 152400);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 25} .str.12: ref;

axiom .str.12 == $sub.ref(0, 153449);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 154498);

const {:count 73} .str.29: ref;

axiom .str.29 == $sub.ref(0, 155595);

const {:count 29} .str.30: ref;

axiom .str.30 == $sub.ref(0, 156648);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 157699);

const {:count 25} .str.32: ref;

axiom .str.32 == $sub.ref(0, 158748);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 159780);

const {:count 3} .str.1.84: ref;

axiom .str.1.84 == $sub.ref(0, 160807);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 161845);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 162873);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 163905);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 164937);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const kxcjk1013_probe: ref;

axiom kxcjk1013_probe == $sub.ref(0, 165969);

procedure kxcjk1013_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr, $M.13, $M.14, $M.11, $M.17, $M.18, $M.15, $M.21, $M.22, $M.19, $M.25, $M.26, $M.23, $M.9, $M.10;



implementation kxcjk1013_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p31: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i135: i32;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $i128: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i68: i32;
  var $i7: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := devm_iio_device_alloc($p3, 240);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p8 := iio_priv($p4);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} i2c_set_clientdata($p0, $p10);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p13 := dev_get_platdata($p12);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(1248, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p35 := to_acpi_node($p34);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p36 := acpi_device_handle($p35);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(236, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p42 := kxcjk1013_match_acpi_device($p39, $p40, $p41);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $p42;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i43 := kxcjk1013_chip_init($p9);
    call {:si_unique_call 9} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} __mutex_init($p45, .str.15, $p2);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p46);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1688, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, kxcjk1013_channels);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1696, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 4);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1752, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p31);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(4, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1760, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, kxcjk1013_info);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i61 := $sge.i32($i60, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i129 := ldv_iio_triggered_buffer_setup_9($p4, iio_pollfunc_store_time, kxcjk1013_trigger_handler, kxcjk1013_buffer_setup_ops);
    call {:si_unique_call 26} {:cexpr "ret"} boogie_si_record_i32($i129);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i132 := iio_device_register($p4);
    call {:si_unique_call 29} {:cexpr "ret"} boogie_si_record_i32($i132);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i132, 0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i137 := pm_runtime_set_active($p136);
    call {:si_unique_call 32} {:cexpr "ret"} boogie_si_record_i32($i137);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} pm_runtime_enable($p139);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} pm_runtime_set_autosuspend_delay($p140, 2000);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} pm_runtime_use_autosuspend($p141);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb47:
    assume $i138 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} iio_device_unregister($p4);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i135 := $i137;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i128 := $i135;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i68 := $i128;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_16 := kxcjk1013_set_mode($p9, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i7 := $i68;
    goto $bb3;

  $bb57:
    assume $i155 == 1;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} iio_trigger_unregister($p157);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i149 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} iio_trigger_unregister($p151);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i145 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} ldv_iio_triggered_buffer_cleanup_10($p4);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i133 == 1;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} dev_err.ref.ref($p134, .str.20);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i135 := $i132;
    goto $bb45;

  $bb40:
    assume $i130 == 1;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} dev_err.ref.ref($p131, .str.19);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i128 := $i129;
    goto $bb37;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i66 := ldv_devm_request_threaded_irq_8($p62, $i64, kxcjk1013_data_rdy_trig_poll, kxcjk1013_event_handler, 1, .str.16, $p65);
    call {:si_unique_call 14} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1752, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p74 := devm_iio_trigger_alloc.ref.ref.ref.i32($p69, .str.17, $p71, $i73);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p74);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1752, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(0, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p85 := devm_iio_trigger_alloc.ref.ref.ref.i32($p80, .str.18, $p82, $i84);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 1912)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p91);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, kxcjk1013_trigger_ops);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p4);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} iio_trigger_set_drvdata($p100, $p101);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1672, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p103);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1672, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_17 := iio_trigger_get($p106);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i110 := iio_trigger_register($p109);
    call {:si_unique_call 21} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p114, $mul.ref(0, 1912)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $p112);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, kxcjk1013_trigger_ops);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p4);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} iio_trigger_set_drvdata($p121, $p122);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i125 := iio_trigger_register($p124);
    call {:si_unique_call 24} {:cexpr "ret"} boogie_si_record_i32($i125);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb35:
    assume $i126 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $0.ref);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i128 := $i125;
    goto $bb37;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i68 := $i110;
    goto $bb24;

  $bb29:
    assume $i90 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb24;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb24;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    goto $bb24;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i57 := kxcjk1013_gpio_probe($p0, $p9);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i7 := $i43;
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p31 := $p1;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i19);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i21);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const kxcjk1013_remove: ref;

axiom kxcjk1013_remove == $sub.ref(0, 167001);

procedure kxcjk1013_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation kxcjk1013_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p1 := i2c_get_clientdata($p0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p3 := iio_priv($p2);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} pm_runtime_disable($p5);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} pm_runtime_set_suspended($p6);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} pm_runtime_put_noidle($p7);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} iio_device_unregister($p2);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} mutex_lock_nested($p16, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_18 := kxcjk1013_set_mode($p4, 0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} mutex_unlock($p18);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_iio_triggered_buffer_cleanup_11($p2);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} iio_trigger_unregister($p13);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} iio_trigger_unregister($p15);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_get_clientdata: ref;

axiom i2c_get_clientdata == $sub.ref(0, 168033);

procedure i2c_get_clientdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_clientdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const iio_priv: ref;

axiom iio_priv == $sub.ref(0, 169065);

procedure iio_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iio_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(2368, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pm_runtime_disable: ref;

axiom pm_runtime_disable == $sub.ref(0, 170097);

procedure pm_runtime_disable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} __pm_runtime_disable($p0, 1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_suspended: ref;

axiom pm_runtime_set_suspended == $sub.ref(0, 171129);

procedure pm_runtime_set_suspended($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_set_suspended($p0: ref)
{
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_19 := __pm_runtime_set_status($p0, 2);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put_noidle: ref;

axiom pm_runtime_put_noidle == $sub.ref(0, 172161);

procedure pm_runtime_put_noidle($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_put_noidle($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(528, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_20 := atomic_add_unless($p2, $sub.i32(0, 1), 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    return;
}



const iio_device_unregister: ref;

axiom iio_device_unregister == $sub.ref(0, 173193);

procedure iio_device_unregister($p0: ref);
  free requires assertsPassed;



implementation iio_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_cleanup_11: ref;

axiom ldv_iio_triggered_buffer_cleanup_11 == $sub.ref(0, 174225);

procedure ldv_iio_triggered_buffer_cleanup_11($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_iio_triggered_buffer_cleanup_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} iio_triggered_buffer_cleanup($p0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 57} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    return;
}



const iio_trigger_unregister: ref;

axiom iio_trigger_unregister == $sub.ref(0, 175257);

procedure iio_trigger_unregister($p0: ref);
  free requires assertsPassed;



implementation iio_trigger_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 176289);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    return;
}



const kxcjk1013_set_mode: ref;

axiom kxcjk1013_set_mode == $sub.ref(0, 177321);

procedure kxcjk1013_set_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_set_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "kxcjk1013_set_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i4 := i2c_smbus_read_byte_data($p3, 27);
    call {:si_unique_call 61} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i4, 128);
    call {:si_unique_call 64} {:cexpr "ret"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i12);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i19 := i2c_smbus_write_byte_data($p15, 27, $i18);
    call {:si_unique_call 66} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} dev_err.ref.ref($p23, .str.5);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i9 := $i19;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i4, $sub.i32(0, 129));
    call {:si_unique_call 63} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} dev_err.ref.ref($p8, .str.4);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 178353);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    return;
}



const i2c_smbus_read_byte_data: ref;

axiom i2c_smbus_read_byte_data == $sub.ref(0, 179385);

procedure i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} {:cexpr "i2c_smbus_read_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 70} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 180417);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    return;
}



const i2c_smbus_write_byte_data: ref;

axiom i2c_smbus_write_byte_data == $sub.ref(0, 181449);

procedure i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} {:cexpr "i2c_smbus_write_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 72} {:cexpr "i2c_smbus_write_byte_data:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 74} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iio_triggered_buffer_cleanup: ref;

axiom iio_triggered_buffer_cleanup == $sub.ref(0, 182481);

procedure iio_triggered_buffer_cleanup($p0: ref);
  free requires assertsPassed;



implementation iio_triggered_buffer_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 183513);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 76} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 78} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 184545);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 80} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i3 := atomic_read($p0);
    call {:si_unique_call 82} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 86} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 90} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 185577);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 186609);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 92} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 187641);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 94} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 95} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 96} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 97} $i4 := devirtbounce(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 98} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __pm_runtime_set_status: ref;

axiom __pm_runtime_set_status == $sub.ref(0, 188673);

procedure __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} {:cexpr "__pm_runtime_set_status:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pm_runtime_disable: ref;

axiom __pm_runtime_disable == $sub.ref(0, 189705);

procedure __pm_runtime_disable($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_disable($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "__pm_runtime_disable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 190737);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const devm_iio_device_alloc: ref;

axiom devm_iio_device_alloc == $sub.ref(0, 191769);

procedure devm_iio_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_iio_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "devm_iio_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p2 := external_alloc();
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const i2c_set_clientdata: ref;

axiom i2c_set_clientdata == $sub.ref(0, 192801);

procedure i2c_set_clientdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2c_set_clientdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} dev_set_drvdata($p2, $p1);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 193833);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(504, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const to_acpi_node: ref;

axiom to_acpi_node == $sub.ref(0, 194865);

procedure to_acpi_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_acpi_node($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i1 := is_acpi_node($p0);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 107} {:cexpr "tmp___1"} boogie_si_record_i8($i2);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 2264));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const acpi_device_handle: ref;

axiom acpi_device_handle == $sub.ref(0, 195897);

procedure acpi_device_handle($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_device_handle($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2264)), $mul.ref(8, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const kxcjk1013_match_acpi_device: ref;

axiom kxcjk1013_match_acpi_device == $sub.ref(0, 196929);

procedure kxcjk1013_match_acpi_device($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_match_acpi_device($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(496, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p7 := acpi_match_device($p6, $p0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i13 := strcmp($p12, .str.21);
    call {:si_unique_call 110} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i17);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $p18 := dev_name($p0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p10 := $p18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;
}



const kxcjk1013_chip_init: ref;

axiom kxcjk1013_chip_init == $sub.ref(0, 197961);

procedure kxcjk1013_chip_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $CurrAddr;



implementation kxcjk1013_chip_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $i70: i32;
  var $i72: i32;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i4 := i2c_smbus_read_byte_data($p3, 15);
    call {:si_unique_call 114} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.23);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.24);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.25);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.26);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.6, $p15);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 301);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p15, $i18);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 117} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i29 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 120} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i33 := i2c_smbus_read_byte_data($p32, 27);
    call {:si_unique_call 122} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i33, 64);
    call {:si_unique_call 124} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i38);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i44 := i2c_smbus_write_byte_data($p40, 27, $i43);
    call {:si_unique_call 126} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i49 := kxcjk1013_set_range($p0, 1);
    call {:si_unique_call 129} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i53 := i2c_smbus_read_byte_data($p52, 33);
    call {:si_unique_call 131} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i53);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i58);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i62 := i2c_smbus_read_byte_data($p61, 30);
    call {:si_unique_call 134} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i69 == 1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i62, $sub.i32(0, 17));
    call {:si_unique_call 137} {:cexpr "ret"} boogie_si_record_i32($i72);
    assume {:verifier.code 0} true;
    $i71 := $i72;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i71);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i78 := i2c_smbus_write_byte_data($p74, 30, $i77);
    call {:si_unique_call 139} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i83 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 142} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i9 := $i83;
    goto $bb3;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} dev_err.ref.ref($p82, .str.9);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i9 := $i78;
    goto $bb3;

  $bb26:
    assume $i69 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i62, 16);
    call {:si_unique_call 136} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb28;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} dev_err.ref.ref($p66, .str.8);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i9 := $i62;
    goto $bb3;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} dev_err.ref.ref($p57, .str.28);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i9 := $i53;
    goto $bb3;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i9 := $i49;
    goto $bb3;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} dev_err.ref.ref($p48, .str.27);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i9 := $i44;
    goto $bb3;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} dev_err.ref.ref($p37, .str.4);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb3;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i9 := $i29;
    goto $bb3;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p28, .str.26, $i4);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} dev_err.ref.ref($p8, .str.22);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 198993);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    return;
}



const kxcjk1013_gpio_probe: ref;

axiom kxcjk1013_gpio_probe == $sub.ref(0, 200025);

procedure kxcjk1013_gpio_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation kxcjk1013_gpio_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(236, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p10 := __devm_gpiod_get_index($p9, .str.33, 0, 1);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i12 := IS_ERR($p11);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 146} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i18 := gpiod_to_irq($p10);
    call {:si_unique_call 151} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.23);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.35);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.25);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p22, .str.36);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.6, $p24);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1192);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p24, $i27);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p28, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 153} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i35 := desc_to_gpio($p10);
    call {:si_unique_call 155} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p9, .str.36, $i35, $i18);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} dev_err.ref.ref($p9, .str.34);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p10);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i16 := PTR_ERR($p15);
    call {:si_unique_call 149} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 524);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const kxcjk1013_data_rdy_trig_poll: ref;

axiom kxcjk1013_data_rdy_trig_poll == $sub.ref(0, 201057);

procedure kxcjk1013_data_rdy_trig_poll($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation kxcjk1013_data_rdy_trig_poll($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "kxcjk1013_data_rdy_trig_poll:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p3 := iio_priv($p2);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i5 := iio_get_time_ns();
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(213, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i20 := 2;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} iio_trigger_poll($p16);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} iio_trigger_poll($p11);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kxcjk1013_event_handler: ref;

axiom kxcjk1013_event_handler == $sub.ref(0, 202089);

procedure kxcjk1013_event_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_event_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "kxcjk1013_event_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p3 := iio_priv($p2);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i7 := i2c_smbus_read_byte_data($p6, 22);
    call {:si_unique_call 165} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i7, 2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(213, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i61 := i2c_smbus_read_byte_data($p60, 26);
    call {:si_unique_call 177} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb33:
    assume $i62 == 1;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} dev_err.ref.ref($p65, .str.3);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i58 == 1;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i16 := i2c_smbus_read_byte_data($p15, 23);
    call {:si_unique_call 168} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i16);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 32);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i16);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 16);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i16);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 8);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i16);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 4);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i16);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 2);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i16, 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_26 := iio_push_event($p2, 284786396495872, $i54);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_25 := iio_push_event($p2, 566261373206528, $i49);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_24 := iio_push_event($p2, 283686884868096, $i43);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_23 := iio_push_event($p2, 565161861578752, $i37);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_22 := iio_push_event($p2, 282587373240320, $i31);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_21 := iio_push_event($p2, 564062349950976, $i25);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} dev_err.ref.ref($p20, .str.2);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} dev_err.ref.ref($p11, .str.1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_devm_request_threaded_irq_8: ref;

axiom ldv_devm_request_threaded_irq_8 == $sub.ref(0, 203121);

procedure ldv_devm_request_threaded_irq_8($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.11, $M.17, $M.18, $M.15, $M.21, $M.22, $M.19, $M.25, $M.26, $M.23;



implementation ldv_devm_request_threaded_irq_8($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "ldv_devm_request_threaded_irq_8:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 180} {:cexpr "ldv_devm_request_threaded_irq_8:arg:ldv_func_arg5"} boogie_si_record_i64($i4);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i7 := devm_request_threaded_irq($p0, $i1, $p2, $p3, $i4, $p5, $p6);
    call {:si_unique_call 182} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i8 := reg_check_2($p2, $p3);
    call {:si_unique_call 184} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i7, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} activate_suitable_irq_2($p0, $i1, $p6);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const devm_iio_trigger_alloc: ref;

axiom devm_iio_trigger_alloc == $sub.ref(0, 204153);

procedure devm_iio_trigger_alloc.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_iio_trigger_alloc.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p2 := external_alloc();
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const iio_trigger_set_drvdata: ref;

axiom iio_trigger_set_drvdata == $sub.ref(0, 205185);

procedure iio_trigger_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation iio_trigger_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} dev_set_drvdata($p2, $p1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    return;
}



const iio_trigger_get: ref;

axiom iio_trigger_get == $sub.ref(0, 206217);

procedure iio_trigger_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation iio_trigger_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_27 := get_device($p1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} ldv___module_get_7($p6);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const iio_trigger_register: ref;

axiom iio_trigger_register == $sub.ref(0, 207249);

procedure iio_trigger_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_trigger_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 1} true;
    call {:si_unique_call 190} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iio_pollfunc_store_time: ref;

axiom iio_pollfunc_store_time == $sub.ref(0, 208281);

procedure iio_pollfunc_store_time($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_pollfunc_store_time($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 192} {:cexpr "iio_pollfunc_store_time:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_trigger_handler: ref;

axiom kxcjk1013_trigger_handler == $sub.ref(0, 209313);

procedure kxcjk1013_trigger_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_trigger_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i18: i32;
  var $i19: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "kxcjk1013_trigger_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.8, $p3);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p5 := iio_priv($p4);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} mutex_lock_nested($p7, 0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1656, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1648, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i13 := find_first_bit($p9, $i12);
    call {:si_unique_call 199} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 200} {:cexpr "bit"} boogie_si_record_i32($i14);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1648, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i14, $i16);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} mutex_unlock($p39);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(184, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_28 := iio_push_to_buffers_with_timestamp($p4, $p41, $i43);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1672, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} iio_trigger_notify_done($p46);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i18, $i19 := 0, $i14;
    goto $bb4;

  $bb4:
    call $i20, $i21, $i23, $i24, $i25, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i18, $i19 := kxcjk1013_trigger_handler_loop_$bb4($p4, $p6, $p15, $i20, $i21, $i23, $i24, $i25, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i18, $i19);
    goto $bb4_last;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i20 := kxcjk1013_get_acc_reg($p6, $i19);
    call {:si_unique_call 202} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i18, 1);
    call {:si_unique_call 205} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i20);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i18);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(184, 1)), $mul.ref($i25, 2));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i24);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1656, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(1648, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i19, 1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i35 := find_next_bit($p29, $i32, $i34);
    call {:si_unique_call 207} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 208} {:cexpr "bit"} boogie_si_record_i32($i36);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p15);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i38 := $ult.i32($i36, $i37);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i18, $i19 := $i23, $i36;
    goto $bb10_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} mutex_unlock($p22);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_858;
}



const ldv_iio_triggered_buffer_setup_9: ref;

axiom ldv_iio_triggered_buffer_setup_9 == $sub.ref(0, 210345);

procedure ldv_iio_triggered_buffer_setup_9($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.0, $CurrAddr;



implementation ldv_iio_triggered_buffer_setup_9($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i4 := iio_triggered_buffer_setup($p0, $p1, $p2, $p3);
    call {:si_unique_call 212} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 213} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} ldv_iio_buffer_setup_ops_9();
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const iio_device_register: ref;

axiom iio_device_register == $sub.ref(0, 211377);

procedure iio_device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_set_active: ref;

axiom pm_runtime_set_active == $sub.ref(0, 212409);

procedure pm_runtime_set_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_set_active($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i1 := __pm_runtime_set_status($p0, 0);
    call {:si_unique_call 218} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_enable: ref;

axiom pm_runtime_enable == $sub.ref(0, 213441);

procedure pm_runtime_enable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 214473);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_use_autosuspend: ref;

axiom pm_runtime_use_autosuspend == $sub.ref(0, 215505);

procedure pm_runtime_use_autosuspend($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_use_autosuspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __pm_runtime_use_autosuspend($p0, 1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iio_triggered_buffer_cleanup_10: ref;

axiom ldv_iio_triggered_buffer_cleanup_10 == $sub.ref(0, 216537);

procedure ldv_iio_triggered_buffer_cleanup_10($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_iio_triggered_buffer_cleanup_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} iio_triggered_buffer_cleanup($p0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 222} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    return;
}



const __pm_runtime_use_autosuspend: ref;

axiom __pm_runtime_use_autosuspend == $sub.ref(0, 217569);

procedure __pm_runtime_use_autosuspend($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_use_autosuspend($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "__pm_runtime_use_autosuspend:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    return;
}



const iio_triggered_buffer_setup: ref;

axiom iio_triggered_buffer_setup == $sub.ref(0, 218601);

procedure iio_triggered_buffer_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_triggered_buffer_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 225} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_iio_buffer_setup_ops_9: ref;

axiom ldv_iio_buffer_setup_ops_9 == $sub.ref(0, 219633);

procedure ldv_iio_buffer_setup_ops_9();
  free requires assertsPassed;
  modifies $M.9, $M.0, $CurrAddr;



implementation ldv_iio_buffer_setup_ops_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p0 := ldv_init_zalloc(2352);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 220665);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p1 := calloc(1, $i0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} __VERIFIER_assume($i4);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 221697);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_get_acc_reg: ref;

axiom kxcjk1013_get_acc_reg == $sub.ref(0, 222729);

procedure kxcjk1013_get_acc_reg($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_get_acc_reg($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "kxcjk1013_get_acc_reg:arg:axis"} boogie_si_record_i32($i1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 2);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 234} {:cexpr "reg"} boogie_si_record_i8($i6);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i6);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i11 := i2c_smbus_read_word_data($p8, $i10);
    call {:si_unique_call 236} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i1, 120);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} dev_err.ref.ref.i32($p15, .str, $i16);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 223761);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 239} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 241} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iio_push_to_buffers_with_timestamp: ref;

axiom iio_push_to_buffers_with_timestamp == $sub.ref(0, 224793);

procedure iio_push_to_buffers_with_timestamp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation iio_push_to_buffers_with_timestamp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "iio_push_to_buffers_with_timestamp:arg:timestamp"} boogie_si_record_i64($i2);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1664, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i13 := iio_push_to_buffers($p0, $p1);
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1472, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i64($i8, 8);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i9, 1);
    call {:si_unique_call 243} {:cexpr "ts_offset"} boogie_si_record_i64($i10);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($i10, 8));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i2);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iio_trigger_notify_done: ref;

axiom iio_trigger_notify_done == $sub.ref(0, 225825);

procedure iio_trigger_notify_done($p0: ref);
  free requires assertsPassed;



implementation iio_trigger_notify_done($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    return;
}



const iio_push_to_buffers: ref;

axiom iio_push_to_buffers == $sub.ref(0, 226857);

procedure iio_push_to_buffers($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_push_to_buffers($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 246} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2c_smbus_read_word_data: ref;

axiom i2c_smbus_read_word_data == $sub.ref(0, 227889);

procedure i2c_smbus_read_word_data($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_word_data($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} {:cexpr "i2c_smbus_read_word_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 228921);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p1 := external_alloc();
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv___module_get_7: ref;

axiom ldv___module_get_7 == $sub.ref(0, 229953);

procedure ldv___module_get_7($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv___module_get_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} ldv_module_get($p0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_get: ref;

axiom ldv_module_get == $sub.ref(0, 230985);

procedure ldv_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.10 := $i4;
    call {:si_unique_call 253} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 232017);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 233049);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 234081);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 257} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const reg_check_2: ref;

axiom reg_check_2 == $sub.ref(0, 235113);

procedure reg_check_2($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_2($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $p2i.ref.i64(kxcjk1013_data_rdy_trig_poll));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $p2i.ref.i64(kxcjk1013_event_handler));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;
}



const activate_suitable_irq_2: ref;

axiom activate_suitable_irq_2 == $sub.ref(0, 236145);

procedure activate_suitable_irq_2($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.11, $M.17, $M.18, $M.15, $M.21, $M.22, $M.19, $M.25, $M.26, $M.23;



implementation activate_suitable_irq_2($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} {:cexpr "activate_suitable_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $M.15;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.19;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.23;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.25 := $i1;
    call {:si_unique_call 267} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.26 := $p2;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 268} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.21 := $i1;
    call {:si_unique_call 265} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.22 := $p2;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 266} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.17 := $i1;
    call {:si_unique_call 263} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.18 := $p2;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 264} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.13 := $i1;
    call {:si_unique_call 261} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.14 := $p2;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 262} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iio_push_event: ref;

axiom iio_push_event == $sub.ref(0, 237177);

procedure iio_push_event($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation iio_push_event($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} {:cexpr "iio_push_event:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 270} {:cexpr "iio_push_event:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 271} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 272} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iio_get_time_ns: ref;

axiom iio_get_time_ns == $sub.ref(0, 238209);

procedure iio_get_time_ns() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.27, $M.28, $CurrAddr, $M.0;



implementation iio_get_time_ns() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i0 := ktime_get_real_ns();
    call {:si_unique_call 274} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const iio_trigger_poll: ref;

axiom iio_trigger_poll == $sub.ref(0, 239241);

procedure iio_trigger_poll($p0: ref);
  free requires assertsPassed;



implementation iio_trigger_poll($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get_real_ns: ref;

axiom ktime_get_real_ns == $sub.ref(0, 240273);

procedure ktime_get_real_ns() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.27, $M.28, $CurrAddr, $M.0;



implementation ktime_get_real_ns() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i2 := ktime_get_real();
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p3, $i2);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.27;
    cmdloc_dummy_var_1 := $M.27;
    call {:si_unique_call 278} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p4, $p5, 8, $zext.i32.i64(8), 0 == 1);
    $M.27 := cmdloc_dummy_var_2;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.27, $p6);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ktime_get_real: ref;

axiom ktime_get_real == $sub.ref(0, 241305);

procedure ktime_get_real() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr;



implementation ktime_get_real() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i3 := ktime_get_with_offset(0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p4, $i3);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.28;
    cmdloc_dummy_var_4 := $M.28;
    call {:si_unique_call 283} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.28 := cmdloc_dummy_var_5;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.28;
    cmdloc_dummy_var_7 := $M.28;
    call {:si_unique_call 284} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.28 := cmdloc_dummy_var_8;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.28, $p9);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 242337);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ktime_get_with_offset: ref;

axiom ktime_get_with_offset == $sub.ref(0, 243369);

procedure ktime_get_with_offset($i0: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get_with_offset($i0: i32) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 286} {:cexpr "ktime_get_with_offset:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p2 := external_alloc();
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 288} __VERIFIER_assume($i5);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 289} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __devm_gpiod_get_index: ref;

axiom __devm_gpiod_get_index == $sub.ref(0, 244401);

procedure __devm_gpiod_get_index($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __devm_gpiod_get_index($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "__devm_gpiod_get_index:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 291} {:cexpr "__devm_gpiod_get_index:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p4 := external_alloc();
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 245433);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i1 := ldv_is_err($p0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 246465);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpiod_to_irq: ref;

axiom gpiod_to_irq == $sub.ref(0, 247497);

procedure gpiod_to_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_to_irq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 298} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const desc_to_gpio: ref;

axiom desc_to_gpio == $sub.ref(0, 248529);

procedure desc_to_gpio($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation desc_to_gpio($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 300} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 249561);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 250593);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 251625);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_set_range: ref;

axiom kxcjk1013_set_range == $sub.ref(0, 252657);

procedure kxcjk1013_set_range($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_set_range($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "kxcjk1013_set_range:arg:range_index"} boogie_si_record_i32($i1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i4 := i2c_smbus_read_byte_data($p3, 27);
    call {:si_unique_call 303} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i4, $sub.i32(0, 25));
    call {:si_unique_call 305} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref($i11, 4)), $mul.ref(2, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.29, $p13);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 3);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, $i10);
    call {:si_unique_call 306} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref($i18, 4)), $mul.ref(3, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.30, $p20);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 4);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, $i17);
    call {:si_unique_call 307} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i24);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i30 := i2c_smbus_write_byte_data($p26, 27, $i29);
    call {:si_unique_call 309} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i1);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(201, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} dev_err.ref.ref($p34, .str.5);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} dev_err.ref.ref($p8, .str.4);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const acpi_match_device: ref;

axiom acpi_match_device == $sub.ref(0, 253689);

procedure acpi_match_device($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_match_device($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p2 := external_alloc();
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 254721);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const dev_name: ref;

axiom dev_name == $sub.ref(0, 255753);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p9 := kobject_name($p8);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 256785);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const is_acpi_node: ref;

axiom is_acpi_node == $sub.ref(0, 257817);

procedure is_acpi_node($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_acpi_node($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;
}



const kxcjk1013_suspend: ref;

axiom kxcjk1013_suspend == $sub.ref(0, 258849);

procedure kxcjk1013_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1488));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p5 := iio_priv($p4);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} mutex_lock_nested($p7, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i8 := kxcjk1013_set_mode($p6, 0);
    call {:si_unique_call 317} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} mutex_unlock($p9);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const kxcjk1013_resume: ref;

axiom kxcjk1013_resume == $sub.ref(0, 259881);

procedure kxcjk1013_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1488));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p5 := iio_priv($p4);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} mutex_lock_nested($p7, 0);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i8 := kxcjk1013_set_mode($p6, 1);
    call {:si_unique_call 323} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} mutex_unlock($p9);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const kxcjk1013_runtime_suspend: ref;

axiom kxcjk1013_runtime_suspend == $sub.ref(0, 260913);

procedure kxcjk1013_runtime_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_runtime_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1488));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p5 := iio_priv($p4);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i7 := kxcjk1013_set_mode($p6, 0);
    call {:si_unique_call 328} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} dev_err.ref.ref($p11, .str.6);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 11);
    goto $bb3;
}



const kxcjk1013_runtime_resume: ref;

axiom kxcjk1013_runtime_resume == $sub.ref(0, 261945);

procedure kxcjk1013_runtime_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_runtime_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i32;
  var $i9: i32;
  var vslice_dummy_var_29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1488));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p5 := iio_priv($p4);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i7 := kxcjk1013_set_mode($p6, 1);
    call {:si_unique_call 333} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i10 := kxcjk1013_get_startup_times($p6);
    call {:si_unique_call 335} {:cexpr "sleep_val"} boogie_si_record_i32($i10);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 19999);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i10, 1000);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_29 := msleep_interruptible($i13);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} usleep_range($i12, 20000);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const kxcjk1013_get_startup_times: ref;

axiom kxcjk1013_get_startup_times == $sub.ref(0, 262977);

procedure kxcjk1013_get_startup_times($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_get_startup_times($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i64;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $i110: i64;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 338} {:cexpr "idx"} boogie_si_record_i32($i2);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i3, 96)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.31, $p6);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, $i10);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i20, 96)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.31, $p23);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, $i27);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i12 := 1;
    assume {:branchcond $i28} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i2);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i29, 96)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.31, $p32);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i33, $i36);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i12 := 2;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i2);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i38, 96)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.31, $p41);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i42, $i45);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i12 := 3;
    assume {:branchcond $i46} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i2);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i47, 96)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.31, $p50);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, $i54);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i12 := 4;
    assume {:branchcond $i55} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i2);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i56, 96)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.31, $p59);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i60, $i63);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i12 := 5;
    assume {:branchcond $i64} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i2);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i65, 96)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.31, $p68);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i69, $i72);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i12 := 6;
    assume {:branchcond $i73} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i2);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i74, 96)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.31, $p77);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i78, $i81);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i12 := 7;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i2);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i83, 96)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.31, $p86);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i87, $i90);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i12 := 8;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i2);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i92, 96)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.31, $p95);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i96, $i99);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i12 := 9;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i2);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i101, 96)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.31, $p104);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i105, $i108);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i12 := 10;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i2);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i110, 96)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.31, $p113);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i114, $i117);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i12 := 11;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := 100000;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref($i14, 96)), $mul.ref($i13, 8)), $mul.ref(4, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.32, $p17);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 264009);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 340} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    return;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 265041);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 342} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 343} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kxcjk1013_read_raw: ref;

axiom kxcjk1013_read_raw == $sub.ref(0, 266073);

procedure kxcjk1013_read_raw($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_read_raw($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i16: i32;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i20: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "kxcjk1013_read_raw:arg:mask"} boogie_si_record_i64($i4);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p5 := iio_priv($p0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i4, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i4, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} mutex_lock_nested($p40, 0);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i41 := kxcjk1013_get_odr($p6, $p2, $p3);
    call {:si_unique_call 348} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} mutex_unlock($p42);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i20 := $i41;
    goto $bb18;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(201, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref($i35, 4)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.33, $p37);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i39);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i20 := 2;
    goto $bb18;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} mutex_lock_nested($p12, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i13 := iio_buffer_enabled($p0);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 352} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i17 := kxcjk1013_set_power_state($p6, 1);
    call {:si_unique_call 354} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i23 := kxcjk1013_get_acc_reg($p6, $i22);
    call {:si_unique_call 358} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i27 := $ashr.i32($i23, 4);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i28 := sign_extend32($i27, 11);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i28);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i29 := kxcjk1013_set_power_state($p6, 0);
    call {:si_unique_call 363} {:cexpr "ret"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i16 := $i29;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} mutex_unlock($p30);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i16, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb18;

  $bb23:
    assume $i31 == 1;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb18;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_30 := kxcjk1013_set_power_state($p6, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} mutex_unlock($p26);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb18;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} mutex_unlock($p19);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb18;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb15;
}



const kxcjk1013_write_raw: ref;

axiom kxcjk1013_write_raw == $sub.ref(0, 267105);

procedure kxcjk1013_write_raw($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation kxcjk1013_write_raw($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i13: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "kxcjk1013_write_raw:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 365} {:cexpr "kxcjk1013_write_raw:arg:val2"} boogie_si_record_i32($i3);
    call {:si_unique_call 366} {:cexpr "kxcjk1013_write_raw:arg:mask"} boogie_si_record_i64($i4);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p5 := iio_priv($p0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64($i4, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i4, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} mutex_lock_nested($p10, 0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i11 := kxcjk1013_set_odr($p6, $i2, $i3);
    call {:si_unique_call 370} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} mutex_unlock($p12);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb9;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i2, 0);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} mutex_lock_nested($p16, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i17 := kxcjk1013_set_scale($p6, $i3);
    call {:si_unique_call 374} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} mutex_unlock($p18);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb9;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb12;
}



const kxcjk1013_read_event_config: ref;

axiom kxcjk1013_read_event_config == $sub.ref(0, 268137);

procedure kxcjk1013_read_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_read_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "kxcjk1013_read_event_config:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 377} {:cexpr "kxcjk1013_read_event_config:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p4 := iio_priv($p0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const kxcjk1013_write_event_config: ref;

axiom kxcjk1013_write_event_config == $sub.ref(0, 269169);

procedure kxcjk1013_write_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $CurrAddr;



implementation kxcjk1013_write_event_config($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i11: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "kxcjk1013_write_event_config:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 380} {:cexpr "kxcjk1013_write_event_config:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 381} {:cexpr "kxcjk1013_write_event_config:arg:state"} boogie_si_record_i32($i4);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p5 := iio_priv($p0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i4, 0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} mutex_lock_nested($p12, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i4, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i20 := kxcjk1013_set_power_state($p6, $i19);
    call {:si_unique_call 386} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i24 := kxcjk1013_setup_any_motion_interrupt($p6, $i23);
    call {:si_unique_call 389} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i4);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} mutex_unlock($p30);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_31 := kxcjk1013_set_power_state($p6, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} mutex_unlock($p28);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb6;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} mutex_unlock($p22);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb6;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} mutex_unlock($p18);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;
}



const kxcjk1013_read_event: ref;

axiom kxcjk1013_read_event == $sub.ref(0, 270201);

procedure kxcjk1013_read_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_read_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "kxcjk1013_read_event:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 394} {:cexpr "kxcjk1013_read_event:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 395} {:cexpr "kxcjk1013_read_event:arg:info"} boogie_si_record_i32($i4);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p7 := iio_priv($p0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i15);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb11;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i13);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const kxcjk1013_write_event: ref;

axiom kxcjk1013_write_event == $sub.ref(0, 271233);

procedure kxcjk1013_write_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_write_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "kxcjk1013_write_event:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 398} {:cexpr "kxcjk1013_write_event:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 399} {:cexpr "kxcjk1013_write_event:arg:info"} boogie_si_record_i32($i4);
    call {:si_unique_call 400} {:cexpr "kxcjk1013_write_event:arg:val"} boogie_si_record_i32($i5);
    call {:si_unique_call 401} {:cexpr "kxcjk1013_write_event:arg:val2"} boogie_si_record_i32($i6);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p7 := iio_priv($p0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i5);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i5);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const kxcjk1013_set_power_state: ref;

axiom kxcjk1013_set_power_state == $sub.ref(0, 272265);

procedure kxcjk1013_set_power_state($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_set_power_state($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i8: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 403} {:cexpr "kxcjk1013_set_power_state:arg:on"} boogie_si_record_i1($i1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} pm_runtime_mark_last_busy($p11);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i15 := pm_runtime_put_autosuspend($p14);
    call {:si_unique_call 408} {:cexpr "ret"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i2);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} dev_err.ref.ref.i32($p19, .str.7, $i21);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i2);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $i8;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} pm_runtime_put_noidle($p25);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i7 := pm_runtime_get_sync($p6);
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const kxcjk1013_setup_any_motion_interrupt: ref;

axiom kxcjk1013_setup_any_motion_interrupt == $sub.ref(0, 273297);

procedure kxcjk1013_setup_any_motion_interrupt($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr;



implementation kxcjk1013_setup_any_motion_interrupt($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $i42: i32;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 412} {:cexpr "kxcjk1013_setup_any_motion_interrupt:arg:status"} boogie_si_record_i1($i1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i4 := kxcjk1013_get_mode($p0, $p2);
    call {:si_unique_call 414} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i7 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 416} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i9 := kxcjk1013_chip_update_thresholds($p0);
    call {:si_unique_call 418} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i13 := i2c_smbus_read_byte_data($p12, 30);
    call {:si_unique_call 420} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i3);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i13, $sub.i32(0, 33));
    call {:si_unique_call 423} {:cexpr "ret"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i20);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i27 := i2c_smbus_write_byte_data($p23, 30, $i26);
    call {:si_unique_call 425} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i34 := i2c_smbus_read_byte_data($p33, 27);
    call {:si_unique_call 428} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i3);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i34, $sub.i32(0, 3));
    call {:si_unique_call 431} {:cexpr "ret"} boogie_si_record_i32($i42);
    assume {:verifier.code 0} true;
    $i41 := $i42;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i41);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i48 := i2c_smbus_write_byte_data($p44, 27, $i47);
    call {:si_unique_call 433} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.34, $p2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i55 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 436} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i56 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i6 := $i55;
    goto $bb3;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} dev_err.ref.ref($p52, .str.5);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i6 := $i48;
    goto $bb3;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i34, 2);
    call {:si_unique_call 430} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb25;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} dev_err.ref.ref($p38, .str.4);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i6 := $i34;
    goto $bb3;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} dev_err.ref.ref($p31, .str.9);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i13, 32);
    call {:si_unique_call 422} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb16;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} dev_err.ref.ref($p17, .str.8);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const kxcjk1013_get_mode: ref;

axiom kxcjk1013_get_mode == $sub.ref(0, 274329);

procedure kxcjk1013_get_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34;



implementation kxcjk1013_get_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i4 := i2c_smbus_read_byte_data($p3, 27);
    call {:si_unique_call 438} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i4);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 128);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p1, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p1, 1);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} dev_err.ref.ref($p8, .str.4);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb3;
}



const kxcjk1013_chip_update_thresholds: ref;

axiom kxcjk1013_chip_update_thresholds == $sub.ref(0, 275361);

procedure kxcjk1013_chip_update_thresholds($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_chip_update_thresholds($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i8 := i2c_smbus_write_byte_data($p2, 41, $i7);
    call {:si_unique_call 441} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(204, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i21 := i2c_smbus_write_byte_data($p15, 106, $i20);
    call {:si_unique_call 444} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} dev_err.ref.ref($p25, .str.11);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i13 := $i21;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} dev_err.ref.ref($p12, .str.10);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i13 := $i8;
    goto $bb3;
}



const pm_runtime_get_sync: ref;

axiom pm_runtime_get_sync == $sub.ref(0, 276393);

procedure pm_runtime_get_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_get_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i1 := __pm_runtime_resume($p0, 4);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 277425);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(560, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put_autosuspend: ref;

axiom pm_runtime_put_autosuspend == $sub.ref(0, 278457);

procedure pm_runtime_put_autosuspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put_autosuspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i1 := __pm_runtime_suspend($p0, 13);
    call {:si_unique_call 449} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_suspend: ref;

axiom __pm_runtime_suspend == $sub.ref(0, 279489);

procedure __pm_runtime_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} {:cexpr "__pm_runtime_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pm_runtime_resume: ref;

axiom __pm_runtime_resume == $sub.ref(0, 280521);

procedure __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} {:cexpr "__pm_runtime_resume:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 454} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kxcjk1013_set_odr: ref;

axiom kxcjk1013_set_odr == $sub.ref(0, 281553);

procedure kxcjk1013_set_odr($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation kxcjk1013_set_odr($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 457} {:cexpr "kxcjk1013_set_odr:arg:val"} boogie_si_record_i32($i1);
    call {:si_unique_call 458} {:cexpr "kxcjk1013_set_odr:arg:val2"} boogie_si_record_i32($i2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i4 := kxcjk1013_get_mode($p0, $p3);
    call {:si_unique_call 460} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i7 := kxcjk1013_convert_freq_to_bit($i1, $i2);
    call {:si_unique_call 462} {:cexpr "odr_bits"} boogie_si_record_i32($i7);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i9 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 464} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i7);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i16 := i2c_smbus_write_byte_data($p12, 33, $i15);
    call {:si_unique_call 466} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i7);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i23 := kxcjk1013_convert_wake_odr_to_bit($i1, $i2);
    call {:si_unique_call 469} {:cexpr "odr_bits"} boogie_si_record_i32($i23);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i23);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i30 := i2c_smbus_write_byte_data($p26, 29, $i29);
    call {:si_unique_call 471} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.34, $p3);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i37 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 474} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i6 := $i37;
    goto $bb3;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} dev_err.ref.ref($p34, .str.13);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i6 := $i30;
    goto $bb3;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} dev_err.ref.ref($p20, .str.12);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const kxcjk1013_set_scale: ref;

axiom kxcjk1013_set_scale == $sub.ref(0, 282585);

procedure kxcjk1013_set_scale($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation kxcjk1013_set_scale($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i7: i32;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 476} {:cexpr "kxcjk1013_set_scale:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(9582, $i1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(19163, $i1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i16} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32(38326, $i1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i17} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i5 := kxcjk1013_get_mode($p0, $p2);
    call {:si_unique_call 478} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i8 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 480} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i10 := kxcjk1013_set_range($p0, $i4);
    call {:si_unique_call 482} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.34, $p2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i14 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 484} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i15 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb8;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb8;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb8;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb8;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const kxcjk1013_convert_freq_to_bit: ref;

axiom kxcjk1013_convert_freq_to_bit == $sub.ref(0, 283617);

procedure kxcjk1013_convert_freq_to_bit($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_convert_freq_to_bit($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} {:cexpr "kxcjk1013_convert_freq_to_bit:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 486} {:cexpr "kxcjk1013_convert_freq_to_bit:arg:val2"} boogie_si_record_i32($i1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $i0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(1, $i0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32(3, $i0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32(6, $i0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(12, $i0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32(25, $i0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32(50, $i0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32(100, $i0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(200, $i0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32(400, $i0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32(800, $i0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32(1600, $i0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb83:
    assume $i30 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32(0, $i1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume {:branchcond $i31} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb85;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref($i5, 12)), $mul.ref(8, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.35, $p7);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb9;

  $bb76:
    assume $i28 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32(0, $i1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume {:branchcond $i29} true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb78;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb7;

  $bb69:
    assume $i26 == 1;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(0, $i1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume {:branchcond $i27} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb71;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb7;

  $bb62:
    assume $i24 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32(0, $i1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb64;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb7;

  $bb55:
    assume $i22 == 1;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32(0, $i1);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume {:branchcond $i23} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb57;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb7;

  $bb48:
    assume $i20 == 1;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32(0, $i1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb7;

  $bb41:
    assume $i18 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(0, $i1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb43;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb7;

  $bb34:
    assume $i16 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32(500000, $i1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i17} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb7;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32(250000, $i1);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume {:branchcond $i15} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb20:
    assume $i12 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(125000, $i1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb7;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(563000, $i1);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i11} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb7;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(781000, $i1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb7;
}



const kxcjk1013_convert_wake_odr_to_bit: ref;

axiom kxcjk1013_convert_wake_odr_to_bit == $sub.ref(0, 284649);

procedure kxcjk1013_convert_wake_odr_to_bit($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_convert_wake_odr_to_bit($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} {:cexpr "kxcjk1013_convert_wake_odr_to_bit:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 488} {:cexpr "kxcjk1013_convert_wake_odr_to_bit:arg:val2"} boogie_si_record_i32($i1);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $i0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(1, $i0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32(3, $i0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32(6, $i0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(12, $i0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32(25, $i0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32(50, $i0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32(100, $i0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(200, $i0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32(400, $i0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32(800, $i0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32(1600, $i0);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb83:
    assume $i30 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32(0, $i1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume {:branchcond $i31} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb85;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref($i5, 12)), $mul.ref(8, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.36, $p7);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb9;

  $bb76:
    assume $i28 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32(0, $i1);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume {:branchcond $i29} true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb78;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb7;

  $bb69:
    assume $i26 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(0, $i1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume {:branchcond $i27} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb71;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb7;

  $bb62:
    assume $i24 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32(0, $i1);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb64;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb7;

  $bb55:
    assume $i22 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32(0, $i1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume {:branchcond $i23} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb57;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb7;

  $bb48:
    assume $i20 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32(0, $i1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb7;

  $bb41:
    assume $i18 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(0, $i1);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb43;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb7;

  $bb34:
    assume $i16 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32(500000, $i1);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i17} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb7;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32(250000, $i1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume {:branchcond $i15} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb20:
    assume $i12 == 1;
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(125000, $i1);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb7;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(563000, $i1);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i11} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb7;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(781000, $i1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb7;
}



const iio_buffer_enabled: ref;

axiom iio_buffer_enabled == $sub.ref(0, 285681);

procedure iio_buffer_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation iio_buffer_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(8, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 14);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sign_extend32: ref;

axiom sign_extend32 == $sub.ref(0, 286713);

procedure sign_extend32($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sign_extend32($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} {:cexpr "sign_extend32:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 490} {:cexpr "sign_extend32:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(31, $i3);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 491} {:cexpr "shift"} boogie_si_record_i8($i5);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i0, $i6);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i5);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i7, $i8);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const kxcjk1013_get_odr: ref;

axiom kxcjk1013_get_odr == $sub.ref(0, 287745);

procedure kxcjk1013_get_odr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_get_odr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(8, $i5);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32(9, $i19);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(10, $i23);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32(11, $i27);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume {:branchcond $i28} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32(0, $i31);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume {:branchcond $i32} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32(1, $i35);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume {:branchcond $i36} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32(2, $i39);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume {:branchcond $i40} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32(3, $i43);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume {:branchcond $i44} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32(4, $i47);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i7 := 8;
    assume {:branchcond $i48} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32(5, $i51);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i7 := 9;
    assume {:branchcond $i52} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32(6, $i55);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i7 := 10;
    assume {:branchcond $i56} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32(7, $i59);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i7 := 11;
    assume {:branchcond $i60} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref($i8, 12)), $mul.ref(0, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.37, $p10);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i11);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref($i12, 12)), $mul.ref(4, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.38, $p14);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i15);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb6;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const iio_read_const_attr: ref;

axiom iio_read_const_attr == $sub.ref(0, 288777);

procedure iio_read_const_attr($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation iio_read_const_attr($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 492} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 493} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kxcjk1013_data_rdy_trigger_set_state: ref;

axiom kxcjk1013_data_rdy_trigger_set_state == $sub.ref(0, 289809);

procedure kxcjk1013_data_rdy_trigger_set_state($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $CurrAddr;



implementation kxcjk1013_data_rdy_trigger_set_state($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i30: i1;
  var $i31: i32;
  var $i29: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $i17: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 494} {:cexpr "kxcjk1013_data_rdy_trigger_set_state:arg:state"} boogie_si_record_i1($i1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p3 := iio_trigger_get_drvdata($p0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p5 := iio_priv($p4);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} mutex_lock_nested($p7, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i2);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i2);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i19 := kxcjk1013_set_power_state($p6, $i18);
    call {:si_unique_call 500} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i24, $i25);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i31 := kxcjk1013_setup_new_data_interrupt($p6, $i30);
    call {:si_unique_call 505} {:cexpr "ret"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    $i29 := $i31;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i29, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i37, $i38);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i2);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(213, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i43);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i45);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} mutex_unlock($p46);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i2);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i40);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i42);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_32 := kxcjk1013_set_power_state($p6, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} mutex_unlock($p34);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i17 := $i29;
    goto $bb8;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i2);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i28 := kxcjk1013_setup_any_motion_interrupt($p6, $i27);
    call {:si_unique_call 503} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} mutex_unlock($p21);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb8;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb2;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} mutex_unlock($p16);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const kxcjk1013_trig_try_reen: ref;

axiom kxcjk1013_trig_try_reen == $sub.ref(0, 290841);

procedure kxcjk1013_trig_try_reen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_trig_try_reen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p1 := iio_trigger_get_drvdata($p0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p3 := iio_priv($p2);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i7 := i2c_smbus_read_byte_data($p6, 26);
    call {:si_unique_call 512} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} dev_err.ref.ref($p11, .str.3);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb3;
}



const iio_trigger_get_drvdata: ref;

axiom iio_trigger_get_drvdata == $sub.ref(0, 291873);

procedure iio_trigger_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iio_trigger_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kxcjk1013_setup_new_data_interrupt: ref;

axiom kxcjk1013_setup_new_data_interrupt == $sub.ref(0, 292905);

procedure kxcjk1013_setup_new_data_interrupt($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr;



implementation kxcjk1013_setup_new_data_interrupt($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i32;
  var $i40: i32;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 516} {:cexpr "kxcjk1013_setup_new_data_interrupt:arg:status"} boogie_si_record_i1($i1);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i4 := kxcjk1013_get_mode($p0, $p2);
    call {:si_unique_call 518} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i7 := kxcjk1013_set_mode($p0, 0);
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i11 := i2c_smbus_read_byte_data($p10, 30);
    call {:si_unique_call 522} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i3);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i11, $sub.i32(0, 33));
    call {:si_unique_call 525} {:cexpr "ret"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i18);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i25 := i2c_smbus_write_byte_data($p21, 30, $i24);
    call {:si_unique_call 527} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i32 := i2c_smbus_read_byte_data($p31, 27);
    call {:si_unique_call 530} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i3);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i32, $sub.i32(0, 33));
    call {:si_unique_call 533} {:cexpr "ret"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i39);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i46 := i2c_smbus_write_byte_data($p42, 27, $i45);
    call {:si_unique_call 535} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.34, $p2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i53 := kxcjk1013_set_mode($p0, 1);
    call {:si_unique_call 538} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i54 == 1;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i6 := $i53;
    goto $bb3;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} dev_err.ref.ref($p50, .str.5);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i6 := $i46;
    goto $bb3;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i32, 32);
    call {:si_unique_call 532} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb22;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} dev_err.ref.ref($p36, .str.4);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i6 := $i32;
    goto $bb3;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} dev_err.ref.ref($p29, .str.9);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i11, 32);
    call {:si_unique_call 524} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} dev_err.ref.ref($p15, .str.8);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const kxcjk1013_buffer_preenable: ref;

axiom kxcjk1013_buffer_preenable == $sub.ref(0, 293937);

procedure kxcjk1013_buffer_preenable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_buffer_preenable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p1 := iio_priv($p0);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i3 := kxcjk1013_set_power_state($p2, 1);
    call {:si_unique_call 541} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iio_triggered_buffer_postenable: ref;

axiom iio_triggered_buffer_postenable == $sub.ref(0, 294969);

procedure iio_triggered_buffer_postenable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_triggered_buffer_postenable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 542} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iio_triggered_buffer_predisable: ref;

axiom iio_triggered_buffer_predisable == $sub.ref(0, 296001);

procedure iio_triggered_buffer_predisable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iio_triggered_buffer_predisable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 545} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kxcjk1013_buffer_postdisable: ref;

axiom kxcjk1013_buffer_postdisable == $sub.ref(0, 297033);

procedure kxcjk1013_buffer_postdisable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kxcjk1013_buffer_postdisable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p1 := iio_priv($p0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i3 := kxcjk1013_set_power_state($p2, 0);
    call {:si_unique_call 548} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 298065);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 550} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.39;
    call {:si_unique_call 551} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.39 := cmdloc_dummy_var_13;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 299097);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_irq_3: ref;

axiom ldv_irq_3 == $sub.ref(0, 300129);

procedure ldv_irq_3($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_irq_3($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i1;
  var $i12: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 552} {:cexpr "ldv_irq_3:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 553} {:cexpr "ldv_irq_3:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 554} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 555} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 556} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i12 := $i0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, 2);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_33 := kxcjk1013_trigger_handler($i1, $u0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb16;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i9 := iio_pollfunc_store_time($i1, $u0);
    call {:si_unique_call 562} {:cexpr "irq_retval"} boogie_si_record_i32($i9);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb16;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 301161);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.11, $M.0, $M.27, $M.28, $CurrAddr;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 565} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 566} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 567} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv_stop();
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i18 := $M.23;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i19 := $M.25;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p20 := $M.26;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $M.11 := $i21;
    call {:si_unique_call 571} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i14 := $M.19;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i15 := $M.21;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p16 := $M.22;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $M.11 := $i17;
    call {:si_unique_call 569} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i10 := $M.15;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i11 := $M.17;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p12 := $M.18;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.11 := $i13;
    call {:si_unique_call 573} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i7 := $M.13;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p8 := $M.14;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.11 := $i9;
    call {:si_unique_call 575} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 302193);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i1;
  var $i15: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 578} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 581} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i15 := $i0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 584} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} ldv_stop();
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i0, 2);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i16 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_34 := kxcjk1013_event_handler($i1, $p2);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i15 := $i0;
    goto $bb19;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i10 := kxcjk1013_data_rdy_trig_poll($i1, $p2);
    call {:si_unique_call 587} {:cexpr "irq_retval"} boogie_si_record_i32($i10);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb19;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb18;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i12 := 2;
    goto $bb15;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 303225);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_i2c_driver_5: ref;

axiom ldv_initialize_i2c_driver_5 == $sub.ref(0, 304257);

procedure ldv_initialize_i2c_driver_5();
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr;



implementation ldv_initialize_i2c_driver_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p0 := ldv_init_zalloc(1480);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    return;
}



const ldv_irq_4: ref;

axiom ldv_irq_4 == $sub.ref(0, 305289);

procedure ldv_irq_4($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_irq_4($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i1;
  var $i12: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 592} {:cexpr "ldv_irq_4:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 593} {:cexpr "ldv_irq_4:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 594} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 596} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i12 := $i0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 598} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, 2);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_35 := kxcjk1013_trigger_handler($i1, $u0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb16;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i9 := iio_pollfunc_store_time($i1, $u0);
    call {:si_unique_call 602} {:cexpr "irq_retval"} boogie_si_record_i32($i9);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb16;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;
}



const choose_interrupt_4: ref;

axiom choose_interrupt_4 == $sub.ref(0, 306321);

procedure choose_interrupt_4();
  free requires assertsPassed;
  modifies $M.0, $M.42;



implementation choose_interrupt_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i15 := $M.46;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i16 := $M.43;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i17 := ldv_irq_4($i15, $i16);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.42 := $i17;
    call {:si_unique_call 611} {:cexpr "ldv_irq_4_0"} boogie_si_record_i32($i17);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i12 := $M.45;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i13 := $M.43;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i14 := ldv_irq_4($i12, $i13);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.42 := $i14;
    call {:si_unique_call 609} {:cexpr "ldv_irq_4_0"} boogie_si_record_i32($i14);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i9 := $M.44;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i10 := $M.43;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i11 := ldv_irq_4($i9, $i10);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.42 := $i11;
    call {:si_unique_call 613} {:cexpr "ldv_irq_4_0"} boogie_si_record_i32($i11);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i6 := $M.42;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i7 := $M.43;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i8 := ldv_irq_4($i6, $i7);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.42 := $i8;
    call {:si_unique_call 615} {:cexpr "ldv_irq_4_0"} boogie_si_record_i32($i8);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_initialize_iio_trigger_ops_7: ref;

axiom ldv_initialize_iio_trigger_ops_7 == $sub.ref(0, 307353);

procedure ldv_initialize_iio_trigger_ops_7();
  free requires assertsPassed;
  modifies $M.47, $M.0, $CurrAddr;



implementation ldv_initialize_iio_trigger_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p0 := ldv_init_zalloc(1904);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 308385);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.48, $M.0, $M.27, $M.28, $CurrAddr;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv_stop();
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i18 := $M.57;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i19 := $M.58;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p20 := $M.59;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.48 := $i21;
    call {:si_unique_call 623} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i14 := $M.54;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i15 := $M.55;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p16 := $M.56;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.48 := $i17;
    call {:si_unique_call 621} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i10 := $M.51;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i11 := $M.52;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p12 := $M.53;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.48 := $i13;
    call {:si_unique_call 625} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i6 := $M.48;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i7 := $M.49;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p8 := $M.50;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.48 := $i9;
    call {:si_unique_call 627} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 309417);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i1;
  var $i15: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 630} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i15 := $i0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 636} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} ldv_stop();
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i0, 2);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i16 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_36 := kxcjk1013_event_handler($i1, $p2);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i15 := $i0;
    goto $bb19;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i10 := kxcjk1013_data_rdy_trig_poll($i1, $p2);
    call {:si_unique_call 639} {:cexpr "irq_retval"} boogie_si_record_i32($i10);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 2);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb19;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb18;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i12 := 2;
    goto $bb15;
}



const ldv_dev_pm_ops_6: ref;

axiom ldv_dev_pm_ops_6 == $sub.ref(0, 310449);

procedure ldv_dev_pm_ops_6();
  free requires assertsPassed;
  modifies $M.60, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.60 := $p0;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_iio_info_8: ref;

axiom ldv_initialize_iio_info_8 == $sub.ref(0, 311481);

procedure ldv_initialize_iio_info_8();
  free requires assertsPassed;
  modifies $M.61, $M.62, $M.0, $CurrAddr;



implementation ldv_initialize_iio_info_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p0 := ldv_init_zalloc(2352);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.61 := $p0;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p2 := ldv_init_zalloc(120);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.62 := $p2;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_3: ref;

axiom choose_interrupt_3 == $sub.ref(0, 312513);

procedure choose_interrupt_3();
  free requires assertsPassed;
  modifies $M.0, $M.63;



implementation choose_interrupt_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 646} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 648} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i15 := $M.67;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i16 := $M.64;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i17 := ldv_irq_3($i15, $i16);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.63 := $i17;
    call {:si_unique_call 652} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i17);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i12 := $M.66;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i13 := $M.64;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i14 := ldv_irq_3($i12, $i13);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $M.63 := $i14;
    call {:si_unique_call 650} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i14);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i9 := $M.65;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i10 := $M.64;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i11 := ldv_irq_3($i9, $i10);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $M.63 := $i11;
    call {:si_unique_call 654} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i11);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i6 := $M.63;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i7 := $M.64;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i8 := ldv_irq_3($i6, $i7);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.63 := $i8;
    call {:si_unique_call 656} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i8);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const main: ref;

axiom main == $sub.ref(0, 313545);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.68, $M.69, $M.70, $M.71, $M.1, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.0, $M.63, $M.101, $M.11, $M.48, $M.42, $M.102, $M.41, $M.47, $M.60, $M.61, $M.62, $M.103, $M.65, $M.66, $M.45, $M.19, $M.15, $M.57, $M.54, $M.51, $M.46, $M.23, $M.67, $M.44, $M.13, $M.14, $M.17, $M.18, $M.21, $M.22, $M.25, $M.26, $M.43, $M.9, $M.49, $M.50, $M.52, $M.53, $M.55, $M.56, $M.58, $M.59, $M.64, $M.10, $M.116, $M.117, $M.123, $M.147, $M.33, $M.29, $M.30, $M.176, $M.177, $M.36, $M.37, $M.38, $M.35, $M.31, $M.32, $M.178, $CurrAddr, $M.34, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.27, assertsPassed, $M.28;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $i250: i1;
  var $i251: i1;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i8;
  var $i260: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i32;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i32;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i1;
  var $i303: i1;
  var $i304: i1;
  var $i305: i1;
  var $i306: i1;
  var $i307: i1;
  var $i308: i1;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i315: i32;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $p320: ref;
  var $i321: i32;
  var $i322: i32;
  var $i323: i32;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $p328: ref;
  var $i329: i32;
  var $i330: i32;
  var $i331: i64;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i32;
  var $i339: i64;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $p344: ref;
  var $i345: i32;
  var $i346: i32;
  var $i347: i32;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $p352: ref;
  var $i353: i32;
  var $i354: i32;
  var $i355: i32;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $i361: i64;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $i373: i32;
  var $i374: i32;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $p382: ref;
  var $i383: i32;
  var $i384: i32;
  var $i385: i32;
  var $i386: i32;
  var $i387: i32;
  var $i389: i32;
  var $i390: i1;
  var $i392: i32;
  var $i393: i32;
  var $i394: i32;
  var $i395: i1;
  var $i397: i32;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i407: i1;
  var $i408: i1;
  var $i409: i32;
  var $i410: i1;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i1;
  var $i415: i32;
  var $i416: i32;
  var $i417: i1;
  var $i418: i32;
  var $i419: i1;
  var $i420: i32;
  var $i421: i1;
  var $i422: i32;
  var $i423: i1;
  var $i424: i32;
  var $i425: i1;
  var $i427: i32;
  var $i428: i1;
  var $i429: i32;
  var $i430: i1;
  var $i431: i1;
  var $i432: i1;
  var $i433: i32;
  var $i434: i1;
  var $p435: ref;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i440: i32;
  var $i441: i32;
  var $i442: i1;
  var $p443: ref;
  var $i445: i32;
  var $i446: i32;
  var vslice_dummy_var_37: ref;
  var vslice_dummy_var_38: ref;
  var vslice_dummy_var_39: ref;
  var vslice_dummy_var_40: ref;
  var vslice_dummy_var_41: ref;
  var vslice_dummy_var_42: ref;
  var vslice_dummy_var_43: ref;
  var vslice_dummy_var_44: ref;
  var vslice_dummy_var_45: ref;
  var vslice_dummy_var_46: ref;
  var vslice_dummy_var_47: ref;
  var vslice_dummy_var_48: ref;
  var vslice_dummy_var_49: ref;
  var vslice_dummy_var_50: ref;
  var vslice_dummy_var_51: ref;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i64;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i64;
  var vslice_dummy_var_75: i32;

  $bb0:
    call {:si_unique_call 657} $initialize();
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p0 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p19 := ldv_init_zalloc(1416);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p21 := ldv_init_zalloc(48);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p23 := ldv_init_zalloc(4);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p25 := ldv_init_zalloc(4);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p27 := ldv_init_zalloc(4);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p29 := ldv_init_zalloc(4);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p31 := ldv_init_zalloc(48);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p33 := ldv_init_zalloc(1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p34 := ldv_init_zalloc(1416);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p36 := ldv_init_zalloc(32);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_initialize();
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_37 := ldv_memset($p0, 0, 1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_38 := ldv_memset($p39, 0, 4);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p2);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_39 := ldv_memset($p41, 0, 8);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p3);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_40 := ldv_memset($p43, 0, 4);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p4);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_41 := ldv_memset($p45, 0, 4);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p5);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_42 := ldv_memset($p47, 0, 4);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p6);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_43 := ldv_memset($p49, 0, 4);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p7);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_44 := ldv_memset($p51, 0, 4);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p8);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_45 := ldv_memset($p53, 0, 4);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p9);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_46 := ldv_memset($p55, 0, 4);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p10);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_47 := ldv_memset($p57, 0, 4);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p11);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_48 := ldv_memset($p59, 0, 4);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p12);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_49 := ldv_memset($p61, 0, 4);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p13);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_50 := ldv_memset($p63, 0, 4);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p14);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_51 := ldv_memset($p65, 0, 4);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p15);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_52 := ldv_memset($p67, 0, 4);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p16);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_53 := ldv_memset($p69, 0, 4);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p17);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_54 := ldv_memset($p71, 0, 8);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 709} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 711} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 712} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.73 := 0;
    call {:si_unique_call 713} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 714} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 715} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 716} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 717} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 718} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $i140, $p141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $i160, $p161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $p254, $i256, $i257, $p258, $i259, $i260, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i274, $i275, $i276, $i277, $p278, $i280, $i281, $p282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $p294, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $p312, $p313, $i314, $i315, $i317, $i318, $p319, $p320, $i321, $i322, $i323, $i325, $i326, $p327, $p328, $i329, $i330, $i331, $i333, $i334, $p335, $p336, $i337, $i338, $i339, $i341, $i342, $p343, $p344, $i345, $i346, $i347, $i349, $i350, $p351, $p352, $i353, $i354, $i355, $i357, $i358, $p359, $p360, $i361, $i363, $i364, $p365, $p366, $i367, $i369, $i370, $p371, $p372, $i373, $i374, $i375, $i376, $i377, $i379, $i380, $p381, $p382, $i383, $i384, $i385, $i386, $i387, $i389, $i390, $i392, $i393, $i394, $i395, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $p435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $p443, $i445, $i446, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p20, $p22, $p24, $p26, $p28, $p30, $p32, $p33, $p35, $p37, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $i140, $p141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $i160, $p161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $p254, $i256, $i257, $p258, $i259, $i260, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i274, $i275, $i276, $i277, $p278, $i280, $i281, $p282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $p294, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $p312, $p313, $i314, $i315, $i317, $i318, $p319, $p320, $i321, $i322, $i323, $i325, $i326, $p327, $p328, $i329, $i330, $i331, $i333, $i334, $p335, $p336, $i337, $i338, $i339, $i341, $i342, $p343, $p344, $i345, $i346, $i347, $i349, $i350, $p351, $p352, $i353, $i354, $i355, $i357, $i358, $p359, $p360, $i361, $i363, $i364, $p365, $p366, $i367, $i369, $i370, $p371, $p372, $i373, $i374, $i375, $i376, $i377, $i379, $i380, $p381, $p382, $i383, $i384, $i385, $i386, $i387, $i389, $i390, $i392, $i393, $i394, $i395, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $p435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $p443, $i445, $i446, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i73, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i73, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_stop();
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb213_dummy;

  $bb11:
    assume $i78 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i427 := $M.79;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i428 := $ne.i32($i427, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb398:
    assume $i428 == 1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 888} $i429 := __VERIFIER_nondet_int();
    call {:si_unique_call 889} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i429);
    call {:si_unique_call 890} {:cexpr "tmp___18"} boogie_si_record_i32($i429);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $i430 := $slt.i32($i429, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i429, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_stop();
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb403:
    assume $i431 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i441 := $M.79;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i442 := $eq.i32($i441, 2);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb415:
    assume $i442 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p443 := $M.41;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_75 := kxcjk1013_remove($p443);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i445 := $M.76;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i446 := $sub.i32($i445, 1);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.76 := $i446;
    call {:si_unique_call 897} {:cexpr "ref_cnt"} boogie_si_record_i32($i446);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb401:
    assume $i430 == 1;
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i429, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    assume !($i432 == 1);
    goto $bb405;

  $bb406:
    assume $i432 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i433 := $M.79;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i433, 1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb408:
    assume $i434 == 1;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p435 := $M.41;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i436 := kxcjk1013_probe($p435, $p37);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.103 := $i436;
    call {:si_unique_call 892} {:cexpr "ldv_retval_23"} boogie_si_record_i32($i436);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i437 := $M.103;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb410:
    assume $i438 == 1;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i439 := $M.76;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i440 := $add.i32($i439, 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.76 := $i440;
    call {:si_unique_call 894} {:cexpr "ref_cnt"} boogie_si_record_i32($i440);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb9:
    assume $i77 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i420 := $M.78;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i421 := $ne.i32($i420, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb386:
    assume $i421 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 882} $i422 := __VERIFIER_nondet_int();
    call {:si_unique_call 883} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i422);
    call {:si_unique_call 884} {:cexpr "tmp___17"} boogie_si_record_i32($i422);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i422, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_stop();
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb389:
    assume $i423 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i424 := $M.78;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 1);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb391:
    assume $i425 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_74 := iio_read_const_attr($p35, $p32, $p33);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb7:
    assume $i76 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i403 := $M.77;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i404 := $ne.i32($i403, 0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb356:
    assume $i404 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} $i405 := __VERIFIER_nondet_int();
    call {:si_unique_call 862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i405);
    call {:si_unique_call 863} {:cexpr "tmp___16"} boogie_si_record_i32($i405);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i406 := $slt.i32($i405, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i405, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_stop();
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb361:
    assume $i407 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i413 := $M.77;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, 1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb374:
    assume $i414 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i415 := kxcjk1013_driver_init();
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.102 := $i415;
    call {:si_unique_call 868} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i415);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i416 := $M.102;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $i418 := $M.102;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i419 := $ne.i32($i418, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb379:
    assume $i419 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ldv_check_final_state();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb376:
    assume $i417 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.77 := 3;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_initialize_i2c_driver_5();
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_initialize_iio_trigger_ops_7();
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_dev_pm_ops_6();
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_initialize_iio_info_8();
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb359:
    assume $i406 == 1;
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i405, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume !($i408 == 1);
    goto $bb363;

  $bb364:
    assume $i408 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i409 := $M.77;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 3);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb366:
    assume $i410 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i411 := $M.76;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume !($i412 == 1);
    goto $bb368;

  $bb369:
    assume $i412 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} kxcjk1013_driver_exit();
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 865} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb5:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i73, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i73, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i401 := $M.75;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i402 := $ne.i32($i401, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb353:
    assume $i402 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} choose_interrupt_4();
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i399 := $M.74;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb350:
    assume $i400 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} choose_interrupt_1();
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb14:
    assume $i79 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i298 := $M.73;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb288:
    assume $i299 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 829} $i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i300);
    call {:si_unique_call 831} {:cexpr "tmp___15"} boogie_si_record_i32($i300);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $i301 := $slt.i32($i300, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    $i302 := $slt.i32($i300, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i303 := $slt.i32($i300, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i300, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_stop();
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb297:
    assume $i304 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i394 := $M.73;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb344:
    assume $i395 == 1;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_73 := ldv_probe_8();
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i397 := $M.76;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i398 := $add.i32($i397, 1);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.76 := $i398;
    call {:si_unique_call 857} {:cexpr "ref_cnt"} boogie_si_record_i32($i398);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb295:
    assume $i303 == 1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i389 := $M.73;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, 2);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb341:
    assume $i390 == 1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_72 := ldv_release_8();
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i392 := $M.76;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i393 := $sub.i32($i392, 1);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.76 := $i393;
    call {:si_unique_call 854} {:cexpr "ref_cnt"} boogie_si_record_i32($i393);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb293:
    assume $i302 == 1;
    assume {:verifier.code 0} true;
    $i305 := $slt.i32($i300, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i305 == 1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i369 := $M.73;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 2);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $i379 := $M.73;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb338:
    assume $i380 == 1;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p381 := $M.61;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p382 := $M.62;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i383 := $load.i32($M.39, $p10);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.39, $p9);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.39, $p6);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i386 := $load.i32($M.39, $p13);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i387 := $load.i32($M.39, $p4);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_71 := kxcjk1013_write_event($p381, $p382, $i383, $i384, $i385, $i386, $i387);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb335:
    assume $i370 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p371 := $M.61;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p372 := $M.62;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.39, $p10);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.39, $p9);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.39, $p6);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.39, $p13);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.39, $p4);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} vslice_dummy_var_70 := kxcjk1013_write_event($p371, $p372, $i373, $i374, $i375, $i376, $i377);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 849} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb300:
    assume $i305 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i357 := $M.73;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 2);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $i363 := $M.73;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb332:
    assume $i364 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p365 := $M.61;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p366 := $M.62;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i367 := $load.i64($M.39, $p2);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_69 := kxcjk1013_read_raw($p365, $p366, $p26, $p28, $i367);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb329:
    assume $i358 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p359 := $M.61;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p360 := $M.62;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i361 := $load.i64($M.39, $p2);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_68 := kxcjk1013_read_raw($p359, $p360, $p26, $p28, $i361);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb291:
    assume $i301 == 1;
    assume {:verifier.code 0} true;
    $i306 := $slt.i32($i300, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    $i307 := $slt.i32($i300, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i307 == 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i341 := $M.73;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, 2);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $i349 := $M.73;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb326:
    assume $i350 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p351 := $M.61;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p352 := $M.62;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i353 := $load.i32($M.39, $p14);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.39, $p7);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.39, $p11);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_67 := kxcjk1013_read_event($p351, $p352, $i353, $i354, $i355, $p24, $p30);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 843} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb323:
    assume $i342 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p343 := $M.61;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p344 := $M.62;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.39, $p14);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.39, $p7);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.39, $p11);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_66 := kxcjk1013_read_event($p343, $p344, $i345, $i346, $i347, $p24, $p30);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 841} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb304:
    assume $i307 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i325 := $M.73;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 2);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $i333 := $M.73;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 1);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb320:
    assume $i334 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p335 := $M.61;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p336 := $M.62;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.39, $p1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.39, $p15);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i339 := $load.i64($M.39, $p17);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_65 := kxcjk1013_write_raw($p335, $p336, $i337, $i338, $i339);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb317:
    assume $i326 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p327 := $M.61;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p328 := $M.62;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.39, $p1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.39, $p15);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.39, $p17);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_64 := kxcjk1013_write_raw($p327, $p328, $i329, $i330, $i331);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 837} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb302:
    assume $i306 == 1;
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i308 == 1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i317 := $M.73;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 2);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb314:
    assume $i318 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p319 := $M.61;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p320 := $M.62;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.39, $p12);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.39, $p3);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.39, $p16);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_63 := kxcjk1013_write_event_config($p319, $p320, $i321, $i322, $i323);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb306:
    assume $i308 == 1;
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i300, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb299;

  $bb308:
    assume $i309 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i310 := $M.73;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 2);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb310:
    assume $i311 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p312 := $M.61;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p313 := $M.62;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.39, $p8);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.39, $p5);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_62 := kxcjk1013_read_event_config($p312, $p313, $i314, $i315);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb3:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i73, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i73, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i83 == 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i296 := $M.72;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i297 := $ne.i32($i296, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb285:
    assume $i297 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} choose_interrupt_2();
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i262 := $M.1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb249:
    assume $i263 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 811} $i264 := __VERIFIER_nondet_int();
    call {:si_unique_call 812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i264);
    call {:si_unique_call 813} {:cexpr "tmp___14"} boogie_si_record_i32($i264);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i264, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $slt.i32($i264, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i264, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_stop();
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb256:
    assume $i267 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i292 := $M.1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 2);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb279:
    assume $i293 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p294 := $M.9;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_61 := iio_triggered_buffer_predisable($p294);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.1 := 4;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb254:
    assume $i266 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i280 := $M.1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb270:
    assume $i281 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p282 := $M.9;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i283 := kxcjk1013_buffer_preenable($p282);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.101 := $i283;
    call {:si_unique_call 820} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i283);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i284 := $M.101;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i288 := $M.101;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb275:
    assume $i289 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.1 := 2;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i290 := $M.76;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i291 := $add.i32($i290, 1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.76 := $i291;
    call {:si_unique_call 824} {:cexpr "ref_cnt"} boogie_si_record_i32($i291);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb272:
    assume $i285 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.1 := 3;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i286 := $M.76;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i287 := $add.i32($i286, 1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.76 := $i287;
    call {:si_unique_call 822} {:cexpr "ref_cnt"} boogie_si_record_i32($i287);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb252:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i268 == 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i276 := $M.1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 3);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb267:
    assume $i277 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p278 := $M.9;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_60 := iio_triggered_buffer_postenable($p278);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.1 := 2;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb259:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i264, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb258;

  $bb261:
    assume $i269 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i270 := $M.1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 4);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb263:
    assume $i271 == 1;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p272 := $M.9;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_59 := kxcjk1013_buffer_postdisable($p272);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i274 := $M.76;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i275 := $sub.i32($i274, 1);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.76 := $i275;
    call {:si_unique_call 816} {:cexpr "ref_cnt"} boogie_si_record_i32($i275);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb20:
    assume $i82 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i246 := $M.71;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb229:
    assume $i247 == 1;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i248 := __VERIFIER_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i248);
    call {:si_unique_call 805} {:cexpr "tmp___13"} boogie_si_record_i32($i248);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i249 := $slt.i32($i248, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i248, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ldv_stop();
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb234:
    assume $i250 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i256 := $M.71;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb243:
    assume $i257 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p258 := $M.47;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.39, $p0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i8.i1($i259);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_58 := kxcjk1013_data_rdy_trigger_set_state($p258, $i260);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb232:
    assume $i249 == 1;
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i248, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb236;

  $bb237:
    assume $i251 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i252 := $M.71;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb239:
    assume $i253 == 1;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p254 := $M.47;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_57 := kxcjk1013_trig_try_reen($p254);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb18:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i73, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i85 == 1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i244 := $M.70;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb226:
    assume $i245 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} choose_interrupt_3();
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb26:
    assume $i85 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i237 := $M.69;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb214:
    assume $i238 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} $i239 := __VERIFIER_nondet_int();
    call {:si_unique_call 797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i239);
    call {:si_unique_call 798} {:cexpr "tmp___12"} boogie_si_record_i32($i239);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_stop();
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb217:
    assume $i240 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i241 := $M.69;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb219:
    assume $i242 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_56 := iio_read_const_attr($p20, $p22, $p18);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb24:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb13;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i87 := $M.68;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb30:
    assume $i88 == 1;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i89);
    call {:si_unique_call 725} {:cexpr "tmp___11"} boogie_si_record_i32($i89);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i89, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i89, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i89, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i89, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i89, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_stop();
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb43:
    assume $i95 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i232 := $M.68;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 16);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb207:
    assume $i233 == 1;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_55 := ldv_complete_6();
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i235 := $M.76;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i236 := $sub.i32($i235, 1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.76 := $i236;
    call {:si_unique_call 794} {:cexpr "ref_cnt"} boogie_si_record_i32($i236);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb41:
    assume $i94 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i227 := $M.68;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 4);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb201:
    assume $i228 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i229 := ldv_suspend_noirq_6();
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.100 := $i229;
    call {:si_unique_call 790} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i229);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i230 := $M.100;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb203:
    assume $i231 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.68 := 8;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(8);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb39:
    assume $i93 == 1;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i222 := $M.68;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 9);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb195:
    assume $i223 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i224 := ldv_restore_noirq_6();
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.99 := $i224;
    call {:si_unique_call 787} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i224);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i225 := $M.99;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb197:
    assume $i226 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $M.68 := 14;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb37:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i89, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i89, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i97 == 1);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i217 := $M.68;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 5);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb189:
    assume $i218 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i219 := ldv_poweroff_late_6();
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.98 := $i219;
    call {:si_unique_call 784} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i219);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i220 := $M.98;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb191:
    assume $i221 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.68 := 10;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(10);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb48:
    assume $i97 == 1;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i212 := $M.68;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 5);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb183:
    assume $i213 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i214 := ldv_poweroff_noirq_6();
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.97 := $i214;
    call {:si_unique_call 781} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i214);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i215 := $M.97;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb185:
    assume $i216 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.68 := 9;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(9);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb46:
    assume $i96 == 1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i207 := $M.68;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 11);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb177:
    assume $i208 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i209 := ldv_thaw_noirq_6();
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.96 := $i209;
    call {:si_unique_call 778} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i209);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i210 := $M.96;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb179:
    assume $i211 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.68 := 15;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb35:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i89, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i89, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i89, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i100 == 1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i202 := $M.68;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 6);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb171:
    assume $i203 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i204 := ldv_freeze_late_6();
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.95 := $i204;
    call {:si_unique_call 775} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i204);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i205 := $M.95;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb173:
    assume $i206 == 1;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.68 := 12;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(12);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb54:
    assume $i100 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i195 := $M.68;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 1);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb165:
    assume $i196 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i197 := ldv_prepare_6();
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.94 := $i197;
    call {:si_unique_call 771} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i197);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i198 := $M.94;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb167:
    assume $i199 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.68 := 3;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i200 := $M.76;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i200, 1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.76 := $i201;
    call {:si_unique_call 773} {:cexpr "ref_cnt"} boogie_si_record_i32($i201);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb52:
    assume $i99 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i190 := $M.68;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 6);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb159:
    assume $i191 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i192 := ldv_freeze_noirq_6();
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $M.93 := $i192;
    call {:si_unique_call 768} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i192);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i193 := $M.93;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb161:
    assume $i194 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.68 := 11;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(11);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb50:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i89, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i101 == 1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i185 := $M.68;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 8);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb153:
    assume $i186 == 1;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i187 := ldv_resume_noirq_6();
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.92 := $i187;
    call {:si_unique_call 765} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i187);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i188 := $M.92;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb155:
    assume $i189 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.68 := 13;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb56:
    assume $i101 == 1;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i180 := $M.68;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 12);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb147:
    assume $i181 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i182 := ldv_thaw_early_6();
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.91 := $i182;
    call {:si_unique_call 762} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i182);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i183 := $M.91;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb149:
    assume $i184 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.68 := 15;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb33:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i89, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i89, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i89, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i89, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i105 == 1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i175 := $M.68;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 7);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb141:
    assume $i176 == 1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i177 := ldv_resume_early_6();
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.90 := $i177;
    call {:si_unique_call 759} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i177);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i178 := $M.90;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i179 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.68 := 13;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb64:
    assume $i105 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i170 := $M.68;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 10);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb135:
    assume $i171 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i172 := ldv_restore_early_6();
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.89 := $i172;
    call {:si_unique_call 756} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i172);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i173 := $M.89;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb137:
    assume $i174 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.68 := 14;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb62:
    assume $i104 == 1;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i165 := $M.68;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 4);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb129:
    assume $i166 == 1;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i167 := ldv_suspend_late_6();
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.88 := $i167;
    call {:si_unique_call 753} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i167);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i168 := $M.88;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb131:
    assume $i169 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.68 := 7;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(7);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb60:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i89, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i89, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i107 == 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i159 := $M.68;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 13);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb123:
    assume $i160 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p161 := $M.60;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i162 := kxcjk1013_resume($p161);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.87 := $i162;
    call {:si_unique_call 750} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i162);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i163 := $M.87;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i164 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.68 := 16;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb68:
    assume $i107 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i153 := $M.68;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 3);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb117:
    assume $i154 == 1;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p155 := $M.60;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i156 := kxcjk1013_suspend($p155);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.86 := $i156;
    call {:si_unique_call 747} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i156);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i157 := $M.86;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i158 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.68 := 6;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(6);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb66:
    assume $i106 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i147 := $M.68;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 3);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb111:
    assume $i148 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p149 := $M.60;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i150 := kxcjk1013_suspend($p149);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.85 := $i150;
    call {:si_unique_call 744} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i150);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i151 := $M.85;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i152 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.68 := 5;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb58:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i89, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i89, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i89, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i110 == 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i139 := $M.68;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 1);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb105:
    assume $i140 == 1;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p141 := $M.60;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i142 := kxcjk1013_runtime_suspend($p141);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.84 := $i142;
    call {:si_unique_call 740} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i142);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i143 := $M.84;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i144 == 1;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i145 := $M.76;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i146 := $add.i32($i145, 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.76 := $i146;
    call {:si_unique_call 742} {:cexpr "ref_cnt"} boogie_si_record_i32($i146);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb74:
    assume $i110 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i133 := $M.68;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 14);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb99:
    assume $i134 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p135 := $M.60;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i136 := kxcjk1013_resume($p135);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $M.83 := $i136;
    call {:si_unique_call 737} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i136);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i137 := $M.83;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i138 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.68 := 16;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb72:
    assume $i109 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i127 := $M.68;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 3);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb93:
    assume $i128 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p129 := $M.60;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i130 := kxcjk1013_suspend($p129);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.82 := $i130;
    call {:si_unique_call 734} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i130);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i131 := $M.82;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i132 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.68 := 4;
    call {:si_unique_call 735} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb70:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i111 == 1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i121 := $M.68;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 15);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb87:
    assume $i122 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p123 := $M.60;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i124 := kxcjk1013_resume($p123);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $M.81 := $i124;
    call {:si_unique_call 731} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i124);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i125 := $M.81;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i126 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.68 := 16;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb76:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb45;

  $bb78:
    assume $i112 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i113 := $M.68;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i114 == 1;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p115 := $M.60;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i116 := kxcjk1013_runtime_resume($p115);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.80 := $i116;
    call {:si_unique_call 727} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i116);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i117 := $M.80;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i118 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i119 := $M.76;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i119, 1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.76 := $i120;
    call {:si_unique_call 729} {:cexpr "ref_cnt"} boogie_si_record_i32($i120);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb213_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} $i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i73);
    call {:si_unique_call 722} {:cexpr "tmp___10"} boogie_si_record_i32($i73);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 314577);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    return;
}



const ldv_suspend_late_6: ref;

axiom ldv_suspend_late_6 == $sub.ref(0, 315609);

procedure ldv_suspend_late_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 900} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_6: ref;

axiom ldv_restore_early_6 == $sub.ref(0, 316641);

procedure ldv_restore_early_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_6: ref;

axiom ldv_resume_early_6 == $sub.ref(0, 317673);

procedure ldv_resume_early_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 904} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 905} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_6: ref;

axiom ldv_thaw_early_6 == $sub.ref(0, 318705);

procedure ldv_thaw_early_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 906} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 907} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_6: ref;

axiom ldv_resume_noirq_6 == $sub.ref(0, 319737);

procedure ldv_resume_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 909} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_6: ref;

axiom ldv_freeze_noirq_6 == $sub.ref(0, 320769);

procedure ldv_freeze_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 910} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 911} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_6: ref;

axiom ldv_prepare_6 == $sub.ref(0, 321801);

procedure ldv_prepare_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 912} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 913} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_6: ref;

axiom ldv_freeze_late_6 == $sub.ref(0, 322833);

procedure ldv_freeze_late_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 915} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_6: ref;

axiom ldv_thaw_noirq_6 == $sub.ref(0, 323865);

procedure ldv_thaw_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 916} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 917} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_6: ref;

axiom ldv_poweroff_noirq_6 == $sub.ref(0, 324897);

procedure ldv_poweroff_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 918} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 919} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_6: ref;

axiom ldv_poweroff_late_6 == $sub.ref(0, 325929);

procedure ldv_poweroff_late_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 921} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_6: ref;

axiom ldv_restore_noirq_6 == $sub.ref(0, 326961);

procedure ldv_restore_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 922} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 923} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_6: ref;

axiom ldv_suspend_noirq_6 == $sub.ref(0, 327993);

procedure ldv_suspend_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 924} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 925} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_6: ref;

axiom ldv_complete_6 == $sub.ref(0, 329025);

procedure ldv_complete_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 927} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_8: ref;

axiom ldv_release_8 == $sub.ref(0, 330057);

procedure ldv_release_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_8: ref;

axiom ldv_probe_8 == $sub.ref(0, 331089);

procedure ldv_probe_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 930} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 931} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const kxcjk1013_driver_exit: ref;

axiom kxcjk1013_driver_exit == $sub.ref(0, 332121);

procedure kxcjk1013_driver_exit();
  free requires assertsPassed;



implementation kxcjk1013_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} i2c_del_driver(kxcjk1013_driver);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    return;
}



const kxcjk1013_driver_init: ref;

axiom kxcjk1013_driver_init == $sub.ref(0, 333153);

procedure kxcjk1013_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation kxcjk1013_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i0 := i2c_register_driver(__this_module, kxcjk1013_driver);
    call {:si_unique_call 934} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 334185);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ldv_error();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 335217);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} __VERIFIER_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const i2c_register_driver: ref;

axiom i2c_register_driver == $sub.ref(0, 336249);

procedure i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 937} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 938} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2c_del_driver: ref;

axiom i2c_del_driver == $sub.ref(0, 337281);

procedure i2c_del_driver($p0: ref);
  free requires assertsPassed;



implementation i2c_del_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 338313);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 1} true;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 339345);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 340377);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 341409);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 342441);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 343473);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 344505);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 345537);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 346569);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 347601);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 348633);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 349665);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 350697);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 351729);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 940} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 941} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 942} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} __VERIFIER_assume($i4);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 352761);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 353793);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 354825);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 355857);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 356889);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 945} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 946} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 947} __VERIFIER_assume($i4);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 357921);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 358953);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 359985);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 361017);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 362049);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 949} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 950} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 952} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 953} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 955} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 956} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} __VERIFIER_assume($i7);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 958} __VERIFIER_assume($i11);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 363081);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 364113);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 365145);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 366177);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 367209);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 368241);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 369273);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 370305);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 371337);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 960} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 961} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 372369);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 963} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 373401);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 374433);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 964} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 965} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 375465);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 376497);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 377529);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 966} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 967} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 968} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 969} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p6 := malloc($i5);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 971} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 378561);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 379593);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.65, $M.11, $M.66, $M.45, $M.42, $M.19, $M.63, $M.15, $M.57, $M.48, $M.54, $M.51, $M.46, $M.23, $M.67, $M.44, $M.13, $M.14, $M.17, $M.18, $M.21, $M.22, $M.25, $M.26, $M.41, $M.43, $M.9, $M.47, $M.49, $M.50, $M.52, $M.53, $M.55, $M.56, $M.58, $M.59, $M.60, $M.61, $M.62, $M.64, $M.68, $M.69, $M.70, $M.71, $M.1, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.10, $M.116, $M.117, $M.0, $M.123, $M.147, $M.33, $M.29, $M.30, $M.176, $M.177, $M.36, $M.37, $M.38, $M.35, $M.31, $M.32, $M.178;



implementation __SMACK_static_init()
{

  $bb0:
    $M.65 := 0;
    call {:si_unique_call 972} {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 973} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 974} {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 975} {:cexpr "ldv_irq_4_2"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 976} {:cexpr "ldv_irq_4_0"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 977} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 978} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 979} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 980} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 981} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 982} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 983} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.51 := 0;
    call {:si_unique_call 984} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 985} {:cexpr "ldv_irq_4_3"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 986} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 987} {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 988} {:cexpr "ldv_irq_4_1"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 989} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.14 := $0.ref;
    $M.17 := 0;
    call {:si_unique_call 990} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.18 := $0.ref;
    $M.21 := 0;
    call {:si_unique_call 991} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.22 := $0.ref;
    $M.25 := 0;
    call {:si_unique_call 992} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.26 := $0.ref;
    $M.41 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 993} {:cexpr "ldv_irq_line_4"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.47 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 994} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.50 := $0.ref;
    $M.52 := 0;
    call {:si_unique_call 995} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.53 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 996} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.56 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 997} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.59 := $0.ref;
    $M.60 := $0.ref;
    $M.61 := $0.ref;
    $M.62 := $0.ref;
    $M.64 := 0;
    call {:si_unique_call 998} {:cexpr "ldv_irq_line_3"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 1003} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1008} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1011} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1012} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1013} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1014} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1015} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1016} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1017} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1018} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1019} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1020} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1021} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1022} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1024} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1025} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1026} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 1027} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1028} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 1029} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 1030} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 1031} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 1032} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 1033} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 1034} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 1035} {:cexpr "ldv_retval_23"} boogie_si_record_i32(0);
    $M.10 := 1;
    call {:si_unique_call 1036} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.116 := $store.i8($M.116, __mod_acpi__kx_acpi_match_device_table, 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_acpi__kx_acpi_match_device_table, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, __mod_i2c__kxcjk1013_id_device_table, 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_i2c__kxcjk1013_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, kxcjk1013_trigger_ops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_trigger_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), kxcjk1013_data_rdy_trigger_set_state);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_trigger_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), kxcjk1013_trig_try_reen);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_trigger_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, iio_const_attr_in_accel_scale_available, .str.31);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(32, 1)), iio_read_const_attr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, iio_const_attr_sampling_frequency_available, .str.29);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.30);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(32, 1)), iio_read_const_attr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, kxcjk1013_attributes, $add.ref(iio_const_attr_sampling_frequency_available, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attributes, $mul.ref(0, 24)), $mul.ref(1, 8)), $add.ref(iio_const_attr_in_accel_scale_available, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attributes, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, kxcjk1013_attrs_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attrs_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attrs_group, $mul.ref(0, 32)), $mul.ref(16, 1)), kxcjk1013_attributes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_attrs_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, kxcjk1013_info, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(16, 1)), kxcjk1013_attrs_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(24, 1)), kxcjk1013_read_raw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(40, 1)), kxcjk1013_write_raw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(56, 1)), kxcjk1013_read_event_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(64, 1)), kxcjk1013_write_event_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(72, 1)), kxcjk1013_read_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(80, 1)), kxcjk1013_write_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kxcjk1013_info, $mul.ref(0, 136)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, kxcjk1013_event, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(8, 1)), 11);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(kxcjk1013_event, $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, kxcjk1013_channels, 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(8, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(40, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(48, 1)), 4100);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(72, 1)), kxcjk1013_event);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(80, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(0, 120)), $mul.ref(112, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(8, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(40, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(48, 1)), 4100);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(72, 1)), kxcjk1013_event);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(80, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(1, 120)), $mul.ref(112, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(8, 1)), 3);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(40, 1)), 1);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(48, 1)), 4100);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(72, 1)), kxcjk1013_event);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(80, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(2, 120)), $mul.ref(112, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(0, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(24, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(1, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(80, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(kxcjk1013_channels, $mul.ref(0, 480)), $mul.ref(3, 120)), $mul.ref(112, 1)), 0);
    $M.123 := $store.i8($M.123, kxcjk1013_id, 107);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 99);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 106);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 107);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 49);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 51);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.123 := $store.i64($M.123, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 107);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 99);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 106);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 56);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.123 := $store.i64($M.123, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 107);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 106);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 57);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.123 := $store.i64($M.123, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 2);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 79);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 56);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.123 := $store.i64($M.123, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.123 := $store.i64($M.123, $add.ref($add.ref($add.ref(kxcjk1013_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.147 := $store.i8($M.147, kx_acpi_match, 75);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 51);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 56);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(1, 24)), $mul.ref(16, 1)), 1);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(2, 24)), $mul.ref(16, 1)), 1);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 74);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 57);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(3, 24)), $mul.ref(16, 1)), 2);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 79);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 56);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(4, 24)), $mul.ref(16, 1)), 1);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(kx_acpi_match, $mul.ref(0, 144)), $mul.ref(5, 24)), $mul.ref(16, 1)), 0);
    $M.33 := $store.i16($M.33, KXCJK1013_scale_table, 9582);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.33 := $store.i16($M.33, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1)), 19163);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1)), 1);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(3, 1)), 0);
    $M.33 := $store.i16($M.33, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1)), $sub.i16(0, 27210));
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(KXCJK1013_scale_table, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(3, 1)), 1);
    $M.176 := $store.i32($M.176, wake_odr_data_rate_table, 0);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 781000);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 563000);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 3);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 125000);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 6);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 250000);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 3);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 12);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 500000);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 4);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 25);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 5);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 50);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 6);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 100);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 6);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 200);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 6);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 400);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 6);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 800);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 6);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 1600);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(wake_odr_data_rate_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 6);
    $M.37 := $store.i32($M.37, samp_freq_table, 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 781000);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 8);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 563000);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 9);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 3);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 125000);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 10);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 6);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 250000);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 11);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 12);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 500000);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 25);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 1);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 50);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 2);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 100);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 3);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 200);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 4);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 400);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 5);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 800);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 6);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 1600);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(samp_freq_table, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 7);
    $M.31 := $store.i32($M.31, odr_start_up_times, 8);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(0, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(1, 8)), $mul.ref(0, 1)), 9);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(1, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(2, 8)), $mul.ref(0, 1)), 10);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(2, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(3, 8)), $mul.ref(0, 1)), 11);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(3, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(4, 8)), $mul.ref(4, 1)), 80000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(5, 8)), $mul.ref(4, 1)), 41000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(6, 8)), $mul.ref(4, 1)), 21000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(7, 8)), $mul.ref(0, 1)), 3);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(7, 8)), $mul.ref(4, 1)), 11000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(8, 8)), $mul.ref(0, 1)), 4);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(8, 8)), $mul.ref(4, 1)), 6400);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(9, 8)), $mul.ref(0, 1)), 5);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(9, 8)), $mul.ref(4, 1)), 3900);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(10, 8)), $mul.ref(0, 1)), 6);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(10, 8)), $mul.ref(4, 1)), 2700);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(0, 96)), $mul.ref(11, 8)), $mul.ref(4, 1)), 2100);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(0, 8)), $mul.ref(0, 1)), 8);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(0, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(1, 8)), $mul.ref(0, 1)), 9);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(1, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(2, 8)), $mul.ref(0, 1)), 10);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(2, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(3, 8)), $mul.ref(0, 1)), 11);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(3, 8)), $mul.ref(4, 1)), 100000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(4, 8)), $mul.ref(4, 1)), 80000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(5, 8)), $mul.ref(4, 1)), 41000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(6, 8)), $mul.ref(4, 1)), 21000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(7, 8)), $mul.ref(0, 1)), 3);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(7, 8)), $mul.ref(4, 1)), 11000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(8, 8)), $mul.ref(0, 1)), 4);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(8, 8)), $mul.ref(4, 1)), 6400);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(9, 8)), $mul.ref(0, 1)), 5);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(9, 8)), $mul.ref(4, 1)), 3900);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(10, 8)), $mul.ref(0, 1)), 6);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(10, 8)), $mul.ref(4, 1)), 2700);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(1, 96)), $mul.ref(11, 8)), $mul.ref(4, 1)), 2100);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(0, 8)), $mul.ref(0, 1)), 8);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(0, 8)), $mul.ref(4, 1)), 1240000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(1, 8)), $mul.ref(0, 1)), 9);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(1, 8)), $mul.ref(4, 1)), 621000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(2, 8)), $mul.ref(0, 1)), 10);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(2, 8)), $mul.ref(4, 1)), 309000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(3, 8)), $mul.ref(0, 1)), 11);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(3, 8)), $mul.ref(4, 1)), 151000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(4, 8)), $mul.ref(4, 1)), 80000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(5, 8)), $mul.ref(4, 1)), 41000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(6, 8)), $mul.ref(4, 1)), 21000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(7, 8)), $mul.ref(0, 1)), 3);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(7, 8)), $mul.ref(4, 1)), 11000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(8, 8)), $mul.ref(0, 1)), 4);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(8, 8)), $mul.ref(4, 1)), 6000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(9, 8)), $mul.ref(0, 1)), 5);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(9, 8)), $mul.ref(4, 1)), 4000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(10, 8)), $mul.ref(0, 1)), 6);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(10, 8)), $mul.ref(4, 1)), 3000);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref($add.ref(odr_start_up_times, $mul.ref(0, 288)), $mul.ref(2, 96)), $mul.ref(11, 8)), $mul.ref(4, 1)), 2000);
    $M.178 := $store.i8($M.178, .str.21, 83);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(1, 1)), 77);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(2, 1)), 79);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(3, 1)), 56);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(4, 1)), 53);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(5, 1)), 48);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(.str.21, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(11, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(12, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(13, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(14, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(15, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(16, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(18, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(19, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(20, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(21, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(22, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(23, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(24, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(25, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(27, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(28, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(29, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(30, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(31, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(32, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(33, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(34, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(35, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(36, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(37, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(38, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(39, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(40, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(41, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(42, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(43, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(44, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(45, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(46, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(47, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(48, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(49, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(50, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(51, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(52, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(53, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(54, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(55, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(56, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(57, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(58, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(59, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(60, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(61, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(62, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(63, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(64, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(65, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(66, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(67, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(68, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(69, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(70, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(71, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 73)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(12, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(20, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(4, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(6, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(7, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(9, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(11, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(12, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(13, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(15, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(16, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(18, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(19, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(20, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(21, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(22, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(23, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(24, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(25, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    call {:si_unique_call 1037} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 380625);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.65, $M.11, $M.66, $M.45, $M.42, $M.19, $M.63, $M.15, $M.57, $M.48, $M.54, $M.51, $M.46, $M.23, $M.67, $M.44, $M.13, $M.14, $M.17, $M.18, $M.21, $M.22, $M.25, $M.26, $M.41, $M.43, $M.9, $M.47, $M.49, $M.50, $M.52, $M.53, $M.55, $M.56, $M.58, $M.59, $M.60, $M.61, $M.62, $M.64, $M.68, $M.69, $M.70, $M.71, $M.1, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.10, $M.116, $M.117, $M.0, $M.123, $M.147, $M.33, $M.29, $M.30, $M.176, $M.177, $M.36, $M.37, $M.38, $M.35, $M.31, $M.32, $M.178, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1038} __SMACK_static_init();
    call {:si_unique_call 1039} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.39, $M.68, $M.69, $M.70, $M.71, $M.1, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.0, $M.63, $M.101, $M.11, $M.48, $M.42, $M.102, $M.41, $M.47, $M.60, $M.61, $M.62, $M.103, $M.65, $M.66, $M.45, $M.19, $M.15, $M.57, $M.54, $M.51, $M.46, $M.23, $M.67, $M.44, $M.13, $M.14, $M.17, $M.18, $M.21, $M.22, $M.25, $M.26, $M.43, $M.9, $M.49, $M.50, $M.52, $M.53, $M.55, $M.56, $M.58, $M.59, $M.64, $M.10, $M.116, $M.117, $M.123, $M.147, $M.33, $M.29, $M.30, $M.176, $M.177, $M.36, $M.37, $M.38, $M.35, $M.31, $M.32, $M.178, $CurrAddr, $M.34, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.27, $M.28;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 90} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_389;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_388;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 86} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_379;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_378;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation kxcjk1013_trigger_handler_loop_$bb4(in_$p4: ref, in_$p6: ref, in_$p15: ref, in_$i20: i32, in_$i21: i1, in_$i23: i32, in_$i24: i16, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i18: i32, in_$i19: i32) returns (out_$i20: i32, out_$i21: i1, out_$i23: i32, out_$i24: i16, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i18: i32, out_$i19: i32)
{

  entry:
    out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i18, out_$i19 := in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i18, in_$i19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_858;

  $bb10:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i23, out_$i36;
    goto $bb10_dummy;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i38 := $ult.i32(out_$i36, out_$i37);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, in_$p15);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i64.i32(out_$i35);
    call {:si_unique_call 208} {:cexpr "bit"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_$i35 := find_next_bit(out_$p29, out_$i32, out_$i34);
    call {:si_unique_call 207} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i19, 1);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i31);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2360)), $mul.ref(1648, 1));
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2360)), $mul.ref(1656, 1));
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p27, out_$i24);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 240)), $mul.ref(184, 1)), $mul.ref(out_$i25, 2));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i18);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_872;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i18, 1);
    call {:si_unique_call 205} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_871;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_861;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} out_$i20 := kxcjk1013_get_acc_reg(in_$p6, out_$i19);
    call {:si_unique_call 202} {:cexpr "ret"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i18, out_$i19 := kxcjk1013_trigger_handler_loop_$bb4(in_$p4, in_$p6, in_$p15, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure kxcjk1013_trigger_handler_loop_$bb4(in_$p4: ref, in_$p6: ref, in_$p15: ref, in_$i20: i32, in_$i21: i1, in_$i23: i32, in_$i24: i16, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i18: i32, in_$i19: i32) returns (out_$i20: i32, out_$i21: i1, out_$i23: i32, out_$i24: i16, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i18: i32, out_$i19: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i8, in_$i260: i1, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$i286: i32, in_$i287: i32, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i32, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i1, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$p313: ref, in_$i314: i32, in_$i315: i32, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i32, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$p328: ref, in_$i329: i32, in_$i330: i32, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_$i337: i32, in_$i338: i32, in_$i339: i64, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$p344: ref, in_$i345: i32, in_$i346: i32, in_$i347: i32, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$p352: ref, in_$i353: i32, in_$i354: i32, in_$i355: i32, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$p360: ref, in_$i361: i64, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$p366: ref, in_$i367: i64, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$p372: ref, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i32, in_$i377: i32, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$p382: ref, in_$i383: i32, in_$i384: i32, in_$i385: i32, in_$i386: i32, in_$i387: i32, in_$i389: i32, in_$i390: i1, in_$i392: i32, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i397: i32, in_$i398: i32, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i1, in_$i407: i1, in_$i408: i1, in_$i409: i32, in_$i410: i1, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i1, in_$i415: i32, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i1, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$i425: i1, in_$i427: i32, in_$i428: i1, in_$i429: i32, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i32, in_$i434: i1, in_$p435: ref, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i32, in_$i441: i32, in_$i442: i1, in_$p443: ref, in_$i445: i32, in_$i446: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i64, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i64, in_vslice_dummy_var_75: i32) returns (out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i8, out_$i260: i1, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$i286: i32, out_$i287: i32, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i32, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i1, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$p313: ref, out_$i314: i32, out_$i315: i32, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i32, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$p328: ref, out_$i329: i32, out_$i330: i32, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_$i337: i32, out_$i338: i32, out_$i339: i64, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$p344: ref, out_$i345: i32, out_$i346: i32, out_$i347: i32, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$p352: ref, out_$i353: i32, out_$i354: i32, out_$i355: i32, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$p360: ref, out_$i361: i64, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$p366: ref, out_$i367: i64, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$p372: ref, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i32, out_$i377: i32, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$p382: ref, out_$i383: i32, out_$i384: i32, out_$i385: i32, out_$i386: i32, out_$i387: i32, out_$i389: i32, out_$i390: i1, out_$i392: i32, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i397: i32, out_$i398: i32, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i1, out_$i407: i1, out_$i408: i1, out_$i409: i32, out_$i410: i1, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i1, out_$i415: i32, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i1, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$i425: i1, out_$i427: i32, out_$i428: i1, out_$i429: i32, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i32, out_$i434: i1, out_$p435: ref, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i32, out_$i441: i32, out_$i442: i1, out_$p443: ref, out_$i445: i32, out_$i446: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i64, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i64, out_vslice_dummy_var_75: i32)
{

  entry:
    out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$p319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i325, out_$i326, out_$p327, out_$p328, out_$i329, out_$i330, out_$i331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$i341, out_$i342, out_$p343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i349, out_$i350, out_$p351, out_$p352, out_$i353, out_$i354, out_$i355, out_$i357, out_$i358, out_$p359, out_$p360, out_$i361, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i369, out_$i370, out_$p371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i379, out_$i380, out_$p381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i389, out_$i390, out_$i392, out_$i393, out_$i394, out_$i395, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$p443, out_$i445, out_$i446, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i274, in_$i275, in_$i276, in_$i277, in_$p278, in_$i280, in_$i281, in_$p282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$p294, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$p312, in_$p313, in_$i314, in_$i315, in_$i317, in_$i318, in_$p319, in_$p320, in_$i321, in_$i322, in_$i323, in_$i325, in_$i326, in_$p327, in_$p328, in_$i329, in_$i330, in_$i331, in_$i333, in_$i334, in_$p335, in_$p336, in_$i337, in_$i338, in_$i339, in_$i341, in_$i342, in_$p343, in_$p344, in_$i345, in_$i346, in_$i347, in_$i349, in_$i350, in_$p351, in_$p352, in_$i353, in_$i354, in_$i355, in_$i357, in_$i358, in_$p359, in_$p360, in_$i361, in_$i363, in_$i364, in_$p365, in_$p366, in_$i367, in_$i369, in_$i370, in_$p371, in_$p372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i379, in_$i380, in_$p381, in_$p382, in_$i383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i389, in_$i390, in_$i392, in_$i393, in_$i394, in_$i395, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$p435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$p443, in_$i445, in_$i446, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} out_$i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i73);
    call {:si_unique_call 722} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i73);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb213_dummy;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb31:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.76 := out_$i120;
    call {:si_unique_call 729} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i120 := $sub.i32(out_$i119, 1);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i119 := $M.76;
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2797;

  $bb82:
    assume out_$i118 == 1;
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 0);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$i117 := $M.80;
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.80 := out_$i116;
    call {:si_unique_call 727} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i116 := kxcjk1013_runtime_resume(out_$p115);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$p115 := $M.60;
    goto corral_source_split_2790;

  $bb80:
    assume out_$i114 == 1;
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$i113 := $M.68;
    goto corral_source_split_2786;

  $bb78:
    assume out_$i112 == 1;
    goto corral_source_split_2785;

  $bb76:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb70:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb58:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i89, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb33:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i89, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_2699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} out_$i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i89);
    call {:si_unique_call 725} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i89);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i88 == 1;
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    out_$i87 := $M.68;
    goto corral_source_split_2696;

  $bb28:
    assume out_$i86 == 1;
    goto corral_source_split_2695;

  $bb24:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i73, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb88:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.68 := 16;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_2810;

  $bb89:
    assume out_$i126 == 1;
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$i125 := $M.81;
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $M.81 := out_$i124;
    call {:si_unique_call 731} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} out_$i124 := kxcjk1013_resume(out_$p123);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$p123 := $M.60;
    goto corral_source_split_2803;

  $bb87:
    assume out_$i122 == 1;
    goto corral_source_split_2802;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 15);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$i121 := $M.68;
    goto corral_source_split_2782;

  $bb77:
    assume !(out_$i111 == 1);
    goto corral_source_split_2781;

  $bb94:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.68 := 4;
    call {:si_unique_call 735} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_2820;

  $bb95:
    assume out_$i132 == 1;
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 0);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i131 := $M.82;
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.82 := out_$i130;
    call {:si_unique_call 734} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_$i130 := kxcjk1013_suspend(out_$p129);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p129 := $M.60;
    goto corral_source_split_2813;

  $bb93:
    assume out_$i128 == 1;
    goto corral_source_split_2812;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 3);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i127 := $M.68;
    goto corral_source_split_2770;

  $bb72:
    assume out_$i109 == 1;
    goto corral_source_split_2769;

  $bb71:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i89, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb100:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.68 := 16;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_2830;

  $bb101:
    assume out_$i138 == 1;
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 0);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i137 := $M.83;
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $M.83 := out_$i136;
    call {:si_unique_call 737} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} out_$i136 := kxcjk1013_resume(out_$p135);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p135 := $M.60;
    goto corral_source_split_2823;

  $bb99:
    assume out_$i134 == 1;
    goto corral_source_split_2822;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 14);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i133 := $M.68;
    goto corral_source_split_2774;

  $bb74:
    assume out_$i110 == 1;
    goto corral_source_split_2773;

  $bb73:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i89, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb106:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.76 := out_$i146;
    call {:si_unique_call 742} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$i146 := $add.i32(out_$i145, 1);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i145 := $M.76;
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2840;

  $bb107:
    assume out_$i144 == 1;
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 0);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i143 := $M.84;
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.84 := out_$i142;
    call {:si_unique_call 740} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_$i142 := kxcjk1013_runtime_suspend(out_$p141);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p141 := $M.60;
    goto corral_source_split_2833;

  $bb105:
    assume out_$i140 == 1;
    goto corral_source_split_2832;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 1);
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i139 := $M.68;
    goto corral_source_split_2778;

  $bb75:
    assume !(out_$i110 == 1);
    goto corral_source_split_2777;

  $bb112:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.68 := 5;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_2853;

  $bb113:
    assume out_$i152 == 1;
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 0);
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$i151 := $M.85;
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.85 := out_$i150;
    call {:si_unique_call 744} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} out_$i150 := kxcjk1013_suspend(out_$p149);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p149 := $M.60;
    goto corral_source_split_2846;

  $bb111:
    assume out_$i148 == 1;
    goto corral_source_split_2845;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 3);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i147 := $M.68;
    goto corral_source_split_2758;

  $bb66:
    assume out_$i106 == 1;
    goto corral_source_split_2757;

  $bb60:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i89, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb59:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i89, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb118:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.68 := 6;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(6);
    goto corral_source_split_2863;

  $bb119:
    assume out_$i158 == 1;
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 0);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$i157 := $M.86;
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.86 := out_$i156;
    call {:si_unique_call 747} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i156 := kxcjk1013_suspend(out_$p155);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$p155 := $M.60;
    goto corral_source_split_2856;

  $bb117:
    assume out_$i154 == 1;
    goto corral_source_split_2855;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 3);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i153 := $M.68;
    goto corral_source_split_2762;

  $bb68:
    assume out_$i107 == 1;
    goto corral_source_split_2761;

  $bb67:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i89, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb124:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.68 := 16;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_2873;

  $bb125:
    assume out_$i164 == 1;
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 0);
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i163 := $M.87;
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.87 := out_$i162;
    call {:si_unique_call 750} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_$i162 := kxcjk1013_resume(out_$p161);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$p161 := $M.60;
    goto corral_source_split_2866;

  $bb123:
    assume out_$i160 == 1;
    goto corral_source_split_2865;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 13);
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i159 := $M.68;
    goto corral_source_split_2766;

  $bb69:
    assume !(out_$i107 == 1);
    goto corral_source_split_2765;

  $bb130:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.68 := 7;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(7);
    goto corral_source_split_2882;

  $bb131:
    assume out_$i169 == 1;
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i168 := $M.88;
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.88 := out_$i167;
    call {:si_unique_call 753} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$i167 := ldv_suspend_late_6();
    goto corral_source_split_2876;

  $bb129:
    assume out_$i166 == 1;
    goto corral_source_split_2875;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 4);
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i165 := $M.68;
    goto corral_source_split_2746;

  $bb62:
    assume out_$i104 == 1;
    goto corral_source_split_2745;

  $bb61:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i89, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb136:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb138:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.68 := 14;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_2891;

  $bb137:
    assume out_$i174 == 1;
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i173 := $M.89;
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.89 := out_$i172;
    call {:si_unique_call 756} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_$i172 := ldv_restore_early_6();
    goto corral_source_split_2885;

  $bb135:
    assume out_$i171 == 1;
    goto corral_source_split_2884;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 10);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i170 := $M.68;
    goto corral_source_split_2750;

  $bb64:
    assume out_$i105 == 1;
    goto corral_source_split_2749;

  $bb63:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i89, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb142:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.68 := 13;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_2900;

  $bb143:
    assume out_$i179 == 1;
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 0);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i178 := $M.90;
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.90 := out_$i177;
    call {:si_unique_call 759} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i177 := ldv_resume_early_6();
    goto corral_source_split_2894;

  $bb141:
    assume out_$i176 == 1;
    goto corral_source_split_2893;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 7);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i175 := $M.68;
    goto corral_source_split_2754;

  $bb65:
    assume !(out_$i105 == 1);
    goto corral_source_split_2753;

  $bb148:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.68 := 15;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_2909;

  $bb149:
    assume out_$i184 == 1;
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 0);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$i183 := $M.91;
    goto corral_source_split_2905;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.91 := out_$i182;
    call {:si_unique_call 762} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_$i182 := ldv_thaw_early_6();
    goto corral_source_split_2903;

  $bb147:
    assume out_$i181 == 1;
    goto corral_source_split_2902;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 12);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i180 := $M.68;
    goto corral_source_split_2738;

  $bb56:
    assume out_$i101 == 1;
    goto corral_source_split_2737;

  $bb50:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i89, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb35:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i89, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb34:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i89, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb154:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb156:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.68 := 13;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_2918;

  $bb155:
    assume out_$i189 == 1;
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 0);
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i188 := $M.92;
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.92 := out_$i187;
    call {:si_unique_call 765} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$i187 := ldv_resume_noirq_6();
    goto corral_source_split_2912;

  $bb153:
    assume out_$i186 == 1;
    goto corral_source_split_2911;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 8);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$i185 := $M.68;
    goto corral_source_split_2742;

  $bb57:
    assume !(out_$i101 == 1);
    goto corral_source_split_2741;

  $bb160:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb162:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.68 := 11;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(11);
    goto corral_source_split_2927;

  $bb161:
    assume out_$i194 == 1;
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 0);
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$i193 := $M.93;
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $M.93 := out_$i192;
    call {:si_unique_call 768} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_2922;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_$i192 := ldv_freeze_noirq_6();
    goto corral_source_split_2921;

  $bb159:
    assume out_$i191 == 1;
    goto corral_source_split_2920;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 6);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i190 := $M.68;
    goto corral_source_split_2726;

  $bb52:
    assume out_$i99 == 1;
    goto corral_source_split_2725;

  $bb51:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i89, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb166:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb168:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.76 := out_$i201;
    call {:si_unique_call 773} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i201 := $add.i32(out_$i200, 1);
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i200 := $M.76;
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.68 := 3;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2936;

  $bb167:
    assume out_$i199 == 1;
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 0);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$i198 := $M.94;
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.94 := out_$i197;
    call {:si_unique_call 771} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i197);
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_$i197 := ldv_prepare_6();
    goto corral_source_split_2930;

  $bb165:
    assume out_$i196 == 1;
    goto corral_source_split_2929;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 1);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$i195 := $M.68;
    goto corral_source_split_2730;

  $bb54:
    assume out_$i100 == 1;
    goto corral_source_split_2729;

  $bb53:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i89, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb172:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb174:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.68 := 12;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(12);
    goto corral_source_split_2948;

  $bb173:
    assume out_$i206 == 1;
    goto corral_source_split_2947;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 0);
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i205 := $M.95;
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.95 := out_$i204;
    call {:si_unique_call 775} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i204);
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} out_$i204 := ldv_freeze_late_6();
    goto corral_source_split_2942;

  $bb171:
    assume out_$i203 == 1;
    goto corral_source_split_2941;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 6);
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i202 := $M.68;
    goto corral_source_split_2734;

  $bb55:
    assume !(out_$i100 == 1);
    goto corral_source_split_2733;

  $bb178:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb180:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.68 := 15;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_2957;

  $bb179:
    assume out_$i211 == 1;
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 0);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i210 := $M.96;
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.96 := out_$i209;
    call {:si_unique_call 778} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i209);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} out_$i209 := ldv_thaw_noirq_6();
    goto corral_source_split_2951;

  $bb177:
    assume out_$i208 == 1;
    goto corral_source_split_2950;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 11);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i207 := $M.68;
    goto corral_source_split_2714;

  $bb46:
    assume out_$i96 == 1;
    goto corral_source_split_2713;

  $bb37:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i89, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb36:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i89, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb184:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.68 := 9;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(9);
    goto corral_source_split_2966;

  $bb185:
    assume out_$i216 == 1;
    goto corral_source_split_2965;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 0);
    goto corral_source_split_2963;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    out_$i215 := $M.97;
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.97 := out_$i214;
    call {:si_unique_call 781} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i214);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_$i214 := ldv_poweroff_noirq_6();
    goto corral_source_split_2960;

  $bb183:
    assume out_$i213 == 1;
    goto corral_source_split_2959;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 5);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i212 := $M.68;
    goto corral_source_split_2718;

  $bb48:
    assume out_$i97 == 1;
    goto corral_source_split_2717;

  $bb47:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i89, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb190:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb192:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.68 := 10;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(10);
    goto corral_source_split_2975;

  $bb191:
    assume out_$i221 == 1;
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 0);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i220 := $M.98;
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.98 := out_$i219;
    call {:si_unique_call 784} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$i219 := ldv_poweroff_late_6();
    goto corral_source_split_2969;

  $bb189:
    assume out_$i218 == 1;
    goto corral_source_split_2968;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 5);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i217 := $M.68;
    goto corral_source_split_2722;

  $bb49:
    assume !(out_$i97 == 1);
    goto corral_source_split_2721;

  $bb196:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb198:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $M.68 := 14;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_2984;

  $bb197:
    assume out_$i226 == 1;
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 0);
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$i225 := $M.99;
    goto corral_source_split_2980;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.99 := out_$i224;
    call {:si_unique_call 787} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_2979;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} out_$i224 := ldv_restore_noirq_6();
    goto corral_source_split_2978;

  $bb195:
    assume out_$i223 == 1;
    goto corral_source_split_2977;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 9);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i222 := $M.68;
    goto corral_source_split_2702;

  $bb39:
    assume out_$i93 == 1;
    goto corral_source_split_2701;

  $bb38:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i89, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb202:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb204:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.68 := 8;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(8);
    goto corral_source_split_2993;

  $bb203:
    assume out_$i231 == 1;
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 0);
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$i230 := $M.100;
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.100 := out_$i229;
    call {:si_unique_call 790} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i229);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_$i229 := ldv_suspend_noirq_6();
    goto corral_source_split_2987;

  $bb201:
    assume out_$i228 == 1;
    goto corral_source_split_2986;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 4);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$i227 := $M.68;
    goto corral_source_split_2706;

  $bb41:
    assume out_$i94 == 1;
    goto corral_source_split_2705;

  $bb40:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i89, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb208:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.76 := out_$i236;
    call {:si_unique_call 794} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i236 := $sub.i32(out_$i235, 1);
    goto corral_source_split_2999;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$i235 := $M.76;
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_vslice_dummy_var_55 := ldv_complete_6();
    goto corral_source_split_2996;

  $bb207:
    assume out_$i233 == 1;
    goto corral_source_split_2995;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 16);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$i232 := $M.68;
    goto corral_source_split_2710;

  $bb43:
    assume out_$i95 == 1;
    goto corral_source_split_2709;

  $bb42:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i89, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_stop();
    goto corral_source_split_3002;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb45;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i112 == 1);
    goto $bb45;

  $bb215:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} out_vslice_dummy_var_56 := iio_read_const_attr(in_$p20, in_$p22, in_$p18);
    goto corral_source_split_3011;

  $bb219:
    assume out_$i242 == 1;
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 1);
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i241 := $M.69;
    goto corral_source_split_3007;

  $bb217:
    assume out_$i240 == 1;
    goto corral_source_split_3006;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_3004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} out_$i239 := __VERIFIER_nondet_int();
    call {:si_unique_call 797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i239);
    call {:si_unique_call 798} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i239);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb214:
    assume out_$i238 == 1;
    goto corral_source_split_3004;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$i238 := $ne.i32(out_$i237, 0);
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    out_$i237 := $M.69;
    goto corral_source_split_2688;

  $bb26:
    assume out_$i85 == 1;
    goto corral_source_split_2687;

  $bb25:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i73, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_stop();
    goto corral_source_split_3014;

  $bb218:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb227:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} choose_interrupt_3();
    goto corral_source_split_3017;

  $bb226:
    assume out_$i245 == 1;
    goto corral_source_split_3016;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i245 := $ne.i32(out_$i244, 0);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$i244 := $M.70;
    goto corral_source_split_2692;

  $bb27:
    assume !(out_$i85 == 1);
    goto corral_source_split_2691;

  $bb230:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb240:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_vslice_dummy_var_57 := kxcjk1013_trig_try_reen(out_$p254);
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$p254 := $M.47;
    goto corral_source_split_3030;

  $bb239:
    assume out_$i253 == 1;
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 1);
    goto corral_source_split_3027;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    out_$i252 := $M.71;
    goto corral_source_split_3026;

  $bb237:
    assume out_$i251 == 1;
    goto corral_source_split_3025;

  $bb232:
    assume out_$i249 == 1;
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i248, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb231:
    assume {:verifier.code 0} true;
    out_$i249 := $slt.i32(out_$i248, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_3019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} out_$i248 := __VERIFIER_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i248);
    call {:si_unique_call 805} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i248);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb229:
    assume out_$i247 == 1;
    goto corral_source_split_3019;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i32(out_$i246, 0);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$i246 := $M.71;
    goto corral_source_split_2676;

  $bb20:
    assume out_$i82 == 1;
    goto corral_source_split_2675;

  $bb19:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb244:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_58 := kxcjk1013_data_rdy_trigger_set_state(out_$p258, out_$i260);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i260 := $trunc.i8.i1(out_$i259);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i8($M.39, in_$p0);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p258 := $M.47;
    goto corral_source_split_3035;

  $bb243:
    assume out_$i257 == 1;
    goto corral_source_split_3034;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    out_$i256 := $M.71;
    goto corral_source_split_3022;

  $bb234:
    assume out_$i250 == 1;
    goto corral_source_split_3021;

  $bb233:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i248, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ldv_stop();
    goto corral_source_split_3041;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb235:
    assume {:verifier.code 0} true;
    assume !(out_$i250 == 1);
    goto $bb236;

  $bb238:
    assume {:verifier.code 0} true;
    assume !(out_$i251 == 1);
    goto $bb236;

  $bb250:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb264:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.76 := out_$i275;
    call {:si_unique_call 816} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$i275 := $sub.i32(out_$i274, 1);
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$i274 := $M.76;
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_vslice_dummy_var_59 := kxcjk1013_buffer_postdisable(out_$p272);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$p272 := $M.9;
    goto corral_source_split_3062;

  $bb263:
    assume out_$i271 == 1;
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 4);
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i270 := $M.1;
    goto corral_source_split_3058;

  $bb261:
    assume out_$i269 == 1;
    goto corral_source_split_3057;

  $bb259:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i264, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb252:
    assume out_$i265 == 1;
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i265 := $slt.i32(out_$i264, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_3043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 811} out_$i264 := __VERIFIER_nondet_int();
    call {:si_unique_call 812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i264);
    call {:si_unique_call 813} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i264);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume out_$i263 == 1;
    goto corral_source_split_3043;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i32(out_$i262, 0);
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    out_$i262 := $M.1;
    goto corral_source_split_2680;

  $bb22:
    assume out_$i83 == 1;
    goto corral_source_split_2679;

  $bb21:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i73, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb268:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.1 := 2;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} out_vslice_dummy_var_60 := iio_triggered_buffer_postenable(out_$p278);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$p278 := $M.9;
    goto corral_source_split_3070;

  $bb267:
    assume out_$i277 == 1;
    goto corral_source_split_3069;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 3);
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i276 := $M.1;
    goto corral_source_split_3054;

  $bb260:
    assume !(out_$i268 == 1);
    goto corral_source_split_3053;

  $bb271:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb276:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.76 := out_$i291;
    call {:si_unique_call 824} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i291);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i291 := $add.i32(out_$i290, 1);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i290 := $M.76;
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.1 := 2;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_3091;

  $bb275:
    assume out_$i289 == 1;
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$i289 := $ne.i32(out_$i288, 0);
    goto corral_source_split_3088;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i288 := $M.101;
    goto corral_source_split_3087;

  $bb273:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.76 := out_$i287;
    call {:si_unique_call 822} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i287);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i287 := $add.i32(out_$i286, 1);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$i286 := $M.76;
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.1 := 3;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_3082;

  $bb272:
    assume out_$i285 == 1;
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 0);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$i284 := $M.101;
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.101 := out_$i283;
    call {:si_unique_call 820} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i283);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_$i283 := kxcjk1013_buffer_preenable(out_$p282);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$p282 := $M.9;
    goto corral_source_split_3075;

  $bb270:
    assume out_$i281 == 1;
    goto corral_source_split_3074;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 1);
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$i280 := $M.1;
    goto corral_source_split_3046;

  $bb254:
    assume out_$i266 == 1;
    goto corral_source_split_3045;

  $bb253:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    out_$i266 := $slt.i32(out_$i264, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb280:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.1 := 4;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_vslice_dummy_var_61 := iio_triggered_buffer_predisable(out_$p294);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p294 := $M.9;
    goto corral_source_split_3097;

  $bb279:
    assume out_$i293 == 1;
    goto corral_source_split_3096;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 2);
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$i292 := $M.1;
    goto corral_source_split_3050;

  $bb256:
    assume out_$i267 == 1;
    goto corral_source_split_3049;

  $bb255:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i264, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_stop();
    goto corral_source_split_3101;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb257:
    assume {:verifier.code 0} true;
    assume !(out_$i267 == 1);
    goto $bb258;

  $bb262:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb258;

  $bb286:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} choose_interrupt_2();
    goto corral_source_split_3104;

  $bb285:
    assume out_$i297 == 1;
    goto corral_source_split_3103;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i297 := $ne.i32(out_$i296, 0);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i296 := $M.72;
    goto corral_source_split_2684;

  $bb23:
    assume !(out_$i83 == 1);
    goto corral_source_split_2683;

  $bb289:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb311:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} out_vslice_dummy_var_62 := kxcjk1013_read_event_config(out_$p312, out_$p313, out_$i314, out_$i315);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i32($M.39, in_$p5);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.39, in_$p8);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$p313 := $M.62;
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$p312 := $M.61;
    goto corral_source_split_3141;

  $bb310:
    assume out_$i311 == 1;
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 2);
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i310 := $M.73;
    goto corral_source_split_3137;

  $bb308:
    assume out_$i309 == 1;
    goto corral_source_split_3136;

  $bb306:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i300, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb302:
    assume out_$i306 == 1;
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb291:
    assume out_$i301 == 1;
    assume {:verifier.code 0} true;
    out_$i306 := $slt.i32(out_$i300, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb290:
    assume {:verifier.code 0} true;
    out_$i301 := $slt.i32(out_$i300, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_3106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 829} out_$i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i300);
    call {:si_unique_call 831} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i300);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb288:
    assume out_$i299 == 1;
    goto corral_source_split_3106;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i299 := $ne.i32(out_$i298, 0);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$i298 := $M.73;
    goto corral_source_split_2664;

  $bb14:
    assume out_$i79 == 1;
    goto corral_source_split_2663;

  $bb5:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i73, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i73, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb315:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} out_vslice_dummy_var_63 := kxcjk1013_write_event_config(out_$p319, out_$p320, out_$i321, out_$i322, out_$i323);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i323 := $load.i32($M.39, in_$p16);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i322 := $load.i32($M.39, in_$p3);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i32($M.39, in_$p12);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$p320 := $M.62;
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$p319 := $M.61;
    goto corral_source_split_3149;

  $bb314:
    assume out_$i318 == 1;
    goto corral_source_split_3148;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 2);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i317 := $M.73;
    goto corral_source_split_3133;

  $bb307:
    assume !(out_$i308 == 1);
    goto corral_source_split_3132;

  $bb321:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_vslice_dummy_var_65 := kxcjk1013_write_raw(out_$p335, out_$p336, out_$i337, out_$i338, out_$i339);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i339 := $load.i64($M.39, in_$p17);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i338 := $load.i32($M.39, in_$p15);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$i337 := $load.i32($M.39, in_$p1);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p336 := $M.62;
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$p335 := $M.61;
    goto corral_source_split_3170;

  $bb320:
    assume out_$i334 == 1;
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 1);
    goto corral_source_split_3167;

  $bb319:
    assume {:verifier.code 0} true;
    out_$i333 := $M.73;
    goto corral_source_split_3166;

  $bb318:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 837} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_vslice_dummy_var_64 := kxcjk1013_write_raw(out_$p327, out_$p328, out_$i329, out_$i330, out_$i331);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i64($M.39, in_$p17);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i330 := $load.i32($M.39, in_$p15);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.39, in_$p1);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$p328 := $M.62;
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$p327 := $M.61;
    goto corral_source_split_3158;

  $bb317:
    assume out_$i326 == 1;
    goto corral_source_split_3157;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 2);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i325 := $M.73;
    goto corral_source_split_3125;

  $bb304:
    assume out_$i307 == 1;
    goto corral_source_split_3124;

  $bb303:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    out_$i307 := $slt.i32(out_$i300, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb327:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 843} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_vslice_dummy_var_67 := kxcjk1013_read_event(out_$p351, out_$p352, out_$i353, out_$i354, out_$i355, in_$p24, in_$p30);
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i355 := $load.i32($M.39, in_$p11);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$i354 := $load.i32($M.39, in_$p7);
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i353 := $load.i32($M.39, in_$p14);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$p352 := $M.62;
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$p351 := $M.61;
    goto corral_source_split_3191;

  $bb326:
    assume out_$i350 == 1;
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 1);
    goto corral_source_split_3188;

  $bb325:
    assume {:verifier.code 0} true;
    out_$i349 := $M.73;
    goto corral_source_split_3187;

  $bb324:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 841} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_vslice_dummy_var_66 := kxcjk1013_read_event(out_$p343, out_$p344, out_$i345, out_$i346, out_$i347, in_$p24, in_$p30);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i347 := $load.i32($M.39, in_$p11);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i346 := $load.i32($M.39, in_$p7);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i32($M.39, in_$p14);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$p344 := $M.62;
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$p343 := $M.61;
    goto corral_source_split_3179;

  $bb323:
    assume out_$i342 == 1;
    goto corral_source_split_3178;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i341, 2);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i341 := $M.73;
    goto corral_source_split_3129;

  $bb305:
    assume !(out_$i307 == 1);
    goto corral_source_split_3128;

  $bb333:
    assume !(out_$i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} out_vslice_dummy_var_69 := kxcjk1013_read_raw(out_$p365, out_$p366, in_$p26, in_$p28, out_$i367);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i64($M.39, in_$p2);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$p366 := $M.62;
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$p365 := $M.61;
    goto corral_source_split_3210;

  $bb332:
    assume out_$i364 == 1;
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i364 := $eq.i32(out_$i363, 1);
    goto corral_source_split_3207;

  $bb331:
    assume {:verifier.code 0} true;
    out_$i363 := $M.73;
    goto corral_source_split_3206;

  $bb330:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} out_vslice_dummy_var_68 := kxcjk1013_read_raw(out_$p359, out_$p360, in_$p26, in_$p28, out_$i361);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i361 := $load.i64($M.39, in_$p2);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$p360 := $M.62;
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$p359 := $M.61;
    goto corral_source_split_3200;

  $bb329:
    assume out_$i358 == 1;
    goto corral_source_split_3199;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 2);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i357 := $M.73;
    goto corral_source_split_3117;

  $bb300:
    assume out_$i305 == 1;
    goto corral_source_split_3116;

  $bb293:
    assume out_$i302 == 1;
    assume {:verifier.code 0} true;
    out_$i305 := $slt.i32(out_$i300, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb292:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    out_$i302 := $slt.i32(out_$i300, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb339:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} out_vslice_dummy_var_71 := kxcjk1013_write_event(out_$p381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i387 := $load.i32($M.39, in_$p4);
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$i386 := $load.i32($M.39, in_$p13);
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i385 := $load.i32($M.39, in_$p6);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i384 := $load.i32($M.39, in_$p9);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i383 := $load.i32($M.39, in_$p10);
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$p382 := $M.62;
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$p381 := $M.61;
    goto corral_source_split_3231;

  $bb338:
    assume out_$i380 == 1;
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 1);
    goto corral_source_split_3228;

  $bb337:
    assume {:verifier.code 0} true;
    out_$i379 := $M.73;
    goto corral_source_split_3227;

  $bb336:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 849} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} out_vslice_dummy_var_70 := kxcjk1013_write_event(out_$p371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i377 := $load.i32($M.39, in_$p4);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i376 := $load.i32($M.39, in_$p13);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i375 := $load.i32($M.39, in_$p6);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i374 := $load.i32($M.39, in_$p9);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i373 := $load.i32($M.39, in_$p10);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$p372 := $M.62;
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p371 := $M.61;
    goto corral_source_split_3217;

  $bb335:
    assume out_$i370 == 1;
    goto corral_source_split_3216;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 2);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i369 := $M.73;
    goto corral_source_split_3121;

  $bb301:
    assume !(out_$i305 == 1);
    goto corral_source_split_3120;

  $bb342:
    assume !(out_$i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.76 := out_$i393;
    call {:si_unique_call 854} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i393);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$i393 := $sub.i32(out_$i392, 1);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i392 := $M.76;
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_vslice_dummy_var_72 := ldv_release_8();
    goto corral_source_split_3242;

  $bb341:
    assume out_$i390 == 1;
    goto corral_source_split_3241;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i390 := $eq.i32(out_$i389, 2);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i389 := $M.73;
    goto corral_source_split_3109;

  $bb295:
    assume out_$i303 == 1;
    goto corral_source_split_3108;

  $bb294:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    out_$i303 := $slt.i32(out_$i300, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb345:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.76 := out_$i398;
    call {:si_unique_call 857} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i398);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i398 := $add.i32(out_$i397, 1);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$i397 := $M.76;
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_vslice_dummy_var_73 := ldv_probe_8();
    goto corral_source_split_3249;

  $bb344:
    assume out_$i395 == 1;
    goto corral_source_split_3248;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 1);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$i394 := $M.73;
    goto corral_source_split_3113;

  $bb297:
    assume out_$i304 == 1;
    goto corral_source_split_3112;

  $bb296:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i300, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_stop();
    goto corral_source_split_3255;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb298:
    assume {:verifier.code 0} true;
    assume !(out_$i304 == 1);
    goto $bb299;

  $bb309:
    assume {:verifier.code 0} true;
    assume !(out_$i309 == 1);
    goto $bb299;

  $bb351:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} choose_interrupt_1();
    goto corral_source_split_3258;

  $bb350:
    assume out_$i400 == 1;
    goto corral_source_split_3257;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i400 := $ne.i32(out_$i399, 0);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i399 := $M.74;
    goto corral_source_split_2668;

  $bb16:
    assume out_$i80 == 1;
    goto corral_source_split_2667;

  $bb15:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i73, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb354:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} choose_interrupt_4();
    goto corral_source_split_3261;

  $bb353:
    assume out_$i402 == 1;
    goto corral_source_split_3260;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i402 := $ne.i32(out_$i401, 0);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i401 := $M.75;
    goto corral_source_split_2672;

  $bb17:
    assume !(out_$i80 == 1);
    goto corral_source_split_2671;

  $bb357:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb367:
    assume {:verifier.code 0} true;
    assume !(out_$i410 == 1);
    goto $bb368;

  $bb370:
    assume {:verifier.code 0} true;
    assume !(out_$i412 == 1);
    goto $bb368;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 0);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i411 := $M.76;
    goto corral_source_split_3274;

  $bb366:
    assume out_$i410 == 1;
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 3);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i409 := $M.77;
    goto corral_source_split_3270;

  $bb364:
    assume out_$i408 == 1;
    goto corral_source_split_3269;

  $bb359:
    assume out_$i406 == 1;
    assume {:verifier.code 0} true;
    out_$i408 := $eq.i32(out_$i405, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb358:
    assume {:verifier.code 0} true;
    out_$i406 := $slt.i32(out_$i405, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_3263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} out_$i405 := __VERIFIER_nondet_int();
    call {:si_unique_call 862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i405);
    call {:si_unique_call 863} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i405);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb356:
    assume out_$i404 == 1;
    goto corral_source_split_3263;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i404 := $ne.i32(out_$i403, 0);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$i403 := $M.77;
    goto corral_source_split_2652;

  $bb7:
    assume out_$i76 == 1;
    goto corral_source_split_2651;

  $bb6:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i73, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb375:
    assume !(out_$i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb380:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i419 := $ne.i32(out_$i418, 0);
    goto corral_source_split_3303;

  $bb378:
    assume {:verifier.code 0} true;
    out_$i418 := $M.102;
    goto corral_source_split_3302;

  $bb377:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_initialize_iio_info_8();
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_dev_pm_ops_6();
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_initialize_iio_trigger_ops_7();
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_initialize_i2c_driver_5();
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.77 := 3;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3290;

  $bb376:
    assume out_$i417 == 1;
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 0);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i416 := $M.102;
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.102 := out_$i415;
    call {:si_unique_call 868} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i415);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_$i415 := kxcjk1013_driver_init();
    goto corral_source_split_3284;

  $bb374:
    assume out_$i414 == 1;
    goto corral_source_split_3283;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i414 := $eq.i32(out_$i413, 1);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i413 := $M.77;
    goto corral_source_split_3266;

  $bb361:
    assume out_$i407 == 1;
    goto corral_source_split_3265;

  $bb360:
    assume !(out_$i406 == 1);
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i405, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_stop();
    goto corral_source_split_3308;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb362:
    assume {:verifier.code 0} true;
    assume !(out_$i407 == 1);
    goto $bb363;

  $bb365:
    assume {:verifier.code 0} true;
    assume !(out_$i408 == 1);
    goto $bb363;

  $bb387:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb392:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_vslice_dummy_var_74 := iio_read_const_attr(in_$p35, in_$p32, in_$p33);
    goto corral_source_split_3317;

  $bb391:
    assume out_$i425 == 1;
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i425 := $eq.i32(out_$i424, 1);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i424 := $M.78;
    goto corral_source_split_3313;

  $bb389:
    assume out_$i423 == 1;
    goto corral_source_split_3312;

  $bb388:
    assume {:verifier.code 0} true;
    out_$i423 := $eq.i32(out_$i422, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_3310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 882} out_$i422 := __VERIFIER_nondet_int();
    call {:si_unique_call 883} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i422);
    call {:si_unique_call 884} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i422);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb386:
    assume out_$i421 == 1;
    goto corral_source_split_3310;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i421 := $ne.i32(out_$i420, 0);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i420 := $M.78;
    goto corral_source_split_2656;

  $bb9:
    assume out_$i77 == 1;
    goto corral_source_split_2655;

  $bb8:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_stop();
    goto corral_source_split_3320;

  $bb390:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb399:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb409:
    assume !(out_$i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb411:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.76 := out_$i440;
    call {:si_unique_call 894} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i440);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i440 := $add.i32(out_$i439, 1);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i439 := $M.76;
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_3340;

  $bb410:
    assume out_$i438 == 1;
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 0);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i437 := $M.103;
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.103 := out_$i436;
    call {:si_unique_call 892} {:cexpr "ldv_retval_23"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i436 := kxcjk1013_probe(out_$p435, in_$p37);
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$p435 := $M.41;
    goto corral_source_split_3333;

  $bb408:
    assume out_$i434 == 1;
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i434 := $eq.i32(out_$i433, 1);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i433 := $M.79;
    goto corral_source_split_3329;

  $bb406:
    assume out_$i432 == 1;
    goto corral_source_split_3328;

  $bb401:
    assume out_$i430 == 1;
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i429, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb400:
    assume {:verifier.code 0} true;
    out_$i430 := $slt.i32(out_$i429, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_3322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 888} out_$i429 := __VERIFIER_nondet_int();
    call {:si_unique_call 889} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i429);
    call {:si_unique_call 890} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i429);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb398:
    assume out_$i428 == 1;
    goto corral_source_split_3322;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$i428 := $ne.i32(out_$i427, 0);
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$i427 := $M.79;
    goto corral_source_split_2660;

  $bb11:
    assume out_$i78 == 1;
    goto corral_source_split_2659;

  $bb10:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb416:
    assume !(out_$i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.76 := out_$i446;
    call {:si_unique_call 897} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i446);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i446 := $sub.i32(out_$i445, 1);
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i445 := $M.76;
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_vslice_dummy_var_75 := kxcjk1013_remove(out_$p443);
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$p443 := $M.41;
    goto corral_source_split_3346;

  $bb415:
    assume out_$i442 == 1;
    goto corral_source_split_3345;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i442 := $eq.i32(out_$i441, 2);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i441 := $M.79;
    goto corral_source_split_3325;

  $bb403:
    assume out_$i431 == 1;
    goto corral_source_split_3324;

  $bb402:
    assume !(out_$i430 == 1);
    assume {:verifier.code 0} true;
    out_$i431 := $eq.i32(out_$i429, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_stop();
    goto corral_source_split_3353;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb404:
    assume {:verifier.code 0} true;
    assume !(out_$i431 == 1);
    goto $bb405;

  $bb407:
    assume {:verifier.code 0} true;
    assume !(out_$i432 == 1);
    goto $bb405;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_stop();
    goto corral_source_split_3355;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb13;

  $bb213_dummy:
    call {:si_unique_call 1} out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$p319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i325, out_$i326, out_$p327, out_$p328, out_$i329, out_$i330, out_$i331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$i341, out_$i342, out_$p343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i349, out_$i350, out_$p351, out_$p352, out_$i353, out_$i354, out_$i355, out_$i357, out_$i358, out_$p359, out_$p360, out_$i361, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i369, out_$i370, out_$p371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i379, out_$i380, out_$p381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i389, out_$i390, out_$i392, out_$i393, out_$i394, out_$i395, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$p443, out_$i445, out_$i446, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p32, in_$p33, in_$p35, in_$p37, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$p319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i325, out_$i326, out_$p327, out_$p328, out_$i329, out_$i330, out_$i331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$i341, out_$i342, out_$p343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i349, out_$i350, out_$p351, out_$p352, out_$i353, out_$i354, out_$i355, out_$i357, out_$i358, out_$p359, out_$p360, out_$i361, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i369, out_$i370, out_$p371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i379, out_$i380, out_$p381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i389, out_$i390, out_$i392, out_$i393, out_$i394, out_$i395, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$p443, out_$i445, out_$i446, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i8, in_$i260: i1, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$i286: i32, in_$i287: i32, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i32, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i1, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$p313: ref, in_$i314: i32, in_$i315: i32, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i32, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$p328: ref, in_$i329: i32, in_$i330: i32, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_$i337: i32, in_$i338: i32, in_$i339: i64, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$p344: ref, in_$i345: i32, in_$i346: i32, in_$i347: i32, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$p352: ref, in_$i353: i32, in_$i354: i32, in_$i355: i32, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$p360: ref, in_$i361: i64, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$p366: ref, in_$i367: i64, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$p372: ref, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i32, in_$i377: i32, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$p382: ref, in_$i383: i32, in_$i384: i32, in_$i385: i32, in_$i386: i32, in_$i387: i32, in_$i389: i32, in_$i390: i1, in_$i392: i32, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i397: i32, in_$i398: i32, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i1, in_$i407: i1, in_$i408: i1, in_$i409: i32, in_$i410: i1, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i1, in_$i415: i32, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i1, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$i425: i1, in_$i427: i32, in_$i428: i1, in_$i429: i32, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i32, in_$i434: i1, in_$p435: ref, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i32, in_$i441: i32, in_$i442: i1, in_$p443: ref, in_$i445: i32, in_$i446: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i64, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i64, in_vslice_dummy_var_75: i32) returns (out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i8, out_$i260: i1, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$i286: i32, out_$i287: i32, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i32, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i1, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$p313: ref, out_$i314: i32, out_$i315: i32, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i32, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$p328: ref, out_$i329: i32, out_$i330: i32, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_$i337: i32, out_$i338: i32, out_$i339: i64, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$p344: ref, out_$i345: i32, out_$i346: i32, out_$i347: i32, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$p352: ref, out_$i353: i32, out_$i354: i32, out_$i355: i32, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$p360: ref, out_$i361: i64, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$p366: ref, out_$i367: i64, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$p372: ref, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i32, out_$i377: i32, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$p382: ref, out_$i383: i32, out_$i384: i32, out_$i385: i32, out_$i386: i32, out_$i387: i32, out_$i389: i32, out_$i390: i1, out_$i392: i32, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i397: i32, out_$i398: i32, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i1, out_$i407: i1, out_$i408: i1, out_$i409: i32, out_$i410: i1, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i1, out_$i415: i32, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i1, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$i425: i1, out_$i427: i32, out_$i428: i1, out_$i429: i32, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i32, out_$i434: i1, out_$p435: ref, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i32, out_$i441: i32, out_$i442: i1, out_$p443: ref, out_$i445: i32, out_$i446: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i64, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i64, out_vslice_dummy_var_75: i32);
  modifies $M.76, $M.68, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.69, $M.0, $M.63, $M.71, $M.34, $CurrAddr, $M.1, $M.101, $M.11, $M.27, $M.28, $M.73, $M.48, $M.42, $M.61, $M.62, $M.60, $M.47, $M.78, $M.41, $M.79, $M.77, $M.102, $M.103, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.13, $M.14, $M.17, $M.18, $M.15, $M.21, $M.22, $M.19, $M.25, $M.26, $M.23, $M.9, $M.10;


