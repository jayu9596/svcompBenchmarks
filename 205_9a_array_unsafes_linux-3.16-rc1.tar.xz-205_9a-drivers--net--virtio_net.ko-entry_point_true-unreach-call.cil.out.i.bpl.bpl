var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]ref;

var $M.3: [ref]i8;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i24;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: ref;

var $M.12: i32;

var $M.13: [ref]ref;

var $M.14: i8;

var $M.15: i8;

var $M.16: i32;

var $M.17: [ref]i32;

var $M.18: i32;

var $M.19: [ref]i16;

var $M.20: ref;

var $M.21: ref;

var $M.22: ref;

var $M.23: ref;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.38: [ref]i32;

var $M.39: [ref]i32;

var $M.40: [ref]i32;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 438774);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const virtio_net_driver_group0: ref;

axiom virtio_net_driver_group0 == $sub.ref(0, 2060);

const virtnet_netdev_group1: ref;

axiom virtnet_netdev_group1 == $sub.ref(0, 3092);

const virtnet_ethtool_ops_group0: ref;

axiom virtnet_ethtool_ops_group0 == $sub.ref(0, 4124);

const virtnet_ethtool_ops_group1: ref;

axiom virtnet_ethtool_ops_group1 == $sub.ref(0, 5156);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 6184);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 7212);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 8240);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 9268);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 10296);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 11324);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 12352);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 13380);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 14408);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 15436);

const last_index: ref;

axiom last_index == $sub.ref(0, 16464);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 17496);

const __mod_virtio__id_table_device_table: ref;

axiom __mod_virtio__id_table_device_table == $sub.ref(0, 18528);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 19672);

const {:count 21} features: ref;

axiom features == $sub.ref(0, 20780);

const {:count 2} id_table: ref;

axiom id_table == $sub.ref(0, 21820);

const virtio_net_driver: ref;

axiom virtio_net_driver == $sub.ref(0, 23036);

const mergeable_rx_buffer_size_attribute: ref;

axiom mergeable_rx_buffer_size_attribute == $sub.ref(0, 24108);

const {:count 2} virtio_net_mrg_rx_attrs: ref;

axiom virtio_net_mrg_rx_attrs == $sub.ref(0, 25148);

const virtio_net_mrg_rx_group: ref;

axiom virtio_net_mrg_rx_group == $sub.ref(0, 26204);

const napi_weight: ref;

axiom napi_weight == $sub.ref(0, 27232);

const gso: ref;

axiom gso == $sub.ref(0, 28257);

const csum: ref;

axiom csum == $sub.ref(0, 29282);

const virtnet_ethtool_ops: ref;

axiom virtnet_ethtool_ops == $sub.ref(0, 30682);

const virtnet_netdev: ref;

axiom virtnet_netdev == $sub.ref(0, 32186);

const {:count 28} .str.42: ref;

axiom .str.42 == $sub.ref(0, 33238);

const {:count 222} .str.2: ref;

axiom .str.2 == $sub.ref(0, 34484);

const {:count 30} .str.1: ref;

axiom .str.1 == $sub.ref(0, 35538);

const {:count 27} .str.43: ref;

axiom .str.43 == $sub.ref(0, 36589);

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.3: ref;

axiom .str.3 == $sub.ref(0, 37637);

const {:count 42} .str.50: ref;

axiom .str.50 == $sub.ref(0, 38703);

const {:count 3} .str.38: ref;

axiom .str.38 == $sub.ref(0, 39730);

const {:count 4} .str.39: ref;

axiom .str.39 == $sub.ref(0, 40758);

const {:count 32} .str.37: ref;

axiom .str.37 == $sub.ref(0, 41814);

const {:count 33} .str.40: ref;

axiom .str.40 == $sub.ref(0, 42871);

const {:count 33} .str.41: ref;

axiom .str.41 == $sub.ref(0, 43928);

const {:count 28} .str.36: ref;

axiom .str.36 == $sub.ref(0, 44980);

const {:count 39} .str.44: ref;

axiom .str.44 == $sub.ref(0, 46043);

const {:count 26} .str.14: ref;

axiom .str.14 == $sub.ref(0, 47093);

const {:count 63} .str.15: ref;

axiom .str.15 == $sub.ref(0, 48180);

const {:count 23} .str.49: ref;

axiom .str.49 == $sub.ref(0, 49227);

const {:count 11} .str.4: ref;

axiom .str.4 == $sub.ref(0, 50262);

const {:count 9} .str.47: ref;

axiom .str.47 == $sub.ref(0, 51295);

const {:count 17} .str.48: ref;

axiom .str.48 == $sub.ref(0, 52336);

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 19} .str.45: ref;

axiom .str.45 == $sub.ref(0, 53379);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 54416);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 48} .str.34: ref;

axiom .str.34 == $sub.ref(0, 55488);

const {:count 19} .str.35: ref;

axiom .str.35 == $sub.ref(0, 56531);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const cpu_bit_bitmap: ref;

axiom cpu_bit_bitmap == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const .str: ref;

axiom .str == $sub.ref(0, 57593);

const {:count 6} .str.5: ref;

axiom .str.5 == $sub.ref(0, 58623);

const {:count 7} .str.6: ref;

axiom .str.6 == $sub.ref(0, 59654);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 60703);

const {:count 4} .str.51: ref;

axiom .str.51 == $sub.ref(0, 61731);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 8} .str.30: ref;

axiom .str.30 == $sub.ref(0, 62763);

const {:count 9} .str.31: ref;

axiom .str.31 == $sub.ref(0, 63796);

const {:count 10} .str.32: ref;

axiom .str.32 == $sub.ref(0, 64830);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 65877);

const {:count 24} .str.17: ref;

axiom .str.17 == $sub.ref(0, 66925);

const {:count 12} .str.18: ref;

axiom .str.18 == $sub.ref(0, 67961);

const {:count 21} .str.19: ref;

axiom .str.19 == $sub.ref(0, 69006);

const {:count 13} .str.20: ref;

axiom .str.20 == $sub.ref(0, 70043);

const {:count 43} .str.21: ref;

axiom .str.21 == $sub.ref(0, 71110);

const {:count 6} .str.22: ref;

axiom .str.22 == $sub.ref(0, 72140);

const {:count 23} .str.23: ref;

axiom .str.23 == $sub.ref(0, 73187);

const {:count 21} .str.24: ref;

axiom .str.24 == $sub.ref(0, 74232);

const {:count 12} .str.28: ref;

axiom .str.28 == $sub.ref(0, 75268);

const {:count 19} .str.29: ref;

axiom .str.29 == $sub.ref(0, 76311);

const {:count 18} .str.25: ref;

axiom .str.25 == $sub.ref(0, 77353);

const {:count 44} .str.26: ref;

axiom .str.26 == $sub.ref(0, 78421);

const {:count 34} .str.27: ref;

axiom .str.27 == $sub.ref(0, 79479);

const {:count 17} .str.7: ref;

axiom .str.7 == $sub.ref(0, 80520);

const {:count 19} .str.8: ref;

axiom .str.8 == $sub.ref(0, 81563);

const {:count 14} .str.9: ref;

axiom .str.9 == $sub.ref(0, 82601);

const {:count 39} .str.10: ref;

axiom .str.10 == $sub.ref(0, 83664);

const {:count 45} .str.11: ref;

axiom .str.11 == $sub.ref(0, 84733);

const {:count 54} .str.12: ref;

axiom .str.12 == $sub.ref(0, 85811);

const {:count 30} .str.13: ref;

axiom .str.13 == $sub.ref(0, 86865);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 87897);

const {:count 3} .str.1.118: ref;

axiom .str.1.118 == $sub.ref(0, 88924);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 89962);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 90990);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 92022);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 93054);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 94086);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 95118);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const virtnet_open: ref;

axiom virtnet_open == $sub.ref(0, 96150);

procedure virtnet_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.12, $CurrAddr;



implementation virtnet_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $i7: i32;
  var vslice_dummy_var_30: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := netdev_priv($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $p21, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $i30, $i7, vslice_dummy_var_30 := virtnet_open_loop_$bb4($p2, $p3, $p8, $i9, $i10, $i11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $p21, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $i30, $i7, vslice_dummy_var_30);
    goto $bb4_last;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i7);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i7);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 1040));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} virtnet_napi_enable($p26);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i7, 1);
    call {:si_unique_call 15} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p3);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, $i27);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb15_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i7);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 1040));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i16 := try_fill_recv($p15, 208);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_30 := schedule_delayed_work($p21, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb10;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;
}



const virtnet_close: ref;

axiom virtnet_close == $sub.ref(0, 97182);

procedure virtnet_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation virtnet_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i9: i32;
  var vslice_dummy_var_31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p1 := netdev_priv($p0);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_31 := cancel_delayed_work_sync($p3);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $i15, $i16, $i17, $i18, $i9 := virtnet_close_loop_$bb4($p2, $p5, $p10, $p11, $i12, $p14, $i15, $i16, $i17, $i18, $i9);
    goto $bb4_last;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 1040)), $mul.ref(8, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} napi_disable($p14);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i9, 1);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p5);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, $i15);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_78;
}



const start_xmit: ref;

axiom start_xmit == $sub.ref(0, 98214);

procedure start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.2, $M.18, $M.13, $M.12, $M.17;



implementation start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i46: i8;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $p61: ref;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p2 := netdev_priv($p1);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i4 := skb_get_queue_mapping($p0);
    call {:si_unique_call 22} {:cexpr "tmp___0"} boogie_si_record_i16($i4);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 23} {:cexpr "qnum"} boogie_si_record_i32($i5);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 808));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} free_old_xmit_skbs($p9);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i10 := xmit_skb($p9, $p0);
    call {:si_unique_call 26} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 28} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref($i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_33 := virtqueue_kick($p33);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} skb_orphan($p0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} nf_reset($p0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref($i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i39 := $ule.i32($i38, 18);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i5);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} netif_stop_subqueue($p1, $i42);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref($i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i45 := virtqueue_enable_cb_delayed($p44);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 38} {:cexpr "tmp___3"} boogie_si_record_i8($i46);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 40} {:cexpr "tmp___5"} boogie_si_record_i64($i50);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} free_old_xmit_skbs($p9);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref($i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i55, 18);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i5);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} netif_start_subqueue($p1, $i59);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref($i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} virtqueue_disable_cb($p61);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb12;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i19);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i22 := net_ratelimit();
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i29);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} dev_kfree_skb_any($p0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_32 := dev_warn.ref.ref.i32.i32($p24, .str.44, $i5, $i10);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const virtnet_set_rx_mode: ref;

axiom virtnet_set_rx_mode == $sub.ref(0, 99246);

procedure virtnet_set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i80: i1;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i88: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p78: ref;
  var $i79: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i125: i1;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i133: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p123: ref;
  var $i124: i32;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $i154: i1;
  var $i155: i8;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p4 := netdev_priv($p0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i8 := virtio_has_feature($p7, 18);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 49} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 256);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i18);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 512);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i24);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} sg_init_one($p25, $p2, 1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i27 := virtnet_send_command($p5, 0, 0, $p26);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 52} {:cexpr "tmp___2"} boogie_si_record_i8($i28);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} sg_init_one($p38, $p3, 1);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i40 := virtnet_send_command($p5, 0, 1, $p39);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 56} {:cexpr "tmp___4"} boogie_si_record_i8($i41);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(16, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    call {:si_unique_call 58} {:cexpr "uc_count"} boogie_si_record_i32($i53);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    call {:si_unique_call 59} {:cexpr "mc_count"} boogie_si_record_i32($i56);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i53, $i56);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, 6);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 8);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p61 := kzalloc($i60, 32);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p61);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} sg_init_table($p65, 2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p62, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i53);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i73, $i76);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p62);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i105 := $mul.i32($i53, 6);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 4);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} sg_set_buf($p103, $p104, $i106);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p62, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i53);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p108, $mul.ref($i109, 4));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p108, $mul.ref($i109, 4)), $mul.ref(0, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i56);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i118, $i121);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p1);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(1, 40));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p110);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i151 := $mul.i32($i56, 6);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, 4);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} sg_set_buf($p149, $p150, $i152);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p1);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i154 := virtnet_send_command($p5, 1, 0, $p153);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i155 := $zext.i1.i8($i154);
    call {:si_unique_call 73} {:cexpr "tmp___10"} boogie_si_record_i8($i155);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i8.i1($i155);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} kfree($p61);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb48:
    assume $i158 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_36 := dev_warn.ref.ref($p159, .str.41);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i156 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i157 := 0;
    goto $bb47;

  $bb34:
    assume $i122 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p123, $i124 := $p115, 0;
    goto $bb37;

  $bb37:
    call $i125, $i126, $p127, $p128, $i129, $p130, $p131, $p132, $i134, $p135, $p136, $i137, $p138, $p139, $p140, $i133, $p142, $p143, $p144, $p145, $i146, $i147, $p123, $i124, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11 := virtnet_set_rx_mode_loop_$bb37($p108, $i109, $i121, $i125, $i126, $p127, $p128, $i129, $p130, $p131, $p132, $i134, $p135, $p136, $i137, $p138, $p139, $p140, $i133, $p142, $p143, $p144, $p145, $i146, $i147, $p123, $i124, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11);
    goto $bb37_last;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i125 := $ugt.i64(6, 63);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i125 == 1);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i124, 1);
    call {:si_unique_call 69} {:cexpr "i"} boogie_si_record_i32($i134);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p108, $mul.ref($i109, 4)), $mul.ref(4, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i124);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p136, $mul.ref($i137, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p123, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 70} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p138, $p140, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    $i133 := $i134;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p123, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, $i121);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i147 == 1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb42:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $p123, $i124 := $p143, $i133;
    goto $bb42_dummy;

  $bb39:
    assume $i125 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i124, 1);
    call {:si_unique_call 67} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p108, $mul.ref($i109, 4)), $mul.ref(4, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i124);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p128, $mul.ref($i129, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p123, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 68} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p130, $p132, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i133 := $i126;
    goto $bb41;

  $bb23:
    assume $i77 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p78, $i79 := $p70, 0;
    goto $bb26;

  $bb26:
    call $i80, $i81, $p82, $p83, $i84, $p85, $p86, $p87, $i89, $p90, $p91, $i92, $p93, $p94, $p95, $i88, $p97, $p98, $p99, $p100, $i101, $i102, $p78, $i79, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := virtnet_set_rx_mode_loop_$bb26($p62, $i76, $i80, $i81, $p82, $p83, $i84, $p85, $p86, $p87, $i89, $p90, $p91, $i92, $p93, $p94, $p95, $i88, $p97, $p98, $p99, $p100, $i101, $i102, $p78, $i79, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb26_last;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i64(6, 63);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i79, 1);
    call {:si_unique_call 64} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p62, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i79);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p91, $mul.ref($i92, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p78, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 65} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p93, $p95, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    $i88 := $i89;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p78, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, $i76);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i102 == 1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $p78, $i79 := $p98, $i88;
    goto $bb31_dummy;

  $bb28:
    assume $i80 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i79, 1);
    call {:si_unique_call 62} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p62, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i79);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p83, $mul.ref($i84, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p78, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 63} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p85, $p87, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i88 := $i81;
    goto $bb30;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p3);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p49 := (if $i48 == 1 then .str.38 else .str.39);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_35 := dev_warn.ref.ref.ref($p45, .str.40, $p49);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb16;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p2);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p36 := (if $i35 == 1 then .str.38 else .str.39);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_34 := dev_warn.ref.ref.ref($p32, .str.37, $p36);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb42_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  $bb31_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_276;
}



const virtnet_set_mac_address: ref;

axiom virtnet_set_mac_address == $sub.ref(0, 100278);

procedure virtnet_set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $CurrAddr;



implementation virtnet_set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i33: i32;
  var $i10: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p3 := netdev_priv($p0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i8 := eth_prepare_mac_addr_change($p0, $p1);
    call {:si_unique_call 79} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i11 := virtio_has_feature($p6, 23);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 81} {:cexpr "tmp___3"} boogie_si_record_i8($i12);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i26 := virtio_has_feature($p6, 5);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 86} {:cexpr "tmp___2"} boogie_si_record_i8($i27);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} eth_commit_mac_addr_change($p0, $p1);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb19;

  $bb19:
    call $i34, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i33 := virtnet_set_mac_address_loop_$bb19($p6, $p7, $p29, $i34, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i33);
    goto $bb19_last;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1)), $mul.ref($i34, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} virtio_cwrite8($p6, $i33, $i39);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i33, 1);
    call {:si_unique_call 90} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p29);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i32($i42, $i40);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i40;
    goto $bb21_dummy;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} sg_init_one($p2, $p15, $i18);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i19 := virtnet_send_command($p4, 1, 1, $p2);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 84} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 1488)), $mul.ref(8, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_37 := dev_warn.ref.ref($p24, .str.50);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_438;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 101310);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const virtnet_change_mtu: ref;

axiom virtnet_change_mtu == $sub.ref(0, 102342);

procedure virtnet_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation virtnet_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "virtnet_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 67);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i1, 65535);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const virtnet_stats: ref;

axiom virtnet_stats == $sub.ref(0, 103374);

procedure virtnet_stats($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation virtnet_stats($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i8: i32;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p2 := netdev_priv($p0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i5 := cpumask_next($sub.i32(0, 1), $p4);
    call {:si_unique_call 96} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, $i6);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i63);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, $i67);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i71);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i75);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, $i79);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $i14, $i15, $p16, $p17, $i18, $p19, $i20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p52, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $i60, $i8 := virtnet_stats_loop_$bb4($p1, $p3, $p9, $p10, $i11, $i12, $p13, $i14, $i15, $p16, $p17, $i18, $p19, $i20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p52, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $i60, $i8);
    goto $bb4_last;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 97} $i11 := devirtbounce(0, $p10);
    call {:si_unique_call 98} {:cexpr "__ptr"} boogie_si_record_i64($i11);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i12, 8));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i11);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p17, $i18, $p19, $i20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28 := virtnet_stats_loop_$bb6($p16, $p17, $i18, $p19, $i20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28);
    goto $bb6_last;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i18 := u64_stats_fetch_begin_irq($p17);
    call {:si_unique_call 100} {:cexpr "start"} boogie_si_record_i32($i18);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    call {:si_unique_call 101} {:cexpr "tpackets"} boogie_si_record_i64($i20);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    call {:si_unique_call 102} {:cexpr "tbytes"} boogie_si_record_i64($i22);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i24 := u64_stats_fetch_retry_irq($p23, $i18);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 104} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i20, $i22;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p29, $i30, $p31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $i40 := virtnet_stats_loop_$bb10($p16, $p29, $i30, $p31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $i40);
    goto $bb10_last;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i30 := u64_stats_fetch_begin_irq($p29);
    call {:si_unique_call 106} {:cexpr "start"} boogie_si_record_i32($i30);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    call {:si_unique_call 107} {:cexpr "rpackets"} boogie_si_record_i64($i32);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    call {:si_unique_call 108} {:cexpr "rbytes"} boogie_si_record_i64($i34);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i36 := u64_stats_fetch_retry_irq($p35, $i30);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 110} {:cexpr "tmp___1"} boogie_si_record_i8($i37);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i32, $i34;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, $i39);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i43);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, $i27);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i47);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, $i40);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $i28);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i58 := cpumask_next($i8, $p57);
    call {:si_unique_call 112} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, $i59);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i58;
    goto $bb14_dummy;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb11_dummy;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb7_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_498;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_487;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;
}



const virtnet_vlan_rx_add_vid: ref;

axiom virtnet_vlan_rx_add_vid == $sub.ref(0, 104406);

procedure virtnet_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 115} {:cexpr "virtnet_vlan_rx_add_vid:arg:proto"} boogie_si_record_i16($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p5 := netdev_priv($p0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} sg_init_one($p4, $p7, 2);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i8 := virtnet_send_command($p6, 2, 0, $p4);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p3);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_38 := dev_warn.ref.ref.i32($p13, .str.43, $i15);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const virtnet_vlan_rx_kill_vid: ref;

axiom virtnet_vlan_rx_kill_vid == $sub.ref(0, 105438);

procedure virtnet_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 123} {:cexpr "virtnet_vlan_rx_kill_vid:arg:proto"} boogie_si_record_i16($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p5 := netdev_priv($p0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} sg_init_one($p4, $p7, 2);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i8 := virtnet_send_command($p6, 2, 1, $p4);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 127} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p3);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_39 := dev_warn.ref.ref.i32($p13, .str.42, $i15);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const virtnet_netpoll: ref;

axiom virtnet_netpoll == $sub.ref(0, 106470);

procedure virtnet_netpoll($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation virtnet_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p1 := netdev_priv($p0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i16, $i7 := virtnet_netpoll_loop_$bb4($p2, $p3, $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i16, $i7);
    goto $bb4_last;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 1040)), $mul.ref(8, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} napi_schedule($p12);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i7, 1);
    call {:si_unique_call 131} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p3);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, $i13);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_607;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 107502);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const napi_schedule: ref;

axiom napi_schedule == $sub.ref(0, 108534);

procedure napi_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i1 := napi_schedule_prep($p0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 133} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} __napi_schedule($p0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 109566);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i1 := napi_disable_pending($p0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 138} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 110598);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 111630);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 140} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 112662);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 142} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 143} devirtbounce.1(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 113694);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const sg_init_one: ref;

axiom sg_init_one == $sub.ref(0, 114726);

procedure sg_init_one($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation sg_init_one($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "sg_init_one:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_send_command: ref;

axiom virtnet_send_command == $sub.ref(0, 115758);

procedure virtnet_send_command($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_send_command($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i1)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i56: i1;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 152} {:cexpr "virtnet_send_command:arg:class"} boogie_si_record_i8($i1);
    call {:si_unique_call 153} {:cexpr "virtnet_send_command:arg:cmd"} boogie_si_record_i8($i2);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $sub.i8(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i12 := virtio_has_feature($p11, 17);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 155} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 157} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i2);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p7);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} sg_init_one($p5, $p21, 2);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i22 := $add.i32(0, 1);
    call {:si_unique_call 160} {:cexpr "out_num"} boogie_si_record_i32($i22);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64(0);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i23, 8));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, $p5);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p3);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i22;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} sg_init_one($p6, $p8, 1);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i31, 8));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, $p6);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i30, 1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, 4);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 164} {:cexpr "tmp___5"} boogie_si_record_i64($i37);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(8, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_40 := virtqueue_add_sgs($p40, $p41, $i30, 1, $p42, 32);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(8, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i46 := virtqueue_kick($p45);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    call {:si_unique_call 168} {:cexpr "tmp___6"} boogie_si_record_i8($i47);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 170} {:cexpr "tmp___8"} boogie_si_record_i64($i51);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(8, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p59 := virtqueue_get_buf($p58, $p9);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p8);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i56 := $i75;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb22:
    assume $i61 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call $p62, $p63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72 := virtnet_send_command_loop_$bb25($p0, $p9, $p57, $p62, $p63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72);
    goto $bb25_last;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i68 := virtqueue_is_broken($p67);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    call {:si_unique_call 173} {:cexpr "tmp___10"} boogie_si_record_i8($i69);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} cpu_relax();
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p57);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p63 := virtqueue_get_buf($p62, $p9);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb27_dummy;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb31;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p8);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb20;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb17;

  $bb11:
    assume $i38 == 1;
    call {:si_unique_call 165} devirtbounce.2(0, .str.2, 977, 12);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call virtnet_send_command_loop_$bb13();
    goto $bb13_last;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i22, 1);
    call {:si_unique_call 161} {:cexpr "out_num"} boogie_si_record_i32($i27);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i22);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i28, 8));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, $p3);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    call {:si_unique_call 158} devirtbounce.2(0, .str.2, 962, 12);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call virtnet_send_command_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(8, 1));
    goto corral_source_split_765;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 116790);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 180} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const virtio_has_feature: ref;

axiom virtio_has_feature == $sub.ref(0, 117822);

procedure virtio_has_feature($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation virtio_has_feature($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "virtio_has_feature:arg:fbit"} boogie_si_record_i32($i1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 31);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i1, 27);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1472, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i11 := variable_test_bit($i8, $p10);
    call {:si_unique_call 190} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} virtio_check_driver_offered_feature($p0, $i1);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 187} devirtbounce.2(0, .str.1, 91, 12);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call virtio_has_feature_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 118854);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 192} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const virtqueue_add_sgs: ref;

axiom virtqueue_add_sgs == $sub.ref(0, 119886);

procedure virtqueue_add_sgs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation virtqueue_add_sgs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} {:cexpr "virtqueue_add_sgs:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 194} {:cexpr "virtqueue_add_sgs:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 195} {:cexpr "virtqueue_add_sgs:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 1} true;
    call {:si_unique_call 196} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 197} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const virtqueue_kick: ref;

axiom virtqueue_kick == $sub.ref(0, 120918);

procedure virtqueue_kick($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation virtqueue_kick($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 199} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 121950);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} rep_nop();
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    return;
}



const virtqueue_get_buf: ref;

axiom virtqueue_get_buf == $sub.ref(0, 122982);

procedure virtqueue_get_buf($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation virtqueue_get_buf($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p2 := external_alloc();
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const virtqueue_is_broken: ref;

axiom virtqueue_is_broken == $sub.ref(0, 124014);

procedure virtqueue_is_broken($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation virtqueue_is_broken($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 125046);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 205} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 126078);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} devirtbounce.3(0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    return;
}



const virtio_check_driver_offered_feature: ref;

axiom virtio_check_driver_offered_feature == $sub.ref(0, 127110);

procedure virtio_check_driver_offered_feature($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation virtio_check_driver_offered_feature($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} {:cexpr "virtio_check_driver_offered_feature:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 128142);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 209} $i2 := devirtbounce.4(0, $p1, $i0);
    call {:si_unique_call 210} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const u64_stats_fetch_begin_irq: ref;

axiom u64_stats_fetch_begin_irq == $sub.ref(0, 129174);

procedure u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const u64_stats_fetch_retry_irq: ref;

axiom u64_stats_fetch_retry_irq == $sub.ref(0, 130206);

procedure u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} {:cexpr "u64_stats_fetch_retry_irq:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 131238);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 215} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_41 := cpumask_check($i0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 132270);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 217} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_42 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 220} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 222} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 225} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} warn_slowpath_null(.str.3, 108);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 133302);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 228} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 134334);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    return;
}



const eth_prepare_mac_addr_change: ref;

axiom eth_prepare_mac_addr_change == $sub.ref(0, 135366);

procedure eth_prepare_mac_addr_change($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_prepare_mac_addr_change($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const virtio_cwrite8: ref;

axiom virtio_cwrite8 == $sub.ref(0, 136398);

procedure virtio_cwrite8($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr;



implementation virtio_cwrite8($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 235} {:cexpr "virtio_cwrite8:arg:offset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i2);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 236} devirtbounce.5($p7, $p0, $i1, $p3, 1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    return;
}



const eth_commit_mac_addr_change: ref;

axiom eth_commit_mac_addr_change == $sub.ref(0, 137430);

procedure eth_commit_mac_addr_change($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation eth_commit_mac_addr_change($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 138462);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 238} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const sg_init_table: ref;

axiom sg_init_table == $sub.ref(0, 139494);

procedure sg_init_table($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sg_init_table($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "sg_init_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 140526);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const sg_set_buf: ref;

axiom sg_set_buf == $sub.ref(0, 141558);

procedure sg_set_buf($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sg_set_buf($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "sg_set_buf:arg:buflen"} boogie_si_record_i32($i2);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i4 := __virt_addr_valid($i3);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 243} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 245} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i12 := __phys_addr($i11);
    call {:si_unique_call 248} {:cexpr "tmp___2"} boogie_si_record_i64($i12);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i12, 12);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i13, 64));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4095);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} sg_set_page($p0, $p14, $i2, $i17);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 246} devirtbounce.2(0, .str.36, 115, 12);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call sg_set_buf_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 142590);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} free_($p0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 143622);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 251} $free($p0);
    return;
}



const __virt_addr_valid: ref;

axiom __virt_addr_valid == $sub.ref(0, 144654);

procedure __virt_addr_valid($i0: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __virt_addr_valid($i0: i64) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} {:cexpr "__virt_addr_valid:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 253} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 254} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 145686);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sg_set_page: ref;

axiom sg_set_page == $sub.ref(0, 146718);

procedure sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "sg_set_page:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 259} {:cexpr "sg_set_page:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} sg_assign_page($p0, $p1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i2);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    return;
}



const sg_assign_page: ref;

axiom sg_assign_page == $sub.ref(0, 147750);

procedure sg_assign_page($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sg_assign_page($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 3);
    call {:si_unique_call 261} {:cexpr "page_link"} boogie_si_record_i64($i4);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 3);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 2271560481);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 266} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 269} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i4, $i26);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i25 == 1;
    call {:si_unique_call 270} devirtbounce.2(0, .str.36, 68, 12);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call sg_assign_page_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 267} devirtbounce.2(0, .str.36, 67, 12);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_assign_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 264} devirtbounce.2(0, .str.36, 65, 12);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_assign_page_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 148782);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 272} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_get_queue_mapping: ref;

axiom skb_get_queue_mapping == $sub.ref(0, 149814);

procedure skb_get_queue_mapping($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_queue_mapping($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const free_old_xmit_skbs: ref;

axiom free_old_xmit_skbs == $sub.ref(0, 150846);

procedure free_old_xmit_skbs($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation free_old_xmit_skbs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p20: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(0, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 276} $i12 := devirtbounce.6(0, this_cpu_off, $p11);
    call {:si_unique_call 277} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i12);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p16 := virtqueue_get_buf($p15, $p1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p20 := $p16;
    goto $bb4;

  $bb4:
    call $p21, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $i35, $i36, $p38, $p39, $i40, $p41, $i42, $i43, $i44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p20, vslice_dummy_var_43 := free_old_xmit_skbs_loop_$bb4($p1, $p2, $p13, $p14, $p21, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $i35, $i36, $p38, $p39, $i40, $p41, $i42, $i43, $i44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p20, vslice_dummy_var_43);
    goto $bb4_last;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.4);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p22, .str.45);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, .str.2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p24, .str.46);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.8, $p26);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 824);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p26, $i29);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p30, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.9, $p31);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 280} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} u64_stats_update_begin($p38);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p20, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i40, $i43);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i48);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} u64_stats_update_begin($p50);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} dev_kfree_skb_any($p20);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p14);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p52 := virtqueue_get_buf($p51, $p1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i55 == 1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p52;
    goto $bb9_dummy;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_43 := __dynamic_pr_debug.ref.ref.ref($p2, .str.46, $p20);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;
}



const xmit_skb: ref;

axiom xmit_skb == $sub.ref(0, 151878);

procedure xmit_skb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation xmit_skb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p65: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i1;
  var $i96: i8;
  var $i97: i1;
  var $i98: i32;
  var $i99: i16;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i16;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i16;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i32;
  var $i153: i8;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $i180: i32;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: ref;
  var vslice_dummy_var_46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(0, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.4);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p16, .str.47);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, .str.2);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p18, .str.48);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.8, $p20);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 844);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p20, $i23);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p24, 0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.9, $p25);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p14, $mul.ref(0, 568)), $mul.ref(51, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i55);
    call {:si_unique_call 294} {:cexpr "can_push"} boogie_si_record_i8($i56);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p65 := skb_vnet_hdr($p1);
    assume {:verifier.code 0} true;
    $p64 := $p65;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(124, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 12);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, 0);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i95 := skb_is_gso($p1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i8($i95);
    call {:si_unique_call 299} {:cexpr "tmp___12"} boogie_si_record_i8($i96);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i8.i1($i96);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i97 == 1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p162, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, 0);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p14, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.0, $p166);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i8.i1($i167);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i8.i1($i56);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i172 == 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(8, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p64);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} sg_set_buf($p182, $p183, $i39);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(8, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(1, 40));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i189 := skb_to_sgvec($p1, $p186, 0, $i188);
    call {:si_unique_call 314} {:cexpr "tmp___14"} boogie_si_record_i32($i189);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 1);
    call {:si_unique_call 315} {:cexpr "num_sg"} boogie_si_record_i32($i190);
    assume {:verifier.code 0} true;
    $i180 := $i190;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(0, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(8, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i196 := virtqueue_add_outbuf($p192, $p194, $i180, $p195, 32);
    call {:si_unique_call 317} {:cexpr "tmp___15"} boogie_si_record_i32($i196);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $r := $i196;
    return;

  $bb44:
    assume $i172 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_45 := __skb_push($p1, $i39);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 808)), $mul.ref(8, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i178 := skb_to_sgvec($p1, $p175, 0, $i177);
    call {:si_unique_call 310} {:cexpr "tmp___13"} boogie_si_record_i32($i178);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_46 := __skb_pull($p1, $i39);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i180 := $i178;
    goto $bb46;

  $bb41:
    assume $i168 == 1;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p170, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb25:
    assume $i97 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i98 := skb_headlen($p1);
    call {:si_unique_call 301} {:cexpr "tmp___5"} boogie_si_record_i32($i98);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p102, $i99);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p103 := skb_end_pointer($p1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, $i106);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p110 := skb_end_pointer($p1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i116 == 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p120 := skb_end_pointer($p1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.0, $p122);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 16);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i126 == 1);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p130 := skb_end_pointer($p1);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p132);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 2);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i136 == 1);
    call {:si_unique_call 307} devirtbounce.2(0, .str.2, 879, 12);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    call xmit_skb_loop_$bb36();
    goto $bb36_last;

  $bb33:
    assume $i136 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, 3);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p140 := skb_end_pointer($p1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.0, $p142);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, 8);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i146 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, 128);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p156, $i153);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume $i126 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 4);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i116 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i74 := skb_checksum_start_offset($p1);
    call {:si_unique_call 297} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, $i75);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p64, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i82);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i39);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64(0, $i60);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p59, $mul.ref($i61, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p64 := $p62;
    goto $bb21;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb9;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i48 := skb_header_cloned($p1);
    call {:si_unique_call 291} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb18;

  $bb12:
    assume $i49 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i50 := skb_headroom($p1);
    call {:si_unique_call 293} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i51 := $uge.i32($i50, $i39);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb17;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb16;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i39 := 12;
    goto $bb6;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_44 := __dynamic_pr_debug.ref.ref.ref.ref.ref($p2, .str.48, $p34, $p1, $p7);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;
}



const net_ratelimit: ref;

axiom net_ratelimit == $sub.ref(0, 152910);

procedure net_ratelimit() returns ($r: i32);
  free requires assertsPassed;



implementation net_ratelimit() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 153942);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    return;
}



const skb_orphan: ref;

axiom skb_orphan == $sub.ref(0, 154974);

procedure skb_orphan($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.18, $CurrAddr, $M.13, $M.12, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation skb_orphan($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    call {:si_unique_call 324} devirtbounce.2(0, .str.49, 1974, 12);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call skb_orphan_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 321} devirtbounce.7($p6, $p0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const nf_reset: ref;

axiom nf_reset == $sub.ref(0, 156006);

procedure nf_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nf_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(136, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} nf_conntrack_put($p2);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(136, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} nf_bridge_put($p5);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    return;
}



const netif_stop_subqueue: ref;

axiom netif_stop_subqueue == $sub.ref(0, 157038);

procedure netif_stop_subqueue($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation netif_stop_subqueue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "netif_stop_subqueue:arg:queue_index"} boogie_si_record_i16($i1);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p3 := netdev_get_tx_queue($p0, $i2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} netif_tx_stop_queue($p3);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    return;
}



const virtqueue_enable_cb_delayed: ref;

axiom virtqueue_enable_cb_delayed == $sub.ref(0, 158070);

procedure virtqueue_enable_cb_delayed($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation virtqueue_enable_cb_delayed($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 331} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_start_subqueue: ref;

axiom netif_start_subqueue == $sub.ref(0, 159102);

procedure netif_start_subqueue($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation netif_start_subqueue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} {:cexpr "netif_start_subqueue:arg:queue_index"} boogie_si_record_i16($i1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p3 := netdev_get_tx_queue($p0, $i2);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} netif_tx_start_queue($p3);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    return;
}



const virtqueue_disable_cb: ref;

axiom virtqueue_disable_cb == $sub.ref(0, 160134);

procedure virtqueue_disable_cb($p0: ref);
  free requires assertsPassed;



implementation virtqueue_disable_cb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 161166);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 162198);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} clear_bit(0, $p1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 163230);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 338} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 164262);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 339} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 341} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 344} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} set_bit(0, $p15);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_47 := printk.ref(.str.15);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} warn_slowpath_null(.str.14, 2212);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 165294);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 347} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 348} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 351} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 352} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 166326);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 354} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    return;
}



const nf_conntrack_put: ref;

axiom nf_conntrack_put == $sub.ref(0, 167358);

procedure nf_conntrack_put($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation nf_conntrack_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i4 := atomic_dec_and_test($p3);
    call {:si_unique_call 356} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} nf_conntrack_destroy($p0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nf_bridge_put: ref;

axiom nf_bridge_put == $sub.ref(0, 168390);

procedure nf_bridge_put($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation nf_bridge_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i4 := atomic_dec_and_test($p3);
    call {:si_unique_call 359} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} kfree($p6);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 169422);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 362} devirtbounce.9(0, $p2, $p1, $p2);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.10, $p1);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const nf_conntrack_destroy: ref;

axiom nf_conntrack_destroy == $sub.ref(0, 170454);

procedure nf_conntrack_destroy($p0: ref);
  free requires assertsPassed;



implementation nf_conntrack_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 171486);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 172518);

procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 364} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 366} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 368} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 369} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 370} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 372} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 375} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 173550);

procedure skb_header_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_header_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(124, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p7 := skb_end_pointer($p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 320)), $mul.ref(36, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i10 := atomic_read($p9);
    call {:si_unique_call 378} {:cexpr "dataref"} boogie_si_record_i32($i10);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65535);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i10, 16);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i11, $i12);
    call {:si_unique_call 379} {:cexpr "dataref"} boogie_si_record_i32($i13);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 174582);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const skb_vnet_hdr: ref;

axiom skb_vnet_hdr == $sub.ref(0, 175614);

procedure skb_vnet_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_vnet_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_checksum_start_offset: ref;

axiom skb_checksum_start_offset == $sub.ref(0, 176646);

procedure skb_checksum_start_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_checksum_start_offset($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i1 := skb_headroom($p0);
    call {:si_unique_call 381} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, $i1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 177678);

procedure skb_is_gso($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p1 := skb_end_pointer($p0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 178710);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 179742);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __skb_push: ref;

axiom __skb_push == $sub.ref(0, 180774);

procedure __skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "__skb_push:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $i1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;
}



const skb_to_sgvec: ref;

axiom skb_to_sgvec == $sub.ref(0, 181806);

procedure skb_to_sgvec($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_to_sgvec($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 384} {:cexpr "skb_to_sgvec:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 385} {:cexpr "skb_to_sgvec:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 386} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 387} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __skb_pull: ref;

axiom __skb_pull == $sub.ref(0, 182838);

procedure __skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} {:cexpr "__skb_pull:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i7, $i9);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 390} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 391} devirtbounce.2(0, .str.49, 1587, 12);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __skb_pull_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const virtqueue_add_outbuf: ref;

axiom virtqueue_add_outbuf == $sub.ref(0, 183870);

procedure virtqueue_add_outbuf($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation virtqueue_add_outbuf($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 392} {:cexpr "virtqueue_add_outbuf:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 393} {:cexpr "virtqueue_add_outbuf:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 394} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 395} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 184902);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const u64_stats_update_begin: ref;

axiom u64_stats_update_begin == $sub.ref(0, 185934);

procedure u64_stats_update_begin($p0: ref);
  free requires assertsPassed;



implementation u64_stats_update_begin($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 186966);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 187998);

procedure napi_disable($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} __might_sleep(.str.14, 476, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} set_bit(1, $p1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} clear_bit(1, $p7);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} msleep(1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 189030);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 407} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 190062);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    return;
}



const try_fill_recv: ref;

axiom try_fill_recv == $sub.ref(0, 191094);

procedure try_fill_recv($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.12;



implementation try_fill_recv($p0: ref, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i19: i32;
  var $i14: i32;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i25: i8;
  var $p32: ref;
  var $p33: ref;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var vslice_dummy_var_48: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "try_fill_recv:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i1, 256);
    call {:si_unique_call 410} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p10, $i11, $i12, $i13, $p15, $i16, $i17, $i18, $i20, $i19, $i14, $i21, $i22, $i23, $i24, $p26, $p27, $p28, $i29, $i30, $i31 := try_fill_recv_loop_$bb1($p0, $p8, $i9, $p10, $i11, $i12, $i13, $p15, $i16, $i17, $i18, $i20, $i19, $i14, $i21, $i22, $i23, $i24, $p26, $p27, $p28, $i29, $i30, $i31);
    goto $bb1_last;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i20 := add_recvbuf_small($p0, $i9);
    call {:si_unique_call 417} {:cexpr "err"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $sub.i32(0, 12));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 413} {:cexpr "oom"} boogie_si_record_i8($i22);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i31 := $i22;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i25 := $i31;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_48 := virtqueue_kick($p33);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i25);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i38 := $xor.i1($i37, 1);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i18 := add_recvbuf_big($p0, $i9);
    call {:si_unique_call 415} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb2:
    assume $i12 == 1;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i13 := add_recvbuf_mergeable($p0, $i9);
    call {:si_unique_call 412} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb4;

  $bb12_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_1675;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 192126);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 421} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const virtnet_napi_enable: ref;

axiom virtnet_napi_enable == $sub.ref(0, 193158);

procedure virtnet_napi_enable($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation virtnet_napi_enable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(8, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} napi_enable($p1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(8, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i3 := napi_schedule_prep($p2);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} virtqueue_disable_cb($p7);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} local_bh_disable();
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(8, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} __napi_schedule($p8);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} local_bh_enable();
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 194190);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 430} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 432} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 434} devirtbounce.3(0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} clear_bit(0, $p8);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 433} devirtbounce.2(0, .str.14, 492, 12);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 195222);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __local_bh_disable_ip(0, 512);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 196254);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __local_bh_enable_ip(0, 512);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_enable_ip: ref;

axiom __local_bh_enable_ip == $sub.ref(0, 197286);

procedure __local_bh_enable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_enable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "__local_bh_enable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 439} {:cexpr "__local_bh_enable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_disable_ip: ref;

axiom __local_bh_disable_ip == $sub.ref(0, 198318);

procedure __local_bh_disable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_disable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} {:cexpr "__local_bh_disable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 441} {:cexpr "__local_bh_disable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 199350);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i3 := queue_delayed_work_on(8192, $p0, $p1, $i2);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 444} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 200382);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 446} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 447} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 448} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const add_recvbuf_mergeable: ref;

axiom add_recvbuf_mergeable == $sub.ref(0, 201414);

procedure add_recvbuf_mergeable($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation add_recvbuf_mergeable($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} {:cexpr "add_recvbuf_mergeable:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(200, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i4 := get_mergeable_buf_len($p3);
    call {:si_unique_call 451} {:cexpr "len"} boogie_si_record_i32($i4);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i5 := skb_page_frag_refill($i4, $p2, $i1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 453} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 455} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p15 := lowmem_page_address($p14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p15, $mul.ref($i18, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i20 := mergeable_buf_to_ctx($p19, $i4);
    call {:si_unique_call 458} {:cexpr "ctx"} boogie_si_record_i64($i20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} get_page($p22);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $i4);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(12, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i28, $i30);
    call {:si_unique_call 460} {:cexpr "hole"} boogie_si_record_i32($i31);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i31, $i4);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} sg_init_one($p40, $p19, $i38);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i20);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i46 := virtqueue_add_inbuf($p42, $p44, 1, $p45, $i1);
    call {:si_unique_call 464} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p48 := virt_to_head_page($p19);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} put_page($p48);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i4, $i31);
    call {:si_unique_call 461} {:cexpr "len"} boogie_si_record_i32($i33);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i31);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i38 := $i33;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const add_recvbuf_big: ref;

axiom add_recvbuf_big == $sub.ref(0, 202446);

procedure add_recvbuf_big($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation add_recvbuf_big($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i8: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $p186: ref;
  var $p187: ref;
  var $p18: ref;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $p195: ref;
  var $p196: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} {:cexpr "add_recvbuf_big:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p2 := get_a_page($p0, $i1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p9 := lowmem_page_address($p2);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(18, 40));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} sg_set_buf($p12, $p9, 4096);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p38 := get_a_page($p0, $i1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p41 := lowmem_page_address($p38);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(17, 40));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} sg_set_buf($p44, $p41, 4096);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p2);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p38, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i45);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p48 := get_a_page($p0, $i1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p5 := $p38;
    assume {:branchcond $i50} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p51 := lowmem_page_address($p48);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(16, 40));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} sg_set_buf($p54, $p51, 4096);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p38);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p48, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i55);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p58 := get_a_page($p0, $i1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p5 := $p48;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p61 := lowmem_page_address($p58);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(15, 40));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} sg_set_buf($p64, $p61, 4096);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p48);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i65);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p68 := get_a_page($p0, $i1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p5 := $p58;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p71 := lowmem_page_address($p68);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(14, 40));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} sg_set_buf($p74, $p71, 4096);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p58);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p68, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i75);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p78 := get_a_page($p0, $i1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p5 := $p68;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p81 := lowmem_page_address($p78);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(13, 40));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} sg_set_buf($p84, $p81, 4096);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p68);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p78, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p87, $i85);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p88 := get_a_page($p0, $i1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p5 := $p78;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p91 := lowmem_page_address($p88);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(12, 40));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} sg_set_buf($p94, $p91, 4096);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p78);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p88, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i95);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p98 := get_a_page($p0, $i1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p5 := $p88;
    assume {:branchcond $i100} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p101 := lowmem_page_address($p98);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(11, 40));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} sg_set_buf($p104, $p101, 4096);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p88);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p98, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p107, $i105);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p108 := get_a_page($p0, $i1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p5 := $p98;
    assume {:branchcond $i110} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p111 := lowmem_page_address($p108);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(10, 40));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} sg_set_buf($p114, $p111, 4096);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p98);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p108, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p117, $i115);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p118 := get_a_page($p0, $i1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p5 := $p108;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p121 := lowmem_page_address($p118);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(9, 40));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} sg_set_buf($p124, $p121, 4096);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p108);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p118, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p127, $i125);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p128 := get_a_page($p0, $i1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p5 := $p118;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p131 := lowmem_page_address($p128);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(8, 40));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} sg_set_buf($p134, $p131, 4096);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p118);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p128, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p137, $i135);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p138 := get_a_page($p0, $i1);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p5 := $p128;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p141 := lowmem_page_address($p138);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p143, $mul.ref(7, 40));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} sg_set_buf($p144, $p141, 4096);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p128);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p138, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p147, $i145);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p148 := get_a_page($p0, $i1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i149, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p5 := $p138;
    assume {:branchcond $i150} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p151 := lowmem_page_address($p148);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(6, 40));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} sg_set_buf($p154, $p151, 4096);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p138);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p148, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, $i155);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p158 := get_a_page($p0, $i1);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i160 := $eq.i64($i159, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p5 := $p148;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p161 := lowmem_page_address($p158);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(5, 40));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} sg_set_buf($p164, $p161, 4096);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p148);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p158, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p167, $i165);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p168 := get_a_page($p0, $i1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i170 := $eq.i64($i169, 0);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p5 := $p158;
    assume {:branchcond $i170} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p171 := lowmem_page_address($p168);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(4, 40));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} sg_set_buf($p174, $p171, 4096);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p158);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p168, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p177, $i175);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p178 := get_a_page($p0, $i1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p5 := $p168;
    assume {:branchcond $i180} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p181 := lowmem_page_address($p178);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p183, $mul.ref(3, 40));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} sg_set_buf($p184, $p181, 4096);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p168);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p178, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p187, $i185);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p18 := get_a_page($p0, $i1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p18);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i189 := $eq.i64($i188, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p5 := $p178;
    assume {:branchcond $i189} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p190 := lowmem_page_address($p18);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p192, $mul.ref(2, 40));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} sg_set_buf($p193, $p190, 4096);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p178);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p196, $i194);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p15 := get_a_page($p0, $i1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p19 := lowmem_page_address($p15);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} sg_set_buf($p21, $p19, 10);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1, 40));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64(16);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p19, $mul.ref($i25, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(4096, 16);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} sg_set_buf($p24, $p26, $i27);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p18);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i28);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p15);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i36 := virtqueue_add_inbuf($p32, $p34, 19, $p35, $i1);
    call {:si_unique_call 479} {:cexpr "err"} boogie_si_record_i32($i36);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} give_pages($p0, $p15);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} give_pages($p0, $p18);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb9;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb9;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} give_pages($p0, $p5);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb4;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb4;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb4;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb4;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb4;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb4;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb4;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb4;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb4;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb4;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb4;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb4;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;
}



const add_recvbuf_small: ref;

axiom add_recvbuf_small == $sub.ref(0, 203478);

procedure add_recvbuf_small($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.12;



implementation add_recvbuf_small($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i18: i32;
  var vslice_dummy_var_49: ref;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "add_recvbuf_small:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p11 := __netdev_alloc_skb_ip_align($p10, 1518, $i1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_49 := skb_put($p11, 1518);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p20 := skb_vnet_hdr($p11);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} sg_set_buf($p22, $p25, 10);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(1, 40));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_50 := skb_to_sgvec($p11, $p28, 0, $i30);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(240, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p11);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i37 := virtqueue_add_inbuf($p33, $p35, 2, $p36, $i1);
    call {:si_unique_call 537} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p11);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_skb_free($p39);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;
}



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 204510);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} {:cexpr "__netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    call {:si_unique_call 540} {:cexpr "__netdev_alloc_skb_ip_align:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p3 := __netdev_alloc_skb($p0, $i1, $i2);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 205542);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p2 := external_alloc();
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const virtqueue_add_inbuf: ref;

axiom virtqueue_add_inbuf == $sub.ref(0, 206574);

procedure virtqueue_add_inbuf($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation virtqueue_add_inbuf($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} {:cexpr "virtqueue_add_inbuf:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 545} {:cexpr "virtqueue_add_inbuf:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 546} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 207606);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.12;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p1 := $M.11;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv_set_remove($p1, $p2);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 208638);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.13, $M.12;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i2 := $M.12;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 550} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i18 := $M.12;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.12;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $M.12 := $i31;
    call {:si_unique_call 552} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.13, $p22);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p26, $p23);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 551} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i28 := $M.12;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.13, $p7);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 549} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i14 := $M.12;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 209670);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 554} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p3 := external_alloc();
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const get_a_page: ref;

axiom get_a_page == $sub.ref(0, 210702);

procedure get_a_page($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_a_page($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} {:cexpr "get_a_page:arg:gfp_mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(192, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p14 := alloc_pages($i1, 0);
    assume {:verifier.code 0} true;
    $p13 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(192, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p13 := $p3;
    goto $bb3;
}



const give_pages: ref;

axiom give_pages == $sub.ref(0, 211734);

procedure give_pages($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation give_pages($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p7: ref;
  var $p16: ref;
  var $p6: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(192, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i19);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(192, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p7 := $p1;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $p7, $p16 := give_pages_loop_$bb4($p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $p7, $p16);
    goto $bb4_last;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p6 := $p16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2255;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 212766);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 213798);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 559} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 214830);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 562} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p2 := external_alloc();
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const get_mergeable_buf_len: ref;

axiom get_mergeable_buf_len == $sub.ref(0, 215862);

procedure get_mergeable_buf_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_mergeable_buf_len($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i1 := ewma_read($p0);
    call {:si_unique_call 565} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    call {:si_unique_call 566} {:cexpr "__val"} boogie_si_record_i32($i2);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32(12);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(4096, $i3);
    call {:si_unique_call 567} {:cexpr "__max"} boogie_si_record_i32($i4);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32(1518, $i2);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32($i4, $i6);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32(12);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    call {:si_unique_call 568} {:cexpr "len"} boogie_si_record_i32($i10);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32(64, 256);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i12 := 256;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i10);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32(64, 256);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i16 := 256;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, $i16);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i14, $i17);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i16 := 64;
    goto $bb12;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i12 := 64;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i6 := 1518;
    goto $bb3;
}



const skb_page_frag_refill: ref;

axiom skb_page_frag_refill == $sub.ref(0, 216894);

procedure skb_page_frag_refill($i0: i32, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation skb_page_frag_refill($i0: i32, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} {:cexpr "skb_page_frag_refill:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 570} {:cexpr "skb_page_frag_refill:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 571} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 572} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mergeable_buf_to_ctx: ref;

axiom mergeable_buf_to_ctx == $sub.ref(0, 217926);

procedure mergeable_buf_to_ctx($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation mergeable_buf_to_ctx($p0: ref, $i1: i32) returns ($r: i64)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} {:cexpr "mergeable_buf_to_ctx:arg:truesize"} boogie_si_record_i32($i1);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32(64, 256);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i3 := 256;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i1, $i3);
    call {:si_unique_call 574} {:cexpr "size"} boogie_si_record_i32($i4);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i6, $i7);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i3 := 64;
    goto $bb3;
}



const get_page: ref;

axiom get_page == $sub.ref(0, 218958);

procedure get_page($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i1 := PageTail($p0);
    call {:si_unique_call 576} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 578} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i17 := atomic_read($p16);
    call {:si_unique_call 584} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 586} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} atomic_inc($p26);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} dump_page($p0, .str.34);
    call {:si_unique_call 588} devirtbounce.2(0, .str.35, 509, 12);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call get_page_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i7 := __get_page_tail($p0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i64($i9);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 582} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const virt_to_head_page: ref;

axiom virt_to_head_page == $sub.ref(0, 219990);

procedure virt_to_head_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation virt_to_head_page($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i2 := __phys_addr($i1);
    call {:si_unique_call 591} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i2, 12);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i3, 64));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p5 := compound_head($p4);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 221022);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    return;
}



const compound_head: ref;

axiom compound_head == $sub.ref(0, 222054);

procedure compound_head($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation compound_head($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i1 := PageTail($p0);
    call {:si_unique_call 594} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 596} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p7 := compound_head_by_tail($p0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb3;
}



const PageTail: ref;

axiom PageTail == $sub.ref(0, 223086);

procedure PageTail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PageTail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i2 := constant_test_bit(15, $p1);
    call {:si_unique_call 599} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const compound_head_by_tail: ref;

axiom compound_head_by_tail == $sub.ref(0, 224118);

procedure compound_head_by_tail($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation compound_head_by_tail($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 600} devirtbounce.3(0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i4 := PageTail($p0);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i8 := ldv__builtin_expect($i7, 1);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb3;
}



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 225150);

procedure __get_page_tail($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation __get_page_tail($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dump_page: ref;

axiom dump_page == $sub.ref(0, 226182);

procedure dump_page($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_page($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 227214);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 607} devirtbounce.10(0, $p1, $p1);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    return;
}



const ewma_read: ref;

axiom ewma_read == $sub.ref(0, 228246);

procedure ewma_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ewma_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i2, $i6);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const virtnet_get_drvinfo: ref;

axiom virtnet_get_drvinfo == $sub.ref(0, 229278);

procedure virtnet_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation virtnet_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_51: i64;
  var vslice_dummy_var_52: i64;
  var vslice_dummy_var_53: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p2 := netdev_priv($p0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_51 := strlcpy($p7, .str.4, 32);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_52 := strlcpy($p10, .str.5, 32);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p12 := virtio_bus_name($p5);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_53 := strlcpy($p14, $p12, 32);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 230310);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 613} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 614} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const virtnet_get_ringparam: ref;

axiom virtnet_get_ringparam == $sub.ref(0, 231342);

procedure virtnet_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation virtnet_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p2 := netdev_priv($p0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i8 := virtqueue_get_vring_size($p7);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 808)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i14 := virtqueue_get_vring_size($p13);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_get_channels: ref;

axiom virtnet_get_channels == $sub.ref(0, 232374);

procedure virtnet_get_channels($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation virtnet_get_channels($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p2 := netdev_priv($p0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_set_channels: ref;

axiom virtnet_set_channels == $sub.ref(0, 233406);

procedure virtnet_set_channels($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.12, $M.17;



implementation virtnet_set_channels($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i16: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p2 := netdev_priv($p0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    call {:si_unique_call 620} {:cexpr "queue_pairs"} boogie_si_record_i16($i6);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i6);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, $i20);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i6);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} get_online_cpus();
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i6);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i26 := virtnet_set_queues($p3, $i25);
    call {:si_unique_call 623} {:cexpr "err"} boogie_si_record_i32($i26);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} put_online_cpus();
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i6);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_54 := netif_set_real_num_tx_queues($p0, $i28);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i6);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_55 := netif_set_real_num_rx_queues($p0, $i30);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} virtnet_set_affinity($p3);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const get_online_cpus: ref;

axiom get_online_cpus == $sub.ref(0, 234438);

procedure get_online_cpus();
  free requires assertsPassed;



implementation get_online_cpus()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_set_queues: ref;

axiom virtnet_set_queues == $sub.ref(0, 235470);

procedure virtnet_set_queues($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_set_queues($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i9: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 630} {:cexpr "virtnet_set_queues:arg:queue_pairs"} boogie_si_record_i16($i1);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(50, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i12 := virtio_has_feature($p11, 22);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 632} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} sg_init_one($p2, $p18, 2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i19 := virtnet_send_command($p0, 4, 0, $p2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 635} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_57 := schedule_delayed_work($p32, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i1);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_56 := dev_warn.ref.ref.i32($p24, .str, $i25);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb13;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;
}



const netif_set_real_num_tx_queues: ref;

axiom netif_set_real_num_tx_queues == $sub.ref(0, 236502);

procedure netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 638} {:cexpr "netif_set_real_num_tx_queues:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_set_real_num_rx_queues: ref;

axiom netif_set_real_num_rx_queues == $sub.ref(0, 237534);

procedure netif_set_real_num_rx_queues($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_set_real_num_rx_queues($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 641} {:cexpr "netif_set_real_num_rx_queues:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const virtnet_set_affinity: ref;

axiom virtnet_set_affinity == $sub.ref(0, 238566);

procedure virtnet_set_affinity($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation virtnet_set_affinity($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i15: i32;
  var $i16: i32;
  var $p43: ref;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i6 := cpumask_weight($p5);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, $i6);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i12 := cpumask_next($sub.i32(0, 1), $p11);
    call {:si_unique_call 649} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, $i13);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(536, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i12, 0;
    goto $bb11;

  $bb11:
    call $p17, $p18, $i19, $p21, $p22, $p24, $p25, $i26, $p28, $p29, $p31, $p32, $p33, $i34, $i35, $i36, $i38, $p39, $i40, $i41, $i42, $i15, $i16, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60 := virtnet_set_affinity_loop_$bb11($p0, $p17, $p18, $i19, $p21, $p22, $p24, $p25, $i26, $p28, $p29, $p31, $p32, $p33, $i34, $i35, $i36, $i38, $p39, $i40, $i41, $i42, $i15, $i16, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60);
    goto $bb11_last;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_58 := virtqueue_set_affinity($p22, $i15);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i16);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 808)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_59 := virtqueue_set_affinity($p29, $i15);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p31 := get_cpu_mask($i15);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i16);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_60 := netif_set_xps_queue($p33, $p31, $i36);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i16, 1);
    call {:si_unique_call 654} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i40 := cpumask_next($i15, $p39);
    call {:si_unique_call 656} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, $i41);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i15, $i16 := $i40, $i38;
    goto $bb13_dummy;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} virtnet_clean_affinity($p0, $sub.i64(0, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} virtnet_clean_affinity($p0, $sub.i64(0, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;
}



const put_online_cpus: ref;

axiom put_online_cpus == $sub.ref(0, 239598);

procedure put_online_cpus();
  free requires assertsPassed;



implementation put_online_cpus()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_clean_affinity: ref;

axiom virtnet_clean_affinity == $sub.ref(0, 240630);

procedure virtnet_clean_affinity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation virtnet_clean_affinity($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i9: i32;
  var $p28: ref;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "virtnet_clean_affinity:arg:hcpu"} boogie_si_record_i64($i1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(536, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(536, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    call $p10, $p11, $i12, $p14, $p15, $p17, $p18, $i19, $p21, $p22, $i24, $i25, $i26, $i27, $i9, vslice_dummy_var_61, vslice_dummy_var_62 := virtnet_clean_affinity_loop_$bb6($p0, $p5, $p10, $p11, $i12, $p14, $p15, $p17, $p18, $i19, $p21, $p22, $i24, $i25, $i26, $i27, $i9, vslice_dummy_var_61, vslice_dummy_var_62);
    goto $bb6_last;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_61 := virtqueue_set_affinity($p15, $sub.i32(0, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i9);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 808)), $mul.ref(0, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_62 := virtqueue_set_affinity($p22, $sub.i32(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i9, 1);
    call {:si_unique_call 660} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p5);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, $i24);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i24;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 241662);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 662} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const virtqueue_set_affinity: ref;

axiom virtqueue_set_affinity == $sub.ref(0, 242694);

procedure virtqueue_set_affinity($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation virtqueue_set_affinity($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} {:cexpr "virtqueue_set_affinity:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 664} $i14 := devirtbounce.11($p13, $p0, $i1);
    call {:si_unique_call 665} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const get_cpu_mask: ref;

axiom get_cpu_mask == $sub.ref(0, 243726);

procedure get_cpu_mask($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_cpu_mask($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} {:cexpr "get_cpu_mask:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 63);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i32($i0, 64);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    $i8 := $add.i64($i3, $i7);
    $p9 := $add.ref($add.ref($add.ref(cpu_bit_bitmap, $mul.ref(0, 66560)), $mul.ref(0, 1024)), $mul.ref($i8, 8));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const netif_set_xps_queue: ref;

axiom netif_set_xps_queue == $sub.ref(0, 244758);

procedure netif_set_xps_queue($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation netif_set_xps_queue($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 667} {:cexpr "netif_set_xps_queue:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 245790);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 672} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 246822);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 673} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const virtqueue_get_vring_size: ref;

axiom virtqueue_get_vring_size == $sub.ref(0, 247854);

procedure virtqueue_get_vring_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation virtqueue_get_vring_size($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 248886);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const virtio_bus_name: ref;

axiom virtio_bus_name == $sub.ref(0, 249918);

procedure virtio_bus_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation virtio_bus_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 681} $p12 := devirtbounce.12($p11, $p0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p7 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p7 := .str.6;
    goto $bb3;
}



const mergeable_rx_buffer_size_show: ref;

axiom mergeable_rx_buffer_size_show == $sub.ref(0, 250950);

procedure mergeable_rx_buffer_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mergeable_rx_buffer_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p5 := netdev_priv($p4);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i7 := get_netdev_rx_queue_index($p0);
    call {:si_unique_call 684} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, $i7);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 686} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i7);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 1040)), $mul.ref(200, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i21 := get_mergeable_buf_len($p20);
    call {:si_unique_call 689} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i22 := sprintf.ref.ref.i32($p2, .str.51, $i21);
    call {:si_unique_call 691} {:cexpr "tmp___3"} boogie_si_record_i32($i22);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i15 == 1;
    call {:si_unique_call 687} devirtbounce.2(0, .str.2, 1639, 12);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call mergeable_rx_buffer_size_show_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_netdev_rx_queue_index: ref;

axiom get_netdev_rx_queue_index == $sub.ref(0, 251982);

procedure get_netdev_rx_queue_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_netdev_rx_queue_index($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(848, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i3, $i6);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i8 := $sdiv.i64($i7, 320);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 692} {:cexpr "index"} boogie_si_record_i32($i9);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(856, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i12 := $uge.i32($i9, $i11);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i16 == 1;
    call {:si_unique_call 695} devirtbounce.2(0, .str.14, 2541, 12);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call get_netdev_rx_queue_index_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 253014);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const virtnet_probe: ref;

axiom virtnet_probe == $sub.ref(0, 254046);

procedure virtnet_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.18, $CurrAddr, $M.20, $M.13, $M.12, $M.2, $M.17;



implementation virtnet_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i14: i16;
  var $i12: i16;
  var $i13: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i16;
  var $i20: i16;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i8;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i1;
  var $i64: i8;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i1;
  var $i71: i8;
  var $i72: i1;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i8;
  var $i92: i1;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i100: i1;
  var $i101: i8;
  var $i102: i1;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i1;
  var $i111: i8;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i136: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $i155: i1;
  var $i156: i8;
  var $i157: i1;
  var $p158: ref;
  var $i159: i1;
  var $i160: i8;
  var $i161: i1;
  var $p162: ref;
  var $i163: i1;
  var $i164: i8;
  var $i165: i1;
  var $p166: ref;
  var $i167: i1;
  var $i168: i8;
  var $i169: i1;
  var $p170: ref;
  var $i171: i1;
  var $i172: i8;
  var $i173: i1;
  var $p174: ref;
  var $i175: i1;
  var $i176: i8;
  var $i177: i1;
  var $p178: ref;
  var $i179: i1;
  var $i180: i8;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $i185: i1;
  var $p186: ref;
  var $i187: i8;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p196: ref;
  var $i197: i8;
  var $i198: i1;
  var $p199: ref;
  var $p200: ref;
  var $i201: i16;
  var $i202: i32;
  var $p204: ref;
  var $i205: i16;
  var $i206: i32;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i24;
  var $i217: i24;
  var $i218: i24;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i64;
  var $i223: i64;
  var $i224: i64;
  var $i225: i1;
  var $p228: ref;
  var $i229: i16;
  var $i230: i32;
  var $i231: i1;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $p236: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i1;
  var $i255: i32;
  var $i256: i16;
  var $i257: i32;
  var $i258: i1;
  var $i232: i32;
  var $p260: ref;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i24;
  var $i271: i24;
  var $i272: i24;
  var $p273: ref;
  var $p274: ref;
  var $i275: i8;
  var $i276: i64;
  var $i277: i64;
  var $i278: i64;
  var $i279: i1;
  var $p281: ref;
  var $p282: ref;
  var $i283: i1;
  var $i284: i8;
  var $i285: i1;
  var $p286: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i24;
  var $i296: i24;
  var $i297: i24;
  var $p298: ref;
  var $p299: ref;
  var $i300: i8;
  var $i301: i64;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $i254: i32;
  var $i227: i32;
  var $p309: ref;
  var $i195: i32;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i131: i32;
  var $i32: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i1;
  var vslice_dummy_var_67: i1;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i1;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i7 := virtio_has_feature($p0, 22);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 703} {:cexpr "tmp___2"} boogie_si_record_i8($i8);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i14 := virtio_cread16($p0, 8);
    call {:si_unique_call 705} {:cexpr "max_queue_pairs"} boogie_si_record_i16($i14);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i14, 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i13, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i12);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i12);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 32768);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i21 := virtio_has_feature($p0, 17);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 707} {:cexpr "tmp___4"} boogie_si_record_i8($i22);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i12;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i26;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i20);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i20);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p29 := alloc_etherdev_mqs(568, $i27, $i28);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 1179648);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, virtnet_netdev);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, 32);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, virtnet_ethtool_ops);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(8, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p40);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i43 := virtio_has_feature($p0, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 710} {:cexpr "tmp___11"} boogie_si_record_i8($i44);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i100 := virtio_has_feature($p0, 1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i8($i100);
    call {:si_unique_call 722} {:cexpr "tmp___12"} boogie_si_record_i8($i101);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i101);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p109, $i108);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i110 := virtio_has_feature($p0, 5);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i8($i110);
    call {:si_unique_call 724} {:cexpr "tmp___13"} boogie_si_record_i8($i111);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i112 == 1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} eth_hw_addr_random($p29);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p118 := netdev_priv($p29);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p29);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, $p0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p118);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p124 := __alloc_percpu(32, 8);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p124);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i133 := cpumask_next($sub.i32(0, 1), $p132);
    call {:si_unique_call 731} {:cexpr "tmp___16"} boogie_si_record_i32($i133);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i133, $i134);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} __mutex_init($p141, .str.7, $p1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(52, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(288, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __init_work($p143, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p144, 137438953408);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p3);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 736} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p147, $p148, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(288, 1)), $mul.ref(32, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} lockdep_init_map($p150, .str.8, $p2, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(288, 1)), $mul.ref(8, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} INIT_LIST_HEAD($p152);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(288, 1)), $mul.ref(24, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p154, virtnet_config_changed_work);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i155 := virtio_has_feature($p0, 7);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i156 := $zext.i1.i8($i155);
    call {:si_unique_call 740} {:cexpr "tmp___17"} boogie_si_record_i8($i156);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i8.i1($i156);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i157 == 1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i159 := virtio_has_feature($p0, 8);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i160 := $zext.i1.i8($i159);
    call {:si_unique_call 742} {:cexpr "tmp___18"} boogie_si_record_i8($i160);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i8.i1($i160);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i161 == 1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i163 := virtio_has_feature($p0, 9);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i164 := $zext.i1.i8($i163);
    call {:si_unique_call 746} {:cexpr "tmp___19"} boogie_si_record_i8($i164);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i164);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i165 == 1);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i167 := virtio_has_feature($p0, 10);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i168 := $zext.i1.i8($i167);
    call {:si_unique_call 748} {:cexpr "tmp___20"} boogie_si_record_i8($i168);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i8.i1($i168);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i171 := virtio_has_feature($p0, 15);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i172 := $zext.i1.i8($i171);
    call {:si_unique_call 744} {:cexpr "tmp___21"} boogie_si_record_i8($i172);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i8.i1($i172);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i175 := virtio_has_feature($p0, 27);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i176 := $zext.i1.i8($i175);
    call {:si_unique_call 750} {:cexpr "tmp___22"} boogie_si_record_i8($i176);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i8.i1($i176);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i179 := virtio_has_feature($p0, 17);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i180 := $zext.i1.i8($i179);
    call {:si_unique_call 752} {:cexpr "tmp___23"} boogie_si_record_i8($i180);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i8.i1($i180);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(51, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i8.i1($i184);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, 1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, $i20);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i193 := init_vqs($p119);
    call {:si_unique_call 754} {:cexpr "err"} boogie_si_record_i32($i193);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.0, $p196);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i8.i1($i197);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i201 := $load.i16($M.0, $p200);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i202 := $zext.i16.i32($i201);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_63 := netif_set_real_num_tx_queues($p29, $i202);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i205 := $load.i16($M.0, $p204);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i206 := $zext.i16.i32($i205);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_64 := netif_set_real_num_rx_queues($p29, $i206);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i208 := ldv_register_netdev_13($p29);
    call {:si_unique_call 759} {:cexpr "err"} boogie_si_record_i32($i208);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i229 := $load.i16($M.0, $p228);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i230 := $zext.i16.i32($i229);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i231 := $sgt.i32($i230, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(544, 1)), $mul.ref(0, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p260, virtnet_cpu_callback);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(544, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i262 := register_cpu_notifier($p261);
    call {:si_unique_call 774} {:cexpr "err"} boogie_si_record_i32($i262);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i283 := virtio_has_feature($p282, 16);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i284 := $zext.i1.i8($i283);
    call {:si_unique_call 779} {:cexpr "tmp___27"} boogie_si_record_i8($i284);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i285 := $trunc.i8.i1($i284);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i285 == 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(40, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, 1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} netif_carrier_on($p29);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p289, .str.4);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p290, .str.9);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p291, .str.2);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p292, .str.12);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i295 := $load.i24($M.8, $p294);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i296 := $and.i24($i295, $sub.i24(0, 262144));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i297 := $or.i24($i296, 1824);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p294, $i297);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p298, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i300 := $load.i8($M.9, $p299);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i64($i300);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i302 := $and.i64($i301, 1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i303 := ldv__builtin_expect($i302, 0);
    call {:si_unique_call 784} {:cexpr "tmp___28"} boogie_si_record_i64($i303);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb131:
    assume $i304 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i307 := $zext.i16.i32($i20);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_70 := __dynamic_pr_debug.ref.ref.ref.i32($p6, .str.12, $p306, $i307);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i285 == 1;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} netif_carrier_off($p29);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(288, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_69 := schedule_work($p286);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb122:
    assume $i263 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p264, .str.4);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p265, .str.9);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p266, .str.2);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p267, .str.11);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i270 := $load.i24($M.8, $p269);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i271 := $and.i24($i270, $sub.i24(0, 262144));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i272 := $or.i24($i271, 1809);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p269, $i272);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p273, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.9, $p274);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i64($i275);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i277 := $and.i64($i276, 1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i278 := ldv__builtin_expect($i277, 0);
    call {:si_unique_call 776} {:cexpr "tmp___26"} boogie_si_record_i64($i278);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i254 := $i262;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} free_receive_bufs($p119);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_unregister_netdev_14($p29);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i227 := $i254;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_66 := cancel_delayed_work_sync($p309);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} free_receive_page_frags($p119);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} virtnet_del_vqs($p119);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i195 := $i227;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} free_percpu($p313);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i131 := $i195;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} ldv_free_netdev_15($p29);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i32 := $i131;
    goto $bb25;

  $bb124:
    assume $i279 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_68 := __dynamic_pr_debug.ref.ref($p5, .str.11);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb110:
    assume $i231 == 1;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i232 := 0;
    goto $bb113;

  $bb113:
    call $p233, $p234, $i235, $p236, $p238, $p239, $i240, $p242, $p243, $i244, $p245, $p246, $i247, $p249, $p250, $p251, $i252, $i253, $i255, $i256, $i257, $i258, $i232, vslice_dummy_var_67 := virtnet_probe_loop_$bb113($p119, $p228, $p233, $p234, $i235, $p236, $p238, $p239, $i240, $p242, $p243, $i244, $p245, $p246, $i247, $p249, $p250, $p251, $i252, $i253, $i255, $i256, $i257, $i258, $i232, vslice_dummy_var_67);
    goto $bb113_last;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i232);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p234, $mul.ref($i235, 1040));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_67 := try_fill_recv($p236, 208);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i232);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p239, $mul.ref($i240, 1040)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i244 := virtqueue_get_vring_size($p243);
    call {:si_unique_call 768} {:cexpr "tmp___25"} boogie_si_record_i32($i244);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i232);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p246, $mul.ref($i247, 1040)), $mul.ref(0, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p250, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, $i244);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i232, 1);
    call {:si_unique_call 772} {:cexpr "i"} boogie_si_record_i32($i255);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i256 := $load.i16($M.0, $p228);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i257 := $zext.i16.i32($i256);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i258 := $sgt.i32($i257, $i255);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i258 == 1);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb119:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $i232 := $i255;
    goto $bb119_dummy;

  $bb115:
    assume $i253 == 1;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} free_unused_bufs($p119);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i254 := $sub.i32(0, 12);
    goto $bb117;

  $bb103:
    assume $i209 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p210, .str.4);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p211, .str.9);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p212, .str.2);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p213, .str.10);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i216 := $load.i24($M.8, $p215);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i217 := $and.i24($i216, $sub.i24(0, 262144));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i218 := $or.i24($i217, 1789);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p215, $i218);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p219, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.9, $p220);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i64($i221);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i223 := $and.i64($i222, 1);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i224 := ldv__builtin_expect($i223, 0);
    call {:si_unique_call 761} {:cexpr "tmp___24"} boogie_si_record_i64($i224);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i225 := $ne.i64($i224, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i227 := $i208;
    goto $bb108;

  $bb105:
    assume $i225 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_65 := __dynamic_pr_debug.ref.ref($p4, .str.10);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb100:
    assume $i198 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(2752, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, virtio_net_mrg_rx_group);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb96:
    assume $i194 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i195 := $i193;
    goto $bb98;

  $bb90:
    assume $i185 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i8.i1($i187);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i188 == 1);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(544, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p190, 10);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i188 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(544, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, 12);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i181 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(50, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p182, 1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i177 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(51, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p178, 1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i173 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p174, 1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i169 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, 1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i165 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p166, 1);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i161 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, 1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i157 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p119, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p158, 1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb61:
    assume $i135 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i136 := $i133;
    goto $bb64;

  $bb64:
    call $p137, $i138, $i139, $i140, $i136 := virtnet_probe_loop_$bb64($p137, $i138, $i139, $i140, $i136);
    goto $bb64_last;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i138 := cpumask_next($i136, $p137);
    call {:si_unique_call 733} {:cexpr "tmp___16"} boogie_si_record_i32($i138);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i138, $i139);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i140 == 1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb66:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i136 := $i138;
    goto $bb66_dummy;

  $bb57:
    assume $i130 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32(0, 12);
    goto $bb59;

  $bb54:
    assume $i112 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i64($i116);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} virtio_cread_bytes($p0, 0, $p114, $i117);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i102 == 1;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i105 := $or.i64($i104, 17179869184);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p106, $i105);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i48 := $or.i64($i47, 73);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i48);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i50 := $M.14;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i56 := virtio_has_feature($p0, 6);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 712} {:cexpr "tmp___6"} boogie_si_record_i8($i57);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i63 := virtio_has_feature($p0, 11);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    call {:si_unique_call 714} {:cexpr "tmp___7"} boogie_si_record_i8($i64);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i70 := virtio_has_feature($p0, 12);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i8($i70);
    call {:si_unique_call 716} {:cexpr "tmp___8"} boogie_si_record_i8($i71);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i71);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i77 := virtio_has_feature($p0, 13);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    call {:si_unique_call 718} {:cexpr "tmp___9"} boogie_si_record_i8($i78);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i84 := virtio_has_feature($p0, 14);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i8($i84);
    call {:si_unique_call 720} {:cexpr "tmp___10"} boogie_si_record_i8($i85);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i91 := $M.15;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i8.i1($i91);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i92 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1769472);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i98 := $or.i64($i94, $i97);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, $i98);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i86 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i89 := $or.i64($i88, 131072);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, $i89);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i79 == 1;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i82 := $or.i64($i81, 524288);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i82);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i72 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i75 := $or.i64($i74, 1048576);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i75);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i65 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i68 := $or.i64($i67, 65536);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i68);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i58 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i61 := $or.i64($i60, 1769472);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i61);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i54 := $or.i64($i53, 73);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, $i54);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i31 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb25;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb22;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i12, $i13 := $u0, $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb119_dummy:
    assume false;
    return;

  $bb113_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  $bb66_dummy:
    assume false;
    return;

  $bb64_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3043;
}



const virtnet_remove: ref;

axiom virtnet_remove == $sub.ref(0, 255078);

procedure virtnet_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.2, $M.13, $M.12, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation virtnet_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_71: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(544, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} unregister_cpu_notifier($p4);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} mutex_lock_nested($p5, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(52, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} mutex_unlock($p7);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ldv_unregister_netdev_16($p9);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} remove_vq_common($p3);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(288, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_71 := flush_work($p10);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} free_percpu($p14);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_free_netdev_17($p16);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_config_changed: ref;

axiom virtnet_config_changed == $sub.ref(0, 256110);

procedure virtnet_config_changed($p0: ref);
  free requires assertsPassed;



implementation virtnet_config_changed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_72: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(288, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_72 := schedule_work($p4);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_freeze: ref;

axiom virtnet_freeze == $sub.ref(0, 257142);

procedure virtnet_freeze($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.18, $M.13, $M.12, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation virtnet_freeze($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i21: i32;
  var $p36: ref;
  var vslice_dummy_var_73: i1;
  var vslice_dummy_var_74: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(544, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} unregister_cpu_notifier($p4);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} mutex_lock_nested($p5, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(52, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} mutex_unlock($p7);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} netif_device_detach($p9);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_73 := cancel_delayed_work_sync($p10);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i14 := netif_running($p13);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 801} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} remove_vq_common($p3);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(288, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_74 := flush_work($p36);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb6:
    call $p22, $p23, $i24, $p26, $p27, $p28, $i29, $p31, $i32, $i33, $i34, $i35, $i21 := virtnet_freeze_loop_$bb6($p3, $p17, $p22, $p23, $i24, $p26, $p27, $p28, $i29, $p31, $i32, $i33, $i34, $i35, $i21);
    goto $bb6_last;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i21);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref($i24, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} napi_disable($p26);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i21);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref($i29, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} netif_napi_del($p31);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i21, 1);
    call {:si_unique_call 804} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p17);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i32);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i32;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3398;
}



const virtnet_restore: ref;

axiom virtnet_restore == $sub.ref(0, 258174);

procedure virtnet_restore($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.13, $M.12, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation virtnet_restore($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $i16: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i36: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i6: i32;
  var vslice_dummy_var_75: i1;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i4 := init_vqs($p3);
    call {:si_unique_call 808} {:cexpr "err"} boogie_si_record_i32($i4);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i9 := netif_running($p8);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 810} {:cexpr "tmp___1"} boogie_si_record_i8($i10);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} netif_device_attach($p46);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} mutex_lock_nested($p47, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(52, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 1);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(368, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} mutex_unlock($p49);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} rtnl_lock();
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_76 := virtnet_set_queues($p3, $i53);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} rtnl_unlock();
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(544, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i56 := register_cpu_notifier($p55);
    call {:si_unique_call 824} {:cexpr "err"} boogie_si_record_i32($i56);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i6 := $i56;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb24;

  $bb24:
    call $p37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i36 := virtnet_restore_loop_$bb24($p3, $p32, $p37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i36);
    goto $bb24_last;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i36);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 1040));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} virtnet_napi_enable($p40);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i36, 1);
    call {:si_unique_call 816} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p32);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i41);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i44 == 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb26_dummy;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    call $p17, $p18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i28, $i29, $i30, $i31, $i16, vslice_dummy_var_75 := virtnet_restore_loop_$bb10($p3, $p12, $p17, $p18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i28, $i29, $i30, $i31, $i16, vslice_dummy_var_75);
    goto $bb10_last;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 1040));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i21 := try_fill_recv($p20, 208);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 812} {:cexpr "tmp"} boogie_si_record_i8($i22);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i16, 1);
    call {:si_unique_call 814} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p12);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i28);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb18_dummy;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_75 := schedule_delayed_work($p26, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;
}



const init_vqs: ref;

axiom init_vqs == $sub.ref(0, 259206);

procedure init_vqs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.12, $M.17;



implementation init_vqs($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i1 := virtnet_alloc_queues($p0);
    call {:si_unique_call 826} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i4 := virtnet_find_vqs($p0);
    call {:si_unique_call 828} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} get_online_cpus();
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} virtnet_set_affinity($p0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} put_online_cpus();
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} virtnet_free_queues($p0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 260238);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 261270);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 262302);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 263334);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 264366);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 265398);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    return;
}



const register_cpu_notifier: ref;

axiom register_cpu_notifier == $sub.ref(0, 266430);

procedure register_cpu_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_cpu_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const virtnet_alloc_queues: ref;

axiom virtnet_alloc_queues == $sub.ref(0, 267462);

procedure virtnet_alloc_queues($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation virtnet_alloc_queues($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p39: ref;
  var $p42: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i16;
  var $i90: i32;
  var $i91: i1;
  var $i57: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i92: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i64($i5);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 808);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p8 := kzalloc($i7, 208);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i64($i16);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i18 := $mul.i64($i17, 1040);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p19 := kzalloc($i18, 208);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p19);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} __init_work($p27, 0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 137438953408);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 845} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p32, $p33, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} lockdep_init_map($p36, .str.16, $p1, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} INIT_LIST_HEAD($p39);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, refill_work);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(80, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} init_timer_key($p44, 2, .str.17, $p3);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, delayed_work_timer_fn);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i49);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $r := $i92;
    return;

  $bb9:
    assume $i56 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb12;

  $bb12:
    call $p58, $p59, $i60, $p62, $p63, $p64, $p65, $p66, $i67, $p69, $i70, $p71, $p72, $i73, $p75, $p76, $p77, $p78, $i79, $p81, $p82, $p83, $i84, $p86, $p87, $i88, $i89, $i90, $i91, $i57 := virtnet_alloc_queues_loop_$bb12($p0, $p53, $p58, $p59, $i60, $p62, $p63, $p64, $p65, $p66, $i67, $p69, $i70, $p71, $p72, $i73, $p75, $p76, $p77, $p78, $i79, $p81, $p82, $p83, $i84, $p86, $p87, $i88, $i89, $i90, $i91, $i57);
    goto $bb12_last;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i57);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref($i60, 1040)), $mul.ref(192, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i57);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref($i67, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i70 := $M.16;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} netif_napi_add($p64, $p69, virtnet_poll, $i70);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i57);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p72, $mul.ref($i73, 1040)), $mul.ref(240, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} sg_init_table($p76, 19);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i57);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p78, $mul.ref($i79, 1040)), $mul.ref(200, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ewma_init($p81, 1, 64);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i57);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p83, $mul.ref($i84, 808)), $mul.ref(8, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} sg_init_table($p87, 19);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i57, 1);
    call {:si_unique_call 853} {:cexpr "i"} boogie_si_record_i32($i88);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p53);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i91 := $sgt.i32($i90, $i88);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i91 == 1);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i88;
    goto $bb14_dummy;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} kfree($p95);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 12);
    goto $bb17;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3621;
}



const virtnet_find_vqs: ref;

axiom virtnet_find_vqs == $sub.ref(0, 268494);

procedure virtnet_find_vqs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation virtnet_find_vqs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p64: ref;
  var $p65: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p72: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $i46: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i8;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i1;
  var $i110: i8;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $p142: ref;
  var $i143: i32;
  var $i144: i16;
  var $i145: i32;
  var $i146: i1;
  var $i124: i32;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $i32: i32;
  var $p152: ref;
  var $i25: i32;
  var $p153: ref;
  var $i18: i32;
  var $i150: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i3 := virtio_has_feature($p2, 17);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 855} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 2);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i4);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, $i10);
    call {:si_unique_call 856} {:cexpr "total_vqs"} boogie_si_record_i32($i11);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i12, 8);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p14 := kzalloc($i13, 208);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i11);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i20 := $mul.i64($i19, 8);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p21 := kmalloc($i20, 208);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i11);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i27 := $mul.i64($i26, 8);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p28 := kmalloc($i27, 208);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(50, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    call {:si_unique_call 873} $i97 := devirtbounce.13($p94, $p96, $i11, $p15, $p22, $p29);
    call {:si_unique_call 874} {:cexpr "ret"} boogie_si_record_i32($i97);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(50, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i8.i1($i100);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i122, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p29);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} kfree($p147);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p22);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} kfree($p148);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p15);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} kfree($p149);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i150 := 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $r := $i150;
    return;

  $bb34:
    assume $i123 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i124 := 0;
    goto $bb37;

  $bb37:
    call $i125, $i126, $p127, $p128, $p129, $p130, $i131, $p133, $i134, $i135, $p136, $p137, $p138, $p139, $i140, $p142, $i143, $i144, $i145, $i146, $i124 := virtnet_find_vqs_loop_$bb37($p0, $p15, $p120, $i125, $i126, $p127, $p128, $p129, $p130, $i131, $p133, $i134, $i135, $p136, $p137, $p138, $p139, $i140, $p142, $i143, $i144, $i145, $i146, $i124);
    goto $bb37_last;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i125 := rxq2vq($i124);
    call {:si_unique_call 879} {:cexpr "tmp___8"} boogie_si_record_i32($i125);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i125);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p15, $mul.ref($i126, 8));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i124);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p130, $mul.ref($i131, 1040)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p133, $p128);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i134 := txq2vq($i124);
    call {:si_unique_call 881} {:cexpr "tmp___9"} boogie_si_record_i32($i134);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i134);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p15, $mul.ref($i135, 8));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i124);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p139, $mul.ref($i140, 808)), $mul.ref(0, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, $p137);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i124, 1);
    call {:si_unique_call 882} {:cexpr "i"} boogie_si_record_i32($i143);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.0, $p120);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i146 := $sgt.i32($i145, $i143);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i146 == 1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i124 := $i143;
    goto $bb39_dummy;

  $bb28:
    assume $i101 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i11);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, $sub.i64(0, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p15, $mul.ref($i103, 8));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(8, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $p105);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i109 := virtio_has_feature($p108, 19);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i110 := $zext.i1.i8($i109);
    call {:si_unique_call 877} {:cexpr "tmp___7"} boogie_si_record_i8($i110);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i110);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i111 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i116 := $or.i64($i115, 512);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p119, $i116);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i98 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p29);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} kfree($p151);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i32 := $i97;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p22);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} kfree($p152);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i25 := $i32;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p15);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} kfree($p153);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i18 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i150 := $i18;
    goto $bb42;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb19;

  $bb19:
    call $i47, $i48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $p57, $p58, $p60, $p61, $i62, $p64, $p65, $i67, $p68, $p69, $i70, $p72, $i74, $p75, $i76, $p77, $p78, $i79, $p81, $i83, $p84, $i85, $i86, $i87, $i88, $i46, vslice_dummy_var_77, vslice_dummy_var_78 := virtnet_find_vqs_loop_$bb19($p0, $p22, $p29, $p42, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $p57, $p58, $p60, $p61, $i62, $p64, $p65, $i67, $p68, $p69, $i70, $p72, $i74, $p75, $i76, $p77, $p78, $i79, $p81, $i83, $p84, $i85, $i86, $i87, $i88, $i46, vslice_dummy_var_77, vslice_dummy_var_78);
    goto $bb19_last;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i47 := rxq2vq($i46);
    call {:si_unique_call 863} {:cexpr "tmp___3"} boogie_si_record_i32($i47);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p22, $mul.ref($i48, 8));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, skb_recv_done);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i50 := txq2vq($i46);
    call {:si_unique_call 865} {:cexpr "tmp___4"} boogie_si_record_i32($i50);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p22, $mul.ref($i51, 8));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, skb_xmit_done);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i46);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p54, $mul.ref($i55, 1040)), $mul.ref(1000, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_77 := sprintf.ref.ref.i32($p58, .str.31, $i46);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i46);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref($i62, 808)), $mul.ref(768, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_78 := sprintf.ref.ref.i32($p65, .str.32, $i46);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i67 := rxq2vq($i46);
    call {:si_unique_call 869} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i46);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p69, $mul.ref($i70, 1040)), $mul.ref(1000, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i67);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p29, $mul.ref($i74, 8));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p72);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i76 := txq2vq($i46);
    call {:si_unique_call 871} {:cexpr "tmp___6"} boogie_si_record_i32($i76);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i46);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p78, $mul.ref($i79, 808)), $mul.ref(768, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i76);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p29, $mul.ref($i83, 8));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p81);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i46, 1);
    call {:si_unique_call 872} {:cexpr "i"} boogie_si_record_i32($i85);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p42);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, $i85);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i88 == 1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i85;
    goto $bb21_dummy;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i11);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, $sub.i64(0, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p22, $mul.ref($i37, 8));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i11);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, $sub.i64(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p29, $mul.ref($i40, 8));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, .str.30);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;
}



const virtnet_free_queues: ref;

axiom virtnet_free_queues == $sub.ref(0, 269526);

procedure virtnet_free_queues($p0: ref);
  free requires assertsPassed;



implementation virtnet_free_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i5: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} kfree($p17);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} kfree($p20);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $i11, $i12, $i13, $i14, $i5 := virtnet_free_queues_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $i11, $i12, $i13, $i14, $i5);
    goto $bb4_last;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} netif_napi_del($p10);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 887} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, $i11);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3884;
}



const netif_napi_del: ref;

axiom netif_napi_del == $sub.ref(0, 270558);

procedure netif_napi_del($p0: ref);
  free requires assertsPassed;



implementation netif_napi_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    return;
}



const rxq2vq: ref;

axiom rxq2vq == $sub.ref(0, 271590);

procedure rxq2vq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rxq2vq($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} {:cexpr "rxq2vq:arg:rxq"} boogie_si_record_i32($i0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 2);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_recv_done: ref;

axiom skb_recv_done == $sub.ref(0, 272622);

procedure skb_recv_done($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation skb_recv_done($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i6 := vq2rxq($p0);
    call {:si_unique_call 892} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i12 := napi_schedule_prep($p11);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 894} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} virtqueue_disable_cb($p0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($i9, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} __napi_schedule($p15);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const txq2vq: ref;

axiom txq2vq == $sub.ref(0, 273654);

procedure txq2vq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation txq2vq($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} {:cexpr "txq2vq:arg:txq"} boogie_si_record_i32($i0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 2);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_xmit_done: ref;

axiom skb_xmit_done == $sub.ref(0, 274686);

procedure skb_xmit_done($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation skb_xmit_done($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} virtqueue_disable_cb($p0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i6 := vq2txq($p0);
    call {:si_unique_call 900} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i6);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} netif_wake_subqueue($p8, $i11);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    return;
}



const vq2txq: ref;

axiom vq2txq == $sub.ref(0, 275718);

procedure vq2txq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vq2txq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i3, 2);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_wake_subqueue: ref;

axiom netif_wake_subqueue == $sub.ref(0, 276750);

procedure netif_wake_subqueue($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_wake_subqueue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} {:cexpr "netif_wake_subqueue:arg:queue_index"} boogie_si_record_i16($i1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p3 := netdev_get_tx_queue($p0, $i2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i5 := test_and_clear_bit(0, $p4);
    call {:si_unique_call 905} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} __netif_schedule($p8);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 277782);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 908} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 909} devirtbounce.1(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 278814);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    return;
}



const vq2rxq: ref;

axiom vq2rxq == $sub.ref(0, 279846);

procedure vq2rxq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vq2rxq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i32($i2, 2);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 280878);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 281910);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 282942);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    return;
}



const refill_work: ref;

axiom refill_work == $sub.ref(0, 283974);

procedure refill_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.12;



implementation refill_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i7: i32;
  var vslice_dummy_var_79: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 64), 568)), $mul.ref(46, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $i24, $i25, $i26, $i27, $i7, vslice_dummy_var_79 := refill_work_loop_$bb4($p1, $p3, $p8, $p9, $i10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $i24, $i25, $i26, $i27, $i7, vslice_dummy_var_79);
    goto $bb4_last;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 64), 568)), $mul.ref(32, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 1040));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 1040)), $mul.ref(8, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} napi_disable($p12);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i13 := try_fill_recv($p11, 208);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 914} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 915} {:cexpr "still_empty"} boogie_si_record_i8($i20);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} virtnet_napi_enable($p11);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i7, 1);
    call {:si_unique_call 918} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p3);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, $i24);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i24;
    goto $bb12_dummy;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 64), 568)), $mul.ref(64, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_79 := schedule_delayed_work($p22, 125);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 285006);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 286038);

procedure delayed_work_timer_fn($i0: i64);



const virtnet_poll: ref;

axiom virtnet_poll == $sub.ref(0, 287070);

procedure virtnet_poll($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.12, $M.17;



implementation virtnet_poll($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i16: i32;
  var $i18: i32;
  var $i19: i1;
  var $i15: i32;
  var $p21: ref;
  var $p22: ref;
  var $p17: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i20: i32;
  var $i14: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i57: i1;
  var $i58: i8;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $i60: i32;
  var $i56: i32;
  var $i63: i32;
  var $i44: i32;
  var $i64: i32;
  var vslice_dummy_var_80: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 921} {:cexpr "virtnet_poll:arg:budget"} boogie_si_record_i32($i1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 8), 1040));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb1;

  $bb1:
    call $i12, $i13, $i16, $i18, $i19, $i15, $p21, $p22, $p17, $i23, $i24, $i25, $i20, $i14, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $i43, $p45, $p46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $p61, $p62, $i60, $i56, $i44, vslice_dummy_var_80 := virtnet_poll_loop_$bb1($p0, $i1, $p2, $p3, $p4, $p11, $i12, $i13, $i16, $i18, $i19, $i15, $p21, $p22, $p17, $i23, $i24, $i25, $i20, $i14, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $i43, $p45, $p46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $p61, $p62, $i60, $i56, $i44, vslice_dummy_var_80);
    goto $bb1_last;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i1, $i12);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $i14;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i29 := virtqueue_get_vring_size($p28);
    call {:si_unique_call 926} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i34 := $udiv.i32($i29, 2);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i33, $i34);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i32($i1, $i26);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i44 := $i26;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i64 := $i44;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i47 := virtqueue_enable_cb_prepare($p46);
    call {:si_unique_call 931} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} napi_complete($p0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i50 := virtqueue_poll($p49, $i47);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 934} {:cexpr "tmp___2"} boogie_si_record_i8($i51);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i64($i52);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 936} {:cexpr "tmp___3"} boogie_si_record_i64($i54);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i56 := $i26;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i56;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb30;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i57 := napi_schedule_prep($p0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i57);
    call {:si_unique_call 938} {:cexpr "tmp___4"} boogie_si_record_i8($i58);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i60 := $i26;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i63 := $i60;
    goto $bb29;

  $bb26:
    assume $i59 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} virtqueue_disable_cb($p62);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __napi_schedule($p0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto corral_source_split_4123_dummy;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i36 := try_fill_recv($p4, 32);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 928} {:cexpr "tmp"} boogie_si_record_i8($i37);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_80 := schedule_delayed_work($p41, 0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb17;

  $bb2:
    assume $i13 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb5;

  $bb5:
    call $i16, $i18, $i19, $i15, $p21, $p22, $p17, $i23, $i24, $i25, $i20 := virtnet_poll_loop_$bb5($i1, $p2, $p3, $p4, $i16, $i18, $i19, $i15, $p21, $p22, $p17, $i23, $i24, $i25, $i20);
    goto $bb5_last;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p17 := virtqueue_get_buf($p22, $p2);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p17);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i25 := $i15;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb11;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.17, $p2);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} receive_buf($p4, $p17, $i16);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i15, 1);
    call {:si_unique_call 924} {:cexpr "received"} boogie_si_record_i32($i18);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i1, $i18);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb4;

  $bb7:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb7_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4055;

  corral_source_split_4123_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4050;
}



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 288102);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    return;
}



const ewma_init: ref;

axiom ewma_init == $sub.ref(0, 289134);

procedure ewma_init($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation ewma_init($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "ewma_init:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 943} {:cexpr "ewma_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    return;
}



const receive_buf: ref;

axiom receive_buf == $sub.ref(0, 290166);

procedure receive_buf($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.12, $M.17, $CurrAddr;



implementation receive_buf($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i1;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i1;
  var $i65: i64;
  var $p66: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i1;
  var $p71: ref;
  var $p73: ref;
  var $p72: ref;
  var $p67: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i24;
  var $i108: i24;
  var $i109: i24;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i16;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i16;
  var $i130: i1;
  var $i131: i8;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i16;
  var $i144: i16;
  var $i145: i16;
  var $i146: i16;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i24;
  var $i155: i24;
  var $i156: i24;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $i165: i16;
  var $i166: i32;
  var $i167: i16;
  var $i168: i16;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $p172: ref;
  var $i173: i16;
  var $i174: i16;
  var $i175: i16;
  var $i176: i8;
  var $i177: i32;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i24;
  var $i192: i24;
  var $i193: i24;
  var $p194: ref;
  var $p195: ref;
  var $i196: i8;
  var $i197: i64;
  var $i198: i64;
  var $i199: i64;
  var $i200: i1;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i8;
  var $i229: i32;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i8;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i32;
  var $i243: i16;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i16;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i16;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i16;
  var $i268: i32;
  var $i269: i32;
  var $i270: i16;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p278: ref;
  var $i279: i64;
  var $i280: i64;
  var $p282: ref;
  var $p283: ref;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 948} {:cexpr "receive_buf:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 949} $i18 := devirtbounce.6(0, this_cpu_off, $p17);
    call {:si_unique_call 950} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i18);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i2, 23);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 952} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p13, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p13, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p73 := receive_small($p1, $i2);
    assume {:verifier.code 0} true;
    $p72 := $p73;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p67 := $p72;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p67);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 964} {:cexpr "tmp___3"} boogie_si_record_i64($i78);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p80 := skb_vnet_hdr($p67);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} u64_stats_update_begin($p81);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p67, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i83, $i86);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i87);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i91);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} u64_stats_update_begin($p93);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i100 == 1);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i146 := eth_type_trans($p67, $p15);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p67, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, $i146);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p148, .str.4);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p149, .str.18);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p150, .str.2);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p151, .str.21);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i154 := $load.i24($M.8, $p153);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i155 := $and.i24($i154, $sub.i24(0, 262144));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i156 := $or.i24($i155, 527);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p153, $i156);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p157, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.9, $p158);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i64($i159);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i161 := $and.i64($i160, 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i162 := ldv__builtin_expect($i161, 0);
    call {:si_unique_call 978} {:cexpr "tmp___8"} boogie_si_record_i64($i162);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p181);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_87 := netif_receive_skb($p67);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i184 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p185, .str.4);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p186, .str.18);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p187, .str.2);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p188, .str.22);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i191 := $load.i24($M.8, $p190);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i192 := $and.i24($i191, $sub.i24(0, 262144));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i193 := $or.i24($i192, 530);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p190, $i193);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p194, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.9, $p195);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i64($i196);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i198 := $and.i64($i197, 1);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i199 := ldv__builtin_expect($i198, 0);
    call {:si_unique_call 983} {:cexpr "tmp___9"} boogie_si_record_i64($i199);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i200 := $ne.i64($i199, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, $sub.i32(0, 129));
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i207, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i207, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i207, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i221 := net_ratelimit();
    call {:si_unique_call 989} {:cexpr "tmp___13"} boogie_si_record_i32($i221);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i279 := $load.i64($M.0, $p278);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i280 := $add.i64($i279, 1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p282, $i280);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p67);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ldv_skb_free($p283);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb59:
    assume $i222 == 1;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p225);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.0, $p227);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_85 := printk.ref.ref.i32(.str.23, $p224, $i229);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb52:
    assume $i210 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p218 := skb_end_pointer($p67);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p220, 16);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p231);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p232, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.0, $p233);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i235 := $sext.i8.i32($i234);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p246 := skb_end_pointer($p67);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i250 := $load.i16($M.0, $p249);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p246);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p252, $i250);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p253 := skb_end_pointer($p67);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i256 := $load.i16($M.0, $p255);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i257 := $zext.i16.i32($i256);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p264 := skb_end_pointer($p67);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p265, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i267 := $load.i16($M.0, $p266);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i268 := $zext.i16.i32($i267);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i269 := $or.i32($i268, 4);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i270 := $trunc.i32.i16($i269);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p264);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p271, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p272, $i270);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $p273 := skb_end_pointer($p67);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p274, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p275, 0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb65:
    assume $i258 == 1;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i259 := net_ratelimit();
    call {:si_unique_call 995} {:cexpr "tmp___16"} boogie_si_record_i32($i259);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb67:
    assume $i260 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_86 := printk.ref.ref(.str.24, $p262);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb62:
    assume $i236 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p237 := skb_end_pointer($p67);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.0, $p239);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i242 := $or.i32($i241, 8);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i16($i242);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p237);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p244, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, $i243);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb50:
    assume $i209 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p215 := skb_end_pointer($p67);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, 2);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb48:
    assume $i208 == 1;
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i207, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb54;

  $bb55:
    assume $i211 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p212 := skb_end_pointer($p67);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p214, 1);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb44:
    assume $i200 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_84 := __dynamic_pr_debug.ref.ref($p6, .str.22);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39:
    assume $i163 == 1;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p67, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.0, $p164);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i16($i166);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i168 := __fswab16($i167);
    call {:si_unique_call 980} {:cexpr "tmp___7"} boogie_si_record_i16($i168);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p67, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p67, $mul.ref(0, 232)), $mul.ref(124, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i173 := $load.i16($M.0, $p172);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i174 := $lshr.i16($i173, 8);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i175 := $and.i16($i174, 7);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i16.i8($i175);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_83 := __dynamic_pr_debug.ref.ref.i32.i32.i32($p5, .str.21, $i169, $i171, $i177);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i141 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p67, $mul.ref(0, 232)), $mul.ref(124, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.0, $p142);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i144 := $and.i16($i143, $sub.i16(0, 13));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i145 := $or.i16($i144, 4);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p142, $i145);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume $i100 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p101, .str.4);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p102, .str.18);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p103, .str.2);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p104, .str.20);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i107 := $load.i24($M.8, $p106);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i108 := $and.i24($i107, $sub.i24(0, 262144));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i109 := $or.i24($i108, 516);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p106, $i109);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p110, 0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.9, $p111);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i64($i112);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i114 := $and.i64($i113, 1);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 971} {:cexpr "tmp___4"} boogie_si_record_i64($i115);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p80, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i130 := skb_partial_csum_set($p67, $i123, $i129);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i8($i130);
    call {:si_unique_call 974} {:cexpr "tmp___5"} boogie_si_record_i8($i131);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i8.i1($i131);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb31:
    assume $i134 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i132 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i133 := 0;
    goto $bb30;

  $bb25:
    assume $i116 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_82 := __dynamic_pr_debug.ref.ref($p4, .str.20);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i79 == 1;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p71 := receive_big($p15, $p0, $p1, $i2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p72 := $p71;
    goto $bb19;

  $bb14:
    assume $i64 == 1;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p66 := receive_mergeable($p15, $p0, $i65, $i2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p67 := $p66;
    goto $bb16;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.4);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p26, .str.18);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p27, .str.2);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p28, .str.19);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.8, $p30);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 484);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p30, $i33);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p34, 0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.9, $p35);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 954} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i47);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i52 == 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p13, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i58 == 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p1);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_skb_free($p61);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i58 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p1);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} give_pages($p0, $p59);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i52 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p1);
    call {:si_unique_call 956} {:cexpr "ctx"} boogie_si_record_i64($i53);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p54 := mergeable_ctx_to_buf_address($i53);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p55 := virt_to_head_page($p54);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} put_page($p55);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i40 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_81 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.19, $p42, $i2);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const virtqueue_enable_cb_prepare: ref;

axiom virtqueue_enable_cb_prepare == $sub.ref(0, 291198);

procedure virtqueue_enable_cb_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation virtqueue_enable_cb_prepare($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 292230);

procedure napi_complete($p0: ref);
  free requires assertsPassed;



implementation napi_complete($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    return;
}



const virtqueue_poll: ref;

axiom virtqueue_poll == $sub.ref(0, 293262);

procedure virtqueue_poll($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation virtqueue_poll($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} {:cexpr "virtqueue_poll:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1003} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1004} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mergeable_ctx_to_buf_address: ref;

axiom mergeable_ctx_to_buf_address == $sub.ref(0, 294294);

procedure mergeable_ctx_to_buf_address($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation mergeable_ctx_to_buf_address($i0: i64) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} {:cexpr "mergeable_ctx_to_buf_address:arg:mrg_ctx"} boogie_si_record_i64($i0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32(64, 256);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i2 := 256;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i2);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, $i0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i2 := 64;
    goto $bb3;
}



const receive_mergeable: ref;

axiom receive_mergeable == $sub.ref(0, 295326);

procedure receive_mergeable($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.17, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.12, $CurrAddr;



implementation receive_mergeable($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $i98: i32;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i32;
  var $i139: i64;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i8;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i37: i32;
  var $p38: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i64;
  var $p33: ref;
  var $i34: i32;
  var $i156: i32;
  var $i157: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $i164: i32;
  var $i165: i64;
  var $i166: i64;
  var $i167: i1;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i24;
  var $i176: i24;
  var $i177: i24;
  var $p178: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i64;
  var $i182: i64;
  var $i183: i64;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i64;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $i158: i32;
  var $p199: ref;
  var $i200: i64;
  var $i201: i64;
  var $p203: ref;
  var $p204: ref;
  var $p155: ref;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1009} {:cexpr "receive_mergeable:arg:ctx"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, $i3);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p7 := mergeable_ctx_to_buf_address($i2);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 1011} {:cexpr "num_buf"} boogie_si_record_i32($i13);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p14 := virt_to_head_page($p7);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p15 := lowmem_page_address($p14);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p7);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p15);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i17, $i19);
    call {:si_unique_call 1014} {:cexpr "offset"} boogie_si_record_i32($i20);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.17, $p4);
    call {:si_unique_call 1015} {:cexpr "_max1"} boogie_si_record_i32($i21);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i22 := mergeable_ctx_to_buf_truesize($i2);
    call {:si_unique_call 1017} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i21, $i22);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.17, $p4);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p26 := page_to_skb($p1, $p14, $i20, $i25, $i24);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1020} {:cexpr "tmp___4"} boogie_si_record_i64($i31);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i13, 1);
    call {:si_unique_call 1023} {:cexpr "num_buf"} boogie_si_record_i32($i35);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 1040)), $mul.ref(200, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i153 := $zext.i32.i64($i152);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_89 := ewma_add($p150, $i153);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p155 := $p26;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $r := $p155;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i37, $p38 := $i35, $p26;
    goto $bb11;

  $bb11:
    call $p39, $p40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p79, $p80, $p81, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $p103, $p104, $p105, $p106, $p107, $i108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $i130, $p131, $p132, $i133, $i134, $p135, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i37, $p38 := receive_mergeable_loop_$bb11($p1, $p4, $p26, $p39, $p40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p79, $p80, $p81, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $p103, $p104, $p105, $p106, $p107, $i108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $i130, $p131, $p132, $i133, $i134, $p135, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i37, $p38);
    goto $bb11_last;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $p41 := virtqueue_get_buf($p40, $p4);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    call {:si_unique_call 1025} {:cexpr "ctx"} boogie_si_record_i64($i42);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 1027} {:cexpr "tmp___7"} boogie_si_record_i64($i46);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i48 := $i37;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p79 := mergeable_ctx_to_buf_address($i42);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p80 := virt_to_head_page($p79);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p81 := skb_end_pointer($p38);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    call {:si_unique_call 1035} {:cexpr "num_skb_frags"} boogie_si_record_i32($i85);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 17);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i87);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 1037} {:cexpr "tmp___12"} boogie_si_record_i64($i89);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $p113, $i114 := $p38, $i85;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.17, $p4);
    call {:si_unique_call 1042} {:cexpr "_max1___0"} boogie_si_record_i32($i115);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i116 := mergeable_ctx_to_buf_truesize($i42);
    call {:si_unique_call 1044} {:cexpr "tmp___13"} boogie_si_record_i32($i116);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i117 := $ugt.i32($i115, $i116);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i117 == 1);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i118 := $i116;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p113);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p26);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i119, $i120);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p136 := lowmem_page_address($p80);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p79);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i64.i32($i137);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p136);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i64.i32($i139);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i141 := $sub.i32($i138, $i140);
    call {:si_unique_call 1046} {:cexpr "offset"} boogie_si_record_i32($i141);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i142 := skb_can_coalesce($p113, $i114, $p80, $i141);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i8($i142);
    call {:si_unique_call 1048} {:cexpr "tmp___15"} boogie_si_record_i8($i143);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i8.i1($i143);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i144 == 1);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.17, $p4);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} skb_add_rx_frag($p113, $i114, $p80, $i141, $i147, $i118);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i148 := $sub.i32($i37, 1);
    call {:si_unique_call 1052} {:cexpr "num_buf"} boogie_si_record_i32($i148);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i149 == 1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb38:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    $i37, $p38 := $i148, $p113;
    goto $bb38_dummy;

  $bb35:
    assume $i144 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} put_page($p80);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i114, $sub.i32(0, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.17, $p4);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} skb_coalesce_rx_frag($p113, $i145, $i146, $i118);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i121 == 1;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.17, $p4);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i123, $i124);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i125);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.17, $p4);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i128, $i129);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, $i130);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i133, $i118);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i134);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i117 == 1;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i118 := $i115;
    goto $bb31;

  $bb20:
    assume $i90 == 1;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p91 := ldv_alloc_skb_12(0, 32);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i32($i93);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i96 := ldv__builtin_expect($i95, 0);
    call {:si_unique_call 1040} {:cexpr "tmp___10"} boogie_si_record_i64($i96);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i98, $p99 := $i37, $p80;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p38);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p26);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i100, $i101);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i102 == 1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p38, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $p91);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p91, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i108, $i110);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i111);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p113, $i114 := $p91, 0;
    goto $bb28;

  $bb25:
    assume $i102 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p103 := skb_end_pointer($p38);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $p91);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p99, $i98;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} put_page($p33);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i156 := $sub.i32($i34, 1);
    call {:si_unique_call 1022} {:cexpr "num_buf"} boogie_si_record_i32($i156);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i200 := $load.i64($M.0, $p199);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i201 := $add.i64($i200, 1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p203, $i201);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p26);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_skb_free($p204);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p155 := $0.ref;
    goto $bb41;

  $bb42:
    assume $i157 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i158 := $i156;
    goto $bb45;

  $bb45:
    call $p159, $p160, $p161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p194, $p195, $i196, $i197, $i158 := receive_mergeable_loop_$bb45($p1, $p4, $p159, $p160, $p161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p194, $p195, $i196, $i197, $i158);
    goto $bb45_last;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p161 := virtqueue_get_buf($p160, $p4);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    call {:si_unique_call 1055} {:cexpr "ctx"} boogie_si_record_i64($i162);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i162, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i164 := $zext.i1.i32($i163);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i164);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i166 := ldv__builtin_expect($i165, 0);
    call {:si_unique_call 1057} {:cexpr "tmp___18"} boogie_si_record_i64($i166);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i167 := $ne.i64($i166, 0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i168 := $i158;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $p194 := mergeable_ctx_to_buf_address($i162);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p195 := virt_to_head_page($p194);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} put_page($p195);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i196 := $sub.i32($i158, 1);
    call {:si_unique_call 1064} {:cexpr "num_buf"} boogie_si_record_i32($i196);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i197 == 1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54:
    assume $i197 == 1;
    assume {:verifier.code 0} true;
    $i158 := $i196;
    goto $bb54_dummy;

  $bb47:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p169, .str.4);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p170, .str.25);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p171, .str.2);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p172, .str.27);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i175 := $load.i24($M.8, $p174);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i176 := $and.i24($i175, $sub.i24(0, 262144));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i177 := $or.i24($i176, 462);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p174, $i177);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p178, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.9, $p179);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i64($i180);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i182 := $and.i64($i181, 1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i183 := ldv__builtin_expect($i182, 0);
    call {:si_unique_call 1059} {:cexpr "tmp___17"} boogie_si_record_i64($i183);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.0, $p189);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i191 := $add.i64($i190, 1);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p193, $i191);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i184 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_90 := __dynamic_pr_debug.ref.ref.ref.i32($p6, .str.27, $p186, $i168);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb13:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p49, .str.4);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p50, .str.25);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p51, .str.2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p52, .str.26);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.8, $p54);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 414);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p54, $i57);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p58, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.9, $p59);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 1029} {:cexpr "tmp___6"} boogie_si_record_i64($i63);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(80, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, $i76);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vslice_dummy_var_88 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p5, .str.26, $p66, $i48, $i71);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p14, $i13;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i24 := $i21;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4577;

  $bb54_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;
}



const receive_big: ref;

axiom receive_big == $sub.ref(0, 296358);

procedure receive_big($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.12, $CurrAddr;



implementation receive_big($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "receive_big:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p5 := page_to_skb($p1, $p4, 0, $i3, 4096);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1068} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 1);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i16);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} give_pages($p1, $p4);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb5;
}



const receive_small: ref;

axiom receive_small == $sub.ref(0, 297390);

procedure receive_small($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation receive_small($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} {:cexpr "receive_small:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i1, 10);
    call {:si_unique_call 1071} {:cexpr "len"} boogie_si_record_i32($i3);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} skb_trim($p2, $i3);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_partial_csum_set: ref;

axiom skb_partial_csum_set == $sub.ref(0, 298422);

procedure skb_partial_csum_set($p0: ref, $i1: i16, $i2: i16) returns ($r: i1);
  free requires assertsPassed;



implementation skb_partial_csum_set($p0: ref, $i1: i16, $i2: i16) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} {:cexpr "skb_partial_csum_set:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 1074} {:cexpr "skb_partial_csum_set:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 299454);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation eth_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1078} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 300486);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const netif_receive_skb: ref;

axiom netif_receive_skb == $sub.ref(0, 301518);

procedure netif_receive_skb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_receive_skb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1081} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 302550);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    return;
}



const page_to_skb: ref;

axiom page_to_skb == $sub.ref(0, 303582);

procedure page_to_skb($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.12, $CurrAddr;



implementation page_to_skb($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i24;
  var $i65: i24;
  var $i66: i24;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $i85: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p104: ref;
  var $p86: ref;
  var $i105: i64;
  var $i106: i1;
  var $p25: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1084} {:cexpr "page_to_skb:arg:offset"} boogie_si_record_i32($i2);
    call {:si_unique_call 1085} {:cexpr "page_to_skb:arg:len"} boogie_si_record_i32($i3);
    call {:si_unique_call 1086} {:cexpr "page_to_skb:arg:truesize"} boogie_si_record_i32($i4);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1488)), $mul.ref(1480, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p13 := lowmem_page_address($p1);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i2);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p18 := netdev_alloc_skb_ip_align($p17, 128);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1090} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p26 := skb_vnet_hdr($p18);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30, $i31 := 10, 16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i30);
    call {:si_unique_call 1092} {:cexpr "__len"} boogie_si_record_i64($i32);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p26);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 1093} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p33, $p15, $i32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i3, $i30);
    call {:si_unique_call 1094} {:cexpr "len"} boogie_si_record_i32($i34);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i2, $i31);
    call {:si_unique_call 1095} {:cexpr "offset"} boogie_si_record_i32($i35);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i31);
    $i37 := $add.i64($i14, $i36);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p13, $mul.ref($i37, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i39 := skb_tailroom($p18);
    call {:si_unique_call 1097} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32($i39, $i34);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i34;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    call {:si_unique_call 1100} {:cexpr "__len___0"} boogie_si_record_i64($i43);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $p44 := skb_put($p18, $i42);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 1102} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p44, $p38, $i43, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i34, $i42);
    call {:si_unique_call 1103} {:cexpr "len"} boogie_si_record_i32($i45);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i35, $i42);
    call {:si_unique_call 1104} {:cexpr "offset"} boogie_si_record_i32($i46);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p12, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i45, 69632);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1108} {:cexpr "tmp___7"} boogie_si_record_i64($i54);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i32($i46, 4095);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i83 := ldv__builtin_expect($i82, 0);
    call {:si_unique_call 1116} {:cexpr "tmp___8"} boogie_si_record_i64($i83);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i45, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p86 := $p1;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p86);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb41:
    assume $i106 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} give_pages($p0, $p86);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb30:
    assume $i85 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p87, $i88, $i89 := $p1, $i46, $i45;
    goto $bb33;

  $bb33:
    call $i90, $i91, $i92, $p93, $p94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $p102, $i103, $p87, $i88, $i89, $p104 := page_to_skb_loop_$bb33($i4, $p18, $i90, $i91, $i92, $p93, $p94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $p102, $i103, $p87, $i88, $i89, $p104);
    goto $bb33_last;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32(4096, $i88);
    call {:si_unique_call 1118} {:cexpr "_min1"} boogie_si_record_i32($i90);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i91 := $ult.i32($i90, $i89);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i91 == 1);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i92 := $i89;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p93 := skb_end_pointer($p18);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} skb_add_rx_frag($p18, $i97, $p87, $i88, $i92, $i4);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32($i89, $i92);
    call {:si_unique_call 1121} {:cexpr "len"} boogie_si_record_i32($i98);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p87, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i98, 0);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p104 := $p102;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p86 := $p104;
    goto $bb32;

  $bb38:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $p87, $i88, $i89 := $p102, 0, $i98;
    goto $bb38_dummy;

  $bb35:
    assume $i91 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i92 := $i90;
    goto $bb37;

  $bb26:
    assume $i84 == 1;
    call {:si_unique_call 1117} devirtbounce.2(0, .str.2, 346, 12);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call page_to_skb_loop_$bb28();
    goto $bb28_last;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i56 := net_ratelimit();
    call {:si_unique_call 1110} {:cexpr "tmp___6"} boogie_si_record_i32($i56);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p18);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_skb_free($p79);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb3;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p58, .str.4);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p59, .str.28);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p60, .str.2);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p61, .str.29);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i64 := $load.i24($M.8, $p63);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, $sub.i24(0, 262144));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i66 := $or.i24($i65, 342);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p63, $i66);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p67, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.9, $p68);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i64($i69);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i70, 1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 1112} {:cexpr "tmp___5"} boogie_si_record_i64($i72);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i73 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p18, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_91 := __dynamic_pr_debug.ref.ref.ref($p5, .str.29, $p77);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i45, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} put_page($p1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb3;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} skb_add_rx_frag($p18, 0, $p1, $i46, $i45, $i4);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i41 := skb_tailroom($p18);
    call {:si_unique_call 1099} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb10;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i30, $i31 := 12, 12;
    goto $bb7;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  $bb28_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;
}



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 304614);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} {:cexpr "netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $p2 := __netdev_alloc_skb_ip_align($p0, $i1, 32);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 305646);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1126} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const skb_add_rx_frag: ref;

axiom skb_add_rx_frag == $sub.ref(0, 306678);

procedure skb_add_rx_frag($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation skb_add_rx_frag($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} {:cexpr "skb_add_rx_frag:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1128} {:cexpr "skb_add_rx_frag:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1129} {:cexpr "skb_add_rx_frag:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1130} {:cexpr "skb_add_rx_frag:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 307710);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mergeable_ctx_to_buf_truesize: ref;

axiom mergeable_ctx_to_buf_truesize == $sub.ref(0, 308742);

procedure mergeable_ctx_to_buf_truesize($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mergeable_ctx_to_buf_truesize($i0: i64) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} {:cexpr "mergeable_ctx_to_buf_truesize:arg:mrg_ctx"} boogie_si_record_i64($i0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32(64, 256);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i2 := 256;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i0);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i3, $i4);
    call {:si_unique_call 1132} {:cexpr "truesize"} boogie_si_record_i32($i5);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32(64, 256);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i8 := 256;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i6, $i8);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i8 := 64;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i2 := 64;
    goto $bb3;
}



const ldv_alloc_skb_12: ref;

axiom ldv_alloc_skb_12 == $sub.ref(0, 309774);

procedure ldv_alloc_skb_12($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.0, $CurrAddr;



implementation ldv_alloc_skb_12($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} {:cexpr "ldv_alloc_skb_12:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 1134} {:cexpr "ldv_alloc_skb_12:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p2 := ldv_skb_alloc();
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_can_coalesce: ref;

axiom skb_can_coalesce == $sub.ref(0, 310806);

procedure skb_can_coalesce($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i1);
  free requires assertsPassed;



implementation skb_can_coalesce($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i1)
{
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "skb_can_coalesce:arg:i"} boogie_si_record_i32($i1);
    call {:si_unique_call 1137} {:cexpr "skb_can_coalesce:arg:off"} boogie_si_record_i32($i3);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p5 := skb_end_pointer($p0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i1);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $sub.i64(0, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p8, $mul.ref($i10, 16));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $p12 := skb_frag_page($p11);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i16 := skb_frag_size($p11);
    call {:si_unique_call 1141} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref($i10, 16)), $mul.ref(8, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i16);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, $i19);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb7;
}



const skb_coalesce_rx_frag: ref;

axiom skb_coalesce_rx_frag == $sub.ref(0, 311838);

procedure skb_coalesce_rx_frag($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation skb_coalesce_rx_frag($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} {:cexpr "skb_coalesce_rx_frag:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1143} {:cexpr "skb_coalesce_rx_frag:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1144} {:cexpr "skb_coalesce_rx_frag:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    return;
}



const ewma_add: ref;

axiom ewma_add == $sub.ref(0, 312870);

procedure ewma_add($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ewma_add($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} {:cexpr "ewma_add:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p2 := external_alloc();
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 313902);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 314934);

procedure skb_frag_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_frag_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 315966);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p0 := ldv_zalloc(232);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p5 := $M.11;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} ldv_set_add($p5, $p2);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 316998);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1149} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1150} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1152} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p4 := calloc(1, $i0);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1154} __VERIFIER_assume($i7);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 318030);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.13, $M.12;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i2 := $M.12;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.12;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i16 := $M.12;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p18, $p1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i19 := $M.12;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.12 := $i20;
    call {:si_unique_call 1156} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.13, $p6);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 1155} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i12 := $M.12;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;
}



const unregister_cpu_notifier: ref;

axiom unregister_cpu_notifier == $sub.ref(0, 319062);

procedure unregister_cpu_notifier($p0: ref);
  free requires assertsPassed;



implementation unregister_cpu_notifier($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 320094);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    return;
}



const remove_vq_common: ref;

axiom remove_vq_common == $sub.ref(0, 321126);

procedure remove_vq_common($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.18, $M.13, $M.12, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation remove_vq_common($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 1157} devirtbounce.14($p6, $p8);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} free_unused_bufs($p0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} free_receive_bufs($p0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} free_receive_page_frags($p0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} virtnet_del_vqs($p0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    return;
}



const flush_work: ref;

axiom flush_work == $sub.ref(0, 322158);

procedure flush_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1162} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1163} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_unused_bufs: ref;

axiom free_unused_bufs == $sub.ref(0, 323190);

procedure free_unused_bufs($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.12;



implementation free_unused_bufs($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p15: ref;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i5: i32;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p39: ref;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb20;

  $bb20:
    call $p30, $p31, $i32, $p34, $p35, $p36, $i37, $i38, $p40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $p39, $i59, $i60, $i61, $i62, $i29 := free_unused_bufs_loop_$bb20($p0, $p25, $p30, $p31, $i32, $p34, $p35, $p36, $i37, $i38, $p40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $p39, $i59, $i60, $i61, $i62, $i29);
    goto $bb20_last;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 1040)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p36 := virtqueue_detach_unused_buf($p35);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i29, 1);
    call {:si_unique_call 1176} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p25);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, $i59);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i62 == 1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb36:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i59;
    goto $bb36_dummy;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p39 := $p36;
    goto $bb25;

  $bb25:
    call $p40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $p39 := free_unused_bufs_loop_$bb25($p0, $p35, $p40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $p39, $i29);
    goto $bb25_last;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i48 == 1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p39);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} ldv_skb_free($p55);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p56 := virtqueue_detach_unused_buf($p35);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb33:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p39 := $p56;
    goto $bb33_dummy;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i29);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p50, $mul.ref($i51, 1040));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p39);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} give_pages($p52, $p53);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p39);
    call {:si_unique_call 1169} {:cexpr "ctx"} boogie_si_record_i64($i43);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p44 := mergeable_ctx_to_buf_address($i43);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p45 := virt_to_head_page($p44);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} put_page($p45);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $p11, $p12, $i13, $i14, $p16, $p17, $p18, $i19, $i20, $p15, $i21, $i22, $i23, $i24, $i5 := free_unused_bufs_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $p11, $p12, $i13, $i14, $p16, $p17, $p18, $i19, $i20, $p15, $i21, $i22, $i23, $i24, $i5);
    goto $bb4_last;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p12 := virtqueue_detach_unused_buf($p11);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i5, 1);
    call {:si_unique_call 1167} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p1);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i21);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i21;
    goto $bb14_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p15 := $p12;
    goto $bb9;

  $bb9:
    call $p16, $p17, $p18, $i19, $i20, $p15 := free_unused_bufs_loop_$bb9($p11, $p16, $p17, $p18, $i19, $i20, $p15);
    goto $bb9_last;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_skb_free($p17);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p18 := virtqueue_detach_unused_buf($p11);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p18;
    goto $bb11_dummy;

  $bb33_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  $bb36_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;
}



const free_receive_bufs: ref;

axiom free_receive_bufs == $sub.ref(0, 324222);

procedure free_receive_bufs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_receive_bufs($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i5 := free_receive_bufs_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i5);
    goto $bb4_last;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 1040)), $mul.ref(192, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i5, 1);
    call {:si_unique_call 1179} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i25);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i25;
    goto $bb14_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call $p14, $p15, $i16, $p17, $p18, $p19, $p21, $p22, $i23, $i24 := free_receive_bufs_loop_$bb9($p0, $p6, $i8, $p14, $p15, $i16, $p17, $p18, $p19, $p21, $p22, $i23, $i24, $i5);
    goto $bb9_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i5);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 1040));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p18 := get_a_page($p17, 208);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __free_pages($p18, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p6);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($i8, 1040)), $mul.ref(192, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;
}



const free_receive_page_frags: ref;

axiom free_receive_page_frags == $sub.ref(0, 325254);

procedure free_receive_page_frags($p0: ref);
  free requires assertsPassed;



implementation free_receive_page_frags($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(44, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $p20, $p21, $i22, $i23, $i24, $i25, $i5 := free_receive_page_frags_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $p20, $p21, $i22, $i23, $i24, $i25, $i5);
    goto $bb4_last;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p7, $mul.ref($i8, 1040)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i5, 1);
    call {:si_unique_call 1181} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p1);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i22);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i22;
    goto $bb9_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i5);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p16, $mul.ref($i17, 1040)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} put_page($p21);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5341;
}



const virtnet_del_vqs: ref;

axiom virtnet_del_vqs == $sub.ref(0, 326286);

procedure virtnet_del_vqs($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.18, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation virtnet_del_vqs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(0, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} virtnet_clean_affinity($p0, $sub.i64(0, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1183} devirtbounce.14($p6, $p2);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} virtnet_free_queues($p0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    return;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 327318);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    return;
}



const virtqueue_detach_unused_buf: ref;

axiom virtqueue_detach_unused_buf == $sub.ref(0, 328350);

procedure virtqueue_detach_unused_buf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation virtqueue_detach_unused_buf($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p1 := external_alloc();
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 329382);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i2 := queue_work($p1, $p0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1188} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 330414);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1190} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 331446);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_unregister_netdev_16: ref;

axiom ldv_unregister_netdev_16 == $sub.ref(0, 332478);

procedure ldv_unregister_netdev_16($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_unregister_netdev_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} unregister_netdev($p0);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1195} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    return;
}



const free_percpu: ref;

axiom free_percpu == $sub.ref(0, 333510);

procedure free_percpu($p0: ref);
  free requires assertsPassed;



implementation free_percpu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_17: ref;

axiom ldv_free_netdev_17 == $sub.ref(0, 334542);

procedure ldv_free_netdev_17($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_free_netdev_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} free_netdev($p0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1197} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 335574);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 336606);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    return;
}



const virtio_cread16: ref;

axiom virtio_cread16 == $sub.ref(0, 337638);

procedure virtio_cread16($p0: ref, $i1: i32) returns ($r: i16);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation virtio_cread16($p0: ref, $i1: i32) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1199} {:cexpr "virtio_cread16:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    call {:si_unique_call 1200} devirtbounce.5($p6, $p0, $i1, $p7, 2);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.19, $p2);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 338670);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1202} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1203} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p3 := external_alloc();
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const virtio_cread_bytes: ref;

axiom virtio_cread_bytes == $sub.ref(0, 339702);

procedure virtio_cread_bytes($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation virtio_cread_bytes($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "virtio_cread_bytes:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1206} {:cexpr "virtio_cread_bytes:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1440, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    call {:si_unique_call 1207} devirtbounce.5($p7, $p0, $i1, $p2, $i8);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    return;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 340734);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} eth_random_addr($p3);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_percpu: ref;

axiom __alloc_percpu == $sub.ref(0, 341766);

procedure __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} {:cexpr "__alloc_percpu:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1210} {:cexpr "__alloc_percpu:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p2 := external_alloc();
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 342798);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_config_changed_work: ref;

axiom virtnet_config_changed_work == $sub.ref(0, 343830);

procedure virtnet_config_changed_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_config_changed_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i14: i16;
  var $i15: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 288), 568));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(368, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} mutex_lock_nested($p3, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(52, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(368, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} mutex_unlock($p46);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(0, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i9 := virtio_has_feature($p8, 16);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1215} {:cexpr "tmp___2"} boogie_si_record_i8($i10);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(0, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i18 := virtio_cread16($p17, 6);
    call {:si_unique_call 1217} {:cexpr "v"} boogie_si_record_i16($i18);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i18, 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i15, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i14);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 2);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i14);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    call {:si_unique_call 1220} {:cexpr "v"} boogie_si_record_i16($i27);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(40, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i27);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, $i30);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i27);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(40, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(40, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(16, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} netif_carrier_off($p43);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(16, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} netif_tx_stop_all_queues($p45);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(16, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} netif_carrier_on($p39);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(16, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} netif_tx_wake_all_queues($p41);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 568)), $mul.ref(16, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} netdev_notify_peers($p24);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} virtnet_ack_link_announce($p2);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i14, $i15 := $u0, $sub.i32(0, 2);
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;
}



const ldv_register_netdev_13: ref;

axiom ldv_register_netdev_13 == $sub.ref(0, 344862);

procedure ldv_register_netdev_13($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.0, $CurrAddr;



implementation ldv_register_netdev_13($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i1 := register_netdev($p0);
    call {:si_unique_call 1226} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ldv_net_device_ops_3();
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const virtnet_cpu_callback: ref;

axiom virtnet_cpu_callback == $sub.ref(0, 345894);

procedure virtnet_cpu_callback($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 346926);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 347958);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev_14: ref;

axiom ldv_unregister_netdev_14 == $sub.ref(0, 348990);

procedure ldv_unregister_netdev_14($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_unregister_netdev_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} unregister_netdev($p0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1230} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_15: ref;

axiom ldv_free_netdev_15 == $sub.ref(0, 350022);

procedure ldv_free_netdev_15($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_free_netdev_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} free_netdev($p0);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1232} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 351054);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_3: ref;

axiom ldv_net_device_ops_3 == $sub.ref(0, 352086);

procedure ldv_net_device_ops_3();
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr;



implementation ldv_net_device_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p0 := ldv_zalloc(3264);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    return;
}



const netdev_notify_peers: ref;

axiom netdev_notify_peers == $sub.ref(0, 353118);

procedure netdev_notify_peers($p0: ref);
  free requires assertsPassed;



implementation netdev_notify_peers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    return;
}



const virtnet_ack_link_announce: ref;

axiom virtnet_ack_link_announce == $sub.ref(0, 354150);

procedure virtnet_ack_link_announce($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation virtnet_ack_link_announce($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} rtnl_lock();
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i1 := virtnet_send_command($p0, 3, 0, $0.ref);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1238} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} rtnl_unlock();
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_92 := dev_warn.ref.ref($p8, .str.13);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const netif_tx_wake_all_queues: ref;

axiom netif_tx_wake_all_queues == $sub.ref(0, 355182);

procedure netif_tx_wake_all_queues($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_all_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $i8, $i4 := netif_tx_wake_all_queues_loop_$bb4($p0, $p1, $p5, $i6, $i7, $i8, $i4);
    goto $bb4_last;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p5 := netdev_get_tx_queue($p0, $i4);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} netif_tx_wake_queue($p5);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, 1);
    call {:si_unique_call 1243} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, $i6);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;
}



const netif_tx_stop_all_queues: ref;

axiom netif_tx_stop_all_queues == $sub.ref(0, 356214);

procedure netif_tx_stop_all_queues($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_all_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $i8, $i4 := netif_tx_stop_all_queues_loop_$bb4($p0, $p1, $p5, $i6, $i7, $i8, $i4);
    goto $bb4_last;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p5 := netdev_get_tx_queue($p0, $i4);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} netif_tx_stop_queue($p5);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, 1);
    call {:si_unique_call 1246} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, $i6);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 357246);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i2 := test_and_clear_bit(0, $p1);
    call {:si_unique_call 1248} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} __netif_schedule($p5);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 358278);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} get_random_bytes($p0, 6);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 359310);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 360342);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_virtio_driver_1: ref;

axiom ldv_initialize_virtio_driver_1 == $sub.ref(0, 361374);

procedure ldv_initialize_virtio_driver_1();
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation ldv_initialize_virtio_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p0 := ldv_zalloc(1480);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_4: ref;

axiom ldv_initialize_ethtool_ops_4 == $sub.ref(0, 362406);

procedure ldv_initialize_ethtool_ops_4();
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p0 := ldv_zalloc(36);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p2 := ldv_zalloc(3264);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.23 := $p2;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 363438);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.18, $M.30, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.31, $M.2, $M.32, $M.21, $M.22, $M.23, $M.33, $M.34, $M.20, $M.12, $M.11, $M.13, $M.38, $M.39, $M.40, $M.16, $M.15, $M.14, $M.65, $M.66, $M.67, $CurrAddr, $M.3, assertsPassed, $M.17;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i16;
  var $i163: i32;
  var $i164: i16;
  var $i165: i32;
  var $i166: i16;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i16;
  var $i172: i32;
  var $i173: i16;
  var $i174: i32;
  var $i175: i16;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i16;
  var $i181: i32;
  var $i182: i16;
  var $i183: i32;
  var $i184: i16;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i189: i16;
  var $i190: i32;
  var $i191: i16;
  var $i192: i32;
  var $i193: i16;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i16;
  var $i199: i32;
  var $i200: i16;
  var $i201: i32;
  var $i202: i16;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i16;
  var $i208: i32;
  var $i209: i16;
  var $i210: i32;
  var $i211: i16;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $i278: i32;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: ref;
  var vslice_dummy_var_116: ref;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i64;

  $bb0:
    call {:si_unique_call 1256} $initialize();
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p0 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p2 := ldv_zalloc(36);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $p4 := ldv_zalloc(196);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1262} $i6 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1263} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i6);
    call {:si_unique_call 1264} {:cexpr "tmp___1"} boogie_si_record_i16($i6);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p7 := ldv_zalloc(232);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p9 := ldv_zalloc(1);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1267} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1269} {:cexpr "tmp___4"} boogie_si_record_i32($i10);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $p11 := ldv_zalloc(184);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1271} $i13 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1272} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i13);
    call {:si_unique_call 1273} {:cexpr "tmp___6"} boogie_si_record_i16($i13);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p14 := ldv_zalloc(1);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p15 := ldv_zalloc(320);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p17 := ldv_zalloc(48);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ldv_initialize();
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.24;
    call {:si_unique_call 1278} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p19, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.24 := cmdloc_dummy_var_25;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.25;
    call {:si_unique_call 1279} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p20, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.25 := cmdloc_dummy_var_27;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1281} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1282} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1283} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1284} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i42, $i43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i77, $i78, $p79, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p136, $i137, $i138, $p139, $i140, $i141, $p142, $i143, $i144, $p145, $i147, $i148, $p149, $i151, $i152, $p153, $i155, $i156, $p157, $i159, $i160, $p161, $i162, $i163, $i164, $i165, $i166, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $i175, $i177, $i178, $p179, $i180, $i181, $i182, $i183, $i184, $i186, $i187, $p188, $i189, $i190, $i191, $i192, $i193, $i195, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $i204, $i205, $p206, $i207, $i208, $i209, $i210, $i211, $i213, $i214, $p215, $i216, $i217, $p218, $i219, $i220, $p221, $i222, $i223, $p224, $i226, $i227, $p228, $i230, $i231, $p232, $i233, $i234, $i235, $i236, $i237, $p238, $i240, $i241, $p242, $i244, $i245, $p246, $i248, $i249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $i260, $i261, $p262, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119 := main_loop_$bb1($p0, $p1, $p3, $p5, $i6, $p8, $p9, $i10, $p12, $i13, $p14, $p16, $p18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i42, $i43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i77, $i78, $p79, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p136, $i137, $i138, $p139, $i140, $i141, $p142, $i143, $i144, $p145, $i147, $i148, $p149, $i151, $i152, $p153, $i155, $i156, $p157, $i159, $i160, $p161, $i162, $i163, $i164, $i165, $i166, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $i175, $i177, $i178, $p179, $i180, $i181, $i182, $i183, $i184, $i186, $i187, $p188, $i189, $i190, $i191, $i192, $i193, $i195, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $i204, $i205, $p206, $i207, $i208, $i209, $i210, $i211, $i213, $i214, $p215, $i216, $i217, $p218, $i219, $i220, $p221, $i222, $i223, $p224, $i226, $i227, $p228, $i230, $i231, $p232, $i233, $i234, $i235, $i236, $i237, $p238, $i240, $i241, $p242, $i244, $i245, $p246, $i248, $i249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $i260, $i261, $p262, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_stop();
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb51_dummy;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i276 := $M.30;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb255:
    assume $i277 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1406} $i278 := __VERIFIER_nondet_int();
    call {:si_unique_call 1407} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i278);
    call {:si_unique_call 1408} {:cexpr "tmp___15"} boogie_si_record_i32($i278);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} ldv_stop();
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb258:
    assume $i279 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i280 := $M.30;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb260:
    assume $i281 == 1;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_119 := mergeable_rx_buffer_size_show($p16, $p18, $p14);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i117 := $M.18;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb129:
    assume $i118 == 1;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1342} $i119 := __VERIFIER_nondet_int();
    call {:si_unique_call 1343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i119);
    call {:si_unique_call 1344} {:cexpr "tmp___14"} boogie_si_record_i32($i119);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i119, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i119, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i119, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i119, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_stop();
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb140:
    assume $i124 == 1;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i271 := $M.18;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 2);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb249:
    assume $i272 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_118 := ldv_ndo_uninit_3();
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1403} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i274 := $M.28;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i275 := $sub.i32($i274, 1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.28 := $i275;
    call {:si_unique_call 1404} {:cexpr "ref_cnt"} boogie_si_record_i32($i275);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb138:
    assume $i123 == 1;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i264 := $M.18;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 1);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb243:
    assume $i265 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i266 := ldv_ndo_init_3();
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.34 := $i266;
    call {:si_unique_call 1399} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i266);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i267 := $M.34;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb245:
    assume $i268 == 1;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1400} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i269 := $M.28;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i270 := $add.i32($i269, 1);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.28 := $i270;
    call {:si_unique_call 1401} {:cexpr "ref_cnt"} boogie_si_record_i32($i270);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb136:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i119, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i125 == 1);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i252 := $M.18;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 1);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i256 := $M.18;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 3);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i260 := $M.18;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 2);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb240:
    assume $i261 == 1;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p262 := $M.20;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} vslice_dummy_var_117 := virtnet_stats($p262, $p12);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume $i257 == 1;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p258 := $M.20;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_116 := virtnet_stats($p258, $p12);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb234:
    assume $i253 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p254 := $M.20;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_115 := virtnet_stats($p254, $p12);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb143:
    assume $i125 == 1;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i240 := $M.18;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i244 := $M.18;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 3);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i248 := $M.18;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 2);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb231:
    assume $i249 == 1;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p250 := $M.20;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_114 := virtnet_set_mac_address($p250, $p9);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb228:
    assume $i245 == 1;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p246 := $M.20;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_113 := virtnet_set_mac_address($p246, $p9);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume $i241 == 1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p242 := $M.20;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_112 := virtnet_set_mac_address($p242, $p9);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb134:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i119, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i119, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i127 == 1);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i236 := $M.18;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 3);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb222:
    assume $i237 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p238 := $M.20;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_111 := start_xmit($p8, $p238);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb147:
    assume $i127 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i230 := $M.18;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb216:
    assume $i231 == 1;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p232 := $M.20;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i233 := virtnet_open($p232);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.33 := $i233;
    call {:si_unique_call 1382} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i233);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i234 := $M.33;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb218:
    assume $i235 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb145:
    assume $i126 == 1;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i222 := $M.18;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 3);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i226 := $M.18;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 2);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb213:
    assume $i227 == 1;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p228 := $M.20;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vslice_dummy_var_110 := virtnet_change_mtu($p228, $i10);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i223 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p224 := $M.20;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_109 := virtnet_change_mtu($p224, $i10);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb132:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i119, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i119, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i119, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i130 == 1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i213 := $M.18;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 1);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i216 := $M.18;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 3);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i219 := $M.18;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 2);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb207:
    assume $i220 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p221 := $M.20;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} virtnet_netpoll($p221);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i217 == 1;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p218 := $M.20;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} virtnet_netpoll($p218);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i214 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p215 := $M.20;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} virtnet_netpoll($p215);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb153:
    assume $i130 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i186 := $M.18;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 1);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i195 := $M.18;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 3);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i204 := $M.18;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 2);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb198:
    assume $i205 == 1;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p206 := $M.20;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i207 := $load.i16($M.24, $p0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i207);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i16($i208);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i210 := $zext.i16.i32($i13);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i16($i210);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_108 := virtnet_vlan_rx_add_vid($p206, $i209, $i211);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb195:
    assume $i196 == 1;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p197 := $M.20;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.24, $p0);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i199 := $zext.i16.i32($i198);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i200 := $trunc.i32.i16($i199);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i13);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i201);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_107 := virtnet_vlan_rx_add_vid($p197, $i200, $i202);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i187 == 1;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p188 := $M.20;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i189 := $load.i16($M.24, $p0);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i189);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i190);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i13);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_106 := virtnet_vlan_rx_add_vid($p188, $i191, $i193);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb151:
    assume $i129 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i159 := $M.18;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i168 := $M.18;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 3);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i177 := $M.18;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 2);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb189:
    assume $i178 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p179 := $M.20;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i180 := $load.i16($M.25, $p1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i181 := $zext.i16.i32($i180);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i16($i181);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i183 := $zext.i16.i32($i6);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i16($i183);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_105 := virtnet_vlan_rx_kill_vid($p179, $i182, $i184);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1364} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb186:
    assume $i169 == 1;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p170 := $M.20;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.25, $p1);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i171);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i6);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_104 := virtnet_vlan_rx_kill_vid($p170, $i173, $i175);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb183:
    assume $i160 == 1;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p161 := $M.20;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i162 := $load.i16($M.25, $p1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i163 := $zext.i16.i32($i162);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i16($i163);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i6);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_103 := virtnet_vlan_rx_kill_vid($p161, $i164, $i166);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb149:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i119, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i119, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i132 == 1);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i147 := $M.18;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i151 := $M.18;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 3);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i155 := $M.18;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb180:
    assume $i156 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p157 := $M.20;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_102 := eth_validate_addr($p157);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1358} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb177:
    assume $i152 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p153 := $M.20;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_101 := eth_validate_addr($p153);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb174:
    assume $i148 == 1;
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p149 := $M.20;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_100 := eth_validate_addr($p149);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1354} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb157:
    assume $i132 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i143 := $M.18;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 3);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb171:
    assume $i144 == 1;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p145 := $M.20;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_99 := virtnet_close($p145);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb155:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i119, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb142;

  $bb159:
    assume $i133 == 1;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i134 := $M.18;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i137 := $M.18;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 3);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i140 := $M.18;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb167:
    assume $i141 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p142 := $M.20;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} virtnet_set_rx_mode($p142);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume $i138 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p139 := $M.20;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} virtnet_set_rx_mode($p139);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i135 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p136 := $M.20;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} virtnet_set_rx_mode($p136);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i100 := $M.29;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb99:
    assume $i101 == 1;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1326} $i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 1327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i102);
    call {:si_unique_call 1328} {:cexpr "tmp___13"} boogie_si_record_i32($i102);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_stop();
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb104:
    assume $i104 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i110 := $M.29;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb117:
    assume $i111 == 1;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i112 := virtio_net_driver_init();
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.32 := $i112;
    call {:si_unique_call 1333} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i112);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i113 := $M.32;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i115 := $M.32;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb122:
    assume $i116 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb119:
    assume $i114 == 1;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 1334} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_initialize_virtio_driver_1();
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb102:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb106;

  $bb107:
    assume $i105 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i106 := $M.29;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 3);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb109:
    assume $i107 == 1;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i108 := $M.28;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb111;

  $bb112:
    assume $i109 == 1;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} virtio_net_driver_exit();
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb3:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i56 := $M.27;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb52:
    assume $i57 == 1;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1303} $i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 1304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i58);
    call {:si_unique_call 1305} {:cexpr "tmp___12"} boogie_si_record_i32($i58);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} ldv_stop();
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb61:
    assume $i62 == 1;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i95 := $M.27;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb93:
    assume $i96 == 1;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p97 := $M.21;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} virtnet_remove($p97);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i98 := $M.28;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i98, 1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.28 := $i99;
    call {:si_unique_call 1324} {:cexpr "ref_cnt"} boogie_si_record_i32($i99);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb59:
    assume $i61 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i87 := $M.27;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i91 := $M.27;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb90:
    assume $i92 == 1;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p93 := $M.21;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_98 := virtnet_freeze($p93);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i88 == 1;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p89 := $M.21;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_97 := virtnet_freeze($p89);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1319} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb57:
    assume $i60 == 1;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i81 := $M.27;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i84 := $M.27;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 2);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb84:
    assume $i85 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p86 := $M.21;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} virtnet_config_changed($p86);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1317} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i82 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p83 := $M.21;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} virtnet_config_changed($p83);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1315} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb55:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i63 == 1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i73 := $M.27;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i77 := $M.27;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 2);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb78:
    assume $i78 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p79 := $M.21;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} vslice_dummy_var_96 := virtnet_restore($p79);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i74 == 1;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p75 := $M.21;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_95 := virtnet_restore($p75);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1311} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb64:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb63;

  $bb66:
    assume $i64 == 1;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i65 := $M.27;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i66 == 1;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p67 := $M.21;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i68 := virtnet_probe($p67);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $M.31 := $i68;
    call {:si_unique_call 1307} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i68);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i69 := $M.31;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i70 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i71 := $M.28;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 1);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.28 := $i72;
    call {:si_unique_call 1309} {:cexpr "ref_cnt"} boogie_si_record_i32($i72);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb12:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i28 := $M.26;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1289} $i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 1290} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i30);
    call {:si_unique_call 1291} {:cexpr "tmp___11"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i30, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i30, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_stop();
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i52 := $M.26;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45:
    assume $i53 == 1;
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p54 := $M.23;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_94 := ethtool_op_get_link($p54);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i48 := $M.26;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume $i49 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p50 := $M.23;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p51 := $M.22;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} virtnet_get_channels($p50, $p51);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb21:
    assume $i32 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i45 := $M.26;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39:
    assume $i46 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p47 := $M.23;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} virtnet_get_drvinfo($p47, $p5);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb19:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i35 == 1);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i42 := $M.26;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p44 := $M.23;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} virtnet_get_ringparam($p44, $p3);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb27;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i37 := $M.26;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i38 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p39 := $M.23;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p40 := $M.22;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} vslice_dummy_var_93 := virtnet_set_channels($p39, $p40);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb51_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1286} $i21 := __VERIFIER_nondet_int();
    call {:si_unique_call 1287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i21);
    call {:si_unique_call 1288} {:cexpr "tmp___10"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 364470);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 365502);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p0 := $M.11;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} ldv_set_init($p0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 366534);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 367566);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const virtio_net_driver_exit: ref;

axiom virtio_net_driver_exit == $sub.ref(0, 368598);

procedure virtio_net_driver_exit();
  free requires assertsPassed;



implementation virtio_net_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} unregister_virtio_driver(virtio_net_driver);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    return;
}



const virtio_net_driver_init: ref;

axiom virtio_net_driver_init == $sub.ref(0, 369630);

procedure virtio_net_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation virtio_net_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $i0 := register_virtio_driver(virtio_net_driver);
    call {:si_unique_call 1416} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_3: ref;

axiom ldv_ndo_init_3 == $sub.ref(0, 370662);

procedure ldv_ndo_init_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1417} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1418} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_3: ref;

axiom ldv_ndo_uninit_3 == $sub.ref(0, 371694);

procedure ldv_ndo_uninit_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 372726);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p0 := $M.11;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1422} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 373758);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i1 := $M.12;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const register_virtio_driver: ref;

axiom register_virtio_driver == $sub.ref(0, 374790);

procedure register_virtio_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_virtio_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1424} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1425} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unregister_virtio_driver: ref;

axiom unregister_virtio_driver == $sub.ref(0, 375822);

procedure unregister_virtio_driver($p0: ref);
  free requires assertsPassed;



implementation unregister_virtio_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 376854);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1426} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 377886);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1427} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 1} true;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 378918);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 379950);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 380982);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 382014);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 383046);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 384078);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 385110);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 386142);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 387174);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 388206);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 389238);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1428} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1429} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1430} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} __VERIFIER_assume($i6);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 390270);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 391302);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 392334);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1432} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1433} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1434} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1435} __VERIFIER_assume($i4);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 393366);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 394398);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 395430);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 396462);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1436} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1437} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1438} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1439} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1440} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1441} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1443} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1444} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} __VERIFIER_assume($i7);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1446} __VERIFIER_assume($i11);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 397494);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 398526);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 399558);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 400590);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 401622);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 402654);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1447} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1448} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1449} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1451} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1452} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1453} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1454} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1455} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} __VERIFIER_assume($i7);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} __VERIFIER_assume($i11);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 403686);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 404718);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 405750);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 406782);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 407814);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 408846);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 409878);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 410910);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 411942);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1458} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1460} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1461} __VERIFIER_assume($i10);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 412974);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1462} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1463} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1464} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 414006);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1465} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1466} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1467} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 415038);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1468} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1469} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1470} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 416070);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1471} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1472} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 417102);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 418134);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1473} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1474} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 419166);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 420198);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 421230);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1476} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p6 := malloc($i5);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1480} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 422262);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 423294);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.22, $M.23, $M.26, $M.27, $M.28, $M.29, $M.18, $M.30, $M.31, $M.32, $M.33, $M.34, $M.12, $M.11, $M.13, $M.38, $M.39, $M.40, $M.0, $M.16, $M.15, $M.14, $M.65, $M.66, $M.67;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1481} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.21 := $0.ref;
    $M.20 := $0.ref;
    $M.22 := $0.ref;
    $M.23 := $0.ref;
    $M.26 := 0;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1484} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1488} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1489} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1490} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1491} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1492} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.13 := $store.ref($M.13, set_impl, $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.13 := $store.ref($M.13, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.38 := $store.i32($M.38, features, 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(1, 4)), 1);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(2, 4)), 6);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(3, 4)), 5);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(4, 4)), 11);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(5, 4)), 14);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(6, 4)), 12);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(7, 4)), 13);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(8, 4)), 7);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(9, 4)), 8);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(10, 4)), 9);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(11, 4)), 10);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(12, 4)), 15);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(13, 4)), 16);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(14, 4)), 17);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(15, 4)), 18);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(16, 4)), 19);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(17, 4)), 21);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(18, 4)), 22);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(19, 4)), 23);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(features, $mul.ref(0, 84)), $mul.ref(20, 4)), 27);
    $M.39 := $store.i32($M.39, id_table, 1);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1)), 0);
    $M.0 := $store.ref($M.0, mergeable_rx_buffer_size_attribute, .str.33);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(32, 1)), mergeable_rx_buffer_size_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mergeable_rx_buffer_size_attribute, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, virtio_net_mrg_rx_attrs, mergeable_rx_buffer_size_attribute);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtio_net_mrg_rx_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, virtio_net_mrg_rx_group, .str.4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtio_net_mrg_rx_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtio_net_mrg_rx_group, $mul.ref(0, 32)), $mul.ref(16, 1)), virtio_net_mrg_rx_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtio_net_mrg_rx_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.16 := 64;
    call {:si_unique_call 1493} {:cexpr "napi_weight"} boogie_si_record_i32(64);
    $M.15 := 1;
    call {:si_unique_call 1494} {:cexpr "gso"} boogie_si_record_i8(1);
    $M.14 := 1;
    call {:si_unique_call 1495} {:cexpr "csum"} boogie_si_record_i8(1);
    $M.0 := $store.ref($M.0, virtnet_ethtool_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), virtnet_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), virtnet_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), virtnet_get_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), virtnet_set_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, virtnet_netdev, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(16, 1)), virtnet_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(24, 1)), virtnet_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(32, 1)), start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(56, 1)), virtnet_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(64, 1)), virtnet_set_mac_address);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(96, 1)), virtnet_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(120, 1)), virtnet_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(136, 1)), virtnet_vlan_rx_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(144, 1)), virtnet_vlan_rx_kill_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(152, 1)), virtnet_netpoll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(virtnet_netdev, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.4, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(22, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i8($M.65, .str.51, 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.51, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.51, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.51, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.66 := $store.i8($M.66, .str.31, 105);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(2, 1)), 112);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(3, 1)), 117);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(4, 1)), 116);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(5, 1)), 46);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(6, 1)), 37);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, .str.32, 111);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(2, 1)), 116);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(4, 1)), 117);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(6, 1)), 46);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    call {:si_unique_call 1496} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 424326);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 425358);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 426390);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 427422);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 428454);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 429486);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 430518);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 431550);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.18, $CurrAddr, $M.13, $M.12, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(virtnet_config_changed_work, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(refill_work, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(skb_xmit_done, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(skb_recv_done, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(virtnet_config_changed, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(virtnet_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(virtnet_netpoll, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(virtnet_set_rx_mode, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1497} virtnet_set_rx_mode($p1);
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1498} virtnet_netpoll($p2);
    return;

  $bb4:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1499} virtnet_remove($p3);
    return;

  $bb5:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1500} virtnet_config_changed($p4);
    return;

  $bb6:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1501} skb_recv_done($p5);
    return;

  $bb7:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1502} skb_xmit_done($p6);
    return;

  $bb8:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1503} refill_work($p7);
    return;

  $bb9:
    assume $i16 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1504} virtnet_config_changed_work($p8);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 432582);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 433614);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 434646);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(virtnet_get_channels, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(virtnet_get_ringparam, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(virtnet_get_drvinfo, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1505} virtnet_get_drvinfo($p1, $p2);
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1506} virtnet_get_ringparam($p3, $p4);
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1507} virtnet_get_channels($p5, $p6);
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 435678);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(virtnet_poll, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(virtnet_change_mtu, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1508} $i2 := virtnet_change_mtu($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1509} $i4 := virtnet_poll($p3, arg1);
    $r := $i4;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 436710);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 437742);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: ref, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: ref, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 438774);

procedure devirtbounce.14(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.18, $CurrAddr, $M.13, $M.12, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation devirtbounce.14(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(virtnet_config_changed_work, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(refill_work, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i13 == 1);
    $i12 := $eq.ref(skb_xmit_done, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(skb_recv_done, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(virtnet_config_changed, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(virtnet_remove, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(virtnet_netpoll, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(virtnet_set_rx_mode, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1510} virtnet_set_rx_mode($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1511} virtnet_netpoll($p2);
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 1512} virtnet_remove(arg);
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 1513} virtnet_config_changed(arg);
    return;

  $bb6:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1514} skb_recv_done($p3);
    return;

  $bb7:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1515} skb_xmit_done($p4);
    return;

  $bb8:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1516} refill_work($p5);
    return;

  $bb9:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1517} virtnet_config_changed_work($p6);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i16;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.22, $M.23, $M.26, $M.27, $M.28, $M.29, $M.18, $M.30, $M.31, $M.32, $M.33, $M.34, $M.12, $M.11, $M.13, $M.38, $M.39, $M.40, $M.0, $M.16, $M.15, $M.14, $M.65, $M.66, $M.67, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1518} __SMACK_static_init();
    call {:si_unique_call 1519} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.18, $M.30, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.31, $M.2, $M.32, $M.21, $M.22, $M.23, $M.33, $M.34, $M.20, $M.12, $M.11, $M.13, $M.38, $M.39, $M.40, $M.16, $M.15, $M.14, $M.65, $M.66, $M.67, $CurrAddr, $M.3, $M.17;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation virtnet_open_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i16, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i1, in_$i17: i8, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$i7: i32, in_vslice_dummy_var_30: i1) returns (out_$p8: ref, out_$i9: i16, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i1, out_$i17: i8, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$i7: i32, out_vslice_dummy_var_30: i1)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i7, out_vslice_dummy_var_30 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i7, in_vslice_dummy_var_30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  $bb15:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i27;
    goto $bb15_dummy;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, out_$i27);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.0, in_$p3);
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i7, 1);
    call {:si_unique_call 15} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} virtnet_napi_enable(out_$p26);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 1040));
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i7);
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_55;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_54;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} out_vslice_dummy_var_30 := schedule_delayed_work(out_$p21, 0);
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_51;

  $bb11:
    assume out_$i20 == 1;
    goto corral_source_split_50;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_48;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_47;

  $bb9:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := 1;
    goto $bb10;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i19 := 0;
    goto $bb10;

  $bb8:
    assume out_$i18 == 1;
    goto corral_source_split_45;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i8.i1(out_$i17);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i8(out_$i16);
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i17);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} out_$i16 := try_fill_recv(out_$p15, 208);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p13, $mul.ref(out_$i14, 1040));
    goto corral_source_split_40;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i7);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_37;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_36;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, out_$i7);
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i16($M.0, out_$p8);
    goto corral_source_split_32;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 568)), $mul.ref(46, 1));
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i7, out_vslice_dummy_var_30 := virtnet_open_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i7, out_vslice_dummy_var_30);
    return;

  exit:
    return;
}



procedure virtnet_open_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i16, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i1, in_$i17: i8, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$i7: i32, in_vslice_dummy_var_30: i1) returns (out_$p8: ref, out_$i9: i16, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i1, out_$i17: i8, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$i7: i32, out_vslice_dummy_var_30: i1);
  modifies $CurrAddr, $M.0, $M.13, $M.12;



implementation virtnet_close_loop_$bb4(in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_78;

  $bb6:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i15;
    goto $bb6_dummy;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, out_$i15);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, in_$p5);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i9, 1);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} napi_disable(out_$p14);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 1040)), $mul.ref(8, 1));
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_81;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i9 := virtnet_close_loop_$bb4(in_$p2, in_$p5, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i9);
    return;

  exit:
    return;
}



procedure virtnet_close_loop_$bb4(in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i9: i32);
  modifies $CurrAddr;



implementation virtnet_set_rx_mode_loop_$bb37(in_$p108: ref, in_$i109: i64, in_$i121: i64, in_$i125: i1, in_$i126: i32, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$i137: i64, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i133: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p123: ref, in_$i124: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i125: i1, out_$i126: i32, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$i137: i64, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i133: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p123: ref, out_$i124: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8)
{

  entry:
    out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i134, out_$p135, out_$p136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i133, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p123, out_$i124, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := in_$i125, in_$i126, in_$p127, in_$p128, in_$i129, in_$p130, in_$p131, in_$p132, in_$i134, in_$p135, in_$p136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i133, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p123, in_$i124, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  $bb42:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$p123, out_$i124 := out_$p143, out_$i133;
    goto $bb42_dummy;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i64(out_$i146, in_$i121);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$i146 := $p2i.ref.i64(out_$p145);
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p144, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref($add.ref(out_$p123, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_355;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 70} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p138, out_$p140, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    out_$i133 := out_$i134;
    goto $bb41;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i126;
    goto $bb41;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    out_cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 68} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p130, out_$p132, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_8;
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p123, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref(out_$p128, $mul.ref(out_$i129, 1));
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i124);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(out_$p127);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p108, $mul.ref(in_$i109, 4)), $mul.ref(4, 1));
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i124, 1);
    call {:si_unique_call 67} {:cexpr "i"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_336;

  $bb39:
    assume out_$i125 == 1;
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i125 := $ugt.i64(6, 63);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p123, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref(out_$p136, $mul.ref(out_$i137, 1));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i137 := $sext.i32.i64(out_$i124);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(out_$p135);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p108, $mul.ref(in_$i109, 4)), $mul.ref(4, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i124, 1);
    call {:si_unique_call 69} {:cexpr "i"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_346;

  $bb40:
    assume !(out_$i125 == 1);
    goto corral_source_split_345;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i134, out_$p135, out_$p136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i133, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p123, out_$i124, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := virtnet_set_rx_mode_loop_$bb37(in_$p108, in_$i109, in_$i121, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i134, out_$p135, out_$p136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i133, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p123, out_$i124, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    return;

  exit:
    return;
}



procedure virtnet_set_rx_mode_loop_$bb37(in_$p108: ref, in_$i109: i64, in_$i121: i64, in_$i125: i1, in_$i126: i32, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$i137: i64, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i133: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p123: ref, in_$i124: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i125: i1, out_$i126: i32, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$i137: i64, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i133: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p123: ref, out_$i124: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8);
  modifies $M.0;



implementation virtnet_set_rx_mode_loop_$bb26(in_$p62: ref, in_$i76: i64, in_$i80: i1, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i88: i32, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p78: ref, in_$i79: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i80: i1, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i88: i32, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p78: ref, out_$i79: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i88, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p78, out_$i79, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$p85, in_$p86, in_$p87, in_$i89, in_$p90, in_$p91, in_$i92, in_$p93, in_$p94, in_$p95, in_$i88, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p78, in_$i79, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  $bb31:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$p78, out_$i79 := out_$p98, out_$i88;
    goto $bb31_dummy;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, in_$i76);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(out_$p78, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_300;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 65} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p93, out_$p95, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    out_$i88 := out_$i89;
    goto $bb30;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i81;
    goto $bb30;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 63} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p85, out_$p87, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p78, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_286;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p83, $mul.ref(out_$i84, 1));
    goto corral_source_split_285;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i79);
    goto corral_source_split_284;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_283;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p62, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i79, 1);
    call {:si_unique_call 62} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_281;

  $bb28:
    assume out_$i80 == 1;
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i80 := $ugt.i64(6, 63);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p78, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref(out_$p91, $mul.ref(out_$i92, 1));
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i79);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p62, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i79, 1);
    call {:si_unique_call 64} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_291;

  $bb29:
    assume !(out_$i80 == 1);
    goto corral_source_split_290;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i88, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p78, out_$i79, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := virtnet_set_rx_mode_loop_$bb26(in_$p62, in_$i76, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i88, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p78, out_$i79, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure virtnet_set_rx_mode_loop_$bb26(in_$p62: ref, in_$i76: i64, in_$i80: i1, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i88: i32, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p78: ref, in_$i79: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i80: i1, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i88: i32, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p78: ref, out_$i79: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.0;



implementation virtnet_set_mac_address_loop_$bb19(in_$p6: ref, in_$p7: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33 := in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i33;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_438;

  $bb21:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i40;
    goto $bb21_dummy;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$i43 := $ugt.i32(out_$i42, out_$i40);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, in_$p29);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i33, 1);
    call {:si_unique_call 90} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} virtio_cwrite8(in_$p6, out_$i33, out_$i39);
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i8(out_$i38);
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(2, 1)), $mul.ref(out_$i34, 1));
    goto corral_source_split_441;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i33);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33 := virtnet_set_mac_address_loop_$bb19(in_$p6, in_$p7, in_$p29, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33);
    return;

  exit:
    return;
}



procedure virtnet_set_mac_address_loop_$bb19(in_$p6: ref, in_$p7: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i33: i32);
  modifies $M.3, $CurrAddr;



implementation virtnet_stats_loop_$bb10(in_$p16: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i64, in_$i40: i64) returns (out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i64, out_$i40: i64)
{

  entry:
    out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40 := in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_498;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb11_dummy;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i32, out_$i34;
    assume true;
    goto $bb11;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_507;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 110} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} out_$i36 := u64_stats_fetch_retry_irq(out_$p35, out_$i30);
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    call {:si_unique_call 108} {:cexpr "rbytes"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 107} {:cexpr "rpackets"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} out_$i30 := u64_stats_fetch_begin_irq(out_$p29);
    call {:si_unique_call 106} {:cexpr "start"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_499;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40 := virtnet_stats_loop_$bb10(in_$p16, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure virtnet_stats_loop_$bb10(in_$p16: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i64, in_$i40: i64) returns (out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i64, out_$i40: i64);



implementation virtnet_stats_loop_$bb6(in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64) returns (out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64)
{

  entry:
    out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := in_$p17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_487;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb7_dummy;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i20, out_$i22;
    assume true;
    goto $bb7;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i8(out_$i24);
    call {:si_unique_call 104} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} out_$i24 := u64_stats_fetch_retry_irq(out_$p23, out_$i18);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    call {:si_unique_call 102} {:cexpr "tbytes"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    call {:si_unique_call 101} {:cexpr "tpackets"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p16, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} out_$i18 := u64_stats_fetch_begin_irq(out_$p17);
    call {:si_unique_call 100} {:cexpr "start"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_488;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := virtnet_stats_loop_$bb6(in_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure virtnet_stats_loop_$bb6(in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64) returns (out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64);



implementation virtnet_stats_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  $bb14:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i58;
    goto $bb14_dummy;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i58, out_$i59);
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} out_$i58 := cpumask_next(out_$i8, out_$p57);
    call {:si_unique_call 112} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, out_$i55);
    goto corral_source_split_528;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_527;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, out_$i28);
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.0, out_$p53);
    goto corral_source_split_525;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p52, out_$i51);
    goto corral_source_split_523;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_522;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i50, out_$i40);
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p48, out_$i47);
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i64(out_$i46, out_$i27);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_514;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, out_$i43);
    goto corral_source_split_513;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_512;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i42, out_$i39);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    goto corral_source_split_510;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_509;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i32, out_$i34;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_507;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 110} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} out_$i36 := u64_stats_fetch_retry_irq(out_$p35, out_$i30);
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    call {:si_unique_call 108} {:cexpr "rbytes"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 107} {:cexpr "rpackets"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} out_$i30 := u64_stats_fetch_begin_irq(out_$p29);
    call {:si_unique_call 106} {:cexpr "start"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_499;

  $bb10:
    call out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40 := virtnet_stats_loop_$bb10(out_$p16, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_498;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    assume false;
    return;

  $bb8:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i20, out_$i22;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i8(out_$i24);
    call {:si_unique_call 104} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} out_$i24 := u64_stats_fetch_retry_irq(out_$p23, out_$i18);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    call {:si_unique_call 102} {:cexpr "tbytes"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    call {:si_unique_call 101} {:cexpr "tpackets"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} out_$i18 := u64_stats_fetch_begin_irq(out_$p17);
    call {:si_unique_call 100} {:cexpr "start"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_488;

  $bb6:
    call out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := virtnet_stats_loop_$bb6(out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    assume false;
    return;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, out_$i11);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, out_$p13);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i12, 8));
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i8);
    goto corral_source_split_481;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    call {:si_unique_call 97} out_$i11 := devirtbounce(0, out_$p10);
    call {:si_unique_call 98} {:cexpr "__ptr"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_480;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p3, $mul.ref(0, 568)), $mul.ref(56, 1));
    goto corral_source_split_479;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i8 := virtnet_stats_loop_$bb4(in_$p1, in_$p3, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i8);
    return;

  exit:
    return;
}



procedure virtnet_stats_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i8: i32);
  modifies $M.0;



implementation virtnet_netpoll_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_607;

  $bb6:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, out_$i13);
    goto corral_source_split_618;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, in_$p3);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i7, 1);
    call {:si_unique_call 131} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} napi_schedule(out_$p12);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 1040)), $mul.ref(8, 1));
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_610;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i7 := virtnet_netpoll_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i7);
    return;

  exit:
    return;
}



procedure virtnet_netpoll_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$i7: i32);
  modifies $CurrAddr;



implementation virtnet_send_command_loop_$bb25(in_$p0: ref, in_$p9: ref, in_$p57: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i1, in_$i69: i8, in_$i70: i1, in_$i71: i32, in_$i72: i1) returns (out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i1, out_$i69: i8, out_$i70: i1, out_$i71: i32, out_$i72: i1)
{

  entry:
    out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72 := in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(8, 1));
    goto corral_source_split_765;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i65 == 1;
    goto $bb27_dummy;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i64(out_$i64, 0);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} out_$p63 := virtqueue_get_buf(out_$p62, in_$p9);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, in_$p57);
    goto corral_source_split_772;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} cpu_relax();
    goto corral_source_split_771;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume out_$i72 == 1;
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_782;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  $bb30:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := 1;
    goto $bb31;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$i71 := 0;
    goto $bb31;

  $bb29:
    assume out_$i70 == 1;
    goto corral_source_split_779;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i8.i1(out_$i69);
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i8(out_$i68);
    call {:si_unique_call 173} {:cexpr "tmp___10"} boogie_si_record_i8(out_$i69);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} out_$i68 := virtqueue_is_broken(out_$p67);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_766;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72 := virtnet_send_command_loop_$bb25(in_$p0, in_$p9, in_$p57, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72);
    return;

  exit:
    return;
}



procedure virtnet_send_command_loop_$bb25(in_$p0: ref, in_$p9: ref, in_$p57: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i1, in_$i69: i8, in_$i70: i1, in_$i71: i32, in_$i72: i1) returns (out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i1, out_$i69: i8, out_$i70: i1, out_$i71: i32, out_$i72: i1);



implementation virtnet_send_command_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} virtnet_send_command_loop_$bb13();
    return;

  exit:
    return;
}



procedure virtnet_send_command_loop_$bb13();



implementation virtnet_send_command_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} virtnet_send_command_loop_$bb6();
    return;

  exit:
    return;
}



procedure virtnet_send_command_loop_$bb6();



implementation virtio_has_feature_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} virtio_has_feature_loop_$bb3();
    return;

  exit:
    return;
}



procedure virtio_has_feature_loop_$bb3();



implementation sg_set_buf_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} sg_set_buf_loop_$bb6();
    return;

  exit:
    return;
}



procedure sg_set_buf_loop_$bb6();



implementation sg_assign_page_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb11();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb11();



implementation sg_assign_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb7();



implementation sg_assign_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb3();



implementation free_old_xmit_skbs_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p13: ref, in_$p14: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i24, in_$i28: i24, in_$i29: i24, in_$p30: ref, in_$p31: ref, in_$i32: i8, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p20: ref, in_vslice_dummy_var_43: i32) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i24, out_$i28: i24, out_$i29: i24, out_$p30: ref, out_$p31: ref, out_$i32: i8, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p20: ref, out_vslice_dummy_var_43: i32)
{

  entry:
    out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p20, out_vslice_dummy_var_43 := in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p20, in_vslice_dummy_var_43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  $bb9:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p52;
    goto $bb9_dummy;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} out_$p52 := virtqueue_get_buf(out_$p51, in_$p1);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, in_$p14);
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} dev_kfree_skb_any(out_$p20);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} u64_stats_update_begin(out_$p50);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p49, out_$i48);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p13, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, 1);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i64($M.0, out_$p46);
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p13, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p45, out_$i44);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i40, out_$i43);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i32.i64(out_$i42);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p20, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.0, out_$p39);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} u64_stats_update_begin(out_$p38);
    goto corral_source_split_1062;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  $bb7:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} out_vslice_dummy_var_43 := __dynamic_pr_debug.ref.ref.ref(in_$p2, .str.46, out_$p20);
    goto corral_source_split_1059;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} out_$i35 := ldv__builtin_expect(out_$i34, 0);
    call {:si_unique_call 280} {:cexpr "tmp"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i64(out_$i33, 1);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i64(out_$i32);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.9, out_$p31);
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, out_$p30, 0);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, out_$p26, out_$i29);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i24(out_$i28, 824);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i24(out_$i27, $sub.i24(0, 262144));
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i24($M.8, out_$p26);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p24, .str.46);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p23, .str.2);
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p22, .str.45);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p21, .str.4);
    goto corral_source_split_1036;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p20, out_vslice_dummy_var_43 := free_old_xmit_skbs_loop_$bb4(in_$p1, in_$p2, in_$p13, in_$p14, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p20, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure free_old_xmit_skbs_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p13: ref, in_$p14: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i24, in_$i28: i24, in_$i29: i24, in_$p30: ref, in_$p31: ref, in_$i32: i8, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p20: ref, in_vslice_dummy_var_43: i32) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i24, out_$i28: i24, out_$i29: i24, out_$p30: ref, out_$p31: ref, out_$i32: i8, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p20: ref, out_vslice_dummy_var_43: i32);
  modifies $M.0, $M.9, $M.8, $M.7, $M.6, $M.5, $M.4;



implementation xmit_skb_loop_$bb36()
{

  entry:
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb36_dummy:
    call {:si_unique_call 1} xmit_skb_loop_$bb36();
    return;

  exit:
    return;
}



procedure xmit_skb_loop_$bb36();



implementation skb_orphan_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} skb_orphan_loop_$bb6();
    return;

  exit:
    return;
}



procedure skb_orphan_loop_$bb6();



implementation __skb_pull_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __skb_pull_loop_$bb3();
    return;

  exit:
    return;
}



procedure __skb_pull_loop_$bb3();



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_1653;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} msleep(1);
    goto corral_source_split_1652;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr;



implementation try_fill_recv_loop_$bb1(in_$p0: ref, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i19: i32, in_$i14: i32, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i8, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i8) returns (out_$p10: ref, out_$i11: i8, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i19: i32, out_$i14: i32, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i8, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i8)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i19, out_$i14, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31 := in_$p10, in_$i11, in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i20, in_$i19, in_$i14, in_$i21, in_$i22, in_$i23, in_$i24, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p8, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_1675;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb12_dummy;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i22;
    assume true;
    goto $bb12;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_1709;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_1708;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb9;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i8(out_$i21);
    call {:si_unique_call 413} {:cexpr "oom"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, $sub.i32(0, 12));
    goto corral_source_split_1688;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i19;
    goto $bb4;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i13;
    goto $bb4;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} out_$i13 := add_recvbuf_mergeable(in_$p0, in_$i9);
    call {:si_unique_call 412} {:cexpr "err"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1680;

  $bb2:
    assume out_$i12 == 1;
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i8.i1(out_$i11);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_1676;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} out_$i20 := add_recvbuf_small(in_$p0, in_$i9);
    call {:si_unique_call 417} {:cexpr "err"} boogie_si_record_i32(out_$i20);
    assume {:verifier.code 0} true;
    out_$i19 := out_$i20;
    goto $bb7;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i18;
    goto $bb7;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} out_$i18 := add_recvbuf_big(in_$p0, in_$i9);
    call {:si_unique_call 415} {:cexpr "err"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1693;

  $bb5:
    assume out_$i17 == 1;
    goto corral_source_split_1692;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1(out_$i16);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.0, out_$p15);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p8, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_1683;

  $bb3:
    assume !(out_$i12 == 1);
    goto corral_source_split_1682;

  $bb6:
    assume !(out_$i17 == 1);
    goto corral_source_split_1695;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i19, out_$i14, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31 := try_fill_recv_loop_$bb1(in_$p0, in_$p8, in_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i19, out_$i14, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure try_fill_recv_loop_$bb1(in_$p0: ref, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i19: i32, in_$i14: i32, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i8, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i8) returns (out_$p10: ref, out_$i11: i8, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i19: i32, out_$i14: i32, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i8, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i8);
  modifies $M.0, $M.13, $M.12;



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i28 := $M.12;
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 551} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p26, out_$p23);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.13, out_$p22);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_2206;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.13;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_2194;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$i14 := $M.12;
    goto corral_source_split_2193;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 549} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2192;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.13, out_$p7);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_2179;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation give_pages_loop_$bb4(in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p7: ref, in_$p16: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p7: ref, out_$p16: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p7, out_$p16 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p7, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2255;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p11;
    goto $bb6_dummy;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    assume true;
    goto $bb6;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, out_$p13);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$p11 := $i2p.i64.ref(out_$i10);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i64($M.0, out_$p9);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_2258;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p7, out_$p16 := give_pages_loop_$bb4(out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p7, out_$p16);
    return;

  exit:
    return;
}



procedure give_pages_loop_$bb4(in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p7: ref, in_$p16: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p7: ref, out_$p16: ref);



implementation get_page_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} get_page_loop_$bb10();
    return;

  exit:
    return;
}



procedure get_page_loop_$bb10();



implementation virtnet_set_affinity_loop_$bb11(in_$p0: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i16, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i15: i32, in_$i16: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i16, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i15: i32, out_$i16: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i15, out_$i16, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := in_$p17, in_$p18, in_$i19, in_$p21, in_$p22, in_$p24, in_$p25, in_$i26, in_$p28, in_$p29, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i15, in_$i16, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  $bb13:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16 := out_$i40, out_$i38;
    goto $bb13_dummy;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, out_$i41);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} out_$i40 := cpumask_next(out_$i15, out_$p39);
    call {:si_unique_call 656} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i16, 1);
    call {:si_unique_call 654} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} out_vslice_dummy_var_60 := netif_set_xps_queue(out_$p33, out_$p31, out_$i36);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i32.i16(out_$i16);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$p31 := get_cpu_mask(out_$i15);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} out_vslice_dummy_var_59 := virtqueue_set_affinity(out_$p29, out_$i15);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 808)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_vslice_dummy_var_58 := virtqueue_set_affinity(out_$p22, out_$i15);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2650;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i15, out_$i16, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := virtnet_set_affinity_loop_$bb11(in_$p0, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i15, out_$i16, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60);
    return;

  exit:
    return;
}



procedure virtnet_set_affinity_loop_$bb11(in_$p0: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i16, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i15: i32, in_$i16: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i16, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i15: i32, out_$i16: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation virtnet_clean_affinity_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i9: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i9: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i9, out_vslice_dummy_var_61, out_vslice_dummy_var_62 := in_$p10, in_$p11, in_$i12, in_$p14, in_$p15, in_$p17, in_$p18, in_$i19, in_$p21, in_$p22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i9, in_vslice_dummy_var_61, in_vslice_dummy_var_62;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  $bb8:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i24;
    goto $bb8_dummy;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, out_$i24);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, in_$p5);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i9, 1);
    call {:si_unique_call 660} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} out_vslice_dummy_var_62 := virtqueue_set_affinity(out_$p22, $sub.i32(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 808)), $mul.ref(0, 1));
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} out_vslice_dummy_var_61 := virtqueue_set_affinity(out_$p15, $sub.i32(0, 1));
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 1040)), $mul.ref(0, 1));
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_2699;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i9, out_vslice_dummy_var_61, out_vslice_dummy_var_62 := virtnet_clean_affinity_loop_$bb6(in_$p0, in_$p5, out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i9, out_vslice_dummy_var_61, out_vslice_dummy_var_62);
    return;

  exit:
    return;
}



procedure virtnet_clean_affinity_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i9: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i9: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.12, $M.17;



implementation mergeable_rx_buffer_size_show_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} mergeable_rx_buffer_size_show_loop_$bb3();
    return;

  exit:
    return;
}



procedure mergeable_rx_buffer_size_show_loop_$bb3();



implementation get_netdev_rx_queue_index_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} get_netdev_rx_queue_index_loop_$bb3();
    return;

  exit:
    return;
}



procedure get_netdev_rx_queue_index_loop_$bb3();



implementation virtnet_probe_loop_$bb113(in_$p119: ref, in_$p228: ref, in_$p233: ref, in_$p234: ref, in_$i235: i64, in_$p236: ref, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$p242: ref, in_$p243: ref, in_$i244: i32, in_$p245: ref, in_$p246: ref, in_$i247: i64, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i16, in_$i257: i32, in_$i258: i1, in_$i232: i32, in_vslice_dummy_var_67: i1) returns (out_$p233: ref, out_$p234: ref, out_$i235: i64, out_$p236: ref, out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$p242: ref, out_$p243: ref, out_$i244: i32, out_$p245: ref, out_$p246: ref, out_$i247: i64, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i16, out_$i257: i32, out_$i258: i1, out_$i232: i32, out_vslice_dummy_var_67: i1)
{

  entry:
    out_$p233, out_$p234, out_$i235, out_$p236, out_$p238, out_$p239, out_$i240, out_$p242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i232, out_vslice_dummy_var_67 := in_$p233, in_$p234, in_$i235, in_$p236, in_$p238, in_$p239, in_$i240, in_$p242, in_$p243, in_$i244, in_$p245, in_$p246, in_$i247, in_$p249, in_$p250, in_$p251, in_$i252, in_$i253, in_$i255, in_$i256, in_$i257, in_$i258, in_$i232, in_vslice_dummy_var_67;
    goto $bb113, exit;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  $bb119:
    assume out_$i258 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i255;
    goto $bb119_dummy;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i258 := $sgt.i32(out_$i257, out_$i255);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i257 := $zext.i16.i32(out_$i256);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i16($M.0, in_$p228);
    goto corral_source_split_3251;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i232, 1);
    call {:si_unique_call 772} {:cexpr "i"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_3250;

  $bb116:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, out_$i244);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.0, out_$p251);
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p250, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$p250 := $load.ref($M.0, out_$p249);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref(out_$p246, $mul.ref(out_$i247, 1040)), $mul.ref(0, 1));
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i247 := $sext.i32.i64(out_$i232);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$p246 := $load.ref($M.0, out_$p245);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p119, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_$i244 := virtqueue_get_vring_size(out_$p243);
    call {:si_unique_call 768} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$p243 := $load.ref($M.0, out_$p242);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(out_$p239, $mul.ref(out_$i240, 1040)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i240 := $sext.i32.i64(out_$i232);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$p239 := $load.ref($M.0, out_$p238);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(in_$p119, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_vslice_dummy_var_67 := try_fill_recv(out_$p236, 208);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref(out_$p234, $mul.ref(out_$i235, 1040));
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i235 := $sext.i32.i64(out_$i232);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.0, out_$p233);
    goto corral_source_split_3222;

  $bb114:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p119, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb119_dummy:
    call {:si_unique_call 1} out_$p233, out_$p234, out_$i235, out_$p236, out_$p238, out_$p239, out_$i240, out_$p242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i232, out_vslice_dummy_var_67 := virtnet_probe_loop_$bb113(in_$p119, in_$p228, out_$p233, out_$p234, out_$i235, out_$p236, out_$p238, out_$p239, out_$i240, out_$p242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i232, out_vslice_dummy_var_67);
    return;

  exit:
    return;
}



procedure virtnet_probe_loop_$bb113(in_$p119: ref, in_$p228: ref, in_$p233: ref, in_$p234: ref, in_$i235: i64, in_$p236: ref, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$p242: ref, in_$p243: ref, in_$i244: i32, in_$p245: ref, in_$p246: ref, in_$i247: i64, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i16, in_$i257: i32, in_$i258: i1, in_$i232: i32, in_vslice_dummy_var_67: i1) returns (out_$p233: ref, out_$p234: ref, out_$i235: i64, out_$p236: ref, out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$p242: ref, out_$p243: ref, out_$i244: i32, out_$p245: ref, out_$p246: ref, out_$i247: i64, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i16, out_$i257: i32, out_$i258: i1, out_$i232: i32, out_vslice_dummy_var_67: i1);
  modifies $M.0, $M.13, $M.12;



implementation virtnet_probe_loop_$bb64(in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i136: i32) returns (out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i136: i32)
{

  entry:
    out_$p137, out_$i138, out_$i139, out_$i140, out_$i136 := in_$p137, in_$i138, in_$i139, in_$i140, in_$i136;
    goto $bb64, exit;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_3043;

  $bb66:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := out_$i138;
    goto $bb66_dummy;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i138, out_$i139);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} out_$i138 := cpumask_next(out_$i136, out_$p137);
    call {:si_unique_call 733} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_3046;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66_dummy:
    call {:si_unique_call 1} out_$p137, out_$i138, out_$i139, out_$i140, out_$i136 := virtnet_probe_loop_$bb64(out_$p137, out_$i138, out_$i139, out_$i140, out_$i136);
    return;

  exit:
    return;
}



procedure virtnet_probe_loop_$bb64(in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i136: i32) returns (out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i136: i32);



implementation virtnet_freeze_loop_$bb6(in_$p3: ref, in_$p17: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p31: ref, in_$i32: i32, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p31: ref, out_$i32: i32, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i21: i32)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i21 := in_$p22, in_$p23, in_$i24, in_$p26, in_$p27, in_$p28, in_$i29, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i21;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3398;

  $bb8:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i32;
    goto $bb8_dummy;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, out_$i32);
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, in_$p17);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i21, 1);
    call {:si_unique_call 804} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} netif_napi_del(out_$p31);
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i21);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} napi_disable(out_$p26);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i21);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_3401;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i21 := virtnet_freeze_loop_$bb6(in_$p3, in_$p17, out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i21);
    return;

  exit:
    return;
}



procedure virtnet_freeze_loop_$bb6(in_$p3: ref, in_$p17: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p31: ref, in_$i32: i32, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p31: ref, out_$i32: i32, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i21: i32);
  modifies $CurrAddr;



implementation virtnet_restore_loop_$bb24(in_$p3: ref, in_$p32: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i36: i32) returns (out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i36: i32)
{

  entry:
    out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i36 := in_$p37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i36;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  $bb26:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i41;
    goto $bb26_dummy;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, in_$p32);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i36, 1);
    call {:si_unique_call 816} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} virtnet_napi_enable(out_$p40);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p38, $mul.ref(out_$i39, 1040));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i36);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_3484;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i36 := virtnet_restore_loop_$bb24(in_$p3, in_$p32, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i36);
    return;

  exit:
    return;
}



procedure virtnet_restore_loop_$bb24(in_$p3: ref, in_$p32: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i36: i32) returns (out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i36: i32);
  modifies $CurrAddr;



implementation virtnet_restore_loop_$bb10(in_$p3: ref, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$i16: i32, in_vslice_dummy_var_75: i1) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$i16: i32, out_vslice_dummy_var_75: i1)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i16, out_vslice_dummy_var_75 := in_$p17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i28, in_$i29, in_$i30, in_$i31, in_$i16, in_vslice_dummy_var_75;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  $bb18:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i28;
    goto $bb18_dummy;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i28);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.0, in_$p12);
    goto corral_source_split_3468;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i16, 1);
    call {:si_unique_call 814} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3467;

  $bb16:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} out_vslice_dummy_var_75 := schedule_delayed_work(out_$p26, 0);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p3, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_3464;

  $bb15:
    assume out_$i25 == 1;
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_3461;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  $bb13:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := 1;
    goto $bb14;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb14;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i8.i1(out_$i22);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i8(out_$i21);
    call {:si_unique_call 812} {:cexpr "tmp"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} out_$i21 := try_fill_recv(out_$p20, 208);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 1040));
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3451;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p3, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i16, out_vslice_dummy_var_75 := virtnet_restore_loop_$bb10(in_$p3, in_$p12, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i16, out_vslice_dummy_var_75);
    return;

  exit:
    return;
}



procedure virtnet_restore_loop_$bb10(in_$p3: ref, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$i16: i32, in_vslice_dummy_var_75: i1) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$i16: i32, out_vslice_dummy_var_75: i1);
  modifies $M.0, $M.13, $M.12;



implementation virtnet_alloc_queues_loop_$bb12(in_$p0: ref, in_$p53: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i16, in_$i90: i32, in_$i91: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i16, out_$i90: i32, out_$i91: i1, out_$i57: i32)
{

  entry:
    out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p81, out_$p82, out_$p83, out_$i84, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i57 := in_$p58, in_$p59, in_$i60, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$p69, in_$i70, in_$p71, in_$p72, in_$i73, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$p81, in_$p82, in_$p83, in_$i84, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i57;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3621;

  $bb14:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i88;
    goto $bb14_dummy;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i91 := $sgt.i32(out_$i90, out_$i88);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i16.i32(out_$i89);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i16($M.0, in_$p53);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i32(out_$i57, 1);
    call {:si_unique_call 853} {:cexpr "i"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} sg_init_table(out_$p87, 19);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 808)), $mul.ref(8, 1));
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ewma_init(out_$p81, 1, 64);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p78, $mul.ref(out_$i79, 1040)), $mul.ref(200, 1));
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} sg_init_table(out_$p76, 19);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 1040)), $mul.ref(240, 1));
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} netif_napi_add(out_$p64, out_$p69, virtnet_poll, out_$i70);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i70 := $M.16;
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(16, 1));
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, $0.ref);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(out_$i60, 1040)), $mul.ref(192, 1));
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3624;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p81, out_$p82, out_$p83, out_$i84, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i57 := virtnet_alloc_queues_loop_$bb12(in_$p0, in_$p53, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p81, out_$p82, out_$p83, out_$i84, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i57);
    return;

  exit:
    return;
}



procedure virtnet_alloc_queues_loop_$bb12(in_$p0: ref, in_$p53: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i16, in_$i90: i32, in_$i91: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i16, out_$i90: i32, out_$i91: i1, out_$i57: i32);
  modifies $M.0;



implementation virtnet_find_vqs_loop_$bb37(in_$p0: ref, in_$p15: ref, in_$p120: ref, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$p133: ref, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$p142: ref, in_$i143: i32, in_$i144: i16, in_$i145: i32, in_$i146: i1, in_$i124: i32) returns (out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$p133: ref, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$p142: ref, out_$i143: i32, out_$i144: i16, out_$i145: i32, out_$i146: i1, out_$i124: i32)
{

  entry:
    out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i124 := in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$p138, in_$p139, in_$i140, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i124;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  $bb39:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := out_$i143;
    goto $bb39_dummy;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$i146 := $sgt.i32(out_$i145, out_$i143);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i16.i32(out_$i144);
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i16($M.0, in_$p120);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i32(out_$i124, 1);
    call {:si_unique_call 882} {:cexpr "i"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p142, out_$p137);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p139, $mul.ref(out_$i140, 808)), $mul.ref(0, 1));
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i32.i64(out_$i124);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(in_$p15, $mul.ref(out_$i135, 8));
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i134);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_$i134 := txq2vq(out_$i124);
    call {:si_unique_call 881} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p133, out_$p128);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p130, $mul.ref(out_$i131, 1040)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i124);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, out_$p127);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(in_$p15, $mul.ref(out_$i126, 8));
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i125);
    goto corral_source_split_3841;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} out_$i125 := rxq2vq(out_$i124);
    call {:si_unique_call 879} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i124 := virtnet_find_vqs_loop_$bb37(in_$p0, in_$p15, in_$p120, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i124);
    return;

  exit:
    return;
}



procedure virtnet_find_vqs_loop_$bb37(in_$p0: ref, in_$p15: ref, in_$p120: ref, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$p133: ref, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$p142: ref, in_$i143: i32, in_$i144: i16, in_$i145: i32, in_$i146: i1, in_$i124: i32) returns (out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$p133: ref, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$p142: ref, out_$i143: i32, out_$i144: i16, out_$i145: i32, out_$i146: i1, out_$i124: i32);
  modifies $M.0;



implementation virtnet_find_vqs_loop_$bb19(in_$p0: ref, in_$p22: ref, in_$p29: ref, in_$p42: ref, in_$i47: i32, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$p65: ref, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p72: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p81: ref, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$i46: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32) returns (out_$i47: i32, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$p65: ref, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p72: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p81: ref, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$i46: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32)
{

  entry:
    out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$p57, out_$p58, out_$p60, out_$p61, out_$i62, out_$p64, out_$p65, out_$i67, out_$p68, out_$p69, out_$i70, out_$p72, out_$i74, out_$p75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p81, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i46, out_vslice_dummy_var_77, out_vslice_dummy_var_78 := in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$p57, in_$p58, in_$p60, in_$p61, in_$i62, in_$p64, in_$p65, in_$i67, in_$p68, in_$p69, in_$i70, in_$p72, in_$i74, in_$p75, in_$i76, in_$p77, in_$p78, in_$i79, in_$p81, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i46, in_vslice_dummy_var_77, in_vslice_dummy_var_78;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  $bb21:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i85;
    goto $bb21_dummy;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i88 := $sgt.i32(out_$i87, out_$i85);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, in_$p42);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i46, 1);
    call {:si_unique_call 872} {:cexpr "i"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p84, out_$p81);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(in_$p29, $mul.ref(out_$i83, 8));
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i76);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p78, $mul.ref(out_$i79, 808)), $mul.ref(768, 1));
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$i76 := txq2vq(out_$i46);
    call {:si_unique_call 871} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p75, out_$p72);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(in_$p29, $mul.ref(out_$i74, 8));
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i67);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p69, $mul.ref(out_$i70, 1040)), $mul.ref(1000, 1));
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i67 := rxq2vq(out_$i46);
    call {:si_unique_call 869} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_vslice_dummy_var_78 := sprintf.ref.ref.i32(out_$p65, .str.32, out_$i46);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 808)), $mul.ref(768, 1));
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_vslice_dummy_var_77 := sprintf.ref.ref.i32(out_$p58, .str.31, out_$i46);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p54, $mul.ref(out_$i55, 1040)), $mul.ref(1000, 1));
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p52, skb_xmit_done);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(in_$p22, $mul.ref(out_$i51, 8));
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} out_$i50 := txq2vq(out_$i46);
    call {:si_unique_call 865} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, skb_recv_done);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(in_$p22, $mul.ref(out_$i48, 8));
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_3740;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_$i47 := rxq2vq(out_$i46);
    call {:si_unique_call 863} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$p57, out_$p58, out_$p60, out_$p61, out_$i62, out_$p64, out_$p65, out_$i67, out_$p68, out_$p69, out_$i70, out_$p72, out_$i74, out_$p75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p81, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i46, out_vslice_dummy_var_77, out_vslice_dummy_var_78 := virtnet_find_vqs_loop_$bb19(in_$p0, in_$p22, in_$p29, in_$p42, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$p57, out_$p58, out_$p60, out_$p61, out_$i62, out_$p64, out_$p65, out_$i67, out_$p68, out_$p69, out_$i70, out_$p72, out_$i74, out_$p75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p81, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i46, out_vslice_dummy_var_77, out_vslice_dummy_var_78);
    return;

  exit:
    return;
}



procedure virtnet_find_vqs_loop_$bb19(in_$p0: ref, in_$p22: ref, in_$p29: ref, in_$p42: ref, in_$i47: i32, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$p65: ref, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p72: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p81: ref, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$i46: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32) returns (out_$i47: i32, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$p65: ref, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p72: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p81: ref, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$i46: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32);
  modifies $M.0;



implementation virtnet_free_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3884;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$i14 := $sgt.i32(out_$i13, out_$i11);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(out_$i12);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i16($M.0, in_$p1);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 1);
    call {:si_unique_call 887} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} netif_napi_del(out_$p10);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 1040)), $mul.ref(8, 1));
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_3887;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i5 := virtnet_free_queues_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i5);
    return;

  exit:
    return;
}



procedure virtnet_free_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$i5: i32);



implementation refill_work_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$p22: ref, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i7: i32, in_vslice_dummy_var_79: i1) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$p22: ref, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i7: i32, out_vslice_dummy_var_79: i1)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i7, out_vslice_dummy_var_79 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i7, in_vslice_dummy_var_79;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;

  $bb12:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i24;
    goto $bb12_dummy;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, out_$i24);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, in_$p3);
    goto corral_source_split_4031;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i7, 1);
    call {:si_unique_call 918} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4030;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} out_vslice_dummy_var_79 := schedule_delayed_work(out_$p22, 125);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 64), 568)), $mul.ref(64, 1));
    goto corral_source_split_4027;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} virtnet_napi_enable(out_$p11);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i8(out_$i19);
    call {:si_unique_call 915} {:cexpr "still_empty"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_4021;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4020;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := 1;
    goto $bb8;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i18 := 0;
    goto $bb8;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 914} {:cexpr "tmp"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} out_$i13 := try_fill_recv(out_$p11, 208);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} napi_disable(out_$p12);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 1040)), $mul.ref(8, 1));
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 1040));
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_4007;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 64), 568)), $mul.ref(32, 1));
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i7, out_vslice_dummy_var_79 := refill_work_loop_$bb4(in_$p1, in_$p3, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i7, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure refill_work_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$p22: ref, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i7: i32, in_vslice_dummy_var_79: i1) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$p22: ref, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i7: i32, out_vslice_dummy_var_79: i1);
  modifies $CurrAddr, $M.0, $M.13, $M.12;



implementation virtnet_poll_loop_$bb5(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i16: i32, in_$i18: i32, in_$i19: i1, in_$i15: i32, in_$p21: ref, in_$p22: ref, in_$p17: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i20: i32) returns (out_$i16: i32, out_$i18: i32, out_$i19: i1, out_$i15: i32, out_$p21: ref, out_$p22: ref, out_$p17: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i20: i32)
{

  entry:
    out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20 := in_$i16, in_$i18, in_$i19, in_$i15, in_$p21, in_$p22, in_$p17, in_$i23, in_$i24, in_$i25, in_$i20;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4055;

  $bb7:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i18;
    goto $bb7_dummy;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb7;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i19 := $ugt.i32(in_$i1, out_$i18);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i15, 1);
    call {:si_unique_call 924} {:cexpr "received"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} receive_buf(in_$p4, out_$p17, out_$i16);
    goto corral_source_split_4063;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.17, in_$p2);
    goto corral_source_split_4062;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_4069;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i15;
    assume true;
    goto $bb9;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_$p17 := virtqueue_get_buf(out_$p22, in_$p2);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4056;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20 := virtnet_poll_loop_$bb5(in_$i1, in_$p2, in_$p3, in_$p4, out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20);
    return;

  exit:
    return;
}



procedure virtnet_poll_loop_$bb5(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i16: i32, in_$i18: i32, in_$i19: i1, in_$i15: i32, in_$p21: ref, in_$p22: ref, in_$p17: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i20: i32) returns (out_$i16: i32, out_$i18: i32, out_$i19: i1, out_$i15: i32, out_$p21: ref, out_$p22: ref, out_$p17: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i20: i32);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.12, $M.17, $CurrAddr;



implementation virtnet_poll_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i16: i32, in_$i18: i32, in_$i19: i1, in_$i15: i32, in_$p21: ref, in_$p22: ref, in_$p17: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i20: i32, in_$i14: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i43: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i1, in_$i51: i8, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i57: i1, in_$i58: i8, in_$i59: i1, in_$p61: ref, in_$p62: ref, in_$i60: i32, in_$i56: i32, in_$i44: i32, in_vslice_dummy_var_80: i1) returns (out_$i12: i32, out_$i13: i1, out_$i16: i32, out_$i18: i32, out_$i19: i1, out_$i15: i32, out_$p21: ref, out_$p22: ref, out_$p17: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i20: i32, out_$i14: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i43: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i1, out_$i51: i8, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i57: i1, out_$i58: i8, out_$i59: i1, out_$p61: ref, out_$p62: ref, out_$i60: i32, out_$i56: i32, out_$i44: i32, out_vslice_dummy_var_80: i1)
{

  entry:
    out_$i12, out_$i13, out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20, out_$i14, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i43, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i60, out_$i56, out_$i44, out_vslice_dummy_var_80 := in_$i12, in_$i13, in_$i16, in_$i18, in_$i19, in_$i15, in_$p21, in_$p22, in_$p17, in_$i23, in_$i24, in_$i25, in_$i20, in_$i14, in_$i26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i43, in_$p45, in_$p46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i57, in_$i58, in_$i59, in_$p61, in_$p62, in_$i60, in_$i56, in_$i44, in_vslice_dummy_var_80;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4050;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i26;
    goto corral_source_split_4123_dummy;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __napi_schedule(in_$p0);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} virtqueue_disable_cb(out_$p62);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4120;

  $bb26:
    assume out_$i59 == 1;
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i26;
    assume true;
    goto $bb26;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i8.i1(out_$i58);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i1.i8(out_$i57);
    call {:si_unique_call 938} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i58);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} out_$i57 := napi_schedule_prep(in_$p0);
    goto corral_source_split_4115;

  $bb24:
    assume out_$i55 == 1;
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i26;
    assume true;
    goto $bb24;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} out_$i54 := ldv__builtin_expect(out_$i53, 0);
    call {:si_unique_call 936} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i1.i64(out_$i52);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i8.i1(out_$i51);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i1.i8(out_$i50);
    call {:si_unique_call 934} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i51);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} out_$i50 := virtqueue_poll(out_$p49, out_$i47);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} napi_complete(in_$p0);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_$i47 := virtqueue_enable_cb_prepare(out_$p46);
    call {:si_unique_call 931} {:cexpr "r"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4101;

  $bb22:
    assume out_$i43 == 1;
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i26;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i43 := $ugt.i32(in_$i1, out_$i26);
    goto corral_source_split_4098;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_vslice_dummy_var_80 := schedule_delayed_work(out_$p41, 0);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p11, $mul.ref(0, 568)), $mul.ref(64, 1));
    goto corral_source_split_4095;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_4092;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4091;

  $bb16:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := 1;
    goto $bb17;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb17;

  $bb15:
    assume out_$i38 == 1;
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 928} {:cexpr "tmp"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_$i36 := try_fill_recv(in_$p4, 32);
    goto corral_source_split_4085;

  $bb13:
    assume out_$i35 == 1;
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i35 := $ugt.i32(out_$i33, out_$i34);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i34 := $udiv.i32(out_$i29, 2);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_4079;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} out_$i29 := virtqueue_get_vring_size(out_$p28);
    call {:si_unique_call 926} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i14;
    goto $bb11;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i25;
    goto $bb11;

  $bb10:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4071;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i15;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_$p17 := virtqueue_get_buf(out_$p22, in_$p2);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_4056;

  $bb5:
    call out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20 := virtnet_poll_loop_$bb5(in_$i1, in_$p2, in_$p3, in_$p4, out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i12;
    goto $bb5;

  $bb7:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i18;
    assume false;
    return;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i19 := $ugt.i32(in_$i1, out_$i18);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i15, 1);
    call {:si_unique_call 924} {:cexpr "received"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} receive_buf(in_$p4, out_$p17, out_$i16);
    goto corral_source_split_4063;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.17, in_$p2);
    goto corral_source_split_4062;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_4069;

  $bb2:
    assume out_$i13 == 1;
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    out_$i13 := $ugt.i32(in_$i1, out_$i12);
    goto corral_source_split_4051;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb4;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i20;
    goto $bb4;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4067;

  corral_source_split_4123_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20, out_$i14, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i43, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i60, out_$i56, out_$i44, out_vslice_dummy_var_80 := virtnet_poll_loop_$bb1(in_$p0, in_$i1, in_$p2, in_$p3, in_$p4, in_$p11, out_$i12, out_$i13, out_$i16, out_$i18, out_$i19, out_$i15, out_$p21, out_$p22, out_$p17, out_$i23, out_$i24, out_$i25, out_$i20, out_$i14, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i43, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i60, out_$i56, out_$i44, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure virtnet_poll_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i16: i32, in_$i18: i32, in_$i19: i1, in_$i15: i32, in_$p21: ref, in_$p22: ref, in_$p17: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i20: i32, in_$i14: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i43: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i1, in_$i51: i8, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i57: i1, in_$i58: i8, in_$i59: i1, in_$p61: ref, in_$p62: ref, in_$i60: i32, in_$i56: i32, in_$i44: i32, in_vslice_dummy_var_80: i1) returns (out_$i12: i32, out_$i13: i1, out_$i16: i32, out_$i18: i32, out_$i19: i1, out_$i15: i32, out_$p21: ref, out_$p22: ref, out_$p17: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i20: i32, out_$i14: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i43: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i1, out_$i51: i8, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i57: i1, out_$i58: i8, out_$i59: i1, out_$p61: ref, out_$p62: ref, out_$i60: i32, out_$i56: i32, out_$i44: i32, out_vslice_dummy_var_80: i1);
  modifies $CurrAddr, $M.0, $M.13, $M.12, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17;



implementation receive_mergeable_loop_$bb11(in_$p1: ref, in_$p4: ref, in_$p26: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i64, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i32, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$i137: i64, in_$i138: i32, in_$i139: i64, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i8, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i37: i32, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i64, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i32, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$i137: i64, out_$i138: i32, out_$i139: i64, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i8, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i37: i32, out_$p38: ref)
{

  entry:
    out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i37, out_$p38 := in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$i128, in_$i129, in_$i130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i37, in_$p38;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4577;

  $bb38:
    assume out_$i149 == 1;
    assume {:verifier.code 0} true;
    out_$i37, out_$p38 := out_$i148, out_$p113;
    goto $bb38_dummy;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i32(out_$i148, 0);
    goto corral_source_split_4735;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i148 := $sub.i32(out_$i37, 1);
    call {:si_unique_call 1052} {:cexpr "num_buf"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} skb_add_rx_frag(out_$p113, out_$i114, out_$p80, out_$i141, out_$i147, out_$i118);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} skb_coalesce_rx_frag(out_$p113, out_$i145, out_$i146, out_$i118);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.17, in_$p4);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i145 := $add.i32(out_$i114, $sub.i32(0, 1));
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} put_page(out_$p80);
    goto corral_source_split_4726;

  $bb35:
    assume out_$i144 == 1;
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i144 := $trunc.i8.i1(out_$i143);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i1.i8(out_$i142);
    call {:si_unique_call 1048} {:cexpr "tmp___15"} boogie_si_record_i8(out_$i143);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} out_$i142 := skb_can_coalesce(out_$p113, out_$i114, out_$p80, out_$i141);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i141 := $sub.i32(out_$i138, out_$i140);
    call {:si_unique_call 1046} {:cexpr "offset"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i64.i32(out_$i139);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(out_$p136);
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i138 := $trunc.i64.i32(out_$i137);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i137 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_4716;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} out_$p136 := lowmem_page_address(out_$p80);
    goto corral_source_split_4715;

  $bb33:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i134);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i133, out_$i118);
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_4710;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p131, out_$i130);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i32(out_$i128, out_$i129);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.17, in_$p4);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p126, out_$i125);
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i123, out_$i124);
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.17, in_$p4);
    goto corral_source_split_4699;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.0, out_$p122);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_4697;

  $bb32:
    assume out_$i121 == 1;
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i119, out_$i120);
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(in_$p26);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p113);
    goto corral_source_split_4692;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i116;
    goto $bb31;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i115;
    goto $bb31;

  $bb29:
    assume out_$i117 == 1;
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i117 := $ugt.i32(out_$i115, out_$i116);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} out_$i116 := mergeable_ctx_to_buf_truesize(out_$i42);
    call {:si_unique_call 1044} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.17, in_$p4);
    call {:si_unique_call 1042} {:cexpr "_max1___0"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4683;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  $bb21:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$p113, out_$i114 := out_$p38, out_$i85;
    goto $bb28;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$p113, out_$i114 := out_$p91, 0;
    goto $bb28;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p112, out_$i111);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i108, out_$i110);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p91, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.0, out_$p107);
    goto corral_source_split_4675;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p26, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, out_$p91);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p105, out_$p91);
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p104, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(out_$p103);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_$p103 := skb_end_pointer(out_$p38);
    goto corral_source_split_4666;

  $bb25:
    assume out_$i102 == 1;
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i64(out_$i100, out_$i101);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(in_$p26);
    goto corral_source_split_4662;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_4661;

  $bb23:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i37, out_$p80;
    assume true;
    goto $bb23;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, 0);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_$i96 := ldv__builtin_expect(out_$i95, 0);
    call {:si_unique_call 1040} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i94);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i1.i32(out_$i93);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i64(out_$i92, 0);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p91);
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} out_$p91 := ldv_alloc_skb_12(0, 32);
    goto corral_source_split_4651;

  $bb20:
    assume out_$i90 == 1;
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_$i89 := ldv__builtin_expect(out_$i88, 0);
    call {:si_unique_call 1037} {:cexpr "tmp___12"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i87);
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i1.i32(out_$i86);
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 17);
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(out_$i84);
    call {:si_unique_call 1035} {:cexpr "num_skb_frags"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i8($M.0, out_$p83);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p81);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_$p81 := skb_end_pointer(out_$p38);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$p80 := virt_to_head_page(out_$p79);
    goto corral_source_split_4638;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} out_$p79 := mergeable_ctx_to_buf_address(out_$i42);
    goto corral_source_split_4637;

  $bb14:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i37;
    assume true;
    goto $bb14;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} out_$i46 := ldv__builtin_expect(out_$i45, 0);
    call {:si_unique_call 1027} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i44);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i32(out_$i43);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    call {:si_unique_call 1025} {:cexpr "ctx"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} out_$p41 := virtqueue_get_buf(out_$p40, in_$p4);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_4580;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p38, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4672;

  $bb26:
    assume !(out_$i102 == 1);
    goto corral_source_split_4671;

  $bb30:
    assume !(out_$i117 == 1);
    goto corral_source_split_4689;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.17, in_$p4);
    goto corral_source_split_4732;

  $bb36:
    assume !(out_$i144 == 1);
    goto corral_source_split_4731;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i37, out_$p38 := receive_mergeable_loop_$bb11(in_$p1, in_$p4, in_$p26, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i37, out_$p38);
    return;

  exit:
    return;
}



procedure receive_mergeable_loop_$bb11(in_$p1: ref, in_$p4: ref, in_$p26: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i64, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i32, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$i137: i64, in_$i138: i32, in_$i139: i64, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i8, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i37: i32, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i64, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i32, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$i137: i64, out_$i138: i32, out_$i139: i64, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i8, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i37: i32, out_$p38: ref);
  modifies $M.0, $M.13, $M.12, $CurrAddr;



implementation receive_mergeable_loop_$bb45(in_$p1: ref, in_$p4: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$i163: i1, in_$i164: i32, in_$i165: i64, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p194: ref, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$i158: i32) returns (out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$i163: i1, out_$i164: i32, out_$i165: i64, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p194: ref, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$i158: i32)
{

  entry:
    out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p194, out_$p195, out_$i196, out_$i197, out_$i158 := in_$p159, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p194, in_$p195, in_$i196, in_$i197, in_$i158;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;

  $bb54:
    assume out_$i197 == 1;
    assume {:verifier.code 0} true;
    out_$i158 := out_$i196;
    goto $bb54_dummy;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i196, 0);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i196 := $sub.i32(out_$i158, 1);
    call {:si_unique_call 1064} {:cexpr "num_buf"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} put_page(out_$p195);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_$p195 := virt_to_head_page(out_$p194);
    goto corral_source_split_4797;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_$p194 := mergeable_ctx_to_buf_address(out_$i162);
    goto corral_source_split_4796;

  $bb48:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i158;
    assume true;
    goto $bb48;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i64(out_$i166, 0);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} out_$i166 := ldv__builtin_expect(out_$i165, 0);
    call {:si_unique_call 1057} {:cexpr "tmp___18"} boogie_si_record_i64(out_$i166);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$i165 := $sext.i32.i64(out_$i164);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i1.i32(out_$i163);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i64(out_$i162, 0);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$i162 := $p2i.ref.i64(out_$p161);
    call {:si_unique_call 1055} {:cexpr "ctx"} boogie_si_record_i64(out_$i162);
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_$p161 := virtqueue_get_buf(out_$p160, in_$p4);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.0, out_$p159);
    goto corral_source_split_4752;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p194, out_$p195, out_$i196, out_$i197, out_$i158 := receive_mergeable_loop_$bb45(in_$p1, in_$p4, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p194, out_$p195, out_$i196, out_$i197, out_$i158);
    return;

  exit:
    return;
}



procedure receive_mergeable_loop_$bb45(in_$p1: ref, in_$p4: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$i163: i1, in_$i164: i32, in_$i165: i64, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p194: ref, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$i158: i32) returns (out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$i163: i1, out_$i164: i32, out_$i165: i64, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p194: ref, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$i158: i32);



implementation page_to_skb_loop_$bb33(in_$i4: i32, in_$p18: ref, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$i103: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$p104: ref) returns (out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$i103: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$p104: ref)
{

  entry:
    out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$p102, out_$i103, out_$p87, out_$i88, out_$i89, out_$p104 := in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$p102, in_$i103, in_$p87, in_$i88, in_$i89, in_$p104;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  $bb38:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$p87, out_$i88, out_$i89 := out_$p102, 0, out_$i98;
    goto $bb38_dummy;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$p104 := out_$p102;
    assume true;
    goto $bb38;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i98, 0);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$p102 := $i2p.i64.ref(out_$i101);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i64($M.0, out_$p100);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p87, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i98 := $sub.i32(out_$i89, out_$i92);
    call {:si_unique_call 1121} {:cexpr "len"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} skb_add_rx_frag(in_$p18, out_$i97, out_$p87, out_$i88, out_$i92, in_$i4);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i8($M.0, out_$p95);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref(out_$p93);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_$p93 := skb_end_pointer(in_$p18);
    goto corral_source_split_4983;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i89;
    goto $bb37;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i90;
    goto $bb37;

  $bb35:
    assume out_$i91 == 1;
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i32(out_$i90, out_$i89);
    goto corral_source_split_4976;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i32(4096, out_$i88);
    call {:si_unique_call 1118} {:cexpr "_min1"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb36:
    assume !(out_$i91 == 1);
    goto corral_source_split_4980;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$p102, out_$i103, out_$p87, out_$i88, out_$i89, out_$p104 := page_to_skb_loop_$bb33(in_$i4, in_$p18, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$p102, out_$i103, out_$p87, out_$i88, out_$i89, out_$p104);
    return;

  exit:
    return;
}



procedure page_to_skb_loop_$bb33(in_$i4: i32, in_$p18: ref, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$i103: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$p104: ref) returns (out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$i103: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$p104: ref);



implementation page_to_skb_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb28_dummy:
    call {:si_unique_call 1} page_to_skb_loop_$bb28();
    return;

  exit:
    return;
}



procedure page_to_skb_loop_$bb28();



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_5155;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    out_$i12 := $M.12;
    goto corral_source_split_5154;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1155} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5153;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_5144;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_5143;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.13, out_$p6);
    goto corral_source_split_5141;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_5140;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation free_unused_bufs_loop_$bb25(in_$p0: ref, in_$p35: ref, in_$p40: ref, in_$i41: i8, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p39: ref, in_$i29: i32) returns (out_$p40: ref, out_$i41: i8, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p39: ref)
{

  entry:
    out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39 := in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p39;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  $bb33:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p56;
    goto $bb33_dummy;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_5267;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_5266;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} out_$p56 := virtqueue_detach_unused_buf(in_$p35);
    goto corral_source_split_5265;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} put_page(out_$p45);
    goto corral_source_split_5258;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_$p45 := virt_to_head_page(out_$p44);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} out_$p44 := mergeable_ctx_to_buf_address(out_$i43);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 1169} {:cexpr "ctx"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_5255;

  $bb27:
    assume out_$i42 == 1;
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i41);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_5251;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} ldv_skb_free(out_$p55);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} give_pages(out_$p52, out_$p53);
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_5274;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p50, $mul.ref(out_$i51, 1040));
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(in_$i29);
    goto corral_source_split_5272;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_5271;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5270;

  $bb30:
    assume out_$i48 == 1;
    goto corral_source_split_5269;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i8.i1(out_$i47);
    goto corral_source_split_5263;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_5262;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_5261;

  $bb28:
    assume !(out_$i42 == 1);
    goto corral_source_split_5260;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_5278;

  $bb31:
    assume !(out_$i48 == 1);
    goto corral_source_split_5277;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39 := free_unused_bufs_loop_$bb25(in_$p0, in_$p35, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, in_$i29);
    return;

  exit:
    return;
}



procedure free_unused_bufs_loop_$bb25(in_$p0: ref, in_$p35: ref, in_$p40: ref, in_$i41: i8, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p39: ref, in_$i29: i32) returns (out_$p40: ref, out_$i41: i8, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p39: ref);
  modifies $M.13, $M.12, $M.0;



implementation free_unused_bufs_loop_$bb20(in_$p0: ref, in_$p25: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p40: ref, in_$i41: i8, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p39: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p40: ref, out_$i41: i8, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p39: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i1, out_$i29: i32)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$i59, out_$i60, out_$i61, out_$i62, out_$i29 := in_$p30, in_$p31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p39, in_$i59, in_$i60, in_$i61, in_$i62, in_$i29;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  $bb36:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i59;
    goto $bb36_dummy;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, out_$i59);
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i16($M.0, in_$p25);
    goto corral_source_split_5284;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i29, 1);
    call {:si_unique_call 1176} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_5283;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb24;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34:
    assume !(out_$i58 == 1);
    goto corral_source_split_5281;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_5267;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_5266;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} out_$p56 := virtqueue_detach_unused_buf(out_$p35);
    goto corral_source_split_5265;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} put_page(out_$p45);
    goto corral_source_split_5258;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_$p45 := virt_to_head_page(out_$p44);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} out_$p44 := mergeable_ctx_to_buf_address(out_$i43);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 1169} {:cexpr "ctx"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_5255;

  $bb27:
    assume out_$i42 == 1;
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i41);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_5251;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(49, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    call out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39 := free_unused_bufs_loop_$bb25(in_$p0, out_$p35, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$i29);
    goto $bb25_last;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p36;
    goto $bb25;

  $bb33:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p56;
    assume false;
    return;

  $bb22:
    assume out_$i38 == 1;
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} out_$p36 := virtqueue_detach_unused_buf(out_$p35);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 1040)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto corral_source_split_5239;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_5238;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_5237;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5236;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} ldv_skb_free(out_$p55);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} give_pages(out_$p52, out_$p53);
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_5274;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p50, $mul.ref(out_$i51, 1040));
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i29);
    goto corral_source_split_5272;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_5271;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5270;

  $bb30:
    assume out_$i48 == 1;
    goto corral_source_split_5269;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i8.i1(out_$i47);
    goto corral_source_split_5263;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_5262;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(48, 1));
    goto corral_source_split_5261;

  $bb28:
    assume !(out_$i42 == 1);
    goto corral_source_split_5260;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_5278;

  $bb31:
    assume !(out_$i48 == 1);
    goto corral_source_split_5277;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$i59, out_$i60, out_$i61, out_$i62, out_$i29 := free_unused_bufs_loop_$bb20(in_$p0, in_$p25, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p39, out_$i59, out_$i60, out_$i61, out_$i62, out_$i29);
    return;

  exit:
    return;
}



procedure free_unused_bufs_loop_$bb20(in_$p0: ref, in_$p25: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p40: ref, in_$i41: i8, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p39: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p40: ref, out_$i41: i8, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p39: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i1, out_$i29: i32);
  modifies $M.13, $M.12, $M.0;



implementation free_unused_bufs_loop_$bb9(in_$p11: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15 := in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p15;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  $bb11:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p18;
    goto $bb11_dummy;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} out_$p18 := virtqueue_detach_unused_buf(in_$p11);
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_skb_free(out_$p17);
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_5212;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15 := free_unused_bufs_loop_$bb9(in_$p11, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15);
    return;

  exit:
    return;
}



procedure free_unused_bufs_loop_$bb9(in_$p11: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p15: ref);
  modifies $M.13, $M.12;



implementation free_unused_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p15: ref, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p15: ref, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15, out_$i21, out_$i22, out_$i23, out_$i24, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p15, in_$i21, in_$i22, in_$i23, in_$i24, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;

  $bb14:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i21;
    goto $bb14_dummy;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i21);
    goto corral_source_split_5223;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_5222;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, in_$p1);
    goto corral_source_split_5221;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1167} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5220;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i20 == 1);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} out_$p18 := virtqueue_detach_unused_buf(out_$p11);
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_skb_free(out_$p17);
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_5212;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15 := free_unused_bufs_loop_$bb9(out_$p11, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$p15 := out_$p12;
    goto $bb9;

  $bb11:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p18;
    assume false;
    return;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_5207;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_5205;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} out_$p12 := virtqueue_detach_unused_buf(out_$p11);
    goto corral_source_split_5203;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_5202;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 808)), $mul.ref(0, 1));
    goto corral_source_split_5201;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_5198;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(24, 1));
    goto corral_source_split_5197;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15, out_$i21, out_$i22, out_$i23, out_$i24, out_$i5 := free_unused_bufs_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p15, out_$i21, out_$i22, out_$i23, out_$i24, out_$i5);
    return;

  exit:
    return;
}



procedure free_unused_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p15: ref, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p15: ref, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i5: i32);
  modifies $M.13, $M.12;



implementation free_receive_bufs_loop_$bb9(in_$p0: ref, in_$p6: ref, in_$i8: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i5: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24 := in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$i24;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb11_dummy;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5320;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p19, $mul.ref(in_$i8, 1040)), $mul.ref(192, 1));
    goto corral_source_split_5319;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, in_$p6);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __free_pages(out_$p18, 0);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} out_$p18 := get_a_page(out_$p17, 208);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 1040));
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(in_$i5);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5312;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5311;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24 := free_receive_bufs_loop_$bb9(in_$p0, in_$p6, in_$i8, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, in_$i5);
    return;

  exit:
    return;
}



procedure free_receive_bufs_loop_$bb9(in_$p0: ref, in_$p6: ref, in_$i8: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i5: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1);
  modifies $M.0;



implementation free_receive_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  $bb14:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i25;
    goto $bb14_dummy;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i27, out_$i25);
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_5328;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, in_$p1);
    goto corral_source_split_5327;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1179} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_5326;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i24 == 1);
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5320;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i8, 1040)), $mul.ref(192, 1));
    goto corral_source_split_5319;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p6);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __free_pages(out_$p18, 0);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} out_$p18 := get_a_page(out_$p17, 208);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 1040));
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i5);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5312;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5311;

  $bb9:
    call out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24 := free_receive_bufs_loop_$bb9(in_$p0, out_$p6, out_$i8, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i5);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    assume false;
    return;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 1040)), $mul.ref(192, 1));
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_5302;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_5301;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i5 := free_receive_bufs_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i5);
    return;

  exit:
    return;
}



procedure free_receive_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i5: i32);
  modifies $M.0;



implementation free_receive_page_frags_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5341;

  $bb9:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i22;
    goto $bb9_dummy;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, out_$i22);
    goto corral_source_split_5364;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_5363;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, in_$p1);
    goto corral_source_split_5362;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1181} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5361;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} put_page(out_$p21);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 1040)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i5);
    goto corral_source_split_5355;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_5354;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5353;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 1040)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_5344;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 568)), $mul.ref(32, 1));
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i5 := free_receive_page_frags_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i5);
    return;

  exit:
    return;
}



procedure free_receive_page_frags_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i5: i32);



implementation netif_tx_wake_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i6;
    goto $bb6_dummy;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i8 := $ugt.i32(out_$i7, out_$i6);
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1243} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} netif_tx_wake_queue(out_$p5);
    goto corral_source_split_5578;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} out_$p5 := netdev_get_tx_queue(in_$p0, out_$i4);
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := netif_tx_wake_all_queues_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$i6, out_$i7, out_$i8, out_$i4);
    return;

  exit:
    return;
}



procedure netif_tx_wake_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32);
  modifies $CurrAddr;



implementation netif_tx_stop_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i6;
    goto $bb6_dummy;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i8 := $ugt.i32(out_$i7, out_$i6);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1246} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} netif_tx_stop_queue(out_$p5);
    goto corral_source_split_5595;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} out_$p5 := netdev_get_tx_queue(in_$p0, out_$i4);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := netif_tx_stop_all_queues_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$i6, out_$i7, out_$i8, out_$i4);
    return;

  exit:
    return;
}



procedure netif_tx_stop_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i6: i16, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$p12: ref, in_$i13: i16, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i16, in_$i163: i32, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i16, in_$i172: i32, in_$i173: i16, in_$i174: i32, in_$i175: i16, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i16, in_$i181: i32, in_$i182: i16, in_$i183: i32, in_$i184: i16, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i189: i16, in_$i190: i32, in_$i191: i16, in_$i192: i32, in_$i193: i16, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i16, in_$i199: i32, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i16, in_$i208: i32, in_$i209: i16, in_$i210: i32, in_$i211: i16, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i1, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: ref, in_vslice_dummy_var_116: ref, in_vslice_dummy_var_117: ref, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i64) returns (out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i16, out_$i163: i32, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i16, out_$i172: i32, out_$i173: i16, out_$i174: i32, out_$i175: i16, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i16, out_$i181: i32, out_$i182: i16, out_$i183: i32, out_$i184: i16, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i189: i16, out_$i190: i32, out_$i191: i16, out_$i192: i32, out_$i193: i16, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i16, out_$i199: i32, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i16, out_$i208: i32, out_$i209: i16, out_$i210: i32, out_$i211: i16, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i1, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: ref, out_vslice_dummy_var_116: ref, out_vslice_dummy_var_117: ref, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i64)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i151, out_$i152, out_$p153, out_$i155, out_$i156, out_$p157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i77, in_$i78, in_$p79, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i91, in_$i92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$p145, in_$i147, in_$i148, in_$p149, in_$i151, in_$i152, in_$p153, in_$i155, in_$i156, in_$p157, in_$i159, in_$i160, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i186, in_$i187, in_$p188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i195, in_$i196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i204, in_$i205, in_$p206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i213, in_$i214, in_$p215, in_$i216, in_$i217, in_$p218, in_$i219, in_$i220, in_$p221, in_$i222, in_$i223, in_$p224, in_$i226, in_$i227, in_$p228, in_$i230, in_$i231, in_$p232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$p238, in_$i240, in_$i241, in_$p242, in_$i244, in_$i245, in_$p246, in_$i248, in_$i249, in_$p250, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$i260, in_$i261, in_$p262, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1286} out_$i21 := __VERIFIER_nondet_int();
    call {:si_unique_call 1287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i21);
    call {:si_unique_call 1288} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i21);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb51_dummy;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb17:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} out_vslice_dummy_var_93 := virtnet_set_channels(out_$p39, out_$p40);
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$p40 := $M.22;
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$p39 := $M.23;
    goto corral_source_split_5718;

  $bb32:
    assume out_$i38 == 1;
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i37 := $M.26;
    goto corral_source_split_5714;

  $bb30:
    assume out_$i36 == 1;
    goto corral_source_split_5713;

  $bb28:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb19:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5695:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1289} out_$i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 1290} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i30);
    call {:si_unique_call 1291} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i30);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    out_$i28 := $M.26;
    goto corral_source_split_5692;

  $bb14:
    assume out_$i27 == 1;
    goto corral_source_split_5691;

  $bb12:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb37:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} virtnet_get_ringparam(out_$p44, in_$p3);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$p44 := $M.23;
    goto corral_source_split_5724;

  $bb36:
    assume out_$i43 == 1;
    goto corral_source_split_5723;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 1);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i42 := $M.26;
    goto corral_source_split_5710;

  $bb29:
    assume !(out_$i35 == 1);
    goto corral_source_split_5709;

  $bb40:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} virtnet_get_drvinfo(out_$p47, in_$p5);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$p47 := $M.23;
    goto corral_source_split_5729;

  $bb39:
    assume out_$i46 == 1;
    goto corral_source_split_5728;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 1);
    goto corral_source_split_5699;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i45 := $M.26;
    goto corral_source_split_5698;

  $bb21:
    assume out_$i32 == 1;
    goto corral_source_split_5697;

  $bb20:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb43:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} virtnet_get_channels(out_$p50, out_$p51);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$p51 := $M.22;
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$p50 := $M.23;
    goto corral_source_split_5734;

  $bb42:
    assume out_$i49 == 1;
    goto corral_source_split_5733;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 1);
    goto corral_source_split_5703;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i48 := $M.26;
    goto corral_source_split_5702;

  $bb23:
    assume out_$i33 == 1;
    goto corral_source_split_5701;

  $bb22:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i30, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb46:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} out_vslice_dummy_var_94 := ethtool_op_get_link(out_$p54);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    out_$p54 := $M.23;
    goto corral_source_split_5740;

  $bb45:
    assume out_$i53 == 1;
    goto corral_source_split_5739;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 1);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i52 := $M.26;
    goto corral_source_split_5706;

  $bb25:
    assume out_$i34 == 1;
    goto corral_source_split_5705;

  $bb24:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i30, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_stop();
    goto corral_source_split_5744;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb27;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb27;

  $bb53:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.28 := out_$i72;
    call {:si_unique_call 1309} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_5779;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, 1);
    goto corral_source_split_5778;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    out_$i71 := $M.28;
    goto corral_source_split_5777;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5776;

  $bb70:
    assume out_$i70 == 1;
    goto corral_source_split_5775;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_5773;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    out_$i69 := $M.31;
    goto corral_source_split_5772;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $M.31 := out_$i68;
    call {:si_unique_call 1307} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_5771;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} out_$i68 := virtnet_probe(out_$p67);
    goto corral_source_split_5770;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    out_$p67 := $M.21;
    goto corral_source_split_5769;

  $bb68:
    assume out_$i66 == 1;
    goto corral_source_split_5768;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 1);
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    out_$i65 := $M.27;
    goto corral_source_split_5765;

  $bb66:
    assume out_$i64 == 1;
    goto corral_source_split_5764;

  $bb64:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb55:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1303} out_$i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 1304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i58);
    call {:si_unique_call 1305} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i58);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i57 == 1;
    goto corral_source_split_5746;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_5689;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i56 := $M.27;
    goto corral_source_split_5688;

  $bb13:
    assume !(out_$i26 == 1);
    goto corral_source_split_5687;

  $bb79:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} out_vslice_dummy_var_96 := virtnet_restore(out_$p79);
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$p79 := $M.21;
    goto corral_source_split_5790;

  $bb78:
    assume out_$i78 == 1;
    goto corral_source_split_5789;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 2);
    goto corral_source_split_5787;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i77 := $M.27;
    goto corral_source_split_5786;

  $bb76:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1311} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} out_vslice_dummy_var_95 := virtnet_restore(out_$p75);
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$p75 := $M.21;
    goto corral_source_split_5782;

  $bb75:
    assume out_$i74 == 1;
    goto corral_source_split_5781;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    out_$i73 := $M.27;
    goto corral_source_split_5761;

  $bb65:
    assume !(out_$i63 == 1);
    goto corral_source_split_5760;

  $bb85:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1317} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} virtnet_config_changed(out_$p86);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$p86 := $M.21;
    goto corral_source_split_5803;

  $bb84:
    assume out_$i85 == 1;
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 2);
    goto corral_source_split_5800;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i84 := $M.27;
    goto corral_source_split_5799;

  $bb82:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1315} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} virtnet_config_changed(out_$p83);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$p83 := $M.21;
    goto corral_source_split_5795;

  $bb81:
    assume out_$i82 == 1;
    goto corral_source_split_5794;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 1);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$i81 := $M.27;
    goto corral_source_split_5749;

  $bb57:
    assume out_$i60 == 1;
    goto corral_source_split_5748;

  $bb56:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb91:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} out_vslice_dummy_var_98 := virtnet_freeze(out_$p93);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$p93 := $M.21;
    goto corral_source_split_5816;

  $bb90:
    assume out_$i92 == 1;
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_5813;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i91 := $M.27;
    goto corral_source_split_5812;

  $bb88:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1319} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_vslice_dummy_var_97 := virtnet_freeze(out_$p89);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$p89 := $M.21;
    goto corral_source_split_5808;

  $bb87:
    assume out_$i88 == 1;
    goto corral_source_split_5807;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i87 := $M.27;
    goto corral_source_split_5753;

  $bb59:
    assume out_$i61 == 1;
    goto corral_source_split_5752;

  $bb58:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb94:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.28 := out_$i99;
    call {:si_unique_call 1324} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i98, 1);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i98 := $M.28;
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} virtnet_remove(out_$p97);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$p97 := $M.21;
    goto corral_source_split_5821;

  $bb93:
    assume out_$i96 == 1;
    goto corral_source_split_5820;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$i95 := $M.27;
    goto corral_source_split_5757;

  $bb61:
    assume out_$i62 == 1;
    goto corral_source_split_5756;

  $bb60:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} ldv_stop();
    goto corral_source_split_5828;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb63;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb63;

  $bb100:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb111;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb111;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_5842;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i108 := $M.28;
    goto corral_source_split_5841;

  $bb109:
    assume out_$i107 == 1;
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 3);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i106 := $M.29;
    goto corral_source_split_5837;

  $bb107:
    assume out_$i105 == 1;
    goto corral_source_split_5836;

  $bb102:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_5830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1326} out_$i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 1327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i102);
    call {:si_unique_call 1328} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i102);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb99:
    assume out_$i101 == 1;
    goto corral_source_split_5830;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i100 := $M.29;
    goto corral_source_split_5676;

  $bb5:
    assume out_$i23 == 1;
    goto corral_source_split_5675;

  $bb4:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb118:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb123:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_5865;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i115 := $M.32;
    goto corral_source_split_5864;

  $bb120:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_initialize_virtio_driver_1();
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 1334} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5857;

  $bb119:
    assume out_$i114 == 1;
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 0);
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$i113 := $M.32;
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.32 := out_$i112;
    call {:si_unique_call 1333} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} out_$i112 := virtio_net_driver_init();
    goto corral_source_split_5851;

  $bb117:
    assume out_$i111 == 1;
    goto corral_source_split_5850;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i110 := $M.29;
    goto corral_source_split_5833;

  $bb104:
    assume out_$i104 == 1;
    goto corral_source_split_5832;

  $bb103:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_stop();
    goto corral_source_split_5870;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb105:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb106;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb106;

  $bb130:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb168:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} virtnet_set_rx_mode(out_$p142);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$p142 := $M.20;
    goto corral_source_split_5943;

  $bb167:
    assume out_$i141 == 1;
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_5940;

  $bb166:
    assume {:verifier.code 0} true;
    out_$i140 := $M.18;
    goto corral_source_split_5939;

  $bb165:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} virtnet_set_rx_mode(out_$p139);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$p139 := $M.20;
    goto corral_source_split_5935;

  $bb164:
    assume out_$i138 == 1;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 3);
    goto corral_source_split_5932;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i137 := $M.18;
    goto corral_source_split_5931;

  $bb162:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} virtnet_set_rx_mode(out_$p136);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$p136 := $M.20;
    goto corral_source_split_5927;

  $bb161:
    assume out_$i135 == 1;
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$i134 := $M.18;
    goto corral_source_split_5923;

  $bb159:
    assume out_$i133 == 1;
    goto corral_source_split_5922;

  $bb155:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i119, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb149:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i119, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb132:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i119, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i119, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_5872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1342} out_$i119 := __VERIFIER_nondet_int();
    call {:si_unique_call 1343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i119);
    call {:si_unique_call 1344} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i119);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb129:
    assume out_$i118 == 1;
    goto corral_source_split_5872;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i117 := $M.18;
    goto corral_source_split_5680;

  $bb7:
    assume out_$i24 == 1;
    goto corral_source_split_5679;

  $bb6:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb172:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5950;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} out_vslice_dummy_var_99 := virtnet_close(out_$p145);
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$p145 := $M.20;
    goto corral_source_split_5948;

  $bb171:
    assume out_$i144 == 1;
    goto corral_source_split_5947;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 3);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i143 := $M.18;
    goto corral_source_split_5915;

  $bb157:
    assume out_$i132 == 1;
    goto corral_source_split_5914;

  $bb156:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i119, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb181:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1358} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5971;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} out_vslice_dummy_var_102 := eth_validate_addr(out_$p157);
    goto corral_source_split_5970;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    out_$p157 := $M.20;
    goto corral_source_split_5969;

  $bb180:
    assume out_$i156 == 1;
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_5966;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i155 := $M.18;
    goto corral_source_split_5965;

  $bb178:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} out_vslice_dummy_var_101 := eth_validate_addr(out_$p153);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$p153 := $M.20;
    goto corral_source_split_5961;

  $bb177:
    assume out_$i152 == 1;
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 3);
    goto corral_source_split_5958;

  $bb176:
    assume {:verifier.code 0} true;
    out_$i151 := $M.18;
    goto corral_source_split_5957;

  $bb175:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1354} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} out_vslice_dummy_var_100 := eth_validate_addr(out_$p149);
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$p149 := $M.20;
    goto corral_source_split_5953;

  $bb174:
    assume out_$i148 == 1;
    goto corral_source_split_5952;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 1);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$i147 := $M.18;
    goto corral_source_split_5919;

  $bb158:
    assume !(out_$i132 == 1);
    goto corral_source_split_5918;

  $bb190:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1364} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6007;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} out_vslice_dummy_var_105 := virtnet_vlan_rx_kill_vid(out_$p179, out_$i182, out_$i184);
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i184 := $trunc.i32.i16(out_$i183);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i16.i32(in_$i6);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i182 := $trunc.i32.i16(out_$i181);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i181 := $zext.i16.i32(out_$i180);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i16($M.25, in_$p1);
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$p179 := $M.20;
    goto corral_source_split_6000;

  $bb189:
    assume out_$i178 == 1;
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 2);
    goto corral_source_split_5997;

  $bb188:
    assume {:verifier.code 0} true;
    out_$i177 := $M.18;
    goto corral_source_split_5996;

  $bb187:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} out_vslice_dummy_var_104 := virtnet_vlan_rx_kill_vid(out_$p170, out_$i173, out_$i175);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$i175 := $trunc.i32.i16(out_$i174);
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i16.i32(in_$i6);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i173 := $trunc.i32.i16(out_$i172);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i172 := $zext.i16.i32(out_$i171);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i16($M.25, in_$p1);
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$p170 := $M.20;
    goto corral_source_split_5987;

  $bb186:
    assume out_$i169 == 1;
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 3);
    goto corral_source_split_5984;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i168 := $M.18;
    goto corral_source_split_5983;

  $bb184:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} out_vslice_dummy_var_103 := virtnet_vlan_rx_kill_vid(out_$p161, out_$i164, out_$i166);
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i16(out_$i165);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i16.i32(in_$i6);
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$i164 := $trunc.i32.i16(out_$i163);
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i16.i32(out_$i162);
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i16($M.25, in_$p1);
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    out_$p161 := $M.20;
    goto corral_source_split_5974;

  $bb183:
    assume out_$i160 == 1;
    goto corral_source_split_5973;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 1);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$i159 := $M.18;
    goto corral_source_split_5903;

  $bb151:
    assume out_$i129 == 1;
    goto corral_source_split_5902;

  $bb150:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i119, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb199:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} out_vslice_dummy_var_108 := virtnet_vlan_rx_add_vid(out_$p206, out_$i209, out_$i211);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i211 := $trunc.i32.i16(out_$i210);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i210 := $zext.i16.i32(in_$i13);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i209 := $trunc.i32.i16(out_$i208);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$i208 := $zext.i16.i32(out_$i207);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i16($M.24, in_$p0);
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$p206 := $M.20;
    goto corral_source_split_6036;

  $bb198:
    assume out_$i205 == 1;
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 2);
    goto corral_source_split_6033;

  $bb197:
    assume {:verifier.code 0} true;
    out_$i204 := $M.18;
    goto corral_source_split_6032;

  $bb196:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} out_vslice_dummy_var_107 := virtnet_vlan_rx_add_vid(out_$p197, out_$i200, out_$i202);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i202 := $trunc.i32.i16(out_$i201);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i201 := $zext.i16.i32(in_$i13);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i200 := $trunc.i32.i16(out_$i199);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i199 := $zext.i16.i32(out_$i198);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i16($M.24, in_$p0);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$p197 := $M.20;
    goto corral_source_split_6023;

  $bb195:
    assume out_$i196 == 1;
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 3);
    goto corral_source_split_6020;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i195 := $M.18;
    goto corral_source_split_6019;

  $bb193:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} out_vslice_dummy_var_106 := virtnet_vlan_rx_add_vid(out_$p188, out_$i191, out_$i193);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$i193 := $trunc.i32.i16(out_$i192);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$i192 := $zext.i16.i32(in_$i13);
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i191 := $trunc.i32.i16(out_$i190);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$i190 := $zext.i16.i32(out_$i189);
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i16($M.24, in_$p0);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$p188 := $M.20;
    goto corral_source_split_6010;

  $bb192:
    assume out_$i187 == 1;
    goto corral_source_split_6009;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 1);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i186 := $M.18;
    goto corral_source_split_5907;

  $bb153:
    assume out_$i130 == 1;
    goto corral_source_split_5906;

  $bb152:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i119, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb208:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} virtnet_netpoll(out_$p221);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p221 := $M.20;
    goto corral_source_split_6062;

  $bb207:
    assume out_$i220 == 1;
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 2);
    goto corral_source_split_6059;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i219 := $M.18;
    goto corral_source_split_6058;

  $bb205:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} virtnet_netpoll(out_$p218);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$p218 := $M.20;
    goto corral_source_split_6054;

  $bb204:
    assume out_$i217 == 1;
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 3);
    goto corral_source_split_6051;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i216 := $M.18;
    goto corral_source_split_6050;

  $bb202:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} virtnet_netpoll(out_$p215);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$p215 := $M.20;
    goto corral_source_split_6046;

  $bb201:
    assume out_$i214 == 1;
    goto corral_source_split_6045;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 1);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i213 := $M.18;
    goto corral_source_split_5911;

  $bb154:
    assume !(out_$i130 == 1);
    goto corral_source_split_5910;

  $bb214:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} out_vslice_dummy_var_110 := virtnet_change_mtu(out_$p228, in_$i10);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$p228 := $M.20;
    goto corral_source_split_6075;

  $bb213:
    assume out_$i227 == 1;
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 2);
    goto corral_source_split_6072;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i226 := $M.18;
    goto corral_source_split_6071;

  $bb211:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} out_vslice_dummy_var_109 := virtnet_change_mtu(out_$p224, in_$i10);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$p224 := $M.20;
    goto corral_source_split_6067;

  $bb210:
    assume out_$i223 == 1;
    goto corral_source_split_6066;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 3);
    goto corral_source_split_5892;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$i222 := $M.18;
    goto corral_source_split_5891;

  $bb145:
    assume out_$i126 == 1;
    goto corral_source_split_5890;

  $bb134:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i119, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb133:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i119, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb217:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb219:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6087;

  $bb218:
    assume out_$i235 == 1;
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 0);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i234 := $M.33;
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.33 := out_$i233;
    call {:si_unique_call 1382} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} out_$i233 := virtnet_open(out_$p232);
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$p232 := $M.20;
    goto corral_source_split_6080;

  $bb216:
    assume out_$i231 == 1;
    goto corral_source_split_6079;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$i230 := $M.18;
    goto corral_source_split_5895;

  $bb147:
    assume out_$i127 == 1;
    goto corral_source_split_5894;

  $bb146:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i119, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb223:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} out_vslice_dummy_var_111 := start_xmit(in_$p8, out_$p238);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p238 := $M.20;
    goto corral_source_split_6090;

  $bb222:
    assume out_$i237 == 1;
    goto corral_source_split_6089;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 3);
    goto corral_source_split_5900;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    out_$i236 := $M.18;
    goto corral_source_split_5899;

  $bb148:
    assume !(out_$i127 == 1);
    goto corral_source_split_5898;

  $bb232:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} out_vslice_dummy_var_114 := virtnet_set_mac_address(out_$p250, in_$p9);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p250 := $M.20;
    goto corral_source_split_6111;

  $bb231:
    assume out_$i249 == 1;
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 2);
    goto corral_source_split_6108;

  $bb230:
    assume {:verifier.code 0} true;
    out_$i248 := $M.18;
    goto corral_source_split_6107;

  $bb229:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} out_vslice_dummy_var_113 := virtnet_set_mac_address(out_$p246, in_$p9);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p246 := $M.20;
    goto corral_source_split_6103;

  $bb228:
    assume out_$i245 == 1;
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 3);
    goto corral_source_split_6100;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i244 := $M.18;
    goto corral_source_split_6099;

  $bb226:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} out_vslice_dummy_var_112 := virtnet_set_mac_address(out_$p242, in_$p9);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$p242 := $M.20;
    goto corral_source_split_6095;

  $bb225:
    assume out_$i241 == 1;
    goto corral_source_split_6094;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$i240 := $M.18;
    goto corral_source_split_5883;

  $bb143:
    assume out_$i125 == 1;
    goto corral_source_split_5882;

  $bb136:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i119, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb135:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i119, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb241:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} out_vslice_dummy_var_117 := virtnet_stats(out_$p262, in_$p12);
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$p262 := $M.20;
    goto corral_source_split_6132;

  $bb240:
    assume out_$i261 == 1;
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 2);
    goto corral_source_split_6129;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i260 := $M.18;
    goto corral_source_split_6128;

  $bb238:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} out_vslice_dummy_var_116 := virtnet_stats(out_$p258, in_$p12);
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p258 := $M.20;
    goto corral_source_split_6124;

  $bb237:
    assume out_$i257 == 1;
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 3);
    goto corral_source_split_6121;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i256 := $M.18;
    goto corral_source_split_6120;

  $bb235:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} out_vslice_dummy_var_115 := virtnet_stats(out_$p254, in_$p12);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$p254 := $M.20;
    goto corral_source_split_6116;

  $bb234:
    assume out_$i253 == 1;
    goto corral_source_split_6115;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 1);
    goto corral_source_split_5888;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    out_$i252 := $M.18;
    goto corral_source_split_5887;

  $bb144:
    assume !(out_$i125 == 1);
    goto corral_source_split_5886;

  $bb244:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb246:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.28 := out_$i270;
    call {:si_unique_call 1401} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i270);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i270 := $add.i32(out_$i269, 1);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i269 := $M.28;
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1400} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6143;

  $bb245:
    assume out_$i268 == 1;
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 0);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$i267 := $M.34;
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.34 := out_$i266;
    call {:si_unique_call 1399} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} out_$i266 := ldv_ndo_init_3();
    goto corral_source_split_6137;

  $bb243:
    assume out_$i265 == 1;
    goto corral_source_split_6136;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 1);
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    out_$i264 := $M.18;
    goto corral_source_split_5875;

  $bb138:
    assume out_$i123 == 1;
    goto corral_source_split_5874;

  $bb137:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i119, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb250:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.28 := out_$i275;
    call {:si_unique_call 1404} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i275 := $sub.i32(out_$i274, 1);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$i274 := $M.28;
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1403} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} out_vslice_dummy_var_118 := ldv_ndo_uninit_3();
    goto corral_source_split_6149;

  $bb249:
    assume out_$i272 == 1;
    goto corral_source_split_6148;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 2);
    goto corral_source_split_5880;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    out_$i271 := $M.18;
    goto corral_source_split_5879;

  $bb140:
    assume out_$i124 == 1;
    goto corral_source_split_5878;

  $bb139:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i119, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_stop();
    goto corral_source_split_6155;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb141:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb142;

  $bb160:
    assume {:verifier.code 0} true;
    assume !(out_$i133 == 1);
    goto $bb142;

  $bb256:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb261:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} out_vslice_dummy_var_119 := mergeable_rx_buffer_size_show(in_$p16, in_$p18, in_$p14);
    goto corral_source_split_6164;

  $bb260:
    assume out_$i281 == 1;
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 1);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$i280 := $M.30;
    goto corral_source_split_6160;

  $bb258:
    assume out_$i279 == 1;
    goto corral_source_split_6159;

  $bb257:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_6157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1406} out_$i278 := __VERIFIER_nondet_int();
    call {:si_unique_call 1407} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i278);
    call {:si_unique_call 1408} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i278);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb255:
    assume out_$i277 == 1;
    goto corral_source_split_6157;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    out_$i277 := $ne.i32(out_$i276, 0);
    goto corral_source_split_5685;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i276 := $M.30;
    goto corral_source_split_5684;

  $bb9:
    assume out_$i25 == 1;
    goto corral_source_split_5683;

  $bb8:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} ldv_stop();
    goto corral_source_split_6167;

  $bb259:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_stop();
    goto corral_source_split_6169;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i151, out_$i152, out_$p153, out_$i155, out_$i156, out_$p157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$p5, in_$i6, in_$p8, in_$p9, in_$i10, in_$p12, in_$i13, in_$p14, in_$p16, in_$p18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i151, out_$i152, out_$p153, out_$i155, out_$i156, out_$p157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i6: i16, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$p12: ref, in_$i13: i16, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i16, in_$i163: i32, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i16, in_$i172: i32, in_$i173: i16, in_$i174: i32, in_$i175: i16, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i16, in_$i181: i32, in_$i182: i16, in_$i183: i32, in_$i184: i16, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i189: i16, in_$i190: i32, in_$i191: i16, in_$i192: i32, in_$i193: i16, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i16, in_$i199: i32, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i16, in_$i208: i32, in_$i209: i16, in_$i210: i32, in_$i211: i16, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i1, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: ref, in_vslice_dummy_var_116: ref, in_vslice_dummy_var_117: ref, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i64) returns (out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i16, out_$i163: i32, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i16, out_$i172: i32, out_$i173: i16, out_$i174: i32, out_$i175: i16, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i16, out_$i181: i32, out_$i182: i16, out_$i183: i32, out_$i184: i16, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i189: i16, out_$i190: i32, out_$i191: i16, out_$i192: i32, out_$i193: i16, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i16, out_$i199: i32, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i16, out_$i208: i32, out_$i209: i16, out_$i210: i32, out_$i211: i16, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i1, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: ref, out_vslice_dummy_var_116: ref, out_vslice_dummy_var_117: ref, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i64);
  modifies $M.26, $M.0, $M.2, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.12, $M.17, $M.28, $M.27, $M.31, $M.18, $M.20, $M.22, $M.23, $M.21, $M.30, $M.29, $M.32, $M.33, $M.3, $M.34;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


