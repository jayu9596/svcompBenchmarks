var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i32;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.6: [ref]i8;

var $M.7: [ref]ref;

var $M.8: i32;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.15: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: ref;

var $M.22: ref;

var $M.23: ref;

var $M.24: ref;

var $M.25: i32;

var $M.26: ref;

var $M.27: i32;

var $M.29: i32;

var $M.31: i32;

var $M.33: [ref]i8;

var $M.34: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.52: [ref]i32;

var $M.53: [ref]i32;

var $M.54: [ref]i32;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: [ref]i32;

var $M.58: [ref]i64;

var $M.59: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 375815);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_timer_state_3: ref;

axiom ldv_timer_state_3 == $sub.ref(0, 3084);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 4112);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 5140);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 6168);

const ldv_timer_list_3: ref;

axiom ldv_timer_list_3 == $sub.ref(0, 7200);

const netdev_ops_group1: ref;

axiom netdev_ops_group1 == $sub.ref(0, 8232);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 9260);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 10292);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 11320);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 12352);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 13380);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 14412);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 15440);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 16472);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 17500);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 18528);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 19556);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 20584);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 21616);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 22648);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 23680);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 24712);

const ops_group1: ref;

axiom ops_group1 == $sub.ref(0, 25744);

const ops_group0: ref;

axiom ops_group0 == $sub.ref(0, 26776);

const driver_group1: ref;

axiom driver_group1 == $sub.ref(0, 27808);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 28836);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 29864);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 30892);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 31920);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 32948);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 33976);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 35004);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 36032);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 37060);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 38088);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 39116);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 40144);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 41172);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 42200);

const {:count 2} __mod_pci__ns83820_pci_tbl_device_table: ref;

axiom __mod_pci__ns83820_pci_tbl_device_table == $sub.ref(0, 43288);

const {:count 2} ns83820_pci_tbl: ref;

axiom ns83820_pci_tbl == $sub.ref(0, 44376);

const driver: ref;

axiom driver == $sub.ref(0, 45712);

const reset_phy: ref;

axiom reset_phy == $sub.ref(0, 46740);

const ops: ref;

axiom ops == $sub.ref(0, 48156);

const netdev_ops: ref;

axiom netdev_ops == $sub.ref(0, 49708);

const ihr: ref;

axiom ihr == $sub.ref(0, 50736);

const lnksts: ref;

axiom lnksts == $sub.ref(0, 51764);

const {:count 57} .str.46: ref;

axiom .str.46 == $sub.ref(0, 52845);

const {:count 52} .str.47: ref;

axiom .str.47 == $sub.ref(0, 53921);

const {:count 41} .str.3: ref;

axiom .str.3 == $sub.ref(0, 54986);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 33} .str.45: ref;

axiom .str.45 == $sub.ref(0, 56043);

const {:count 38} .str.4: ref;

axiom .str.4 == $sub.ref(0, 57105);

const {:count 3} .str.5: ref;

axiom .str.5 == $sub.ref(0, 58132);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 59160);

const {:count 5} .str.7: ref;

axiom .str.7 == $sub.ref(0, 60189);

const {:count 8} .str.8: ref;

axiom .str.8 == $sub.ref(0, 61221);

const {:count 6} .str.9: ref;

axiom .str.9 == $sub.ref(0, 62251);

const {:count 5} .str.11: ref;

axiom .str.11 == $sub.ref(0, 63280);

const {:count 5} .str.12: ref;

axiom .str.12 == $sub.ref(0, 64309);

const {:count 42} .str.10: ref;

axiom .str.10 == $sub.ref(0, 65375);

const {:count 21} .str.13: ref;

axiom .str.13 == $sub.ref(0, 66420);

const {:count 218} .str.2: ref;

axiom .str.2 == $sub.ref(0, 67662);

const {:count 8} .str.14: ref;

axiom .str.14 == $sub.ref(0, 68694);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 69723);

const {:count 29} .str.16: ref;

axiom .str.16 == $sub.ref(0, 70776);

const {:count 34} .str.17: ref;

axiom .str.17 == $sub.ref(0, 71834);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 72866);

const {:count 9} .str.20: ref;

axiom .str.20 == $sub.ref(0, 73899);

const {:count 29} .str.18: ref;

axiom .str.18 == $sub.ref(0, 74952);

const {:count 26} .str.21: ref;

axiom .str.21 == $sub.ref(0, 76002);

const {:count 29} .str.22: ref;

axiom .str.22 == $sub.ref(0, 77055);

const {:count 24} .str.23: ref;

axiom .str.23 == $sub.ref(0, 78103);

const {:count 26} .str.24: ref;

axiom .str.24 == $sub.ref(0, 79153);

const {:count 18} .str.25: ref;

axiom .str.25 == $sub.ref(0, 80195);

const {:count 27} .str.26: ref;

axiom .str.26 == $sub.ref(0, 81246);

const {:count 35} .str.27: ref;

axiom .str.27 == $sub.ref(0, 82305);

const {:count 31} .str.28: ref;

axiom .str.28 == $sub.ref(0, 83360);

const {:count 50} .str.29: ref;

axiom .str.29 == $sub.ref(0, 84434);

const {:count 10} .str.30: ref;

axiom .str.30 == $sub.ref(0, 85468);

const {:count 12} .str.31: ref;

axiom .str.31 == $sub.ref(0, 86504);

const {:count 12} .str.32: ref;

axiom .str.32 == $sub.ref(0, 87540);

const {:count 36} .str.33: ref;

axiom .str.33 == $sub.ref(0, 88600);

const {:count 51} .str.34: ref;

axiom .str.34 == $sub.ref(0, 89675);

const {:count 35} .str.35: ref;

axiom .str.35 == $sub.ref(0, 90734);

const {:count 20} .str.36: ref;

axiom .str.36 == $sub.ref(0, 91778);

const {:count 31} .str.37: ref;

axiom .str.37 == $sub.ref(0, 92833);

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 93862);

const {:count 3} .str.40: ref;

axiom .str.40 == $sub.ref(0, 94889);

const {:count 64} .str.38: ref;

axiom .str.38 == $sub.ref(0, 95977);

const {:count 41} .str.41: ref;

axiom .str.41 == $sub.ref(0, 97042);

const {:count 35} .str.42: ref;

axiom .str.42 == $sub.ref(0, 98101);

const {:count 36} .str.43: ref;

axiom .str.43 == $sub.ref(0, 99161);

const .str: ref;

axiom .str == $sub.ref(0, 100216);

const {:count 10} .str.1: ref;

axiom .str.1 == $sub.ref(0, 101250);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 64} .str.44: ref;

axiom .str.44 == $sub.ref(0, 102338);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 103370);

const {:count 3} .str.1.110: ref;

axiom .str.1.110 == $sub.ref(0, 104397);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 105435);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 106463);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 107495);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 108527);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const ns83820_open: ref;

axiom ns83820_open == $sub.ref(0, 109559);

procedure ns83820_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i29: i64;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i38: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i32;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i32;
  var $i162: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i32;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i32;
  var $i190: i32;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i32;
  var $i204: i32;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $i217: i32;
  var $i218: i32;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i32;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i64;
  var $i245: i32;
  var $i246: i32;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i32;
  var $i253: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i32;
  var $i260: i32;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $i266: i32;
  var $i267: i32;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $i273: i32;
  var $i274: i32;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i64;
  var $i280: i32;
  var $i281: i32;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i32;
  var $i288: i32;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i64;
  var $i294: i32;
  var $i295: i32;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $i300: i64;
  var $i301: i32;
  var $i302: i32;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i64;
  var $i308: i32;
  var $i309: i32;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i64;
  var $i315: i32;
  var $i316: i32;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i32;
  var $i323: i32;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i64;
  var $i329: i32;
  var $i330: i32;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i64;
  var $i336: i32;
  var $i337: i32;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $i343: i32;
  var $i344: i32;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $i349: i64;
  var $i350: i32;
  var $i351: i32;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $i356: i64;
  var $i357: i32;
  var $i358: i32;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i64;
  var $i364: i32;
  var $i365: i32;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i64;
  var $i371: i32;
  var $i372: i32;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i64;
  var $i378: i32;
  var $i379: i32;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i64;
  var $i385: i32;
  var $i386: i32;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i64;
  var $i392: i32;
  var $i393: i32;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i64;
  var $i399: i32;
  var $i400: i32;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $i405: i64;
  var $i406: i32;
  var $i407: i32;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $i412: i64;
  var $i413: i32;
  var $i414: i32;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $i419: i64;
  var $i420: i32;
  var $i421: i32;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $i426: i64;
  var $i427: i32;
  var $i428: i32;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i64;
  var $i434: i32;
  var $i435: i32;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i64;
  var $i441: i32;
  var $i442: i32;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i64;
  var $i448: i32;
  var $i449: i32;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i64;
  var $i455: i32;
  var $i456: i32;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $i461: i64;
  var $i462: i32;
  var $i463: i32;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i64;
  var $i469: i32;
  var $i470: i32;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $i475: i64;
  var $i476: i32;
  var $i477: i32;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $i482: i64;
  var $i483: i32;
  var $i484: i32;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $i489: i64;
  var $i490: i32;
  var $i491: i32;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $i496: i64;
  var $i497: i32;
  var $i498: i32;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i64;
  var $i504: i32;
  var $i505: i32;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i64;
  var $i511: i32;
  var $i512: i32;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $i517: i64;
  var $i518: i32;
  var $i519: i32;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $i524: i64;
  var $i525: i32;
  var $i526: i32;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $i531: i64;
  var $i532: i32;
  var $i533: i32;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $i538: i64;
  var $i539: i32;
  var $i540: i32;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $i545: i64;
  var $i546: i32;
  var $i547: i32;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $i552: i64;
  var $i553: i32;
  var $i554: i32;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $i559: i64;
  var $i560: i32;
  var $i561: i32;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $i566: i64;
  var $i567: i32;
  var $i568: i32;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $i573: i64;
  var $i574: i32;
  var $i575: i32;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i64;
  var $i581: i32;
  var $i582: i32;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $i587: i64;
  var $i588: i32;
  var $i589: i32;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $i594: i64;
  var $i595: i32;
  var $i596: i32;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $i601: i64;
  var $i602: i32;
  var $i603: i32;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $i608: i64;
  var $i609: i32;
  var $i610: i32;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i64;
  var $i616: i32;
  var $i617: i32;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $i622: i64;
  var $i623: i32;
  var $i624: i32;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $i629: i64;
  var $i630: i32;
  var $i631: i32;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $i636: i64;
  var $i637: i32;
  var $i638: i32;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $i643: i64;
  var $i644: i32;
  var $i645: i32;
  var $p646: ref;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $i650: i64;
  var $i651: i32;
  var $i652: i32;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $i657: i64;
  var $i658: i32;
  var $i659: i32;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $i664: i64;
  var $i665: i32;
  var $i666: i32;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $i671: i64;
  var $i672: i32;
  var $i673: i32;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $i678: i64;
  var $i679: i32;
  var $i680: i32;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $i685: i64;
  var $i686: i32;
  var $i687: i32;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $i692: i64;
  var $i693: i32;
  var $i694: i32;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $i699: i64;
  var $i700: i32;
  var $i701: i32;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $i706: i64;
  var $i707: i32;
  var $i708: i32;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $i713: i64;
  var $i714: i32;
  var $i715: i32;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $i720: i64;
  var $i721: i32;
  var $i722: i32;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $i727: i64;
  var $i728: i32;
  var $i729: i32;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i64;
  var $i735: i32;
  var $i736: i32;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $i741: i64;
  var $i742: i32;
  var $i743: i32;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $i748: i64;
  var $i749: i32;
  var $i750: i32;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $i755: i64;
  var $i756: i32;
  var $i757: i32;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $p761: ref;
  var $i762: i64;
  var $i763: i32;
  var $i764: i32;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $i769: i64;
  var $i770: i32;
  var $i771: i32;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $i776: i64;
  var $i777: i32;
  var $i778: i32;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $i783: i64;
  var $i784: i32;
  var $i785: i32;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $i790: i64;
  var $i791: i32;
  var $i792: i32;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $i797: i64;
  var $i798: i32;
  var $i799: i32;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $p803: ref;
  var $i804: i64;
  var $i805: i32;
  var $i806: i32;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $i811: i64;
  var $i812: i32;
  var $i813: i32;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $i818: i64;
  var $i819: i32;
  var $i820: i32;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $i825: i64;
  var $i826: i32;
  var $i827: i32;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $i832: i64;
  var $i833: i32;
  var $i834: i32;
  var $p835: ref;
  var $p836: ref;
  var $p837: ref;
  var $p838: ref;
  var $i839: i64;
  var $i840: i32;
  var $i841: i32;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $p845: ref;
  var $i846: i64;
  var $i847: i32;
  var $i848: i32;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $i853: i64;
  var $i854: i32;
  var $i855: i32;
  var $p856: ref;
  var $p857: ref;
  var $p858: ref;
  var $p859: ref;
  var $i860: i64;
  var $i861: i32;
  var $i862: i32;
  var $p863: ref;
  var $p864: ref;
  var $p865: ref;
  var $p866: ref;
  var $i867: i64;
  var $i868: i32;
  var $i869: i32;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $p873: ref;
  var $i874: i64;
  var $i875: i32;
  var $i876: i32;
  var $p877: ref;
  var $p878: ref;
  var $p879: ref;
  var $p880: ref;
  var $i881: i64;
  var $i882: i32;
  var $i883: i32;
  var $p884: ref;
  var $p885: ref;
  var $p886: ref;
  var $p887: ref;
  var $i888: i64;
  var $i889: i32;
  var $i890: i32;
  var $p891: ref;
  var $p892: ref;
  var $p893: ref;
  var $p894: ref;
  var $i895: i64;
  var $i896: i32;
  var $i897: i32;
  var $p898: ref;
  var $p899: ref;
  var $p900: ref;
  var $p901: ref;
  var $i902: i64;
  var $i903: i32;
  var $i904: i32;
  var $p905: ref;
  var $p906: ref;
  var $p907: ref;
  var $p908: ref;
  var $i909: i64;
  var $i910: i32;
  var $i911: i32;
  var $p912: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $i916: i64;
  var $i917: i32;
  var $i918: i32;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
  var $i923: i64;
  var $i924: i32;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := PRIV($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(60, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} writel(0, $p4);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i5 := ns83820_setup_rx($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 4} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    call {:si_unique_call 6} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p9, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 32);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, $i13);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 64);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(8, 4));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, $i43);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 96);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(16, 4));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i50);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 128);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(24, 4));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, $i57);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 160);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(32, 4));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, $i64);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 192);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(40, 4));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i71);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 224);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(48, 4));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p81, $i78);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 256);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(56, 4));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p88, $i85);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 288);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(64, 4));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p95, $i92);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 320);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p101, $mul.ref(72, 4));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p102, $i99);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i104);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 352);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(80, 4));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p109, $i106);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i64.i32($i111);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 384);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(88, 4));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p116, $i113);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.0, $p117);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i119, 416);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(96, 4));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p123, $i120);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i64.i32($i125);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, 448);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(104, 4));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p130, $i127);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i64.i32($i132);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i133, 480);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p136, $mul.ref(112, 4));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p137, $i134);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i64.i32($i139);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i140, 512);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p143, $mul.ref(120, 4));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p144, $i141);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i64.i32($i146);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i147, 544);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(128, 4));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p151, $i148);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i64.i32($i153);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i154, 576);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p157, $mul.ref(136, 4));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p158, $i155);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.0, $p159);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i64.i32($i160);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 608);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p164, $mul.ref(144, 4));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p165, $i162);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i167 := $load.i64($M.0, $p166);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i64.i32($i167);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i168, 640);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p171, $mul.ref(152, 4));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p172, $i169);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.0, $p173);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i64.i32($i174);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i175, 672);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p178, $mul.ref(160, 4));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p179, $i176);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i181 := $load.i64($M.0, $p180);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i64.i32($i181);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i182, 704);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(168, 4));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p186, $i183);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.0, $p187);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i64.i32($i188);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 736);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p192, $mul.ref(176, 4));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p193, $i190);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.0, $p194);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i64.i32($i195);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i196, 768);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p199, $mul.ref(184, 4));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p200, $i197);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i202 := $load.i64($M.0, $p201);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i64.i32($i202);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i203, 800);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p206, $mul.ref(192, 4));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p207, $i204);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.0, $p208);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i64.i32($i209);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i210, 832);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p213, $mul.ref(200, 4));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p214, $i211);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i216 := $load.i64($M.0, $p215);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i64.i32($i216);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i217, 864);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p220, $mul.ref(208, 4));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p221, $i218);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i223 := $load.i64($M.0, $p222);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i64.i32($i223);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i224, 896);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p227, $mul.ref(216, 4));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p228, $i225);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i230 := $load.i64($M.0, $p229);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i64.i32($i230);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i231, 928);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p234, $mul.ref(224, 4));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p235, $i232);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i237 := $load.i64($M.0, $p236);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i64.i32($i237);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i239 := $add.i32($i238, 960);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p241, $mul.ref(232, 4));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p242, $i239);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i244 := $load.i64($M.0, $p243);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i64.i32($i244);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i245, 992);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p248, $mul.ref(240, 4));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p249, $i246);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.0, $p250);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i64.i32($i251);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i253 := $add.i32($i252, 1024);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p255, $mul.ref(248, 4));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p256, $i253);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i258 := $load.i64($M.0, $p257);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i64.i32($i258);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i260 := $add.i32($i259, 1056);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($p262, $mul.ref(256, 4));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p263, $i260);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i265 := $load.i64($M.0, $p264);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i266 := $trunc.i64.i32($i265);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i267 := $add.i32($i266, 1088);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p269, $mul.ref(264, 4));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p270, $i267);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i272 := $load.i64($M.0, $p271);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i64.i32($i272);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i274 := $add.i32($i273, 1120);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($p276, $mul.ref(272, 4));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p277, $i274);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i279 := $load.i64($M.0, $p278);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i64.i32($i279);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, 1152);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p283, $mul.ref(280, 4));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p284, $i281);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i286 := $load.i64($M.0, $p285);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i64.i32($i286);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i287, 1184);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($p290, $mul.ref(288, 4));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p291, $i288);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.0, $p292);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i294 := $trunc.i64.i32($i293);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i294, 1216);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p297, $mul.ref(296, 4));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p298, $i295);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i300 := $load.i64($M.0, $p299);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i64.i32($i300);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i302 := $add.i32($i301, 1248);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($p304, $mul.ref(304, 4));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p305, $i302);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i307 := $load.i64($M.0, $p306);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i64.i32($i307);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i309 := $add.i32($i308, 1280);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($p311, $mul.ref(312, 4));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p312, $i309);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i314 := $load.i64($M.0, $p313);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i64.i32($i314);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i316 := $add.i32($i315, 1312);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($p318, $mul.ref(320, 4));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p319, $i316);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i321 := $load.i64($M.0, $p320);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i322 := $trunc.i64.i32($i321);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i323 := $add.i32($i322, 1344);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($p325, $mul.ref(328, 4));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p326, $i323);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i328 := $load.i64($M.0, $p327);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i64.i32($i328);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i329, 1376);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p332, $mul.ref(336, 4));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p333, $i330);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i335 := $load.i64($M.0, $p334);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i64.i32($i335);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i337 := $add.i32($i336, 1408);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p339 := $load.ref($M.0, $p338);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($p339, $mul.ref(344, 4));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p340, $i337);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i342 := $load.i64($M.0, $p341);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i64.i32($i342);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i344 := $add.i32($i343, 1440);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p346, $mul.ref(352, 4));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p347, $i344);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i349 := $load.i64($M.0, $p348);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i64.i32($i349);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i350, 1472);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p353, $mul.ref(360, 4));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p354, $i351);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i356 := $load.i64($M.0, $p355);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i357 := $trunc.i64.i32($i356);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i358 := $add.i32($i357, 1504);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($p360, $mul.ref(368, 4));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p361, $i358);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i363 := $load.i64($M.0, $p362);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i364 := $trunc.i64.i32($i363);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i365 := $add.i32($i364, 1536);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($p367, $mul.ref(376, 4));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p368, $i365);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i370 := $load.i64($M.0, $p369);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i64.i32($i370);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i372 := $add.i32($i371, 1568);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.0, $p373);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($p374, $mul.ref(384, 4));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p375, $i372);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i377 := $load.i64($M.0, $p376);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i64.i32($i377);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i379 := $add.i32($i378, 1600);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($p381, $mul.ref(392, 4));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p382, $i379);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i384 := $load.i64($M.0, $p383);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i385 := $trunc.i64.i32($i384);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i386 := $add.i32($i385, 1632);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.0, $p387);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($p388, $mul.ref(400, 4));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p389, $i386);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i391 := $load.i64($M.0, $p390);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i392 := $trunc.i64.i32($i391);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i393 := $add.i32($i392, 1664);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($p395, $mul.ref(408, 4));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p396, $i393);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i398 := $load.i64($M.0, $p397);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i64.i32($i398);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i400 := $add.i32($i399, 1696);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($p402, $mul.ref(416, 4));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p403, $i400);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i405 := $load.i64($M.0, $p404);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i406 := $trunc.i64.i32($i405);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i407 := $add.i32($i406, 1728);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.0, $p408);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($p409, $mul.ref(424, 4));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p410, $i407);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i412 := $load.i64($M.0, $p411);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i413 := $trunc.i64.i32($i412);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i414 := $add.i32($i413, 1760);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($p416, $mul.ref(432, 4));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p417, $i414);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i419 := $load.i64($M.0, $p418);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i64.i32($i419);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i421 := $add.i32($i420, 1792);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p423 := $load.ref($M.0, $p422);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p423, $mul.ref(440, 4));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p424, $i421);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i426 := $load.i64($M.0, $p425);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i64.i32($i426);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i427, 1824);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.0, $p429);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($p430, $mul.ref(448, 4));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p431, $i428);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i433 := $load.i64($M.0, $p432);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i434 := $trunc.i64.i32($i433);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i435 := $add.i32($i434, 1856);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($p437, $mul.ref(456, 4));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p438, $i435);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i440 := $load.i64($M.0, $p439);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i64.i32($i440);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i442 := $add.i32($i441, 1888);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.0, $p443);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($p444, $mul.ref(464, 4));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p445, $i442);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i447 := $load.i64($M.0, $p446);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i64.i32($i447);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i449 := $add.i32($i448, 1920);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.0, $p450);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($p451, $mul.ref(472, 4));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p452, $i449);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i454 := $load.i64($M.0, $p453);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i64.i32($i454);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i456 := $add.i32($i455, 1952);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $p457);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($p458, $mul.ref(480, 4));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p459, $i456);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i461 := $load.i64($M.0, $p460);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i462 := $trunc.i64.i32($i461);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i463 := $add.i32($i462, 1984);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p465 := $load.ref($M.0, $p464);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($p465, $mul.ref(488, 4));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p466, $i463);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i468 := $load.i64($M.0, $p467);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i64.i32($i468);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i470 := $add.i32($i469, 2016);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($p472, $mul.ref(496, 4));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p473, $i470);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i475 := $load.i64($M.0, $p474);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i476 := $trunc.i64.i32($i475);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i477 := $add.i32($i476, 2048);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.0, $p478);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($p479, $mul.ref(504, 4));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p480, $i477);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i482 := $load.i64($M.0, $p481);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i64.i32($i482);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i484 := $add.i32($i483, 2080);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.0, $p485);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($p486, $mul.ref(512, 4));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p487, $i484);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i489 := $load.i64($M.0, $p488);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i490 := $trunc.i64.i32($i489);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i491 := $add.i32($i490, 2112);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p492);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($p493, $mul.ref(520, 4));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p494, $i491);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i496 := $load.i64($M.0, $p495);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i497 := $trunc.i64.i32($i496);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i498 := $add.i32($i497, 2144);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.0, $p499);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($p500, $mul.ref(528, 4));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p501, $i498);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i503 := $load.i64($M.0, $p502);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i504 := $trunc.i64.i32($i503);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i505 := $add.i32($i504, 2176);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p507 := $load.ref($M.0, $p506);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($p507, $mul.ref(536, 4));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p508, $i505);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i510 := $load.i64($M.0, $p509);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i64.i32($i510);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i512 := $add.i32($i511, 2208);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p514 := $load.ref($M.0, $p513);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($p514, $mul.ref(544, 4));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p515, $i512);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i517 := $load.i64($M.0, $p516);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i518 := $trunc.i64.i32($i517);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i519 := $add.i32($i518, 2240);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.0, $p520);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($p521, $mul.ref(552, 4));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p522, $i519);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i524 := $load.i64($M.0, $p523);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i525 := $trunc.i64.i32($i524);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i526 := $add.i32($i525, 2272);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p528 := $load.ref($M.0, $p527);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($p528, $mul.ref(560, 4));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p529, $i526);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i531 := $load.i64($M.0, $p530);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i532 := $trunc.i64.i32($i531);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i533 := $add.i32($i532, 2304);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($p535, $mul.ref(568, 4));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p536, $i533);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i538 := $load.i64($M.0, $p537);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i539 := $trunc.i64.i32($i538);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i540 := $add.i32($i539, 2336);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($p542, $mul.ref(576, 4));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p543, $i540);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i545 := $load.i64($M.0, $p544);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i546 := $trunc.i64.i32($i545);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i547 := $add.i32($i546, 2368);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p549 := $load.ref($M.0, $p548);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($p549, $mul.ref(584, 4));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p550, $i547);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i552 := $load.i64($M.0, $p551);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i553 := $trunc.i64.i32($i552);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i554 := $add.i32($i553, 2400);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($p556, $mul.ref(592, 4));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p557, $i554);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i559 := $load.i64($M.0, $p558);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i560 := $trunc.i64.i32($i559);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i561 := $add.i32($i560, 2432);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($p563, $mul.ref(600, 4));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p564, $i561);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i566 := $load.i64($M.0, $p565);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i64.i32($i566);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i568 := $add.i32($i567, 2464);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.0, $p569);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($p570, $mul.ref(608, 4));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p571, $i568);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i573 := $load.i64($M.0, $p572);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i574 := $trunc.i64.i32($i573);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i575 := $add.i32($i574, 2496);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p577 := $load.ref($M.0, $p576);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($p577, $mul.ref(616, 4));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p578, $i575);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i580 := $load.i64($M.0, $p579);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i581 := $trunc.i64.i32($i580);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i582 := $add.i32($i581, 2528);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.0, $p583);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($p584, $mul.ref(624, 4));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p585, $i582);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i587 := $load.i64($M.0, $p586);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i588 := $trunc.i64.i32($i587);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i589 := $add.i32($i588, 2560);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p591 := $load.ref($M.0, $p590);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($p591, $mul.ref(632, 4));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p592, $i589);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i594 := $load.i64($M.0, $p593);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i595 := $trunc.i64.i32($i594);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i596 := $add.i32($i595, 2592);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.0, $p597);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($p598, $mul.ref(640, 4));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p599, $i596);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i601 := $load.i64($M.0, $p600);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i602 := $trunc.i64.i32($i601);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i603 := $add.i32($i602, 2624);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p605 := $load.ref($M.0, $p604);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($p605, $mul.ref(648, 4));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p606, $i603);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i608 := $load.i64($M.0, $p607);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i609 := $trunc.i64.i32($i608);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i610 := $add.i32($i609, 2656);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($p612, $mul.ref(656, 4));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p613, $i610);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i615 := $load.i64($M.0, $p614);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i616 := $trunc.i64.i32($i615);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i617 := $add.i32($i616, 2688);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($p619, $mul.ref(664, 4));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p620, $i617);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i622 := $load.i64($M.0, $p621);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i623 := $trunc.i64.i32($i622);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i624 := $add.i32($i623, 2720);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.0, $p625);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($p626, $mul.ref(672, 4));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p627, $i624);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i629 := $load.i64($M.0, $p628);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i630 := $trunc.i64.i32($i629);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i631 := $add.i32($i630, 2752);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p633 := $load.ref($M.0, $p632);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($p633, $mul.ref(680, 4));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p634, $i631);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i636 := $load.i64($M.0, $p635);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i637 := $trunc.i64.i32($i636);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i638 := $add.i32($i637, 2784);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.0, $p639);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($p640, $mul.ref(688, 4));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p641, $i638);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i643 := $load.i64($M.0, $p642);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i644 := $trunc.i64.i32($i643);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i645 := $add.i32($i644, 2816);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.0, $p646);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($p647, $mul.ref(696, 4));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p648, $i645);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i650 := $load.i64($M.0, $p649);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i651 := $trunc.i64.i32($i650);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i652 := $add.i32($i651, 2848);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p654 := $load.ref($M.0, $p653);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($p654, $mul.ref(704, 4));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p655, $i652);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i657 := $load.i64($M.0, $p656);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i658 := $trunc.i64.i32($i657);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i659 := $add.i32($i658, 2880);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.0, $p660);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($p661, $mul.ref(712, 4));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p662, $i659);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i664 := $load.i64($M.0, $p663);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i665 := $trunc.i64.i32($i664);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i666 := $add.i32($i665, 2912);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $p667);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($p668, $mul.ref(720, 4));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p669, $i666);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i671 := $load.i64($M.0, $p670);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i672 := $trunc.i64.i32($i671);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i673 := $add.i32($i672, 2944);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p675 := $load.ref($M.0, $p674);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($p675, $mul.ref(728, 4));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p676, $i673);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i678 := $load.i64($M.0, $p677);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i679 := $trunc.i64.i32($i678);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i680 := $add.i32($i679, 2976);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.0, $p681);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($p682, $mul.ref(736, 4));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p683, $i680);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i685 := $load.i64($M.0, $p684);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i686 := $trunc.i64.i32($i685);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i687 := $add.i32($i686, 3008);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.0, $p688);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($p689, $mul.ref(744, 4));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p690, $i687);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i692 := $load.i64($M.0, $p691);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i693 := $trunc.i64.i32($i692);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i694 := $add.i32($i693, 3040);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p696 := $load.ref($M.0, $p695);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($p696, $mul.ref(752, 4));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p697, $i694);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i699 := $load.i64($M.0, $p698);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i700 := $trunc.i64.i32($i699);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i701 := $add.i32($i700, 3072);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p703 := $load.ref($M.0, $p702);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($p703, $mul.ref(760, 4));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p704, $i701);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i706 := $load.i64($M.0, $p705);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i707 := $trunc.i64.i32($i706);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i708 := $add.i32($i707, 3104);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $p709);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($p710, $mul.ref(768, 4));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p711, $i708);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i713 := $load.i64($M.0, $p712);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i714 := $trunc.i64.i32($i713);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i715 := $add.i32($i714, 3136);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p717 := $load.ref($M.0, $p716);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($p717, $mul.ref(776, 4));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p718, $i715);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i720 := $load.i64($M.0, $p719);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i721 := $trunc.i64.i32($i720);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i722 := $add.i32($i721, 3168);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.0, $p723);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($p724, $mul.ref(784, 4));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p725, $i722);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i727 := $load.i64($M.0, $p726);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i728 := $trunc.i64.i32($i727);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i729 := $add.i32($i728, 3200);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p731 := $load.ref($M.0, $p730);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($p731, $mul.ref(792, 4));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p732, $i729);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i734 := $load.i64($M.0, $p733);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i735 := $trunc.i64.i32($i734);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i736 := $add.i32($i735, 3232);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.0, $p737);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($p738, $mul.ref(800, 4));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p739, $i736);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i741 := $load.i64($M.0, $p740);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i742 := $trunc.i64.i32($i741);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i743 := $add.i32($i742, 3264);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p745 := $load.ref($M.0, $p744);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($p745, $mul.ref(808, 4));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p746, $i743);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i748 := $load.i64($M.0, $p747);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i749 := $trunc.i64.i32($i748);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i750 := $add.i32($i749, 3296);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($p752, $mul.ref(816, 4));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p753, $i750);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i755 := $load.i64($M.0, $p754);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i756 := $trunc.i64.i32($i755);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i757 := $add.i32($i756, 3328);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p759 := $load.ref($M.0, $p758);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($p759, $mul.ref(824, 4));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p760, $i757);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i762 := $load.i64($M.0, $p761);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i763 := $trunc.i64.i32($i762);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i764 := $add.i32($i763, 3360);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p766 := $load.ref($M.0, $p765);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($p766, $mul.ref(832, 4));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p767, $i764);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i769 := $load.i64($M.0, $p768);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i770 := $trunc.i64.i32($i769);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i771 := $add.i32($i770, 3392);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p773 := $load.ref($M.0, $p772);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($p773, $mul.ref(840, 4));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p774, $i771);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i776 := $load.i64($M.0, $p775);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i777 := $trunc.i64.i32($i776);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i778 := $add.i32($i777, 3424);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p780 := $load.ref($M.0, $p779);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($p780, $mul.ref(848, 4));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p781, $i778);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i783 := $load.i64($M.0, $p782);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i784 := $trunc.i64.i32($i783);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i785 := $add.i32($i784, 3456);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.0, $p786);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($p787, $mul.ref(856, 4));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p788, $i785);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i790 := $load.i64($M.0, $p789);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i791 := $trunc.i64.i32($i790);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i792 := $add.i32($i791, 3488);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.0, $p793);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($p794, $mul.ref(864, 4));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p795, $i792);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i797 := $load.i64($M.0, $p796);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i798 := $trunc.i64.i32($i797);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i799 := $add.i32($i798, 3520);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p801 := $load.ref($M.0, $p800);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($p801, $mul.ref(872, 4));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p802, $i799);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i804 := $load.i64($M.0, $p803);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i805 := $trunc.i64.i32($i804);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i806 := $add.i32($i805, 3552);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.0, $p807);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($p808, $mul.ref(880, 4));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p809, $i806);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i811 := $load.i64($M.0, $p810);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i812 := $trunc.i64.i32($i811);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i813 := $add.i32($i812, 3584);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p815 := $load.ref($M.0, $p814);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($p815, $mul.ref(888, 4));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p816, $i813);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i818 := $load.i64($M.0, $p817);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i819 := $trunc.i64.i32($i818);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i820 := $add.i32($i819, 3616);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p822 := $load.ref($M.0, $p821);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($p822, $mul.ref(896, 4));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p823, $i820);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i825 := $load.i64($M.0, $p824);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i826 := $trunc.i64.i32($i825);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i827 := $add.i32($i826, 3648);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p829 := $load.ref($M.0, $p828);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($p829, $mul.ref(904, 4));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p830, $i827);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i832 := $load.i64($M.0, $p831);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i833 := $trunc.i64.i32($i832);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i834 := $add.i32($i833, 3680);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p836 := $load.ref($M.0, $p835);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($p836, $mul.ref(912, 4));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p837, $i834);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i839 := $load.i64($M.0, $p838);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i840 := $trunc.i64.i32($i839);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i841 := $add.i32($i840, 3712);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p843 := $load.ref($M.0, $p842);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($p843, $mul.ref(920, 4));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p844, $i841);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i846 := $load.i64($M.0, $p845);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i847 := $trunc.i64.i32($i846);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i848 := $add.i32($i847, 3744);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p850 := $load.ref($M.0, $p849);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($p850, $mul.ref(928, 4));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p851, $i848);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i853 := $load.i64($M.0, $p852);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i854 := $trunc.i64.i32($i853);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i855 := $add.i32($i854, 3776);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p856 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p857 := $load.ref($M.0, $p856);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($p857, $mul.ref(936, 4));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p858, $i855);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i860 := $load.i64($M.0, $p859);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i861 := $trunc.i64.i32($i860);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i862 := $add.i32($i861, 3808);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p864 := $load.ref($M.0, $p863);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($p864, $mul.ref(944, 4));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p865, $i862);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i867 := $load.i64($M.0, $p866);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i868 := $trunc.i64.i32($i867);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i869 := $add.i32($i868, 3840);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p871 := $load.ref($M.0, $p870);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($p871, $mul.ref(952, 4));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p872, $i869);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i874 := $load.i64($M.0, $p873);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i875 := $trunc.i64.i32($i874);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i876 := $add.i32($i875, 3872);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.0, $p877);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($p878, $mul.ref(960, 4));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p879, $i876);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i881 := $load.i64($M.0, $p880);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i882 := $trunc.i64.i32($i881);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i883 := $add.i32($i882, 3904);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p885 := $load.ref($M.0, $p884);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($p885, $mul.ref(968, 4));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p886, $i883);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i888 := $load.i64($M.0, $p887);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i889 := $trunc.i64.i32($i888);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i890 := $add.i32($i889, 3936);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p892 := $load.ref($M.0, $p891);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($p892, $mul.ref(976, 4));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p893, $i890);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i895 := $load.i64($M.0, $p894);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i896 := $trunc.i64.i32($i895);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i897 := $add.i32($i896, 3968);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p898 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p899 := $load.ref($M.0, $p898);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($p899, $mul.ref(984, 4));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p900, $i897);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i902 := $load.i64($M.0, $p901);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i903 := $trunc.i64.i32($i902);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i904 := $add.i32($i903, 4000);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p906 := $load.ref($M.0, $p905);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($p906, $mul.ref(992, 4));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p907, $i904);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i909 := $load.i64($M.0, $p908);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i910 := $trunc.i64.i32($i909);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i911 := $add.i32($i910, 4032);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p913 := $load.ref($M.0, $p912);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($p913, $mul.ref(1000, 4));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p914, $i911);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i916 := $load.i64($M.0, $p915);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i917 := $trunc.i64.i32($i916);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i918 := $add.i32($i917, 4064);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p920 := $load.ref($M.0, $p919);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($p920, $mul.ref(1008, 4));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p921, $i918);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i923 := $load.i64($M.0, $p922);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i924 := $trunc.i64.i32($i923);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($p926, $mul.ref(1016, 4));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p927, $i924);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(946, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 7} {:cexpr "desc"} boogie_si_record_i32($i20);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(36, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} writel(0, $p23);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(32, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} writel($i20, $p26);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2016, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} vslice_dummy_var_12 := reg_timer_3($p27);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2016, 1)), $mul.ref(32, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i29);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2016, 1)), $mul.ref(24, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, ns83820_tx_watch);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2016, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 500);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_13 := ldv_mod_timer_45($p34, $i36);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} netif_start_queue($p0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} vslice_dummy_var_11 := ns83820_stop($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i38 := $i5;
    goto $bb9;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ns83820_stop: ref;

axiom ns83820_stop == $sub.ref(0, 110591);

procedure ns83820_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.1, $M.4, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p1 := PRIV($p0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2016, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_14 := ldv_del_timer_sync_43($p2);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} ns83820_disable_interrupts($p1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} synchronize_irq($i9);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} ns83820_do_reset($p1, 256);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, $p12);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} synchronize_irq($i13);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} spin_lock_irq($p14);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 1985));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} spin_unlock_irq($p19);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} ns83820_cleanup_rx($p1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} ns83820_cleanup_tx($p1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ns83820_hard_start_xmit: ref;

axiom ns83820_hard_start_xmit == $sub.ref(0, 111623);

procedure ns83820_hard_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation ns83820_hard_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i74: i32;
  var $i82: i32;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i16;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $i131: i64;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $i144: i1;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i64;
  var $i149: i64;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;
  var $i156: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $i165: i32;
  var $p166: ref;
  var $i167: i32;
  var $p168: ref;
  var $i169: i64;
  var $p171: ref;
  var $i172: i64;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i64;
  var $p177: ref;
  var $i178: i16;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i1;
  var $p183: ref;
  var $i184: i16;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i16;
  var $i189: i32;
  var $i190: i32;
  var $p191: ref;
  var $i192: i16;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p2 := PRIV($p1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p3 := skb_end_pointer($p0);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 25} {:cexpr "nr_frags"} boogie_si_record_i32($i7);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $p37, $i38, $i39, $i40, $i34, $i35, $i36 := ns83820_hard_start_xmit_loop_$bb1($p1, $p2, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $p37, $i38, $i39, $i40, $i34, $i35, $i36);
    goto $bb1_last;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 27} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 32} {:cexpr "free_idx"} boogie_si_record_i32($i25);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    call {:si_unique_call 33} {:cexpr "tx_done_idx"} boogie_si_record_i32($i28);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, $i25);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 126);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 127);
    call {:si_unique_call 34} {:cexpr "nr_free"} boogie_si_record_i32($i31);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, $sub.i32(0, 1));
    call {:si_unique_call 35} {:cexpr "nr_free"} boogie_si_record_i32($i32);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i33 := $sle.i32($i32, $i7);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i34, $i35, $i36 := $i25, $i28, $i32;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(950, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, $i34);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i36, $i7);
    call {:si_unique_call 38} {:cexpr "nr_free"} boogie_si_record_i32($i53);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i54 := $sle.i32($i53, 7);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p56 := skb_end_pointer($p0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i7, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $p61 := $p58;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(145, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 6);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(170, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 4096);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i82;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    call {:si_unique_call 50} {:cexpr "len"} boogie_si_record_i32($i101);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i7, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i101;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i106);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i112 := pci_map_single($p108, $p110, $i111, 1);
    call {:si_unique_call 53} {:cexpr "buf"} boogie_si_record_i64($i112);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i115 := $mul.i32($i34, 8);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i115);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p114, $mul.ref($i116, 4));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121, $p122 := $i7, $i112, $i34, $i106, $p61;
    goto $bb39;

  $bb39:
    call $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $i133, $i134, $i135, $i136, $p137, $i138, $i139, $i140, $p141, $i142, $p143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $p160, $p161, $p162, $i163, $i164, $i165, $p166, $i167 := ns83820_hard_start_xmit_loop_$bb39($p2, $i52, $i99, $p117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $i133, $i134, $i135, $i136, $p137, $i138, $i139, $i140, $p141, $i142, $p143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $p160, $p161, $p162, $i163, $i164, $i165, $p166, $i167);
    goto $bb39_last;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i125 := $mul.i32($i120, 8);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i126 := $zext.i32.i64($i125);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p124, $mul.ref($i126, 4));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i120, 1);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 127);
    call {:si_unique_call 54} {:cexpr "free_idx"} boogie_si_record_i32($i129);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, $p130);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i64.i32($i131);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i133 := $mul.i32($i129, 32);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i132, $i133);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i134);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i64.i32($i119);
    $i136 := $add.i64($i126, 2);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p124, $mul.ref($i136, 4));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i135);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i138 := $lshr.i64($i119, 32);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i64.i32($i138);
    $i140 := $add.i64($i126, 3);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p124, $mul.ref($i140, 4));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i139);
    $i142 := $add.i64($i126, 5);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p124, $mul.ref($i142, 4));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i99);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i118, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i144 == 1);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i147 := 1073741824;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p127);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p117);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i148, $i149);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i151 := (if $i150 == 1 then 0 else $sub.i32(0, 2147483648));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, $i147);
    call {:si_unique_call 55} {:cexpr "cmdsts"} boogie_si_record_i32($i152);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, $i121);
    call {:si_unique_call 56} {:cexpr "cmdsts"} boogie_si_record_i32($i153);
    $i154 := $add.i64($i126, 4);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p124, $mul.ref($i154, 4));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i153);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i118, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i157, $i158 := $i120, $i129;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i159 := skb_frag_size($p122);
    call {:si_unique_call 62} {:cexpr "tmp___7"} boogie_si_record_i32($i159);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i163 := $zext.i32.i64($i159);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i164 := skb_frag_dma_map($p162, $p122, 0, $i163, 1);
    call {:si_unique_call 64} {:cexpr "buf"} boogie_si_record_i64($i164);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i165 := skb_frag_size($p122);
    call {:si_unique_call 66} {:cexpr "len"} boogie_si_record_i32($i165);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p122, $mul.ref(1, 16));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i167 := $sub.i32($i118, 1);
    call {:si_unique_call 67} {:cexpr "nr_frags"} boogie_si_record_i32($i167);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121, $p122 := $i167, $i164, $i129, $i165, $p166;
    goto corral_source_split_1458_dummy;

  $bb43:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} spin_lock_irq($p168);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i169 := $zext.i32.i64($i157);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref($i169, 8));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p171, $p0);
    $i172 := $add.i64($i116, 4);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p114, $mul.ref($i172, 4));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i174, $sub.i32(0, 2147483648));
    $i176 := $add.i64($i116, 4);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p114, $mul.ref($i176, 4));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, $i175);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i16($i158);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, $i178);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} atomic_inc($p180);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} spin_unlock_irq($p181);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} kick_tx($p2);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i55, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb47:
    assume $i182 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i184 := $load.i16($M.0, $p183);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i184);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, $i35);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb49;

  $bb50:
    assume $i186 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.0, $p187);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 126);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i192 := $load.i16($M.0, $p191);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i192);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i194 := $sub.i32($i190, $i193);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i195 := $srem.i32($i194, 128);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i196 := $sgt.i32($i195, 8);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb49;

  $bb52:
    assume $i196 == 1;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} netif_start_queue($p1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb40:
    assume $i144 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i52, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i146 := (if $i145 == 1 then 536870912 else 0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb42;

  $bb36:
    assume $i102 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i101, $i104);
    call {:si_unique_call 51} {:cexpr "len"} boogie_si_record_i32($i105);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i106 := $i105;
    goto $bb38;

  $bb33:
    assume $i87 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(170, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p88);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i90 := $sext.i16.i32($i89);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, $sub.i32(0, 4097));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    call {:si_unique_call 46} {:cexpr "tag"} boogie_si_record_i16($i92);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i95 := __fswab16($i94);
    call {:si_unique_call 48} {:cexpr "tmp___6"} boogie_si_record_i16($i95);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, $i82);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 65536);
    call {:si_unique_call 49} {:cexpr "extsts"} boogie_si_record_i32($i98);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb35;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i67 := $or.i32(0, 131072);
    call {:si_unique_call 41} {:cexpr "extsts"} boogie_si_record_i32($i67);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p68 := ip_hdr($p0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 6);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p75 := ip_hdr($p0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 17);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i67;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i74 := $i81;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i82 := $i74;
    goto $bb32;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i67, 2097152);
    call {:si_unique_call 45} {:cexpr "extsts"} boogie_si_record_i32($i80);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb31;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i67, 524288);
    call {:si_unique_call 43} {:cexpr "extsts"} boogie_si_record_i32($i73);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb28;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p61 := $0.ref;
    goto $bb23;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} netif_stop_queue($p1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb20;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(950, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 32);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i49 := $srem.i32($i48, 128);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(950, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $i50);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb17;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} netif_stop_queue($p1);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, $i28);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := 16;
    goto $bb6;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} netif_start_queue($p1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto corral_source_split_1280_dummy;

  $bb2:
    assume $i14 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} netif_stop_queue($p1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} netif_start_queue($p1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i22 := 16;
    goto $bb6;

  corral_source_split_1458_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1280_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_1236;
}



const ns83820_set_multicast: ref;

axiom ns83820_set_multicast == $sub.ref(0, 112655);

procedure ns83820_set_multicast($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.1, $M.0, $M.4, $M.5, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_set_multicast($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i12: i32;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i24: i32;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p1 := PRIV($p0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(72, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 256);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($sub.i32(0, 1), $sub.i32(0, 805306369));
    call {:si_unique_call 71} {:cexpr "and_mask"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    $i10, $i11 := $i12, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 512);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i10, $sub.i32(0, 536870913));
    call {:si_unique_call 73} {:cexpr "and_mask"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    $i22, $i23 := $i24, $i11;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} spin_lock_irq($p25);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i26 := readl($p4);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 76} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $i22);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, $i23);
    call {:si_unique_call 77} {:cexpr "val"} boogie_si_record_i32($i28);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2147483647);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} writel($i29, $p4);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} writel($i28, $p4);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} spin_unlock_irq($p30);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i11, 536870912);
    call {:si_unique_call 72} {:cexpr "or_mask"} boogie_si_record_i32($i21);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i10, $i21;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb5;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i9 := $or.i32(0, 805306368);
    call {:si_unique_call 70} {:cexpr "or_mask"} boogie_si_record_i32($i9);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i10, $i11 := $sub.i32(0, 1), $i9;
    goto $bb3;
}



const eth_mac_addr: ref;

axiom eth_mac_addr == $sub.ref(0, 113687);

procedure eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 82} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 114719);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ns83820_change_mtu: ref;

axiom ns83820_change_mtu == $sub.ref(0, 115751);

procedure ns83820_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ns83820_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "ns83820_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 1500);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const ns83820_tx_timeout: ref;

axiom ns83820_tx_timeout == $sub.ref(0, 116783);

procedure ns83820_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation ns83820_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p1 := PRIV($p0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} ldv_spin_lock();
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    call {:si_unique_call 88} {:cexpr "tx_done_idx"} boogie_si_record_i32($i4);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i4, 8);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    $i15 := $add.i64($i8, 4);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p6, $mul.ref($i15, 4));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_15 := printk.ref.ref.i32.i32.i32(.str.46, $p11, $i4, $i14, $i17);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} do_tx_done($p0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    call {:si_unique_call 91} {:cexpr "tx_done_idx"} boogie_si_record_i32($i21);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i21, 8);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    $i32 := $add.i64($i25, 4);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p23, $mul.ref($i32, 4));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_16 := printk.ref.ref.i32.i32.i32(.str.47, $p28, $i21, $i31, $i34);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} spin_unlock_irqrestore($p36, $u0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_get_stats: ref;

axiom ns83820_get_stats == $sub.ref(0, 117815);

procedure ns83820_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.1, $M.4, $M.5, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p1 := PRIV($p0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} spin_lock_irq($p2);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ns83820_update_stats($p1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} spin_unlock_irq($p3);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const PRIV: ref;

axiom PRIV == $sub.ref(0, 118847);

procedure PRIV($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation PRIV($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p1 := netdev_priv($p0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 119879);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ldv_spin_lock();
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_update_stats: ref;

axiom ns83820_update_stats == $sub.ref(0, 120911);

procedure ns83820_update_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_update_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $p82: ref;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(96, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i6 := readl($p5);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 102} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i6);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 65535);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i9, $i11);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i12);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref(100, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i16 := readl($p15);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 104} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i16);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 65535);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i19, $i21);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p4, $mul.ref(104, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i26 := readl($p25);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 106} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(120, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i26);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 65535);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i29, $i31);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(120, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i32);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p4, $mul.ref(108, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i36 := readl($p35);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 108} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i36);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 65535);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i39, $i41);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i42);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p4, $mul.ref(112, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_17 := readl($p45);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p4, $mul.ref(116, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i48 := readl($p47);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 111} {:cexpr "tmp___3"} boogie_si_record_i32($i48);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i48);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 65535);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i51, $i53);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i54);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p4, $mul.ref(120, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i58 := readl($p57);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 113} {:cexpr "tmp___4"} boogie_si_record_i32($i58);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i58);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 65535);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i61, $i63);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i64);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p4, $mul.ref(124, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} vslice_dummy_var_18 := readl($p67);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p4, $mul.ref(128, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vslice_dummy_var_19 := readl($p69);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p4, $mul.ref(132, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_20 := readl($p71);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p4, $mul.ref(136, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i74 := readl($p73);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 118} {:cexpr "tmp___5"} boogie_si_record_i32($i74);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i74);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 255);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i77, $i79);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p82, $i80);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 121943);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_spin_unlock();
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 122975);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 121} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 124007);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 125039);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 126071);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 123} $i2 := devirtbounce(0, $p1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 124} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 127103);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 125} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 128135);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} _raw_spin_lock_irq($p2);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 129167);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 130199);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 131231);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.ref.i64.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: i64, p.6: i32, p.7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.ref.i64.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: i64, p.6: i32, p.7: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const do_tx_done: ref;

axiom do_tx_done == $sub.ref(0, 132263);

procedure do_tx_done($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_tx_done($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i16: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i1;
  var $p14: ref;
  var $i15: i32;
  var $p81: ref;
  var $i17: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i8;
  var $i85: i1;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i16;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p1 := PRIV($p0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    call {:si_unique_call 146} {:cexpr "tx_done_idx"} boogie_si_record_i32($i4);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i4, 8);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 4));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, $i4);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i83 := netif_queue_stopped($p0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i8($i83);
    call {:si_unique_call 157} {:cexpr "tmp___0"} boogie_si_record_i8($i84);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i85 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 126);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32($i89, $i92);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i94 := $srem.i32($i93, 128);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i95 := $sgt.i32($i94, 8);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb26;

  $bb27:
    assume $i95 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} netif_start_queue($p0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} netif_wake_queue($p0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p9, $i4;
    goto $bb4;

  $bb4:
    call $i16, $i18, $p20, $i21, $i22, $p24, $i25, $i26, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $i39, $i40, $p42, $i43, $p45, $p46, $i47, $p49, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $i80, $p14, $i15, $p81, $i17, $i82 := do_tx_done_loop_$bb4($p0, $p1, $p10, $i16, $i18, $p20, $i21, $i22, $p24, $i25, $i26, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $i39, $i40, $p42, $i43, $p45, $p46, $i47, $p49, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $i80, $p14, $i15, $p81, $i17, $i82);
    goto $bb4_last;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p14, $mul.ref(4, 4));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p81);
    call {:si_unique_call 147} {:cexpr "cmdsts"} boogie_si_record_i32($i17);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i82 := $sge.i32($i17, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i82 == 1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume $i82 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i17, 268435456);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i16, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i17, 134217728);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i17, 134217728);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i15);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref($i43, 8));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i15);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref($i47, 8));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $0.ref);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i17, 65535);
    call {:si_unique_call 148} {:cexpr "len"} boogie_si_record_i32($i50);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p14, $mul.ref(2, 4));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p14, $mul.ref(3, 4));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i57 := $shl.i64($i56, 32);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i58 := $or.i64($i53, $i57);
    call {:si_unique_call 149} {:cexpr "addr"} boogie_si_record_i64($i58);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p46);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i60 == 1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i50);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} pci_unmap_page($p66, $i58, $i67, 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i15, 1);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 127);
    call {:si_unique_call 154} {:cexpr "tx_done_idx"} boogie_si_record_i32($i69);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $i70);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p14, $mul.ref(4, 4));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    call {:si_unique_call 155} devirtbounce.1(0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i75 := $mul.i32($i69, 8);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p74, $mul.ref($i76, 4));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p10);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, $i69);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i80 == 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15 := $p77, $i69;
    goto $bb18_dummy;

  $bb15:
    assume $i60 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i50);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} pci_unmap_single($p62, $i58, $i63, 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} dev_kfree_skb_irq($p46);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} atomic_dec($p64);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i17);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 65535);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i37, $i39);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i40);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 1);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i30);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 133295);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} ldv_spin_unlock();
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 134327);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 135359);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    return;
}



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 136391);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 167} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 168} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 137423);

procedure dev_kfree_skb_irq($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __dev_kfree_skb_irq($p0, 1);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 138455);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 171} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    return;
}



const pci_unmap_page: ref;

axiom pci_unmap_page == $sub.ref(0, 139487);

procedure pci_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "pci_unmap_page:arg:dma_address"} boogie_si_record_i64($i1);
    call {:si_unique_call 173} {:cexpr "pci_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 174} {:cexpr "pci_unmap_page:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} dma_unmap_page($p7, $i1, $i2, $i3);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 140519);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 178} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 141551);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} netif_tx_start_queue($p1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 142583);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} netif_tx_wake_queue($p1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 143615);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 144647);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 145679);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} clear_bit(0, $p1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 146711);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 186} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 147743);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 148775);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 149807);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 191} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 192} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p4 := get_dma_ops($p0);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 195} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 197} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 199} devirtbounce.5($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 198} devirtbounce.4(0, .str.3, 96, 12);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 150839);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 202} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 151871);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 152903);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 205} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 153935);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 207} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 208} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 209} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 154967);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_irq($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "__dev_kfree_skb_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 155999);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 212} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 213} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p5 := get_dma_ops($p0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 216} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 218} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 220} devirtbounce.5($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 219} devirtbounce.4(0, .str.3, 36, 12);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const writel: ref;

axiom writel == $sub.ref(0, 157031);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 223} devirtbounce.6(0, $i0, $p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    return;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 158063);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 159095);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} netif_tx_stop_queue($p1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    return;
}



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 160127);

procedure ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p1 := skb_network_header($p0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 161159);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 162191);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 229} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 163223);

procedure skb_frag_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_frag_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_frag_dma_map: ref;

axiom skb_frag_dma_map == $sub.ref(0, 164255);

procedure skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "skb_frag_dma_map:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 233} {:cexpr "skb_frag_dma_map:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 234} {:cexpr "skb_frag_dma_map:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p5 := skb_frag_page($p1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i2);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i10 := dma_map_page($p0, $p5, $i9, $i3, $i4);
    call {:si_unique_call 237} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 165287);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 238} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    return;
}



const kick_tx: ref;

axiom kick_tx == $sub.ref(0, 166319);

procedure kick_tx($p0: ref);
  free requires assertsPassed;



implementation kick_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} writel(1, $p2);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    return;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 167351);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 168383);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 241} {:cexpr "dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 242} {:cexpr "dma_map_page:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p5 := get_dma_ops($p0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p6 := lowmem_page_address($p1);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} kmemcheck_mark_initialized($p7, $i8);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i9 := valid_dma_direction($i4);
    call {:si_unique_call 247} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 249} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 251} $i17 := devirtbounce.7($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
    call {:si_unique_call 252} {:cexpr "addr"} boogie_si_record_i64($i17);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 250} devirtbounce.4(0, .str.3, 84, 12);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 169415);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 170447);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 171479);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 256} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 257} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 258} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 259} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 172511);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 261} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p5 := get_dma_ops($p0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 265} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 267} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i14 := __phys_addr($i13);
    call {:si_unique_call 270} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 271} $i21 := devirtbounce.7($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 272} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i23 := __phys_addr($i22);
    call {:si_unique_call 274} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 268} devirtbounce.4(0, .str.3, 19, 12);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 173543);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 278} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 174575);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(196, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 175607);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} set_bit(0, $p1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 176639);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 281} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_43: ref;

axiom ldv_del_timer_sync_43 == $sub.ref(0, 177671);

procedure ldv_del_timer_sync_43($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_del_timer_sync_43($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i1 := del_timer_sync($p0);
    call {:si_unique_call 283} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} disable_suitable_timer_3($p0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ns83820_disable_interrupts: ref;

axiom ns83820_disable_interrupts == $sub.ref(0, 178703);

procedure ns83820_disable_interrupts($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_disable_interrupts($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(20, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} writel(0, $p3);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(24, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} writel(0, $p6);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(24, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_21 := readl($p9);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const synchronize_irq: ref;

axiom synchronize_irq == $sub.ref(0, 179735);

procedure synchronize_irq($i0: i32);
  free requires assertsPassed;



implementation synchronize_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} {:cexpr "synchronize_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_do_reset: ref;

axiom ns83820_do_reset == $sub.ref(0, 180767);

procedure ns83820_do_reset($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_do_reset($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "ns83820_do_reset:arg:which"} boogie_si_record_i32($i1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} writel($i1, $p3);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p4, $p5, $i6, $i7, $i8 := ns83820_do_reset_loop_$bb1($p0, $i1, $p4, $p5, $i6, $i7, $i8);
    goto $bb1_last;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i6 := readl($p5);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 293} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $i1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2_dummy;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb2_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} schedule();
    goto corral_source_split_2196;
}



const ns83820_cleanup_rx: ref;

axiom ns83820_cleanup_rx == $sub.ref(0, 181799);

procedure ns83820_cleanup_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.1, $M.4, $M.5, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_cleanup_rx($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $p64: ref;
  var $p65: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $p82: ref;
  var $p85: ref;
  var $p86: ref;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $p99: ref;
  var $p100: ref;
  var $p103: ref;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $p113: ref;
  var $p114: ref;
  var $p117: ref;
  var $p120: ref;
  var $p121: ref;
  var $p124: ref;
  var $p127: ref;
  var $p128: ref;
  var $p131: ref;
  var $p134: ref;
  var $p135: ref;
  var $p138: ref;
  var $p141: ref;
  var $p142: ref;
  var $p145: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $p155: ref;
  var $p156: ref;
  var $p159: ref;
  var $p162: ref;
  var $p163: ref;
  var $p166: ref;
  var $p169: ref;
  var $p170: ref;
  var $p173: ref;
  var $p176: ref;
  var $p177: ref;
  var $p180: ref;
  var $p183: ref;
  var $p184: ref;
  var $p187: ref;
  var $p190: ref;
  var $p191: ref;
  var $p194: ref;
  var $p197: ref;
  var $p198: ref;
  var $p201: ref;
  var $p204: ref;
  var $p205: ref;
  var $p208: ref;
  var $p211: ref;
  var $p212: ref;
  var $p215: ref;
  var $p218: ref;
  var $p219: ref;
  var $p222: ref;
  var $p225: ref;
  var $p226: ref;
  var $p229: ref;
  var $p232: ref;
  var $p233: ref;
  var $p236: ref;
  var $p239: ref;
  var $p240: ref;
  var $p243: ref;
  var $p246: ref;
  var $p247: ref;
  var $p250: ref;
  var $p253: ref;
  var $p254: ref;
  var $p257: ref;
  var $p260: ref;
  var $p261: ref;
  var $p264: ref;
  var $p267: ref;
  var $p268: ref;
  var $p271: ref;
  var $p274: ref;
  var $p275: ref;
  var $p278: ref;
  var $p281: ref;
  var $p282: ref;
  var $p285: ref;
  var $p288: ref;
  var $p289: ref;
  var $p292: ref;
  var $p295: ref;
  var $p296: ref;
  var $p299: ref;
  var $p302: ref;
  var $p303: ref;
  var $p306: ref;
  var $p309: ref;
  var $p310: ref;
  var $p313: ref;
  var $p316: ref;
  var $p317: ref;
  var $p320: ref;
  var $p323: ref;
  var $p324: ref;
  var $p327: ref;
  var $p330: ref;
  var $p331: ref;
  var $p334: ref;
  var $p337: ref;
  var $p338: ref;
  var $p341: ref;
  var $p344: ref;
  var $p345: ref;
  var $p348: ref;
  var $p351: ref;
  var $p352: ref;
  var $p355: ref;
  var $p358: ref;
  var $p359: ref;
  var $p362: ref;
  var $p365: ref;
  var $p366: ref;
  var $p369: ref;
  var $p372: ref;
  var $p373: ref;
  var $p376: ref;
  var $p379: ref;
  var $p380: ref;
  var $p383: ref;
  var $p386: ref;
  var $p387: ref;
  var $p390: ref;
  var $p393: ref;
  var $p394: ref;
  var $p397: ref;
  var $p400: ref;
  var $p401: ref;
  var $p404: ref;
  var $p407: ref;
  var $p408: ref;
  var $p411: ref;
  var $p414: ref;
  var $p415: ref;
  var $p418: ref;
  var $p421: ref;
  var $p422: ref;
  var $p425: ref;
  var $p428: ref;
  var $p429: ref;
  var $p432: ref;
  var $p435: ref;
  var $p436: ref;
  var $p439: ref;
  var $p442: ref;
  var $p443: ref;
  var $p446: ref;
  var $p449: ref;
  var $p450: ref;
  var $p453: ref;
  var $p456: ref;
  var $p457: ref;
  var $p460: ref;
  var $p463: ref;
  var $p464: ref;
  var $p467: ref;
  var $p470: ref;
  var $p471: ref;
  var $p474: ref;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} ldv_spin_lock();
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 32));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(20, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} writel($i6, $p9);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} synchronize_irq($i16);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(20, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_22 := readl($p19);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(52, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} writel(0, $p23);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(48, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} writel(0, $p26);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(0, 8));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(0, 8));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} clear_rx_desc($p0, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} kfree_skb($p30);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(1, 8));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(1, 8));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} clear_rx_desc($p0, 1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} kfree_skb($p37);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(2, 8));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(2, 8));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} clear_rx_desc($p0, 2);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} kfree_skb($p44);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(3, 8));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(3, 8));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $0.ref);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} clear_rx_desc($p0, 3);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} kfree_skb($p51);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(4, 8));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(4, 8));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $0.ref);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} clear_rx_desc($p0, 4);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} kfree_skb($p58);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(5, 8));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(5, 8));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} clear_rx_desc($p0, 5);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} kfree_skb($p65);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(6, 8));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(6, 8));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $0.ref);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} clear_rx_desc($p0, 6);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} kfree_skb($p72);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(7, 8));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(7, 8));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $0.ref);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} clear_rx_desc($p0, 7);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} kfree_skb($p79);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(8, 8));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(8, 8));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $0.ref);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} clear_rx_desc($p0, 8);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} kfree_skb($p86);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(9, 8));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(9, 8));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $0.ref);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} clear_rx_desc($p0, 9);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} kfree_skb($p93);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(10, 8));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(10, 8));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $0.ref);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} clear_rx_desc($p0, 10);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} kfree_skb($p100);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(11, 8));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(11, 8));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $0.ref);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} clear_rx_desc($p0, 11);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} kfree_skb($p107);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(12, 8));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(12, 8));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, $0.ref);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} clear_rx_desc($p0, 12);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} kfree_skb($p114);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(13, 8));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(13, 8));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, $0.ref);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} clear_rx_desc($p0, 13);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} kfree_skb($p121);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(14, 8));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(14, 8));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $0.ref);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} clear_rx_desc($p0, 14);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} kfree_skb($p128);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(15, 8));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(15, 8));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, $0.ref);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} clear_rx_desc($p0, 15);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} kfree_skb($p135);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(16, 8));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(16, 8));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p145, $0.ref);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} clear_rx_desc($p0, 16);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} kfree_skb($p142);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(17, 8));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(17, 8));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, $0.ref);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} clear_rx_desc($p0, 17);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} kfree_skb($p149);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(18, 8));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(18, 8));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p159, $0.ref);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} clear_rx_desc($p0, 18);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} kfree_skb($p156);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(19, 8));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(19, 8));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p166, $0.ref);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} clear_rx_desc($p0, 19);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} kfree_skb($p163);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(20, 8));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(20, 8));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p173, $0.ref);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} clear_rx_desc($p0, 20);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} kfree_skb($p170);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(21, 8));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(21, 8));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $0.ref);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} clear_rx_desc($p0, 21);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} kfree_skb($p177);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(22, 8));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(22, 8));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p187, $0.ref);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} clear_rx_desc($p0, 22);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} kfree_skb($p184);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(23, 8));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(23, 8));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p194, $0.ref);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} clear_rx_desc($p0, 23);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} kfree_skb($p191);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(24, 8));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(24, 8));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p201, $0.ref);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} clear_rx_desc($p0, 24);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} kfree_skb($p198);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(25, 8));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(25, 8));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, $0.ref);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} clear_rx_desc($p0, 25);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} kfree_skb($p205);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(26, 8));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(26, 8));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p215, $0.ref);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} clear_rx_desc($p0, 26);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} kfree_skb($p212);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(27, 8));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(27, 8));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p222, $0.ref);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} clear_rx_desc($p0, 27);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} kfree_skb($p219);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(28, 8));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(28, 8));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p229, $0.ref);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} clear_rx_desc($p0, 28);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} kfree_skb($p226);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(29, 8));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(29, 8));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p236, $0.ref);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} clear_rx_desc($p0, 29);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} kfree_skb($p233);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(30, 8));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(30, 8));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p243, $0.ref);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} clear_rx_desc($p0, 30);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} kfree_skb($p240);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(31, 8));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(31, 8));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p250, $0.ref);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} clear_rx_desc($p0, 31);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} kfree_skb($p247);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(32, 8));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(32, 8));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p257, $0.ref);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} clear_rx_desc($p0, 32);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} kfree_skb($p254);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(33, 8));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(33, 8));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p264, $0.ref);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} clear_rx_desc($p0, 33);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} kfree_skb($p261);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(34, 8));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(34, 8));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p271, $0.ref);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} clear_rx_desc($p0, 34);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} kfree_skb($p268);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(35, 8));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(35, 8));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p278, $0.ref);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} clear_rx_desc($p0, 35);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} kfree_skb($p275);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(36, 8));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(36, 8));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $0.ref);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} clear_rx_desc($p0, 36);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} kfree_skb($p282);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(37, 8));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(37, 8));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p292, $0.ref);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} clear_rx_desc($p0, 37);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} kfree_skb($p289);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(38, 8));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(38, 8));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p299, $0.ref);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} clear_rx_desc($p0, 38);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} kfree_skb($p296);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(39, 8));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.0, $p302);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(39, 8));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p306, $0.ref);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} clear_rx_desc($p0, 39);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} kfree_skb($p303);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(40, 8));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(40, 8));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p313, $0.ref);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} clear_rx_desc($p0, 40);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} kfree_skb($p310);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(41, 8));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(41, 8));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p320, $0.ref);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} clear_rx_desc($p0, 41);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} kfree_skb($p317);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(42, 8));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.0, $p323);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(42, 8));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p327, $0.ref);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} clear_rx_desc($p0, 42);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree_skb($p324);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(43, 8));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(43, 8));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p334, $0.ref);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} clear_rx_desc($p0, 43);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} kfree_skb($p331);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(44, 8));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(44, 8));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p341, $0.ref);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} clear_rx_desc($p0, 44);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} kfree_skb($p338);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(45, 8));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(45, 8));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p348, $0.ref);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} clear_rx_desc($p0, 45);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} kfree_skb($p345);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(46, 8));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(46, 8));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p355, $0.ref);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} clear_rx_desc($p0, 46);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} kfree_skb($p352);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(47, 8));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(47, 8));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p362, $0.ref);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} clear_rx_desc($p0, 47);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} kfree_skb($p359);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(48, 8));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(48, 8));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p369, $0.ref);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} clear_rx_desc($p0, 48);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} kfree_skb($p366);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(49, 8));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(49, 8));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p376, $0.ref);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} clear_rx_desc($p0, 49);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} kfree_skb($p373);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(50, 8));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.0, $p379);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(50, 8));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p383, $0.ref);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} clear_rx_desc($p0, 50);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} kfree_skb($p380);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(51, 8));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(51, 8));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p390, $0.ref);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} clear_rx_desc($p0, 51);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} kfree_skb($p387);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(52, 8));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.0, $p393);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(52, 8));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p397, $0.ref);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} clear_rx_desc($p0, 52);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} kfree_skb($p394);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(53, 8));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(53, 8));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p404, $0.ref);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} clear_rx_desc($p0, 53);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} kfree_skb($p401);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(54, 8));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(54, 8));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p411, $0.ref);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} clear_rx_desc($p0, 54);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} kfree_skb($p408);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(55, 8));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.0, $p414);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(55, 8));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p418, $0.ref);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} clear_rx_desc($p0, 55);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} kfree_skb($p415);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(56, 8));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(56, 8));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p425, $0.ref);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} clear_rx_desc($p0, 56);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} kfree_skb($p422);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(57, 8));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.0, $p428);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(57, 8));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p432, $0.ref);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} clear_rx_desc($p0, 57);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} kfree_skb($p429);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(58, 8));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.0, $p435);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(58, 8));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p439, $0.ref);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} clear_rx_desc($p0, 58);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} kfree_skb($p436);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(59, 8));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(59, 8));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p446, $0.ref);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} clear_rx_desc($p0, 59);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} kfree_skb($p443);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(60, 8));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(60, 8));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p453, $0.ref);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} clear_rx_desc($p0, 60);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} kfree_skb($p450);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(61, 8));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(61, 8));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p460, $0.ref);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} clear_rx_desc($p0, 61);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} kfree_skb($p457);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(62, 8));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p464 := $load.ref($M.0, $p463);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(62, 8));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p467, $0.ref);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} clear_rx_desc($p0, 62);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} kfree_skb($p464);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(63, 8));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p471 := $load.ref($M.0, $p470);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(63, 8));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p474, $0.ref);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} clear_rx_desc($p0, 63);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} kfree_skb($p471);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ns83820_cleanup_tx: ref;

axiom ns83820_cleanup_tx == $sub.ref(0, 182831);

procedure ns83820_cleanup_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ns83820_cleanup_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i32;
  var $i137: i64;
  var $i138: i64;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i154: i32;
  var $i155: i64;
  var $i156: i64;
  var $p157: ref;
  var $i158: i32;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $i166: i64;
  var $p167: ref;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $i186: i32;
  var $i187: i64;
  var $i188: i64;
  var $i189: i64;
  var $i190: i64;
  var $p191: ref;
  var $i192: i32;
  var $i193: i64;
  var $i194: i64;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $p209: ref;
  var $i210: i32;
  var $i211: i64;
  var $i212: i64;
  var $p213: ref;
  var $i214: i32;
  var $i215: i64;
  var $i216: i64;
  var $i217: i64;
  var $i218: i64;
  var $p219: ref;
  var $i220: i32;
  var $i221: i64;
  var $i222: i64;
  var $p223: ref;
  var $p225: ref;
  var $p226: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i64;
  var $p237: ref;
  var $i238: i32;
  var $i239: i64;
  var $i240: i64;
  var $p241: ref;
  var $i242: i32;
  var $i243: i64;
  var $i244: i64;
  var $i245: i64;
  var $i246: i64;
  var $p247: ref;
  var $i248: i32;
  var $i249: i64;
  var $i250: i64;
  var $p251: ref;
  var $p253: ref;
  var $p254: ref;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $p265: ref;
  var $i266: i32;
  var $i267: i64;
  var $i268: i64;
  var $p269: ref;
  var $i270: i32;
  var $i271: i64;
  var $i272: i64;
  var $i273: i64;
  var $i274: i64;
  var $p275: ref;
  var $i276: i32;
  var $i277: i64;
  var $i278: i64;
  var $p279: ref;
  var $p281: ref;
  var $p282: ref;
  var $p284: ref;
  var $i285: i64;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $p293: ref;
  var $i294: i32;
  var $i295: i64;
  var $i296: i64;
  var $p297: ref;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i64;
  var $i302: i64;
  var $p303: ref;
  var $i304: i32;
  var $i305: i64;
  var $i306: i64;
  var $p307: ref;
  var $p309: ref;
  var $p310: ref;
  var $p312: ref;
  var $i313: i64;
  var $i314: i1;
  var $p315: ref;
  var $p316: ref;
  var $p318: ref;
  var $p319: ref;
  var $i320: i64;
  var $p321: ref;
  var $i322: i32;
  var $i323: i64;
  var $i324: i64;
  var $p325: ref;
  var $i326: i32;
  var $i327: i64;
  var $i328: i64;
  var $i329: i64;
  var $i330: i64;
  var $p331: ref;
  var $i332: i32;
  var $i333: i64;
  var $i334: i64;
  var $p335: ref;
  var $p337: ref;
  var $p338: ref;
  var $p340: ref;
  var $i341: i64;
  var $i342: i1;
  var $p343: ref;
  var $p344: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i64;
  var $p349: ref;
  var $i350: i32;
  var $i351: i64;
  var $i352: i64;
  var $p353: ref;
  var $i354: i32;
  var $i355: i64;
  var $i356: i64;
  var $i357: i64;
  var $i358: i64;
  var $p359: ref;
  var $i360: i32;
  var $i361: i64;
  var $i362: i64;
  var $p363: ref;
  var $p365: ref;
  var $p366: ref;
  var $p368: ref;
  var $i369: i64;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $p374: ref;
  var $p375: ref;
  var $i376: i64;
  var $p377: ref;
  var $i378: i32;
  var $i379: i64;
  var $i380: i64;
  var $p381: ref;
  var $i382: i32;
  var $i383: i64;
  var $i384: i64;
  var $i385: i64;
  var $i386: i64;
  var $p387: ref;
  var $i388: i32;
  var $i389: i64;
  var $i390: i64;
  var $p391: ref;
  var $p393: ref;
  var $p394: ref;
  var $p396: ref;
  var $i397: i64;
  var $i398: i1;
  var $p399: ref;
  var $p400: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i64;
  var $p405: ref;
  var $i406: i32;
  var $i407: i64;
  var $i408: i64;
  var $p409: ref;
  var $i410: i32;
  var $i411: i64;
  var $i412: i64;
  var $i413: i64;
  var $i414: i64;
  var $p415: ref;
  var $i416: i32;
  var $i417: i64;
  var $i418: i64;
  var $p419: ref;
  var $p421: ref;
  var $p422: ref;
  var $p424: ref;
  var $i425: i64;
  var $i426: i1;
  var $p427: ref;
  var $p428: ref;
  var $p430: ref;
  var $p431: ref;
  var $i432: i64;
  var $p433: ref;
  var $i434: i32;
  var $i435: i64;
  var $i436: i64;
  var $p437: ref;
  var $i438: i32;
  var $i439: i64;
  var $i440: i64;
  var $i441: i64;
  var $i442: i64;
  var $p443: ref;
  var $i444: i32;
  var $i445: i64;
  var $i446: i64;
  var $p447: ref;
  var $p449: ref;
  var $p450: ref;
  var $p452: ref;
  var $i453: i64;
  var $i454: i1;
  var $p455: ref;
  var $p456: ref;
  var $p458: ref;
  var $p459: ref;
  var $i460: i64;
  var $p461: ref;
  var $i462: i32;
  var $i463: i64;
  var $i464: i64;
  var $p465: ref;
  var $i466: i32;
  var $i467: i64;
  var $i468: i64;
  var $i469: i64;
  var $i470: i64;
  var $p471: ref;
  var $i472: i32;
  var $i473: i64;
  var $i474: i64;
  var $p475: ref;
  var $p477: ref;
  var $p478: ref;
  var $p480: ref;
  var $i481: i64;
  var $i482: i1;
  var $p483: ref;
  var $p484: ref;
  var $p486: ref;
  var $p487: ref;
  var $i488: i64;
  var $p489: ref;
  var $i490: i32;
  var $i491: i64;
  var $i492: i64;
  var $p493: ref;
  var $i494: i32;
  var $i495: i64;
  var $i496: i64;
  var $i497: i64;
  var $i498: i64;
  var $p499: ref;
  var $i500: i32;
  var $i501: i64;
  var $i502: i64;
  var $p503: ref;
  var $p505: ref;
  var $p506: ref;
  var $p508: ref;
  var $i509: i64;
  var $i510: i1;
  var $p511: ref;
  var $p512: ref;
  var $p514: ref;
  var $p515: ref;
  var $i516: i64;
  var $p517: ref;
  var $i518: i32;
  var $i519: i64;
  var $i520: i64;
  var $p521: ref;
  var $i522: i32;
  var $i523: i64;
  var $i524: i64;
  var $i525: i64;
  var $i526: i64;
  var $p527: ref;
  var $i528: i32;
  var $i529: i64;
  var $i530: i64;
  var $p531: ref;
  var $p533: ref;
  var $p534: ref;
  var $p536: ref;
  var $i537: i64;
  var $i538: i1;
  var $p539: ref;
  var $p540: ref;
  var $p542: ref;
  var $p543: ref;
  var $i544: i64;
  var $p545: ref;
  var $i546: i32;
  var $i547: i64;
  var $i548: i64;
  var $p549: ref;
  var $i550: i32;
  var $i551: i64;
  var $i552: i64;
  var $i553: i64;
  var $i554: i64;
  var $p555: ref;
  var $i556: i32;
  var $i557: i64;
  var $i558: i64;
  var $p559: ref;
  var $p561: ref;
  var $p562: ref;
  var $p564: ref;
  var $i565: i64;
  var $i566: i1;
  var $p567: ref;
  var $p568: ref;
  var $p570: ref;
  var $p571: ref;
  var $i572: i64;
  var $p573: ref;
  var $i574: i32;
  var $i575: i64;
  var $i576: i64;
  var $p577: ref;
  var $i578: i32;
  var $i579: i64;
  var $i580: i64;
  var $i581: i64;
  var $i582: i64;
  var $p583: ref;
  var $i584: i32;
  var $i585: i64;
  var $i586: i64;
  var $p587: ref;
  var $p589: ref;
  var $p590: ref;
  var $p592: ref;
  var $i593: i64;
  var $i594: i1;
  var $p595: ref;
  var $p596: ref;
  var $p598: ref;
  var $p599: ref;
  var $i600: i64;
  var $p601: ref;
  var $i602: i32;
  var $i603: i64;
  var $i604: i64;
  var $p605: ref;
  var $i606: i32;
  var $i607: i64;
  var $i608: i64;
  var $i609: i64;
  var $i610: i64;
  var $p611: ref;
  var $i612: i32;
  var $i613: i64;
  var $i614: i64;
  var $p615: ref;
  var $p617: ref;
  var $p618: ref;
  var $p620: ref;
  var $i621: i64;
  var $i622: i1;
  var $p623: ref;
  var $p624: ref;
  var $p626: ref;
  var $p627: ref;
  var $i628: i64;
  var $p629: ref;
  var $i630: i32;
  var $i631: i64;
  var $i632: i64;
  var $p633: ref;
  var $i634: i32;
  var $i635: i64;
  var $i636: i64;
  var $i637: i64;
  var $i638: i64;
  var $p639: ref;
  var $i640: i32;
  var $i641: i64;
  var $i642: i64;
  var $p643: ref;
  var $p645: ref;
  var $p646: ref;
  var $p648: ref;
  var $i649: i64;
  var $i650: i1;
  var $p651: ref;
  var $p652: ref;
  var $p654: ref;
  var $p655: ref;
  var $i656: i64;
  var $p657: ref;
  var $i658: i32;
  var $i659: i64;
  var $i660: i64;
  var $p661: ref;
  var $i662: i32;
  var $i663: i64;
  var $i664: i64;
  var $i665: i64;
  var $i666: i64;
  var $p667: ref;
  var $i668: i32;
  var $i669: i64;
  var $i670: i64;
  var $p671: ref;
  var $p673: ref;
  var $p674: ref;
  var $p676: ref;
  var $i677: i64;
  var $i678: i1;
  var $p679: ref;
  var $p680: ref;
  var $p682: ref;
  var $p683: ref;
  var $i684: i64;
  var $p685: ref;
  var $i686: i32;
  var $i687: i64;
  var $i688: i64;
  var $p689: ref;
  var $i690: i32;
  var $i691: i64;
  var $i692: i64;
  var $i693: i64;
  var $i694: i64;
  var $p695: ref;
  var $i696: i32;
  var $i697: i64;
  var $i698: i64;
  var $p699: ref;
  var $p701: ref;
  var $p702: ref;
  var $p704: ref;
  var $i705: i64;
  var $i706: i1;
  var $p707: ref;
  var $p708: ref;
  var $p710: ref;
  var $p711: ref;
  var $i712: i64;
  var $p713: ref;
  var $i714: i32;
  var $i715: i64;
  var $i716: i64;
  var $p717: ref;
  var $i718: i32;
  var $i719: i64;
  var $i720: i64;
  var $i721: i64;
  var $i722: i64;
  var $p723: ref;
  var $i724: i32;
  var $i725: i64;
  var $i726: i64;
  var $p727: ref;
  var $p729: ref;
  var $p730: ref;
  var $p732: ref;
  var $i733: i64;
  var $i734: i1;
  var $p735: ref;
  var $p736: ref;
  var $p738: ref;
  var $p739: ref;
  var $i740: i64;
  var $p741: ref;
  var $i742: i32;
  var $i743: i64;
  var $i744: i64;
  var $p745: ref;
  var $i746: i32;
  var $i747: i64;
  var $i748: i64;
  var $i749: i64;
  var $i750: i64;
  var $p751: ref;
  var $i752: i32;
  var $i753: i64;
  var $i754: i64;
  var $p755: ref;
  var $p757: ref;
  var $p758: ref;
  var $p760: ref;
  var $i761: i64;
  var $i762: i1;
  var $p763: ref;
  var $p764: ref;
  var $p766: ref;
  var $p767: ref;
  var $i768: i64;
  var $p769: ref;
  var $i770: i32;
  var $i771: i64;
  var $i772: i64;
  var $p773: ref;
  var $i774: i32;
  var $i775: i64;
  var $i776: i64;
  var $i777: i64;
  var $i778: i64;
  var $p779: ref;
  var $i780: i32;
  var $i781: i64;
  var $i782: i64;
  var $p783: ref;
  var $p785: ref;
  var $p786: ref;
  var $p788: ref;
  var $i789: i64;
  var $i790: i1;
  var $p791: ref;
  var $p792: ref;
  var $p794: ref;
  var $p795: ref;
  var $i796: i64;
  var $p797: ref;
  var $i798: i32;
  var $i799: i64;
  var $i800: i64;
  var $p801: ref;
  var $i802: i32;
  var $i803: i64;
  var $i804: i64;
  var $i805: i64;
  var $i806: i64;
  var $p807: ref;
  var $i808: i32;
  var $i809: i64;
  var $i810: i64;
  var $p811: ref;
  var $p813: ref;
  var $p814: ref;
  var $p816: ref;
  var $i817: i64;
  var $i818: i1;
  var $p819: ref;
  var $p820: ref;
  var $p822: ref;
  var $p823: ref;
  var $i824: i64;
  var $p825: ref;
  var $i826: i32;
  var $i827: i64;
  var $i828: i64;
  var $p829: ref;
  var $i830: i32;
  var $i831: i64;
  var $i832: i64;
  var $i833: i64;
  var $i834: i64;
  var $p835: ref;
  var $i836: i32;
  var $i837: i64;
  var $i838: i64;
  var $p839: ref;
  var $p841: ref;
  var $p842: ref;
  var $p844: ref;
  var $i845: i64;
  var $i846: i1;
  var $p847: ref;
  var $p848: ref;
  var $p850: ref;
  var $p851: ref;
  var $i852: i64;
  var $p853: ref;
  var $i854: i32;
  var $i855: i64;
  var $i856: i64;
  var $p857: ref;
  var $i858: i32;
  var $i859: i64;
  var $i860: i64;
  var $i861: i64;
  var $i862: i64;
  var $p863: ref;
  var $i864: i32;
  var $i865: i64;
  var $i866: i64;
  var $p867: ref;
  var $p869: ref;
  var $p870: ref;
  var $p872: ref;
  var $i873: i64;
  var $i874: i1;
  var $p875: ref;
  var $p876: ref;
  var $p878: ref;
  var $p879: ref;
  var $i880: i64;
  var $p881: ref;
  var $i882: i32;
  var $i883: i64;
  var $i884: i64;
  var $p885: ref;
  var $i886: i32;
  var $i887: i64;
  var $i888: i64;
  var $i889: i64;
  var $i890: i64;
  var $p891: ref;
  var $i892: i32;
  var $i893: i64;
  var $i894: i64;
  var $p895: ref;
  var $p897: ref;
  var $p898: ref;
  var $p900: ref;
  var $i901: i64;
  var $i902: i1;
  var $p903: ref;
  var $p904: ref;
  var $p906: ref;
  var $p907: ref;
  var $i908: i64;
  var $p909: ref;
  var $i910: i32;
  var $i911: i64;
  var $i912: i64;
  var $p913: ref;
  var $i914: i32;
  var $i915: i64;
  var $i916: i64;
  var $i917: i64;
  var $i918: i64;
  var $p919: ref;
  var $i920: i32;
  var $i921: i64;
  var $i922: i64;
  var $p923: ref;
  var $p925: ref;
  var $p926: ref;
  var $p928: ref;
  var $i929: i64;
  var $i930: i1;
  var $p931: ref;
  var $p932: ref;
  var $p934: ref;
  var $p935: ref;
  var $i936: i64;
  var $p937: ref;
  var $i938: i32;
  var $i939: i64;
  var $i940: i64;
  var $p941: ref;
  var $i942: i32;
  var $i943: i64;
  var $i944: i64;
  var $i945: i64;
  var $i946: i64;
  var $p947: ref;
  var $i948: i32;
  var $i949: i64;
  var $i950: i64;
  var $p951: ref;
  var $p953: ref;
  var $p954: ref;
  var $p956: ref;
  var $i957: i64;
  var $i958: i1;
  var $p959: ref;
  var $p960: ref;
  var $p962: ref;
  var $p963: ref;
  var $i964: i64;
  var $p965: ref;
  var $i966: i32;
  var $i967: i64;
  var $i968: i64;
  var $p969: ref;
  var $i970: i32;
  var $i971: i64;
  var $i972: i64;
  var $i973: i64;
  var $i974: i64;
  var $p975: ref;
  var $i976: i32;
  var $i977: i64;
  var $i978: i64;
  var $p979: ref;
  var $p981: ref;
  var $p982: ref;
  var $p984: ref;
  var $i985: i64;
  var $i986: i1;
  var $p987: ref;
  var $p988: ref;
  var $p990: ref;
  var $p991: ref;
  var $i992: i64;
  var $p993: ref;
  var $i994: i32;
  var $i995: i64;
  var $i996: i64;
  var $p997: ref;
  var $i998: i32;
  var $i999: i64;
  var $i1000: i64;
  var $i1001: i64;
  var $i1002: i64;
  var $p1003: ref;
  var $i1004: i32;
  var $i1005: i64;
  var $i1006: i64;
  var $p1007: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1012: ref;
  var $i1013: i64;
  var $i1014: i1;
  var $p1015: ref;
  var $p1016: ref;
  var $p1018: ref;
  var $p1019: ref;
  var $i1020: i64;
  var $p1021: ref;
  var $i1022: i32;
  var $i1023: i64;
  var $i1024: i64;
  var $p1025: ref;
  var $i1026: i32;
  var $i1027: i64;
  var $i1028: i64;
  var $i1029: i64;
  var $i1030: i64;
  var $p1031: ref;
  var $i1032: i32;
  var $i1033: i64;
  var $i1034: i64;
  var $p1035: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $p1040: ref;
  var $i1041: i64;
  var $i1042: i1;
  var $p1043: ref;
  var $p1044: ref;
  var $p1046: ref;
  var $p1047: ref;
  var $i1048: i64;
  var $p1049: ref;
  var $i1050: i32;
  var $i1051: i64;
  var $i1052: i64;
  var $p1053: ref;
  var $i1054: i32;
  var $i1055: i64;
  var $i1056: i64;
  var $i1057: i64;
  var $i1058: i64;
  var $p1059: ref;
  var $i1060: i32;
  var $i1061: i64;
  var $i1062: i64;
  var $p1063: ref;
  var $p1065: ref;
  var $p1066: ref;
  var $p1068: ref;
  var $i1069: i64;
  var $i1070: i1;
  var $p1071: ref;
  var $p1072: ref;
  var $p1074: ref;
  var $p1075: ref;
  var $i1076: i64;
  var $p1077: ref;
  var $i1078: i32;
  var $i1079: i64;
  var $i1080: i64;
  var $p1081: ref;
  var $i1082: i32;
  var $i1083: i64;
  var $i1084: i64;
  var $i1085: i64;
  var $i1086: i64;
  var $p1087: ref;
  var $i1088: i32;
  var $i1089: i64;
  var $i1090: i64;
  var $p1091: ref;
  var $p1093: ref;
  var $p1094: ref;
  var $p1096: ref;
  var $i1097: i64;
  var $i1098: i1;
  var $p1099: ref;
  var $p1100: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $i1104: i64;
  var $p1105: ref;
  var $i1106: i32;
  var $i1107: i64;
  var $i1108: i64;
  var $p1109: ref;
  var $i1110: i32;
  var $i1111: i64;
  var $i1112: i64;
  var $i1113: i64;
  var $i1114: i64;
  var $p1115: ref;
  var $i1116: i32;
  var $i1117: i64;
  var $i1118: i64;
  var $p1119: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $p1124: ref;
  var $i1125: i64;
  var $i1126: i1;
  var $p1127: ref;
  var $p1128: ref;
  var $p1130: ref;
  var $p1131: ref;
  var $i1132: i64;
  var $p1133: ref;
  var $i1134: i32;
  var $i1135: i64;
  var $i1136: i64;
  var $p1137: ref;
  var $i1138: i32;
  var $i1139: i64;
  var $i1140: i64;
  var $i1141: i64;
  var $i1142: i64;
  var $p1143: ref;
  var $i1144: i32;
  var $i1145: i64;
  var $i1146: i64;
  var $p1147: ref;
  var $p1149: ref;
  var $p1150: ref;
  var $p1152: ref;
  var $i1153: i64;
  var $i1154: i1;
  var $p1155: ref;
  var $p1156: ref;
  var $p1158: ref;
  var $p1159: ref;
  var $i1160: i64;
  var $p1161: ref;
  var $i1162: i32;
  var $i1163: i64;
  var $i1164: i64;
  var $p1165: ref;
  var $i1166: i32;
  var $i1167: i64;
  var $i1168: i64;
  var $i1169: i64;
  var $i1170: i64;
  var $p1171: ref;
  var $i1172: i32;
  var $i1173: i64;
  var $i1174: i64;
  var $p1175: ref;
  var $p1177: ref;
  var $p1178: ref;
  var $p1180: ref;
  var $i1181: i64;
  var $i1182: i1;
  var $p1183: ref;
  var $p1184: ref;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i64;
  var $p1189: ref;
  var $i1190: i32;
  var $i1191: i64;
  var $i1192: i64;
  var $p1193: ref;
  var $i1194: i32;
  var $i1195: i64;
  var $i1196: i64;
  var $i1197: i64;
  var $i1198: i64;
  var $p1199: ref;
  var $i1200: i32;
  var $i1201: i64;
  var $i1202: i64;
  var $p1203: ref;
  var $p1205: ref;
  var $p1206: ref;
  var $p1208: ref;
  var $i1209: i64;
  var $i1210: i1;
  var $p1211: ref;
  var $p1212: ref;
  var $p1214: ref;
  var $p1215: ref;
  var $i1216: i64;
  var $p1217: ref;
  var $i1218: i32;
  var $i1219: i64;
  var $i1220: i64;
  var $p1221: ref;
  var $i1222: i32;
  var $i1223: i64;
  var $i1224: i64;
  var $i1225: i64;
  var $i1226: i64;
  var $p1227: ref;
  var $i1228: i32;
  var $i1229: i64;
  var $i1230: i64;
  var $p1231: ref;
  var $p1233: ref;
  var $p1234: ref;
  var $p1236: ref;
  var $i1237: i64;
  var $i1238: i1;
  var $p1239: ref;
  var $p1240: ref;
  var $p1242: ref;
  var $p1243: ref;
  var $i1244: i64;
  var $p1245: ref;
  var $i1246: i32;
  var $i1247: i64;
  var $i1248: i64;
  var $p1249: ref;
  var $i1250: i32;
  var $i1251: i64;
  var $i1252: i64;
  var $i1253: i64;
  var $i1254: i64;
  var $p1255: ref;
  var $i1256: i32;
  var $i1257: i64;
  var $i1258: i64;
  var $p1259: ref;
  var $p1261: ref;
  var $p1262: ref;
  var $p1264: ref;
  var $i1265: i64;
  var $i1266: i1;
  var $p1267: ref;
  var $p1268: ref;
  var $p1270: ref;
  var $p1271: ref;
  var $i1272: i64;
  var $p1273: ref;
  var $i1274: i32;
  var $i1275: i64;
  var $i1276: i64;
  var $p1277: ref;
  var $i1278: i32;
  var $i1279: i64;
  var $i1280: i64;
  var $i1281: i64;
  var $i1282: i64;
  var $p1283: ref;
  var $i1284: i32;
  var $i1285: i64;
  var $i1286: i64;
  var $p1287: ref;
  var $p1289: ref;
  var $p1290: ref;
  var $p1292: ref;
  var $i1293: i64;
  var $i1294: i1;
  var $p1295: ref;
  var $p1296: ref;
  var $p1298: ref;
  var $p1299: ref;
  var $i1300: i64;
  var $p1301: ref;
  var $i1302: i32;
  var $i1303: i64;
  var $i1304: i64;
  var $p1305: ref;
  var $i1306: i32;
  var $i1307: i64;
  var $i1308: i64;
  var $i1309: i64;
  var $i1310: i64;
  var $p1311: ref;
  var $i1312: i32;
  var $i1313: i64;
  var $i1314: i64;
  var $p1315: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $p1320: ref;
  var $i1321: i64;
  var $i1322: i1;
  var $p1323: ref;
  var $p1324: ref;
  var $p1326: ref;
  var $p1327: ref;
  var $i1328: i64;
  var $p1329: ref;
  var $i1330: i32;
  var $i1331: i64;
  var $i1332: i64;
  var $p1333: ref;
  var $i1334: i32;
  var $i1335: i64;
  var $i1336: i64;
  var $i1337: i64;
  var $i1338: i64;
  var $p1339: ref;
  var $i1340: i32;
  var $i1341: i64;
  var $i1342: i64;
  var $p1343: ref;
  var $p1345: ref;
  var $p1346: ref;
  var $p1348: ref;
  var $i1349: i64;
  var $i1350: i1;
  var $p1351: ref;
  var $p1352: ref;
  var $p1354: ref;
  var $p1355: ref;
  var $i1356: i64;
  var $p1357: ref;
  var $i1358: i32;
  var $i1359: i64;
  var $i1360: i64;
  var $p1361: ref;
  var $i1362: i32;
  var $i1363: i64;
  var $i1364: i64;
  var $i1365: i64;
  var $i1366: i64;
  var $p1367: ref;
  var $i1368: i32;
  var $i1369: i64;
  var $i1370: i64;
  var $p1371: ref;
  var $p1373: ref;
  var $p1374: ref;
  var $p1376: ref;
  var $i1377: i64;
  var $i1378: i1;
  var $p1379: ref;
  var $p1380: ref;
  var $p1382: ref;
  var $p1383: ref;
  var $i1384: i64;
  var $p1385: ref;
  var $i1386: i32;
  var $i1387: i64;
  var $i1388: i64;
  var $p1389: ref;
  var $i1390: i32;
  var $i1391: i64;
  var $i1392: i64;
  var $i1393: i64;
  var $i1394: i64;
  var $p1395: ref;
  var $i1396: i32;
  var $i1397: i64;
  var $i1398: i64;
  var $p1399: ref;
  var $p1401: ref;
  var $p1402: ref;
  var $p1404: ref;
  var $i1405: i64;
  var $i1406: i1;
  var $p1407: ref;
  var $p1408: ref;
  var $p1410: ref;
  var $p1411: ref;
  var $i1412: i64;
  var $p1413: ref;
  var $i1414: i32;
  var $i1415: i64;
  var $i1416: i64;
  var $p1417: ref;
  var $i1418: i32;
  var $i1419: i64;
  var $i1420: i64;
  var $i1421: i64;
  var $i1422: i64;
  var $p1423: ref;
  var $i1424: i32;
  var $i1425: i64;
  var $i1426: i64;
  var $p1427: ref;
  var $p1429: ref;
  var $p1430: ref;
  var $p1432: ref;
  var $i1433: i64;
  var $i1434: i1;
  var $p1435: ref;
  var $p1436: ref;
  var $p1438: ref;
  var $p1439: ref;
  var $i1440: i64;
  var $p1441: ref;
  var $i1442: i32;
  var $i1443: i64;
  var $i1444: i64;
  var $p1445: ref;
  var $i1446: i32;
  var $i1447: i64;
  var $i1448: i64;
  var $i1449: i64;
  var $i1450: i64;
  var $p1451: ref;
  var $i1452: i32;
  var $i1453: i64;
  var $i1454: i64;
  var $p1455: ref;
  var $p1457: ref;
  var $p1458: ref;
  var $p1460: ref;
  var $i1461: i64;
  var $i1462: i1;
  var $p1463: ref;
  var $p1464: ref;
  var $p1466: ref;
  var $p1467: ref;
  var $i1468: i64;
  var $p1469: ref;
  var $i1470: i32;
  var $i1471: i64;
  var $i1472: i64;
  var $p1473: ref;
  var $i1474: i32;
  var $i1475: i64;
  var $i1476: i64;
  var $i1477: i64;
  var $i1478: i64;
  var $p1479: ref;
  var $i1480: i32;
  var $i1481: i64;
  var $i1482: i64;
  var $p1483: ref;
  var $p1485: ref;
  var $p1486: ref;
  var $p1488: ref;
  var $i1489: i64;
  var $i1490: i1;
  var $p1491: ref;
  var $p1492: ref;
  var $p1494: ref;
  var $p1495: ref;
  var $i1496: i64;
  var $p1497: ref;
  var $i1498: i32;
  var $i1499: i64;
  var $i1500: i64;
  var $p1501: ref;
  var $i1502: i32;
  var $i1503: i64;
  var $i1504: i64;
  var $i1505: i64;
  var $i1506: i64;
  var $p1507: ref;
  var $i1508: i32;
  var $i1509: i64;
  var $i1510: i64;
  var $p1511: ref;
  var $p1513: ref;
  var $p1514: ref;
  var $p1516: ref;
  var $i1517: i64;
  var $i1518: i1;
  var $p1519: ref;
  var $p1520: ref;
  var $p1522: ref;
  var $p1523: ref;
  var $i1524: i64;
  var $p1525: ref;
  var $i1526: i32;
  var $i1527: i64;
  var $i1528: i64;
  var $p1529: ref;
  var $i1530: i32;
  var $i1531: i64;
  var $i1532: i64;
  var $i1533: i64;
  var $i1534: i64;
  var $p1535: ref;
  var $i1536: i32;
  var $i1537: i64;
  var $i1538: i64;
  var $p1539: ref;
  var $p1541: ref;
  var $p1542: ref;
  var $p1544: ref;
  var $i1545: i64;
  var $i1546: i1;
  var $p1547: ref;
  var $p1548: ref;
  var $p1550: ref;
  var $p1551: ref;
  var $i1552: i64;
  var $p1553: ref;
  var $i1554: i32;
  var $i1555: i64;
  var $i1556: i64;
  var $p1557: ref;
  var $i1558: i32;
  var $i1559: i64;
  var $i1560: i64;
  var $i1561: i64;
  var $i1562: i64;
  var $p1563: ref;
  var $i1564: i32;
  var $i1565: i64;
  var $i1566: i64;
  var $p1567: ref;
  var $p1569: ref;
  var $p1570: ref;
  var $p1572: ref;
  var $i1573: i64;
  var $i1574: i1;
  var $p1575: ref;
  var $p1576: ref;
  var $p1578: ref;
  var $p1579: ref;
  var $i1580: i64;
  var $p1581: ref;
  var $i1582: i32;
  var $i1583: i64;
  var $i1584: i64;
  var $p1585: ref;
  var $i1586: i32;
  var $i1587: i64;
  var $i1588: i64;
  var $i1589: i64;
  var $i1590: i64;
  var $p1591: ref;
  var $i1592: i32;
  var $i1593: i64;
  var $i1594: i64;
  var $p1595: ref;
  var $p1597: ref;
  var $p1598: ref;
  var $p1600: ref;
  var $i1601: i64;
  var $i1602: i1;
  var $p1603: ref;
  var $p1604: ref;
  var $p1606: ref;
  var $p1607: ref;
  var $i1608: i64;
  var $p1609: ref;
  var $i1610: i32;
  var $i1611: i64;
  var $i1612: i64;
  var $p1613: ref;
  var $i1614: i32;
  var $i1615: i64;
  var $i1616: i64;
  var $i1617: i64;
  var $i1618: i64;
  var $p1619: ref;
  var $i1620: i32;
  var $i1621: i64;
  var $i1622: i64;
  var $p1623: ref;
  var $p1625: ref;
  var $p1626: ref;
  var $p1628: ref;
  var $i1629: i64;
  var $i1630: i1;
  var $p1631: ref;
  var $p1632: ref;
  var $p1634: ref;
  var $p1635: ref;
  var $i1636: i64;
  var $p1637: ref;
  var $i1638: i32;
  var $i1639: i64;
  var $i1640: i64;
  var $p1641: ref;
  var $i1642: i32;
  var $i1643: i64;
  var $i1644: i64;
  var $i1645: i64;
  var $i1646: i64;
  var $p1647: ref;
  var $i1648: i32;
  var $i1649: i64;
  var $i1650: i64;
  var $p1651: ref;
  var $p1653: ref;
  var $p1654: ref;
  var $p1656: ref;
  var $i1657: i64;
  var $i1658: i1;
  var $p1659: ref;
  var $p1660: ref;
  var $p1662: ref;
  var $p1663: ref;
  var $i1664: i64;
  var $p1665: ref;
  var $i1666: i32;
  var $i1667: i64;
  var $i1668: i64;
  var $p1669: ref;
  var $i1670: i32;
  var $i1671: i64;
  var $i1672: i64;
  var $i1673: i64;
  var $i1674: i64;
  var $p1675: ref;
  var $i1676: i32;
  var $i1677: i64;
  var $i1678: i64;
  var $p1679: ref;
  var $p1681: ref;
  var $p1682: ref;
  var $p1684: ref;
  var $i1685: i64;
  var $i1686: i1;
  var $p1687: ref;
  var $p1688: ref;
  var $p1690: ref;
  var $p1691: ref;
  var $i1692: i64;
  var $p1693: ref;
  var $i1694: i32;
  var $i1695: i64;
  var $i1696: i64;
  var $p1697: ref;
  var $i1698: i32;
  var $i1699: i64;
  var $i1700: i64;
  var $i1701: i64;
  var $i1702: i64;
  var $p1703: ref;
  var $i1704: i32;
  var $i1705: i64;
  var $i1706: i64;
  var $p1707: ref;
  var $p1709: ref;
  var $p1710: ref;
  var $p1712: ref;
  var $i1713: i64;
  var $i1714: i1;
  var $p1715: ref;
  var $p1716: ref;
  var $p1718: ref;
  var $p1719: ref;
  var $i1720: i64;
  var $p1721: ref;
  var $i1722: i32;
  var $i1723: i64;
  var $i1724: i64;
  var $p1725: ref;
  var $i1726: i32;
  var $i1727: i64;
  var $i1728: i64;
  var $i1729: i64;
  var $i1730: i64;
  var $p1731: ref;
  var $i1732: i32;
  var $i1733: i64;
  var $i1734: i64;
  var $p1735: ref;
  var $p1737: ref;
  var $p1738: ref;
  var $p1740: ref;
  var $i1741: i64;
  var $i1742: i1;
  var $p1743: ref;
  var $p1744: ref;
  var $p1746: ref;
  var $p1747: ref;
  var $i1748: i64;
  var $p1749: ref;
  var $i1750: i32;
  var $i1751: i64;
  var $i1752: i64;
  var $p1753: ref;
  var $i1754: i32;
  var $i1755: i64;
  var $i1756: i64;
  var $i1757: i64;
  var $i1758: i64;
  var $p1759: ref;
  var $i1760: i32;
  var $i1761: i64;
  var $i1762: i64;
  var $p1763: ref;
  var $p1765: ref;
  var $p1766: ref;
  var $p1768: ref;
  var $i1769: i64;
  var $i1770: i1;
  var $p1771: ref;
  var $p1772: ref;
  var $p1774: ref;
  var $p1775: ref;
  var $i1776: i64;
  var $p1777: ref;
  var $i1778: i32;
  var $i1779: i64;
  var $i1780: i64;
  var $p1781: ref;
  var $i1782: i32;
  var $i1783: i64;
  var $i1784: i64;
  var $i1785: i64;
  var $i1786: i64;
  var $p1787: ref;
  var $i1788: i32;
  var $i1789: i64;
  var $i1790: i64;
  var $p1791: ref;
  var $p1793: ref;
  var $p1794: ref;
  var $p1796: ref;
  var $i1797: i64;
  var $i1798: i1;
  var $p1799: ref;
  var $p1800: ref;
  var $p1802: ref;
  var $p1803: ref;
  var $i1804: i64;
  var $p1805: ref;
  var $i1806: i32;
  var $i1807: i64;
  var $i1808: i64;
  var $p1809: ref;
  var $i1810: i32;
  var $i1811: i64;
  var $i1812: i64;
  var $i1813: i64;
  var $i1814: i64;
  var $p1815: ref;
  var $i1816: i32;
  var $i1817: i64;
  var $i1818: i64;
  var $p1819: ref;
  var $p1821: ref;
  var $p1822: ref;
  var $p1824: ref;
  var $i1825: i64;
  var $i1826: i1;
  var $p1827: ref;
  var $p1828: ref;
  var $p1830: ref;
  var $p1831: ref;
  var $i1832: i64;
  var $p1833: ref;
  var $i1834: i32;
  var $i1835: i64;
  var $i1836: i64;
  var $p1837: ref;
  var $i1838: i32;
  var $i1839: i64;
  var $i1840: i64;
  var $i1841: i64;
  var $i1842: i64;
  var $p1843: ref;
  var $i1844: i32;
  var $i1845: i64;
  var $i1846: i64;
  var $p1847: ref;
  var $p1849: ref;
  var $p1850: ref;
  var $p1852: ref;
  var $i1853: i64;
  var $i1854: i1;
  var $p1855: ref;
  var $p1856: ref;
  var $p1858: ref;
  var $p1859: ref;
  var $i1860: i64;
  var $p1861: ref;
  var $i1862: i32;
  var $i1863: i64;
  var $i1864: i64;
  var $p1865: ref;
  var $i1866: i32;
  var $i1867: i64;
  var $i1868: i64;
  var $i1869: i64;
  var $i1870: i64;
  var $p1871: ref;
  var $i1872: i32;
  var $i1873: i64;
  var $i1874: i64;
  var $p1875: ref;
  var $p1877: ref;
  var $p1878: ref;
  var $p1880: ref;
  var $i1881: i64;
  var $i1882: i1;
  var $p1883: ref;
  var $p1884: ref;
  var $p1886: ref;
  var $p1887: ref;
  var $i1888: i64;
  var $p1889: ref;
  var $i1890: i32;
  var $i1891: i64;
  var $i1892: i64;
  var $p1893: ref;
  var $i1894: i32;
  var $i1895: i64;
  var $i1896: i64;
  var $i1897: i64;
  var $i1898: i64;
  var $p1899: ref;
  var $i1900: i32;
  var $i1901: i64;
  var $i1902: i64;
  var $p1903: ref;
  var $p1905: ref;
  var $p1906: ref;
  var $p1908: ref;
  var $i1909: i64;
  var $i1910: i1;
  var $p1911: ref;
  var $p1912: ref;
  var $p1914: ref;
  var $p1915: ref;
  var $i1916: i64;
  var $p1917: ref;
  var $i1918: i32;
  var $i1919: i64;
  var $i1920: i64;
  var $p1921: ref;
  var $i1922: i32;
  var $i1923: i64;
  var $i1924: i64;
  var $i1925: i64;
  var $i1926: i64;
  var $p1927: ref;
  var $i1928: i32;
  var $i1929: i64;
  var $i1930: i64;
  var $p1931: ref;
  var $p1933: ref;
  var $p1934: ref;
  var $p1936: ref;
  var $i1937: i64;
  var $i1938: i1;
  var $p1939: ref;
  var $p1940: ref;
  var $p1942: ref;
  var $p1943: ref;
  var $i1944: i64;
  var $p1945: ref;
  var $i1946: i32;
  var $i1947: i64;
  var $i1948: i64;
  var $p1949: ref;
  var $i1950: i32;
  var $i1951: i64;
  var $i1952: i64;
  var $i1953: i64;
  var $i1954: i64;
  var $p1955: ref;
  var $i1956: i32;
  var $i1957: i64;
  var $i1958: i64;
  var $p1959: ref;
  var $p1961: ref;
  var $p1962: ref;
  var $p1964: ref;
  var $i1965: i64;
  var $i1966: i1;
  var $p1967: ref;
  var $p1968: ref;
  var $p1970: ref;
  var $p1971: ref;
  var $i1972: i64;
  var $p1973: ref;
  var $i1974: i32;
  var $i1975: i64;
  var $i1976: i64;
  var $p1977: ref;
  var $i1978: i32;
  var $i1979: i64;
  var $i1980: i64;
  var $i1981: i64;
  var $i1982: i64;
  var $p1983: ref;
  var $i1984: i32;
  var $i1985: i64;
  var $i1986: i64;
  var $p1987: ref;
  var $p1989: ref;
  var $p1990: ref;
  var $p1992: ref;
  var $i1993: i64;
  var $i1994: i1;
  var $p1995: ref;
  var $p1996: ref;
  var $p1998: ref;
  var $p1999: ref;
  var $i2000: i64;
  var $p2001: ref;
  var $i2002: i32;
  var $i2003: i64;
  var $i2004: i64;
  var $p2005: ref;
  var $i2006: i32;
  var $i2007: i64;
  var $i2008: i64;
  var $i2009: i64;
  var $i2010: i64;
  var $p2011: ref;
  var $i2012: i32;
  var $i2013: i64;
  var $i2014: i64;
  var $p2015: ref;
  var $p2017: ref;
  var $p2018: ref;
  var $p2020: ref;
  var $i2021: i64;
  var $i2022: i1;
  var $p2023: ref;
  var $p2024: ref;
  var $p2026: ref;
  var $p2027: ref;
  var $i2028: i64;
  var $p2029: ref;
  var $i2030: i32;
  var $i2031: i64;
  var $i2032: i64;
  var $p2033: ref;
  var $i2034: i32;
  var $i2035: i64;
  var $i2036: i64;
  var $i2037: i64;
  var $i2038: i64;
  var $p2039: ref;
  var $i2040: i32;
  var $i2041: i64;
  var $i2042: i64;
  var $p2043: ref;
  var $p2045: ref;
  var $p2046: ref;
  var $p2048: ref;
  var $i2049: i64;
  var $i2050: i1;
  var $p2051: ref;
  var $p2052: ref;
  var $p2054: ref;
  var $p2055: ref;
  var $i2056: i64;
  var $p2057: ref;
  var $i2058: i32;
  var $i2059: i64;
  var $i2060: i64;
  var $p2061: ref;
  var $i2062: i32;
  var $i2063: i64;
  var $i2064: i64;
  var $i2065: i64;
  var $i2066: i64;
  var $p2067: ref;
  var $i2068: i32;
  var $i2069: i64;
  var $i2070: i64;
  var $p2071: ref;
  var $p2073: ref;
  var $p2074: ref;
  var $p2076: ref;
  var $i2077: i64;
  var $i2078: i1;
  var $p2079: ref;
  var $p2080: ref;
  var $p2082: ref;
  var $p2083: ref;
  var $i2084: i64;
  var $p2085: ref;
  var $i2086: i32;
  var $i2087: i64;
  var $i2088: i64;
  var $p2089: ref;
  var $i2090: i32;
  var $i2091: i64;
  var $i2092: i64;
  var $i2093: i64;
  var $i2094: i64;
  var $p2095: ref;
  var $i2096: i32;
  var $i2097: i64;
  var $i2098: i64;
  var $p2099: ref;
  var $p2101: ref;
  var $p2102: ref;
  var $p2104: ref;
  var $i2105: i64;
  var $i2106: i1;
  var $p2107: ref;
  var $p2108: ref;
  var $p2110: ref;
  var $p2111: ref;
  var $i2112: i64;
  var $p2113: ref;
  var $i2114: i32;
  var $i2115: i64;
  var $i2116: i64;
  var $p2117: ref;
  var $i2118: i32;
  var $i2119: i64;
  var $i2120: i64;
  var $i2121: i64;
  var $i2122: i64;
  var $p2123: ref;
  var $i2124: i32;
  var $i2125: i64;
  var $i2126: i64;
  var $p2127: ref;
  var $p2129: ref;
  var $p2130: ref;
  var $p2132: ref;
  var $i2133: i64;
  var $i2134: i1;
  var $p2135: ref;
  var $p2136: ref;
  var $p2138: ref;
  var $p2139: ref;
  var $i2140: i64;
  var $p2141: ref;
  var $i2142: i32;
  var $i2143: i64;
  var $i2144: i64;
  var $p2145: ref;
  var $i2146: i32;
  var $i2147: i64;
  var $i2148: i64;
  var $i2149: i64;
  var $i2150: i64;
  var $p2151: ref;
  var $i2152: i32;
  var $i2153: i64;
  var $i2154: i64;
  var $p2155: ref;
  var $p2157: ref;
  var $p2158: ref;
  var $p2160: ref;
  var $i2161: i64;
  var $i2162: i1;
  var $p2163: ref;
  var $p2164: ref;
  var $p2166: ref;
  var $p2167: ref;
  var $i2168: i64;
  var $p2169: ref;
  var $i2170: i32;
  var $i2171: i64;
  var $i2172: i64;
  var $p2173: ref;
  var $i2174: i32;
  var $i2175: i64;
  var $i2176: i64;
  var $i2177: i64;
  var $i2178: i64;
  var $p2179: ref;
  var $i2180: i32;
  var $i2181: i64;
  var $i2182: i64;
  var $p2183: ref;
  var $p2185: ref;
  var $p2186: ref;
  var $p2188: ref;
  var $i2189: i64;
  var $i2190: i1;
  var $p2191: ref;
  var $p2192: ref;
  var $p2194: ref;
  var $p2195: ref;
  var $i2196: i64;
  var $p2197: ref;
  var $i2198: i32;
  var $i2199: i64;
  var $i2200: i64;
  var $p2201: ref;
  var $i2202: i32;
  var $i2203: i64;
  var $i2204: i64;
  var $i2205: i64;
  var $i2206: i64;
  var $p2207: ref;
  var $i2208: i32;
  var $i2209: i64;
  var $i2210: i64;
  var $p2211: ref;
  var $p2213: ref;
  var $p2214: ref;
  var $p2216: ref;
  var $i2217: i64;
  var $i2218: i1;
  var $p2219: ref;
  var $p2220: ref;
  var $p2222: ref;
  var $p2223: ref;
  var $i2224: i64;
  var $p2225: ref;
  var $i2226: i32;
  var $i2227: i64;
  var $i2228: i64;
  var $p2229: ref;
  var $i2230: i32;
  var $i2231: i64;
  var $i2232: i64;
  var $i2233: i64;
  var $i2234: i64;
  var $p2235: ref;
  var $i2236: i32;
  var $i2237: i64;
  var $i2238: i64;
  var $p2239: ref;
  var $p2241: ref;
  var $p2242: ref;
  var $p2244: ref;
  var $i2245: i64;
  var $i2246: i1;
  var $p2247: ref;
  var $p2248: ref;
  var $p2250: ref;
  var $p2251: ref;
  var $i2252: i64;
  var $p2253: ref;
  var $i2254: i32;
  var $i2255: i64;
  var $i2256: i64;
  var $p2257: ref;
  var $i2258: i32;
  var $i2259: i64;
  var $i2260: i64;
  var $i2261: i64;
  var $i2262: i64;
  var $p2263: ref;
  var $i2264: i32;
  var $i2265: i64;
  var $i2266: i64;
  var $p2267: ref;
  var $p2269: ref;
  var $p2270: ref;
  var $p2272: ref;
  var $i2273: i64;
  var $i2274: i1;
  var $p2275: ref;
  var $p2276: ref;
  var $p2278: ref;
  var $p2279: ref;
  var $i2280: i64;
  var $p2281: ref;
  var $i2282: i32;
  var $i2283: i64;
  var $i2284: i64;
  var $p2285: ref;
  var $i2286: i32;
  var $i2287: i64;
  var $i2288: i64;
  var $i2289: i64;
  var $i2290: i64;
  var $p2291: ref;
  var $i2292: i32;
  var $i2293: i64;
  var $i2294: i64;
  var $p2295: ref;
  var $p2297: ref;
  var $p2298: ref;
  var $p2300: ref;
  var $i2301: i64;
  var $i2302: i1;
  var $p2303: ref;
  var $p2304: ref;
  var $p2306: ref;
  var $p2307: ref;
  var $i2308: i64;
  var $p2309: ref;
  var $i2310: i32;
  var $i2311: i64;
  var $i2312: i64;
  var $p2313: ref;
  var $i2314: i32;
  var $i2315: i64;
  var $i2316: i64;
  var $i2317: i64;
  var $i2318: i64;
  var $p2319: ref;
  var $i2320: i32;
  var $i2321: i64;
  var $i2322: i64;
  var $p2323: ref;
  var $p2325: ref;
  var $p2326: ref;
  var $p2328: ref;
  var $i2329: i64;
  var $i2330: i1;
  var $p2331: ref;
  var $p2332: ref;
  var $p2334: ref;
  var $p2335: ref;
  var $i2336: i64;
  var $p2337: ref;
  var $i2338: i32;
  var $i2339: i64;
  var $i2340: i64;
  var $p2341: ref;
  var $i2342: i32;
  var $i2343: i64;
  var $i2344: i64;
  var $i2345: i64;
  var $i2346: i64;
  var $p2347: ref;
  var $i2348: i32;
  var $i2349: i64;
  var $i2350: i64;
  var $p2351: ref;
  var $p2353: ref;
  var $p2354: ref;
  var $p2356: ref;
  var $i2357: i64;
  var $i2358: i1;
  var $p2359: ref;
  var $p2360: ref;
  var $p2362: ref;
  var $p2363: ref;
  var $i2364: i64;
  var $p2365: ref;
  var $i2366: i32;
  var $i2367: i64;
  var $i2368: i64;
  var $p2369: ref;
  var $i2370: i32;
  var $i2371: i64;
  var $i2372: i64;
  var $i2373: i64;
  var $i2374: i64;
  var $p2375: ref;
  var $i2376: i32;
  var $i2377: i64;
  var $i2378: i64;
  var $p2379: ref;
  var $p2381: ref;
  var $p2382: ref;
  var $p2384: ref;
  var $i2385: i64;
  var $i2386: i1;
  var $p2387: ref;
  var $p2388: ref;
  var $p2390: ref;
  var $p2391: ref;
  var $i2392: i64;
  var $p2393: ref;
  var $i2394: i32;
  var $i2395: i64;
  var $i2396: i64;
  var $p2397: ref;
  var $i2398: i32;
  var $i2399: i64;
  var $i2400: i64;
  var $i2401: i64;
  var $i2402: i64;
  var $p2403: ref;
  var $i2404: i32;
  var $i2405: i64;
  var $i2406: i64;
  var $p2407: ref;
  var $p2409: ref;
  var $p2410: ref;
  var $p2412: ref;
  var $i2413: i64;
  var $i2414: i1;
  var $p2415: ref;
  var $p2416: ref;
  var $p2418: ref;
  var $p2419: ref;
  var $i2420: i64;
  var $p2421: ref;
  var $i2422: i32;
  var $i2423: i64;
  var $i2424: i64;
  var $p2425: ref;
  var $i2426: i32;
  var $i2427: i64;
  var $i2428: i64;
  var $i2429: i64;
  var $i2430: i64;
  var $p2431: ref;
  var $i2432: i32;
  var $i2433: i64;
  var $i2434: i64;
  var $p2435: ref;
  var $p2437: ref;
  var $p2438: ref;
  var $p2440: ref;
  var $i2441: i64;
  var $i2442: i1;
  var $p2443: ref;
  var $p2444: ref;
  var $p2446: ref;
  var $p2447: ref;
  var $i2448: i64;
  var $p2449: ref;
  var $i2450: i32;
  var $i2451: i64;
  var $i2452: i64;
  var $p2453: ref;
  var $i2454: i32;
  var $i2455: i64;
  var $i2456: i64;
  var $i2457: i64;
  var $i2458: i64;
  var $p2459: ref;
  var $i2460: i32;
  var $i2461: i64;
  var $i2462: i64;
  var $p2463: ref;
  var $p2465: ref;
  var $p2466: ref;
  var $p2468: ref;
  var $i2469: i64;
  var $i2470: i1;
  var $p2471: ref;
  var $p2472: ref;
  var $p2474: ref;
  var $p2475: ref;
  var $i2476: i64;
  var $p2477: ref;
  var $i2478: i32;
  var $i2479: i64;
  var $i2480: i64;
  var $p2481: ref;
  var $i2482: i32;
  var $i2483: i64;
  var $i2484: i64;
  var $i2485: i64;
  var $i2486: i64;
  var $p2487: ref;
  var $i2488: i32;
  var $i2489: i64;
  var $i2490: i64;
  var $p2491: ref;
  var $p2493: ref;
  var $p2494: ref;
  var $p2496: ref;
  var $i2497: i64;
  var $i2498: i1;
  var $p2499: ref;
  var $p2500: ref;
  var $p2502: ref;
  var $p2503: ref;
  var $i2504: i64;
  var $p2505: ref;
  var $i2506: i32;
  var $i2507: i64;
  var $i2508: i64;
  var $p2509: ref;
  var $i2510: i32;
  var $i2511: i64;
  var $i2512: i64;
  var $i2513: i64;
  var $i2514: i64;
  var $p2515: ref;
  var $i2516: i32;
  var $i2517: i64;
  var $i2518: i64;
  var $p2519: ref;
  var $p2521: ref;
  var $p2522: ref;
  var $p2524: ref;
  var $i2525: i64;
  var $i2526: i1;
  var $p2527: ref;
  var $p2528: ref;
  var $p2530: ref;
  var $p2531: ref;
  var $i2532: i64;
  var $p2533: ref;
  var $i2534: i32;
  var $i2535: i64;
  var $i2536: i64;
  var $p2537: ref;
  var $i2538: i32;
  var $i2539: i64;
  var $i2540: i64;
  var $i2541: i64;
  var $i2542: i64;
  var $p2543: ref;
  var $i2544: i32;
  var $i2545: i64;
  var $i2546: i64;
  var $p2547: ref;
  var $p2549: ref;
  var $p2550: ref;
  var $p2552: ref;
  var $i2553: i64;
  var $i2554: i1;
  var $p2555: ref;
  var $p2556: ref;
  var $p2558: ref;
  var $p2559: ref;
  var $i2560: i64;
  var $p2561: ref;
  var $i2562: i32;
  var $i2563: i64;
  var $i2564: i64;
  var $p2565: ref;
  var $i2566: i32;
  var $i2567: i64;
  var $i2568: i64;
  var $i2569: i64;
  var $i2570: i64;
  var $p2571: ref;
  var $i2572: i32;
  var $i2573: i64;
  var $i2574: i64;
  var $p2575: ref;
  var $p2577: ref;
  var $p2578: ref;
  var $p2580: ref;
  var $i2581: i64;
  var $i2582: i1;
  var $p2583: ref;
  var $p2584: ref;
  var $p2586: ref;
  var $p2587: ref;
  var $i2588: i64;
  var $p2589: ref;
  var $i2590: i32;
  var $i2591: i64;
  var $i2592: i64;
  var $p2593: ref;
  var $i2594: i32;
  var $i2595: i64;
  var $i2596: i64;
  var $i2597: i64;
  var $i2598: i64;
  var $p2599: ref;
  var $i2600: i32;
  var $i2601: i64;
  var $i2602: i64;
  var $p2603: ref;
  var $p2605: ref;
  var $p2606: ref;
  var $p2608: ref;
  var $i2609: i64;
  var $i2610: i1;
  var $p2611: ref;
  var $p2612: ref;
  var $p2614: ref;
  var $p2615: ref;
  var $i2616: i64;
  var $p2617: ref;
  var $i2618: i32;
  var $i2619: i64;
  var $i2620: i64;
  var $p2621: ref;
  var $i2622: i32;
  var $i2623: i64;
  var $i2624: i64;
  var $i2625: i64;
  var $i2626: i64;
  var $p2627: ref;
  var $i2628: i32;
  var $i2629: i64;
  var $i2630: i64;
  var $p2631: ref;
  var $p2633: ref;
  var $p2634: ref;
  var $p2636: ref;
  var $i2637: i64;
  var $i2638: i1;
  var $p2639: ref;
  var $p2640: ref;
  var $p2642: ref;
  var $p2643: ref;
  var $i2644: i64;
  var $p2645: ref;
  var $i2646: i32;
  var $i2647: i64;
  var $i2648: i64;
  var $p2649: ref;
  var $i2650: i32;
  var $i2651: i64;
  var $i2652: i64;
  var $i2653: i64;
  var $i2654: i64;
  var $p2655: ref;
  var $i2656: i32;
  var $i2657: i64;
  var $i2658: i64;
  var $p2659: ref;
  var $p2661: ref;
  var $p2662: ref;
  var $p2664: ref;
  var $i2665: i64;
  var $i2666: i1;
  var $p2667: ref;
  var $p2668: ref;
  var $p2670: ref;
  var $p2671: ref;
  var $i2672: i64;
  var $p2673: ref;
  var $i2674: i32;
  var $i2675: i64;
  var $i2676: i64;
  var $p2677: ref;
  var $i2678: i32;
  var $i2679: i64;
  var $i2680: i64;
  var $i2681: i64;
  var $i2682: i64;
  var $p2683: ref;
  var $i2684: i32;
  var $i2685: i64;
  var $i2686: i64;
  var $p2687: ref;
  var $p2689: ref;
  var $p2690: ref;
  var $p2692: ref;
  var $i2693: i64;
  var $i2694: i1;
  var $p2695: ref;
  var $p2696: ref;
  var $p2698: ref;
  var $p2699: ref;
  var $i2700: i64;
  var $p2701: ref;
  var $i2702: i32;
  var $i2703: i64;
  var $i2704: i64;
  var $p2705: ref;
  var $i2706: i32;
  var $i2707: i64;
  var $i2708: i64;
  var $i2709: i64;
  var $i2710: i64;
  var $p2711: ref;
  var $i2712: i32;
  var $i2713: i64;
  var $i2714: i64;
  var $p2715: ref;
  var $p2717: ref;
  var $p2718: ref;
  var $p2720: ref;
  var $i2721: i64;
  var $i2722: i1;
  var $p2723: ref;
  var $p2724: ref;
  var $p2726: ref;
  var $p2727: ref;
  var $i2728: i64;
  var $p2729: ref;
  var $i2730: i32;
  var $i2731: i64;
  var $i2732: i64;
  var $p2733: ref;
  var $i2734: i32;
  var $i2735: i64;
  var $i2736: i64;
  var $i2737: i64;
  var $i2738: i64;
  var $p2739: ref;
  var $i2740: i32;
  var $i2741: i64;
  var $i2742: i64;
  var $p2743: ref;
  var $p2745: ref;
  var $p2746: ref;
  var $p2748: ref;
  var $i2749: i64;
  var $i2750: i1;
  var $p2751: ref;
  var $p2752: ref;
  var $p2754: ref;
  var $p2755: ref;
  var $i2756: i64;
  var $p2757: ref;
  var $i2758: i32;
  var $i2759: i64;
  var $i2760: i64;
  var $p2761: ref;
  var $i2762: i32;
  var $i2763: i64;
  var $i2764: i64;
  var $i2765: i64;
  var $i2766: i64;
  var $p2767: ref;
  var $i2768: i32;
  var $i2769: i64;
  var $i2770: i64;
  var $p2771: ref;
  var $p2773: ref;
  var $p2774: ref;
  var $p2776: ref;
  var $i2777: i64;
  var $i2778: i1;
  var $p2779: ref;
  var $p2780: ref;
  var $p2782: ref;
  var $p2783: ref;
  var $i2784: i64;
  var $p2785: ref;
  var $i2786: i32;
  var $i2787: i64;
  var $i2788: i64;
  var $p2789: ref;
  var $i2790: i32;
  var $i2791: i64;
  var $i2792: i64;
  var $i2793: i64;
  var $i2794: i64;
  var $p2795: ref;
  var $i2796: i32;
  var $i2797: i64;
  var $i2798: i64;
  var $p2799: ref;
  var $p2801: ref;
  var $p2802: ref;
  var $p2804: ref;
  var $i2805: i64;
  var $i2806: i1;
  var $p2807: ref;
  var $p2808: ref;
  var $p2810: ref;
  var $p2811: ref;
  var $i2812: i64;
  var $p2813: ref;
  var $i2814: i32;
  var $i2815: i64;
  var $i2816: i64;
  var $p2817: ref;
  var $i2818: i32;
  var $i2819: i64;
  var $i2820: i64;
  var $i2821: i64;
  var $i2822: i64;
  var $p2823: ref;
  var $i2824: i32;
  var $i2825: i64;
  var $i2826: i64;
  var $p2827: ref;
  var $p2829: ref;
  var $p2830: ref;
  var $p2832: ref;
  var $i2833: i64;
  var $i2834: i1;
  var $p2835: ref;
  var $p2836: ref;
  var $p2838: ref;
  var $p2839: ref;
  var $i2840: i64;
  var $p2841: ref;
  var $i2842: i32;
  var $i2843: i64;
  var $i2844: i64;
  var $p2845: ref;
  var $i2846: i32;
  var $i2847: i64;
  var $i2848: i64;
  var $i2849: i64;
  var $i2850: i64;
  var $p2851: ref;
  var $i2852: i32;
  var $i2853: i64;
  var $i2854: i64;
  var $p2855: ref;
  var $p2857: ref;
  var $p2858: ref;
  var $p2860: ref;
  var $i2861: i64;
  var $i2862: i1;
  var $p2863: ref;
  var $p2864: ref;
  var $p2866: ref;
  var $p2867: ref;
  var $i2868: i64;
  var $p2869: ref;
  var $i2870: i32;
  var $i2871: i64;
  var $i2872: i64;
  var $p2873: ref;
  var $i2874: i32;
  var $i2875: i64;
  var $i2876: i64;
  var $i2877: i64;
  var $i2878: i64;
  var $p2879: ref;
  var $i2880: i32;
  var $i2881: i64;
  var $i2882: i64;
  var $p2883: ref;
  var $p2885: ref;
  var $p2886: ref;
  var $p2888: ref;
  var $i2889: i64;
  var $i2890: i1;
  var $p2891: ref;
  var $p2892: ref;
  var $p2894: ref;
  var $p2895: ref;
  var $i2896: i64;
  var $p2897: ref;
  var $i2898: i32;
  var $i2899: i64;
  var $i2900: i64;
  var $p2901: ref;
  var $i2902: i32;
  var $i2903: i64;
  var $i2904: i64;
  var $i2905: i64;
  var $i2906: i64;
  var $p2907: ref;
  var $i2908: i32;
  var $i2909: i64;
  var $i2910: i64;
  var $p2911: ref;
  var $p2913: ref;
  var $p2914: ref;
  var $p2916: ref;
  var $i2917: i64;
  var $i2918: i1;
  var $p2919: ref;
  var $p2920: ref;
  var $p2922: ref;
  var $p2923: ref;
  var $i2924: i64;
  var $p2925: ref;
  var $i2926: i32;
  var $i2927: i64;
  var $i2928: i64;
  var $p2929: ref;
  var $i2930: i32;
  var $i2931: i64;
  var $i2932: i64;
  var $i2933: i64;
  var $i2934: i64;
  var $p2935: ref;
  var $i2936: i32;
  var $i2937: i64;
  var $i2938: i64;
  var $p2939: ref;
  var $p2941: ref;
  var $p2942: ref;
  var $p2944: ref;
  var $i2945: i64;
  var $i2946: i1;
  var $p2947: ref;
  var $p2948: ref;
  var $p2950: ref;
  var $p2951: ref;
  var $i2952: i64;
  var $p2953: ref;
  var $i2954: i32;
  var $i2955: i64;
  var $i2956: i64;
  var $p2957: ref;
  var $i2958: i32;
  var $i2959: i64;
  var $i2960: i64;
  var $i2961: i64;
  var $i2962: i64;
  var $p2963: ref;
  var $i2964: i32;
  var $i2965: i64;
  var $i2966: i64;
  var $p2967: ref;
  var $p2969: ref;
  var $p2970: ref;
  var $p2972: ref;
  var $i2973: i64;
  var $i2974: i1;
  var $p2975: ref;
  var $p2976: ref;
  var $p2978: ref;
  var $p2979: ref;
  var $i2980: i64;
  var $p2981: ref;
  var $i2982: i32;
  var $i2983: i64;
  var $i2984: i64;
  var $p2985: ref;
  var $i2986: i32;
  var $i2987: i64;
  var $i2988: i64;
  var $i2989: i64;
  var $i2990: i64;
  var $p2991: ref;
  var $i2992: i32;
  var $i2993: i64;
  var $i2994: i64;
  var $p2995: ref;
  var $p2997: ref;
  var $p2998: ref;
  var $p3000: ref;
  var $i3001: i64;
  var $i3002: i1;
  var $p3003: ref;
  var $p3004: ref;
  var $p3006: ref;
  var $p3007: ref;
  var $i3008: i64;
  var $p3009: ref;
  var $i3010: i32;
  var $i3011: i64;
  var $i3012: i64;
  var $p3013: ref;
  var $i3014: i32;
  var $i3015: i64;
  var $i3016: i64;
  var $i3017: i64;
  var $i3018: i64;
  var $p3019: ref;
  var $i3020: i32;
  var $i3021: i64;
  var $i3022: i64;
  var $p3023: ref;
  var $p3025: ref;
  var $p3026: ref;
  var $p3028: ref;
  var $i3029: i64;
  var $i3030: i1;
  var $p3031: ref;
  var $p3032: ref;
  var $p3034: ref;
  var $p3035: ref;
  var $i3036: i64;
  var $p3037: ref;
  var $i3038: i32;
  var $i3039: i64;
  var $i3040: i64;
  var $p3041: ref;
  var $i3042: i32;
  var $i3043: i64;
  var $i3044: i64;
  var $i3045: i64;
  var $i3046: i64;
  var $p3047: ref;
  var $i3048: i32;
  var $i3049: i64;
  var $i3050: i64;
  var $p3051: ref;
  var $p3053: ref;
  var $p3054: ref;
  var $p3056: ref;
  var $i3057: i64;
  var $i3058: i1;
  var $p3059: ref;
  var $p3060: ref;
  var $p3062: ref;
  var $p3063: ref;
  var $i3064: i64;
  var $p3065: ref;
  var $i3066: i32;
  var $i3067: i64;
  var $i3068: i64;
  var $p3069: ref;
  var $i3070: i32;
  var $i3071: i64;
  var $i3072: i64;
  var $i3073: i64;
  var $i3074: i64;
  var $p3075: ref;
  var $i3076: i32;
  var $i3077: i64;
  var $i3078: i64;
  var $p3079: ref;
  var $p3081: ref;
  var $p3082: ref;
  var $p3084: ref;
  var $i3085: i64;
  var $i3086: i1;
  var $p3087: ref;
  var $p3088: ref;
  var $p3090: ref;
  var $p3091: ref;
  var $i3092: i64;
  var $p3093: ref;
  var $i3094: i32;
  var $i3095: i64;
  var $i3096: i64;
  var $p3097: ref;
  var $i3098: i32;
  var $i3099: i64;
  var $i3100: i64;
  var $i3101: i64;
  var $i3102: i64;
  var $p3103: ref;
  var $i3104: i32;
  var $i3105: i64;
  var $i3106: i64;
  var $p3107: ref;
  var $p3109: ref;
  var $p3110: ref;
  var $p3112: ref;
  var $i3113: i64;
  var $i3114: i1;
  var $p3115: ref;
  var $p3116: ref;
  var $p3118: ref;
  var $p3119: ref;
  var $i3120: i64;
  var $p3121: ref;
  var $i3122: i32;
  var $i3123: i64;
  var $i3124: i64;
  var $p3125: ref;
  var $i3126: i32;
  var $i3127: i64;
  var $i3128: i64;
  var $i3129: i64;
  var $i3130: i64;
  var $p3131: ref;
  var $i3132: i32;
  var $i3133: i64;
  var $i3134: i64;
  var $p3135: ref;
  var $p3137: ref;
  var $p3138: ref;
  var $p3140: ref;
  var $i3141: i64;
  var $i3142: i1;
  var $p3143: ref;
  var $p3144: ref;
  var $p3146: ref;
  var $p3147: ref;
  var $i3148: i64;
  var $p3149: ref;
  var $i3150: i32;
  var $i3151: i64;
  var $i3152: i64;
  var $p3153: ref;
  var $i3154: i32;
  var $i3155: i64;
  var $i3156: i64;
  var $i3157: i64;
  var $i3158: i64;
  var $p3159: ref;
  var $i3160: i32;
  var $i3161: i64;
  var $i3162: i64;
  var $p3163: ref;
  var $p3165: ref;
  var $p3166: ref;
  var $p3168: ref;
  var $i3169: i64;
  var $i3170: i1;
  var $p3171: ref;
  var $p3172: ref;
  var $p3174: ref;
  var $p3175: ref;
  var $i3176: i64;
  var $p3177: ref;
  var $i3178: i32;
  var $i3179: i64;
  var $i3180: i64;
  var $p3181: ref;
  var $i3182: i32;
  var $i3183: i64;
  var $i3184: i64;
  var $i3185: i64;
  var $i3186: i64;
  var $p3187: ref;
  var $i3188: i32;
  var $i3189: i64;
  var $i3190: i64;
  var $p3191: ref;
  var $p3193: ref;
  var $p3194: ref;
  var $p3196: ref;
  var $i3197: i64;
  var $i3198: i1;
  var $p3199: ref;
  var $p3200: ref;
  var $p3202: ref;
  var $p3203: ref;
  var $i3204: i64;
  var $p3205: ref;
  var $i3206: i32;
  var $i3207: i64;
  var $i3208: i64;
  var $p3209: ref;
  var $i3210: i32;
  var $i3211: i64;
  var $i3212: i64;
  var $i3213: i64;
  var $i3214: i64;
  var $p3215: ref;
  var $i3216: i32;
  var $i3217: i64;
  var $i3218: i64;
  var $p3219: ref;
  var $p3221: ref;
  var $p3222: ref;
  var $p3224: ref;
  var $i3225: i64;
  var $i3226: i1;
  var $p3227: ref;
  var $p3228: ref;
  var $p3230: ref;
  var $p3231: ref;
  var $i3232: i64;
  var $p3233: ref;
  var $i3234: i32;
  var $i3235: i64;
  var $i3236: i64;
  var $p3237: ref;
  var $i3238: i32;
  var $i3239: i64;
  var $i3240: i64;
  var $i3241: i64;
  var $i3242: i64;
  var $p3243: ref;
  var $i3244: i32;
  var $i3245: i64;
  var $i3246: i64;
  var $p3247: ref;
  var $p3249: ref;
  var $p3250: ref;
  var $p3252: ref;
  var $i3253: i64;
  var $i3254: i1;
  var $p3255: ref;
  var $p3256: ref;
  var $p3258: ref;
  var $p3259: ref;
  var $i3260: i64;
  var $p3261: ref;
  var $i3262: i32;
  var $i3263: i64;
  var $i3264: i64;
  var $p3265: ref;
  var $i3266: i32;
  var $i3267: i64;
  var $i3268: i64;
  var $i3269: i64;
  var $i3270: i64;
  var $p3271: ref;
  var $i3272: i32;
  var $i3273: i64;
  var $i3274: i64;
  var $p3275: ref;
  var $p3277: ref;
  var $p3278: ref;
  var $p3280: ref;
  var $i3281: i64;
  var $i3282: i1;
  var $p3283: ref;
  var $p3284: ref;
  var $p3286: ref;
  var $p3287: ref;
  var $i3288: i64;
  var $p3289: ref;
  var $i3290: i32;
  var $i3291: i64;
  var $i3292: i64;
  var $p3293: ref;
  var $i3294: i32;
  var $i3295: i64;
  var $i3296: i64;
  var $i3297: i64;
  var $i3298: i64;
  var $p3299: ref;
  var $i3300: i32;
  var $i3301: i64;
  var $i3302: i64;
  var $p3303: ref;
  var $p3305: ref;
  var $p3306: ref;
  var $p3308: ref;
  var $i3309: i64;
  var $i3310: i1;
  var $p3311: ref;
  var $p3312: ref;
  var $p3314: ref;
  var $p3315: ref;
  var $i3316: i64;
  var $p3317: ref;
  var $i3318: i32;
  var $i3319: i64;
  var $i3320: i64;
  var $p3321: ref;
  var $i3322: i32;
  var $i3323: i64;
  var $i3324: i64;
  var $i3325: i64;
  var $i3326: i64;
  var $p3327: ref;
  var $i3328: i32;
  var $i3329: i64;
  var $i3330: i64;
  var $p3331: ref;
  var $p3333: ref;
  var $p3334: ref;
  var $p3336: ref;
  var $i3337: i64;
  var $i3338: i1;
  var $p3339: ref;
  var $p3340: ref;
  var $p3342: ref;
  var $p3343: ref;
  var $i3344: i64;
  var $p3345: ref;
  var $i3346: i32;
  var $i3347: i64;
  var $i3348: i64;
  var $p3349: ref;
  var $i3350: i32;
  var $i3351: i64;
  var $i3352: i64;
  var $i3353: i64;
  var $i3354: i64;
  var $p3355: ref;
  var $i3356: i32;
  var $i3357: i64;
  var $i3358: i64;
  var $p3359: ref;
  var $p3361: ref;
  var $p3362: ref;
  var $p3364: ref;
  var $i3365: i64;
  var $i3366: i1;
  var $p3367: ref;
  var $p3368: ref;
  var $p3370: ref;
  var $p3371: ref;
  var $i3372: i64;
  var $p3373: ref;
  var $i3374: i32;
  var $i3375: i64;
  var $i3376: i64;
  var $p3377: ref;
  var $i3378: i32;
  var $i3379: i64;
  var $i3380: i64;
  var $i3381: i64;
  var $i3382: i64;
  var $p3383: ref;
  var $i3384: i32;
  var $i3385: i64;
  var $i3386: i64;
  var $p3387: ref;
  var $p3389: ref;
  var $p3390: ref;
  var $p3392: ref;
  var $i3393: i64;
  var $i3394: i1;
  var $p3395: ref;
  var $p3396: ref;
  var $p3398: ref;
  var $p3399: ref;
  var $i3400: i64;
  var $p3401: ref;
  var $i3402: i32;
  var $i3403: i64;
  var $i3404: i64;
  var $p3405: ref;
  var $i3406: i32;
  var $i3407: i64;
  var $i3408: i64;
  var $i3409: i64;
  var $i3410: i64;
  var $p3411: ref;
  var $i3412: i32;
  var $i3413: i64;
  var $i3414: i64;
  var $p3415: ref;
  var $p3417: ref;
  var $p3418: ref;
  var $p3420: ref;
  var $i3421: i64;
  var $i3422: i1;
  var $p3423: ref;
  var $p3424: ref;
  var $p3426: ref;
  var $p3427: ref;
  var $i3428: i64;
  var $p3429: ref;
  var $i3430: i32;
  var $i3431: i64;
  var $i3432: i64;
  var $p3433: ref;
  var $i3434: i32;
  var $i3435: i64;
  var $i3436: i64;
  var $i3437: i64;
  var $i3438: i64;
  var $p3439: ref;
  var $i3440: i32;
  var $i3441: i64;
  var $i3442: i64;
  var $p3443: ref;
  var $p3445: ref;
  var $p3446: ref;
  var $p3448: ref;
  var $i3449: i64;
  var $i3450: i1;
  var $p3451: ref;
  var $p3452: ref;
  var $p3454: ref;
  var $p3455: ref;
  var $i3456: i64;
  var $p3457: ref;
  var $i3458: i32;
  var $i3459: i64;
  var $i3460: i64;
  var $p3461: ref;
  var $i3462: i32;
  var $i3463: i64;
  var $i3464: i64;
  var $i3465: i64;
  var $i3466: i64;
  var $p3467: ref;
  var $i3468: i32;
  var $i3469: i64;
  var $i3470: i64;
  var $p3471: ref;
  var $p3473: ref;
  var $p3474: ref;
  var $p3476: ref;
  var $i3477: i64;
  var $i3478: i1;
  var $p3479: ref;
  var $p3480: ref;
  var $p3482: ref;
  var $p3483: ref;
  var $i3484: i64;
  var $p3485: ref;
  var $i3486: i32;
  var $i3487: i64;
  var $i3488: i64;
  var $p3489: ref;
  var $i3490: i32;
  var $i3491: i64;
  var $i3492: i64;
  var $i3493: i64;
  var $i3494: i64;
  var $p3495: ref;
  var $i3496: i32;
  var $i3497: i64;
  var $i3498: i64;
  var $p3499: ref;
  var $p3501: ref;
  var $p3502: ref;
  var $p3504: ref;
  var $i3505: i64;
  var $i3506: i1;
  var $p3507: ref;
  var $p3508: ref;
  var $p3510: ref;
  var $p3511: ref;
  var $i3512: i64;
  var $p3513: ref;
  var $i3514: i32;
  var $i3515: i64;
  var $i3516: i64;
  var $p3517: ref;
  var $i3518: i32;
  var $i3519: i64;
  var $i3520: i64;
  var $i3521: i64;
  var $i3522: i64;
  var $p3523: ref;
  var $i3524: i32;
  var $i3525: i64;
  var $i3526: i64;
  var $p3527: ref;
  var $p3529: ref;
  var $p3530: ref;
  var $p3532: ref;
  var $i3533: i64;
  var $i3534: i1;
  var $p3535: ref;
  var $p3536: ref;
  var $p3538: ref;
  var $p3539: ref;
  var $i3540: i64;
  var $p3541: ref;
  var $i3542: i32;
  var $i3543: i64;
  var $i3544: i64;
  var $p3545: ref;
  var $i3546: i32;
  var $i3547: i64;
  var $i3548: i64;
  var $i3549: i64;
  var $i3550: i64;
  var $p3551: ref;
  var $i3552: i32;
  var $i3553: i64;
  var $i3554: i64;
  var $p3555: ref;
  var $p3557: ref;
  var $p3558: ref;
  var $p3560: ref;
  var $i3561: i64;
  var $i3562: i1;
  var $p3563: ref;
  var $p3564: ref;
  var $p3566: ref;
  var $p3567: ref;
  var $i3568: i64;
  var $p3569: ref;
  var $i3570: i32;
  var $i3571: i64;
  var $i3572: i64;
  var $p3573: ref;
  var $i3574: i32;
  var $i3575: i64;
  var $i3576: i64;
  var $i3577: i64;
  var $i3578: i64;
  var $p3579: ref;
  var $i3580: i32;
  var $i3581: i64;
  var $i3582: i64;
  var $p3583: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(0, 8));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(0, 8));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(1, 8));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(1, 8));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p30);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(2, 8));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(2, 8));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p58);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(3, 8));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(3, 8));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $0.ref);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p86);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(4, 8));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(4, 8));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $0.ref);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p114);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(5, 8));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(5, 8));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p144, $0.ref);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p142);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(6, 8));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(6, 8));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, $0.ref);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p170);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(7, 8));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(7, 8));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, $0.ref);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p198);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(8, 8));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(8, 8));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p228, $0.ref);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i229 := $p2i.ref.i64($p226);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i230 := $ne.i64($i229, 0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(9, 8));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(9, 8));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p256, $0.ref);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p254);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i258 := $ne.i64($i257, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(10, 8));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(10, 8));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p284, $0.ref);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p282);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i286 := $ne.i64($i285, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(11, 8));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(11, 8));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p312, $0.ref);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i313 := $p2i.ref.i64($p310);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i314 := $ne.i64($i313, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(12, 8));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(12, 8));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p340, $0.ref);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i341 := $p2i.ref.i64($p338);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i342 := $ne.i64($i341, 0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(13, 8));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(13, 8));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p368, $0.ref);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p366);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i370 := $ne.i64($i369, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(14, 8));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.0, $p393);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(14, 8));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p396, $0.ref);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p394);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i398 := $ne.i64($i397, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(15, 8));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(15, 8));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p424, $0.ref);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i425 := $p2i.ref.i64($p422);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i426 := $ne.i64($i425, 0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(16, 8));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(16, 8));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p452, $0.ref);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i453 := $p2i.ref.i64($p450);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i454 := $ne.i64($i453, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(17, 8));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.0, $p477);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(17, 8));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p480, $0.ref);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i481 := $p2i.ref.i64($p478);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i482 := $ne.i64($i481, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(18, 8));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(18, 8));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p508, $0.ref);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i509 := $p2i.ref.i64($p506);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i510 := $ne.i64($i509, 0);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i510} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(19, 8));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.0, $p533);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(19, 8));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p536, $0.ref);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i537 := $p2i.ref.i64($p534);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i538 := $ne.i64($i537, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i538} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(20, 8));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.0, $p561);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(20, 8));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p564, $0.ref);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i565 := $p2i.ref.i64($p562);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i566 := $ne.i64($i565, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(21, 8));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p590 := $load.ref($M.0, $p589);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(21, 8));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p592, $0.ref);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i593 := $p2i.ref.i64($p590);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i594 := $ne.i64($i593, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i594} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(22, 8));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.0, $p617);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(22, 8));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p620, $0.ref);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i621 := $p2i.ref.i64($p618);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i622 := $ne.i64($i621, 0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(23, 8));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p646 := $load.ref($M.0, $p645);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(23, 8));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p648, $0.ref);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i649 := $p2i.ref.i64($p646);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i650 := $ne.i64($i649, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(24, 8));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(24, 8));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p676, $0.ref);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i677 := $p2i.ref.i64($p674);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i678 := $ne.i64($i677, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i678} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(25, 8));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(25, 8));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p704, $0.ref);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i705 := $p2i.ref.i64($p702);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i706 := $ne.i64($i705, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i706} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i706 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(26, 8));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.0, $p729);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(26, 8));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p732, $0.ref);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i733 := $p2i.ref.i64($p730);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i734 := $ne.i64($i733, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i734} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(27, 8));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p758 := $load.ref($M.0, $p757);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(27, 8));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p760, $0.ref);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i761 := $p2i.ref.i64($p758);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i762 := $ne.i64($i761, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i762} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(28, 8));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p786 := $load.ref($M.0, $p785);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(28, 8));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p788, $0.ref);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i789 := $p2i.ref.i64($p786);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i790 := $ne.i64($i789, 0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i790} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i790 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(29, 8));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.0, $p813);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(29, 8));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p816, $0.ref);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i817 := $p2i.ref.i64($p814);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i818 := $ne.i64($i817, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(30, 8));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.0, $p841);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(30, 8));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p844, $0.ref);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i845 := $p2i.ref.i64($p842);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i846 := $ne.i64($i845, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i846} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i846 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(31, 8));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.0, $p869);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(31, 8));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p872, $0.ref);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i873 := $p2i.ref.i64($p870);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i874 := $ne.i64($i873, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i874} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(32, 8));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p898 := $load.ref($M.0, $p897);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(32, 8));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p900, $0.ref);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i901 := $p2i.ref.i64($p898);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i902 := $ne.i64($i901, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i902} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i902 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(33, 8));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(33, 8));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p928, $0.ref);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i929 := $p2i.ref.i64($p926);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i930 := $ne.i64($i929, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i930} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i930 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(34, 8));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p954 := $load.ref($M.0, $p953);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(34, 8));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p956, $0.ref);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i957 := $p2i.ref.i64($p954);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i958 := $ne.i64($i957, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i958} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i958 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(35, 8));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p982 := $load.ref($M.0, $p981);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(35, 8));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p984, $0.ref);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i985 := $p2i.ref.i64($p982);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i986 := $ne.i64($i985, 0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i986} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i986 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(36, 8));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p1010 := $load.ref($M.0, $p1009);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(36, 8));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1012, $0.ref);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i1013 := $p2i.ref.i64($p1010);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i1014 := $ne.i64($i1013, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1014} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i1014 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(37, 8));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p1038 := $load.ref($M.0, $p1037);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p1040 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(37, 8));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1040, $0.ref);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i1041 := $p2i.ref.i64($p1038);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i1042 := $ne.i64($i1041, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1042} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i1042 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(38, 8));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p1066 := $load.ref($M.0, $p1065);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(38, 8));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1068, $0.ref);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i1069 := $p2i.ref.i64($p1066);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i1070 := $ne.i64($i1069, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1070} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i1070 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p1093 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(39, 8));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p1094 := $load.ref($M.0, $p1093);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p1096 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(39, 8));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1096, $0.ref);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i1097 := $p2i.ref.i64($p1094);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i1098 := $ne.i64($i1097, 0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1098} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i1098 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(40, 8));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.0, $p1121);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p1124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(40, 8));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1124, $0.ref);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i1125 := $p2i.ref.i64($p1122);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i1126 := $ne.i64($i1125, 0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1126} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i1126 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(41, 8));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p1150 := $load.ref($M.0, $p1149);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(41, 8));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1152, $0.ref);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i1153 := $p2i.ref.i64($p1150);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i1154 := $ne.i64($i1153, 0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1154} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i1154 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p1177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(42, 8));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p1178 := $load.ref($M.0, $p1177);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p1180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(42, 8));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1180, $0.ref);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i1181 := $p2i.ref.i64($p1178);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i1182 := $ne.i64($i1181, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1182} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i1182 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p1205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(43, 8));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p1206 := $load.ref($M.0, $p1205);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(43, 8));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1208, $0.ref);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i1209 := $p2i.ref.i64($p1206);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i1210 := $ne.i64($i1209, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1210} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i1210 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(44, 8));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p1234 := $load.ref($M.0, $p1233);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p1236 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(44, 8));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1236, $0.ref);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i1237 := $p2i.ref.i64($p1234);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i1238 := $ne.i64($i1237, 0);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1238} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i1238 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p1261 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(45, 8));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p1262 := $load.ref($M.0, $p1261);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p1264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(45, 8));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1264, $0.ref);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i1265 := $p2i.ref.i64($p1262);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i1266 := $ne.i64($i1265, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1266} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i1266 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(46, 8));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p1290 := $load.ref($M.0, $p1289);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p1292 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(46, 8));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1292, $0.ref);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i1293 := $p2i.ref.i64($p1290);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i1294 := $ne.i64($i1293, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1294} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i1294 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(47, 8));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p1318 := $load.ref($M.0, $p1317);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p1320 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(47, 8));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1320, $0.ref);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i1321 := $p2i.ref.i64($p1318);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i1322 := $ne.i64($i1321, 0);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1322} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i1322 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(48, 8));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p1346 := $load.ref($M.0, $p1345);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p1348 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(48, 8));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1348, $0.ref);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i1349 := $p2i.ref.i64($p1346);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i1350 := $ne.i64($i1349, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1350} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i1350 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p1373 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(49, 8));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p1374 := $load.ref($M.0, $p1373);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p1376 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(49, 8));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1376, $0.ref);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i1377 := $p2i.ref.i64($p1374);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i1378 := $ne.i64($i1377, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1378} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i1378 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p1401 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(50, 8));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p1402 := $load.ref($M.0, $p1401);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p1404 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(50, 8));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1404, $0.ref);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i1405 := $p2i.ref.i64($p1402);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i1406 := $ne.i64($i1405, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1406} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i1406 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p1429 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(51, 8));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p1430 := $load.ref($M.0, $p1429);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p1432 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(51, 8));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1432, $0.ref);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i1433 := $p2i.ref.i64($p1430);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i1434 := $ne.i64($i1433, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1434} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i1434 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p1457 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(52, 8));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p1458 := $load.ref($M.0, $p1457);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(52, 8));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1460, $0.ref);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i1461 := $p2i.ref.i64($p1458);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i1462 := $ne.i64($i1461, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1462} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i1462 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(53, 8));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p1486 := $load.ref($M.0, $p1485);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p1488 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(53, 8));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1488, $0.ref);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i1489 := $p2i.ref.i64($p1486);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i1490 := $ne.i64($i1489, 0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1490} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i1490 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p1513 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(54, 8));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p1514 := $load.ref($M.0, $p1513);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p1516 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(54, 8));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1516, $0.ref);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i1517 := $p2i.ref.i64($p1514);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i1518 := $ne.i64($i1517, 0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1518} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i1518 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(55, 8));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p1542 := $load.ref($M.0, $p1541);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p1544 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(55, 8));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1544, $0.ref);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i1545 := $p2i.ref.i64($p1542);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i1546 := $ne.i64($i1545, 0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1546} true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i1546 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p1569 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(56, 8));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p1570 := $load.ref($M.0, $p1569);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p1572 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(56, 8));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1572, $0.ref);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i1573 := $p2i.ref.i64($p1570);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i1574 := $ne.i64($i1573, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1574} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i1574 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p1597 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(57, 8));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p1598 := $load.ref($M.0, $p1597);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p1600 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(57, 8));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1600, $0.ref);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i1601 := $p2i.ref.i64($p1598);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i1602 := $ne.i64($i1601, 0);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1602} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i1602 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p1625 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(58, 8));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p1626 := $load.ref($M.0, $p1625);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p1628 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(58, 8));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1628, $0.ref);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i1629 := $p2i.ref.i64($p1626);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i1630 := $ne.i64($i1629, 0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1630} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i1630 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p1653 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(59, 8));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p1654 := $load.ref($M.0, $p1653);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p1656 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(59, 8));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1656, $0.ref);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i1657 := $p2i.ref.i64($p1654);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i1658 := $ne.i64($i1657, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1658} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i1658 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p1681 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(60, 8));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p1682 := $load.ref($M.0, $p1681);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p1684 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(60, 8));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1684, $0.ref);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i1685 := $p2i.ref.i64($p1682);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i1686 := $ne.i64($i1685, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1686} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i1686 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p1709 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(61, 8));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p1710 := $load.ref($M.0, $p1709);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p1712 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(61, 8));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1712, $0.ref);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i1713 := $p2i.ref.i64($p1710);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i1714 := $ne.i64($i1713, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1714} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i1714 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p1737 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(62, 8));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p1738 := $load.ref($M.0, $p1737);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p1740 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(62, 8));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1740, $0.ref);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i1741 := $p2i.ref.i64($p1738);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i1742 := $ne.i64($i1741, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1742} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i1742 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p1765 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(63, 8));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p1766 := $load.ref($M.0, $p1765);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p1768 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(63, 8));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1768, $0.ref);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i1769 := $p2i.ref.i64($p1766);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i1770 := $ne.i64($i1769, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1770} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i1770 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p1793 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(64, 8));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p1794 := $load.ref($M.0, $p1793);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p1796 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(64, 8));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1796, $0.ref);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i1797 := $p2i.ref.i64($p1794);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i1798 := $ne.i64($i1797, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1798} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i1798 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p1821 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(65, 8));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p1822 := $load.ref($M.0, $p1821);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p1824 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(65, 8));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1824, $0.ref);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i1825 := $p2i.ref.i64($p1822);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i1826 := $ne.i64($i1825, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1826} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i1826 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p1849 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(66, 8));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p1850 := $load.ref($M.0, $p1849);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p1852 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(66, 8));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1852, $0.ref);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i1853 := $p2i.ref.i64($p1850);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i1854 := $ne.i64($i1853, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1854} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i1854 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p1877 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(67, 8));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p1878 := $load.ref($M.0, $p1877);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p1880 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(67, 8));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1880, $0.ref);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i1881 := $p2i.ref.i64($p1878);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i1882 := $ne.i64($i1881, 0);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1882} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i1882 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p1905 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(68, 8));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p1906 := $load.ref($M.0, $p1905);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p1908 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(68, 8));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1908, $0.ref);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i1909 := $p2i.ref.i64($p1906);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i1910 := $ne.i64($i1909, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1910} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i1910 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p1933 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(69, 8));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p1934 := $load.ref($M.0, $p1933);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p1936 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(69, 8));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1936, $0.ref);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i1937 := $p2i.ref.i64($p1934);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i1938 := $ne.i64($i1937, 0);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1938} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i1938 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p1961 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(70, 8));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p1962 := $load.ref($M.0, $p1961);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p1964 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(70, 8));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1964, $0.ref);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i1965 := $p2i.ref.i64($p1962);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i1966 := $ne.i64($i1965, 0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1966} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i1966 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p1989 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(71, 8));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p1990 := $load.ref($M.0, $p1989);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p1992 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(71, 8));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1992, $0.ref);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i1993 := $p2i.ref.i64($p1990);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i1994 := $ne.i64($i1993, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1994} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i1994 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p2017 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(72, 8));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p2018 := $load.ref($M.0, $p2017);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p2020 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(72, 8));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2020, $0.ref);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i2021 := $p2i.ref.i64($p2018);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i2022 := $ne.i64($i2021, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2022} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i2022 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p2045 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(73, 8));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p2046 := $load.ref($M.0, $p2045);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p2048 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(73, 8));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2048, $0.ref);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i2049 := $p2i.ref.i64($p2046);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i2050 := $ne.i64($i2049, 0);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2050} true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i2050 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p2073 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(74, 8));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p2074 := $load.ref($M.0, $p2073);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p2076 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(74, 8));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2076, $0.ref);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i2077 := $p2i.ref.i64($p2074);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i2078 := $ne.i64($i2077, 0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2078} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i2078 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p2101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(75, 8));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p2102 := $load.ref($M.0, $p2101);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p2104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(75, 8));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2104, $0.ref);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i2105 := $p2i.ref.i64($p2102);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i2106 := $ne.i64($i2105, 0);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2106} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i2106 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p2129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(76, 8));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p2130 := $load.ref($M.0, $p2129);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p2132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(76, 8));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2132, $0.ref);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i2133 := $p2i.ref.i64($p2130);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i2134 := $ne.i64($i2133, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2134} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i2134 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p2157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(77, 8));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p2158 := $load.ref($M.0, $p2157);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p2160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(77, 8));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2160, $0.ref);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i2161 := $p2i.ref.i64($p2158);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i2162 := $ne.i64($i2161, 0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2162} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i2162 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p2185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(78, 8));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p2186 := $load.ref($M.0, $p2185);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p2188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(78, 8));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2188, $0.ref);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i2189 := $p2i.ref.i64($p2186);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i2190 := $ne.i64($i2189, 0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2190} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i2190 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p2213 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(79, 8));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p2214 := $load.ref($M.0, $p2213);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p2216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(79, 8));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2216, $0.ref);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i2217 := $p2i.ref.i64($p2214);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i2218 := $ne.i64($i2217, 0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2218} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i2218 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p2241 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(80, 8));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p2242 := $load.ref($M.0, $p2241);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p2244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(80, 8));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2244, $0.ref);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i2245 := $p2i.ref.i64($p2242);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i2246 := $ne.i64($i2245, 0);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2246} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i2246 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p2269 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(81, 8));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p2270 := $load.ref($M.0, $p2269);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p2272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(81, 8));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2272, $0.ref);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i2273 := $p2i.ref.i64($p2270);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i2274 := $ne.i64($i2273, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2274} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i2274 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p2297 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(82, 8));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p2298 := $load.ref($M.0, $p2297);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p2300 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(82, 8));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2300, $0.ref);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i2301 := $p2i.ref.i64($p2298);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i2302 := $ne.i64($i2301, 0);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2302} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i2302 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $p2325 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(83, 8));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p2326 := $load.ref($M.0, $p2325);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p2328 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(83, 8));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2328, $0.ref);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i2329 := $p2i.ref.i64($p2326);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i2330 := $ne.i64($i2329, 0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2330} true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i2330 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p2353 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(84, 8));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p2354 := $load.ref($M.0, $p2353);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p2356 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(84, 8));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2356, $0.ref);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i2357 := $p2i.ref.i64($p2354);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i2358 := $ne.i64($i2357, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2358} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i2358 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p2381 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(85, 8));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p2382 := $load.ref($M.0, $p2381);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p2384 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(85, 8));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2384, $0.ref);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i2385 := $p2i.ref.i64($p2382);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i2386 := $ne.i64($i2385, 0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2386} true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i2386 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p2409 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(86, 8));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p2410 := $load.ref($M.0, $p2409);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p2412 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(86, 8));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2412, $0.ref);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i2413 := $p2i.ref.i64($p2410);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i2414 := $ne.i64($i2413, 0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2414} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i2414 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p2437 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(87, 8));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p2438 := $load.ref($M.0, $p2437);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p2440 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(87, 8));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2440, $0.ref);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i2441 := $p2i.ref.i64($p2438);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i2442 := $ne.i64($i2441, 0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2442} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i2442 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p2465 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(88, 8));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p2466 := $load.ref($M.0, $p2465);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p2468 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(88, 8));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2468, $0.ref);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i2469 := $p2i.ref.i64($p2466);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i2470 := $ne.i64($i2469, 0);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2470} true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i2470 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $p2493 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(89, 8));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p2494 := $load.ref($M.0, $p2493);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p2496 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(89, 8));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2496, $0.ref);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i2497 := $p2i.ref.i64($p2494);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i2498 := $ne.i64($i2497, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2498} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i2498 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p2521 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(90, 8));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p2522 := $load.ref($M.0, $p2521);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p2524 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(90, 8));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2524, $0.ref);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i2525 := $p2i.ref.i64($p2522);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i2526 := $ne.i64($i2525, 0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2526} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i2526 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p2549 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(91, 8));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p2550 := $load.ref($M.0, $p2549);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p2552 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(91, 8));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2552, $0.ref);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i2553 := $p2i.ref.i64($p2550);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i2554 := $ne.i64($i2553, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2554} true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i2554 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p2577 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(92, 8));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p2578 := $load.ref($M.0, $p2577);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p2580 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(92, 8));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2580, $0.ref);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i2581 := $p2i.ref.i64($p2578);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i2582 := $ne.i64($i2581, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2582} true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i2582 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p2605 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(93, 8));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p2606 := $load.ref($M.0, $p2605);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p2608 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(93, 8));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2608, $0.ref);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i2609 := $p2i.ref.i64($p2606);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i2610 := $ne.i64($i2609, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2610} true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i2610 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p2633 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(94, 8));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p2634 := $load.ref($M.0, $p2633);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p2636 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(94, 8));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2636, $0.ref);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i2637 := $p2i.ref.i64($p2634);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i2638 := $ne.i64($i2637, 0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2638} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i2638 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p2661 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(95, 8));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p2662 := $load.ref($M.0, $p2661);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p2664 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(95, 8));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2664, $0.ref);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i2665 := $p2i.ref.i64($p2662);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i2666 := $ne.i64($i2665, 0);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2666} true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i2666 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p2689 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(96, 8));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p2690 := $load.ref($M.0, $p2689);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p2692 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(96, 8));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2692, $0.ref);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i2693 := $p2i.ref.i64($p2690);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i2694 := $ne.i64($i2693, 0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2694} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i2694 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p2717 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(97, 8));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p2718 := $load.ref($M.0, $p2717);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p2720 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(97, 8));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2720, $0.ref);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i2721 := $p2i.ref.i64($p2718);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i2722 := $ne.i64($i2721, 0);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2722} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i2722 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p2745 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(98, 8));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p2746 := $load.ref($M.0, $p2745);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p2748 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(98, 8));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2748, $0.ref);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i2749 := $p2i.ref.i64($p2746);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i2750 := $ne.i64($i2749, 0);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2750} true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i2750 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p2773 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(99, 8));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p2774 := $load.ref($M.0, $p2773);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p2776 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(99, 8));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2776, $0.ref);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i2777 := $p2i.ref.i64($p2774);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i2778 := $ne.i64($i2777, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2778} true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i2778 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p2801 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(100, 8));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p2802 := $load.ref($M.0, $p2801);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p2804 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(100, 8));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2804, $0.ref);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i2805 := $p2i.ref.i64($p2802);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i2806 := $ne.i64($i2805, 0);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2806} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i2806 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p2829 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(101, 8));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p2830 := $load.ref($M.0, $p2829);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p2832 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(101, 8));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2832, $0.ref);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i2833 := $p2i.ref.i64($p2830);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i2834 := $ne.i64($i2833, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2834} true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i2834 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p2857 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(102, 8));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p2858 := $load.ref($M.0, $p2857);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p2860 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(102, 8));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2860, $0.ref);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i2861 := $p2i.ref.i64($p2858);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i2862 := $ne.i64($i2861, 0);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2862} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i2862 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p2885 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(103, 8));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p2886 := $load.ref($M.0, $p2885);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p2888 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(103, 8));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2888, $0.ref);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i2889 := $p2i.ref.i64($p2886);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i2890 := $ne.i64($i2889, 0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2890} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i2890 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p2913 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(104, 8));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p2914 := $load.ref($M.0, $p2913);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p2916 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(104, 8));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2916, $0.ref);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i2917 := $p2i.ref.i64($p2914);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i2918 := $ne.i64($i2917, 0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2918} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i2918 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $p2941 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(105, 8));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p2942 := $load.ref($M.0, $p2941);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p2944 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(105, 8));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2944, $0.ref);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i2945 := $p2i.ref.i64($p2942);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i2946 := $ne.i64($i2945, 0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2946} true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i2946 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p2969 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(106, 8));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p2970 := $load.ref($M.0, $p2969);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p2972 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(106, 8));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2972, $0.ref);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i2973 := $p2i.ref.i64($p2970);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i2974 := $ne.i64($i2973, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2974} true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i2974 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p2997 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(107, 8));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p2998 := $load.ref($M.0, $p2997);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p3000 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(107, 8));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3000, $0.ref);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i3001 := $p2i.ref.i64($p2998);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i3002 := $ne.i64($i3001, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3002} true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i3002 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p3025 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(108, 8));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p3026 := $load.ref($M.0, $p3025);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p3028 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(108, 8));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3028, $0.ref);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i3029 := $p2i.ref.i64($p3026);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i3030 := $ne.i64($i3029, 0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3030} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i3030 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p3053 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(109, 8));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p3054 := $load.ref($M.0, $p3053);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p3056 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(109, 8));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3056, $0.ref);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i3057 := $p2i.ref.i64($p3054);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i3058 := $ne.i64($i3057, 0);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3058} true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i3058 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p3081 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(110, 8));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p3082 := $load.ref($M.0, $p3081);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p3084 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(110, 8));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3084, $0.ref);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i3085 := $p2i.ref.i64($p3082);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i3086 := $ne.i64($i3085, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3086} true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i3086 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p3109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(111, 8));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p3110 := $load.ref($M.0, $p3109);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p3112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(111, 8));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3112, $0.ref);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i3113 := $p2i.ref.i64($p3110);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i3114 := $ne.i64($i3113, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3114} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i3114 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p3137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(112, 8));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p3138 := $load.ref($M.0, $p3137);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p3140 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(112, 8));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3140, $0.ref);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i3141 := $p2i.ref.i64($p3138);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i3142 := $ne.i64($i3141, 0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3142} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i3142 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p3165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(113, 8));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p3166 := $load.ref($M.0, $p3165);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p3168 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(113, 8));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3168, $0.ref);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i3169 := $p2i.ref.i64($p3166);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i3170 := $ne.i64($i3169, 0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3170} true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i3170 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p3193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(114, 8));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p3194 := $load.ref($M.0, $p3193);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p3196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(114, 8));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3196, $0.ref);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i3197 := $p2i.ref.i64($p3194);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i3198 := $ne.i64($i3197, 0);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3198} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i3198 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p3221 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(115, 8));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p3222 := $load.ref($M.0, $p3221);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p3224 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(115, 8));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3224, $0.ref);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i3225 := $p2i.ref.i64($p3222);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i3226 := $ne.i64($i3225, 0);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3226} true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i3226 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p3249 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(116, 8));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p3250 := $load.ref($M.0, $p3249);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p3252 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(116, 8));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3252, $0.ref);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i3253 := $p2i.ref.i64($p3250);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i3254 := $ne.i64($i3253, 0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3254} true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i3254 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p3277 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(117, 8));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p3278 := $load.ref($M.0, $p3277);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p3280 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(117, 8));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3280, $0.ref);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i3281 := $p2i.ref.i64($p3278);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i3282 := $ne.i64($i3281, 0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3282} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i3282 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p3305 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(118, 8));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p3306 := $load.ref($M.0, $p3305);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p3308 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(118, 8));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3308, $0.ref);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i3309 := $p2i.ref.i64($p3306);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i3310 := $ne.i64($i3309, 0);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3310} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i3310 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $p3333 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(119, 8));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p3334 := $load.ref($M.0, $p3333);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p3336 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(119, 8));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3336, $0.ref);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i3337 := $p2i.ref.i64($p3334);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i3338 := $ne.i64($i3337, 0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3338} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i3338 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p3361 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(120, 8));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p3362 := $load.ref($M.0, $p3361);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p3364 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(120, 8));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3364, $0.ref);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i3365 := $p2i.ref.i64($p3362);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i3366 := $ne.i64($i3365, 0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3366} true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i3366 == 1);
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p3389 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(121, 8));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p3390 := $load.ref($M.0, $p3389);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p3392 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(121, 8));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3392, $0.ref);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i3393 := $p2i.ref.i64($p3390);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i3394 := $ne.i64($i3393, 0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3394} true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i3394 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p3417 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(122, 8));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p3418 := $load.ref($M.0, $p3417);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p3420 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(122, 8));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3420, $0.ref);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i3421 := $p2i.ref.i64($p3418);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i3422 := $ne.i64($i3421, 0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3422} true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i3422 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $p3445 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(123, 8));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p3446 := $load.ref($M.0, $p3445);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p3448 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(123, 8));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3448, $0.ref);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i3449 := $p2i.ref.i64($p3446);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i3450 := $ne.i64($i3449, 0);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3450} true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i3450 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p3473 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(124, 8));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p3474 := $load.ref($M.0, $p3473);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p3476 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(124, 8));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3476, $0.ref);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i3477 := $p2i.ref.i64($p3474);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i3478 := $ne.i64($i3477, 0);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3478} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i3478 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p3501 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(125, 8));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p3502 := $load.ref($M.0, $p3501);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p3504 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(125, 8));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3504, $0.ref);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i3505 := $p2i.ref.i64($p3502);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i3506 := $ne.i64($i3505, 0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3506} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i3506 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p3529 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(126, 8));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p3530 := $load.ref($M.0, $p3529);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p3532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(126, 8));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3532, $0.ref);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i3533 := $p2i.ref.i64($p3530);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i3534 := $ne.i64($i3533, 0);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3534} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i3534 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p3557 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(127, 8));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p3558 := $load.ref($M.0, $p3557);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p3560 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(127, 8));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3560, $0.ref);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i3561 := $p2i.ref.i64($p3558);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i3562 := $ne.i64($i3561, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3562} true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i3562 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 432} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p27, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    return;

  $bb512:
    assume $i3562 == 1;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p3563 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p3564 := $load.ref($M.0, $p3563);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p3566 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p3567 := $load.ref($M.0, $p3566);
    $i3568 := $add.i64(1016, 2);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p3569 := $add.ref($p3564, $mul.ref($i3568, 4));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i3570 := $load.i32($M.0, $p3569);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i3571 := $zext.i32.i64($i3570);
    $i3572 := $add.i64(1016, 3);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p3573 := $add.ref($p3564, $mul.ref($i3572, 4));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i3574 := $load.i32($M.0, $p3573);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i3575 := $zext.i32.i64($i3574);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i3576 := $shl.i64($i3575, 32);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i3577 := $or.i64($i3571, $i3576);
    $i3578 := $add.i64(1016, 4);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p3579 := $add.ref($p3564, $mul.ref($i3578, 4));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i3580 := $load.i32($M.0, $p3579);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i3581 := $zext.i32.i64($i3580);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i3582 := $and.i64($i3581, 65535);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} pci_unmap_single($p3567, $i3577, $i3582, 1);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} dev_kfree_skb_irq($p3558);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p3583 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} atomic_dec($p3583);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb508:
    assume $i3534 == 1;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p3535 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p3536 := $load.ref($M.0, $p3535);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p3538 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p3539 := $load.ref($M.0, $p3538);
    $i3540 := $add.i64(1008, 2);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p3541 := $add.ref($p3536, $mul.ref($i3540, 4));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i3542 := $load.i32($M.0, $p3541);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i3543 := $zext.i32.i64($i3542);
    $i3544 := $add.i64(1008, 3);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p3545 := $add.ref($p3536, $mul.ref($i3544, 4));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i3546 := $load.i32($M.0, $p3545);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i3547 := $zext.i32.i64($i3546);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i3548 := $shl.i64($i3547, 32);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i3549 := $or.i64($i3543, $i3548);
    $i3550 := $add.i64(1008, 4);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p3551 := $add.ref($p3536, $mul.ref($i3550, 4));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i3552 := $load.i32($M.0, $p3551);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i3553 := $zext.i32.i64($i3552);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i3554 := $and.i64($i3553, 65535);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} pci_unmap_single($p3539, $i3549, $i3554, 1);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} dev_kfree_skb_irq($p3530);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p3555 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} atomic_dec($p3555);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb504:
    assume $i3506 == 1;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p3507 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p3508 := $load.ref($M.0, $p3507);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p3510 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p3511 := $load.ref($M.0, $p3510);
    $i3512 := $add.i64(1000, 2);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p3513 := $add.ref($p3508, $mul.ref($i3512, 4));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i3514 := $load.i32($M.0, $p3513);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i3515 := $zext.i32.i64($i3514);
    $i3516 := $add.i64(1000, 3);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p3517 := $add.ref($p3508, $mul.ref($i3516, 4));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i3518 := $load.i32($M.0, $p3517);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i3519 := $zext.i32.i64($i3518);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i3520 := $shl.i64($i3519, 32);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i3521 := $or.i64($i3515, $i3520);
    $i3522 := $add.i64(1000, 4);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p3523 := $add.ref($p3508, $mul.ref($i3522, 4));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i3524 := $load.i32($M.0, $p3523);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i3525 := $zext.i32.i64($i3524);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i3526 := $and.i64($i3525, 65535);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} pci_unmap_single($p3511, $i3521, $i3526, 1);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} dev_kfree_skb_irq($p3502);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p3527 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} atomic_dec($p3527);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb500:
    assume $i3478 == 1;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p3479 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p3480 := $load.ref($M.0, $p3479);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p3482 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p3483 := $load.ref($M.0, $p3482);
    $i3484 := $add.i64(992, 2);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p3485 := $add.ref($p3480, $mul.ref($i3484, 4));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i3486 := $load.i32($M.0, $p3485);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i3487 := $zext.i32.i64($i3486);
    $i3488 := $add.i64(992, 3);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p3489 := $add.ref($p3480, $mul.ref($i3488, 4));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i3490 := $load.i32($M.0, $p3489);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i3491 := $zext.i32.i64($i3490);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i3492 := $shl.i64($i3491, 32);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i3493 := $or.i64($i3487, $i3492);
    $i3494 := $add.i64(992, 4);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p3495 := $add.ref($p3480, $mul.ref($i3494, 4));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i3496 := $load.i32($M.0, $p3495);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i3497 := $zext.i32.i64($i3496);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i3498 := $and.i64($i3497, 65535);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} pci_unmap_single($p3483, $i3493, $i3498, 1);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} dev_kfree_skb_irq($p3474);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p3499 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} atomic_dec($p3499);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb496:
    assume $i3450 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p3451 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p3452 := $load.ref($M.0, $p3451);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p3454 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p3455 := $load.ref($M.0, $p3454);
    $i3456 := $add.i64(984, 2);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p3457 := $add.ref($p3452, $mul.ref($i3456, 4));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i3458 := $load.i32($M.0, $p3457);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i3459 := $zext.i32.i64($i3458);
    $i3460 := $add.i64(984, 3);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p3461 := $add.ref($p3452, $mul.ref($i3460, 4));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i3462 := $load.i32($M.0, $p3461);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i3463 := $zext.i32.i64($i3462);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i3464 := $shl.i64($i3463, 32);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i3465 := $or.i64($i3459, $i3464);
    $i3466 := $add.i64(984, 4);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p3467 := $add.ref($p3452, $mul.ref($i3466, 4));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i3468 := $load.i32($M.0, $p3467);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i3469 := $zext.i32.i64($i3468);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i3470 := $and.i64($i3469, 65535);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} pci_unmap_single($p3455, $i3465, $i3470, 1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} dev_kfree_skb_irq($p3446);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p3471 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} atomic_dec($p3471);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb492:
    assume $i3422 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p3423 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p3424 := $load.ref($M.0, $p3423);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p3426 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p3427 := $load.ref($M.0, $p3426);
    $i3428 := $add.i64(976, 2);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p3429 := $add.ref($p3424, $mul.ref($i3428, 4));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i3430 := $load.i32($M.0, $p3429);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i3431 := $zext.i32.i64($i3430);
    $i3432 := $add.i64(976, 3);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p3433 := $add.ref($p3424, $mul.ref($i3432, 4));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i3434 := $load.i32($M.0, $p3433);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i3435 := $zext.i32.i64($i3434);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i3436 := $shl.i64($i3435, 32);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i3437 := $or.i64($i3431, $i3436);
    $i3438 := $add.i64(976, 4);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p3439 := $add.ref($p3424, $mul.ref($i3438, 4));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i3440 := $load.i32($M.0, $p3439);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i3441 := $zext.i32.i64($i3440);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i3442 := $and.i64($i3441, 65535);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} pci_unmap_single($p3427, $i3437, $i3442, 1);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} dev_kfree_skb_irq($p3418);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p3443 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} atomic_dec($p3443);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb488:
    assume $i3394 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p3395 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p3396 := $load.ref($M.0, $p3395);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p3398 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p3399 := $load.ref($M.0, $p3398);
    $i3400 := $add.i64(968, 2);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p3401 := $add.ref($p3396, $mul.ref($i3400, 4));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i3402 := $load.i32($M.0, $p3401);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i3403 := $zext.i32.i64($i3402);
    $i3404 := $add.i64(968, 3);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p3405 := $add.ref($p3396, $mul.ref($i3404, 4));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i3406 := $load.i32($M.0, $p3405);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i3407 := $zext.i32.i64($i3406);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i3408 := $shl.i64($i3407, 32);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i3409 := $or.i64($i3403, $i3408);
    $i3410 := $add.i64(968, 4);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p3411 := $add.ref($p3396, $mul.ref($i3410, 4));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i3412 := $load.i32($M.0, $p3411);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i3413 := $zext.i32.i64($i3412);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i3414 := $and.i64($i3413, 65535);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} pci_unmap_single($p3399, $i3409, $i3414, 1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} dev_kfree_skb_irq($p3390);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p3415 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} atomic_dec($p3415);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb484:
    assume $i3366 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p3367 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p3368 := $load.ref($M.0, $p3367);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p3370 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p3371 := $load.ref($M.0, $p3370);
    $i3372 := $add.i64(960, 2);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p3373 := $add.ref($p3368, $mul.ref($i3372, 4));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i3374 := $load.i32($M.0, $p3373);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i3375 := $zext.i32.i64($i3374);
    $i3376 := $add.i64(960, 3);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p3377 := $add.ref($p3368, $mul.ref($i3376, 4));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i3378 := $load.i32($M.0, $p3377);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i3379 := $zext.i32.i64($i3378);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i3380 := $shl.i64($i3379, 32);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i3381 := $or.i64($i3375, $i3380);
    $i3382 := $add.i64(960, 4);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p3383 := $add.ref($p3368, $mul.ref($i3382, 4));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i3384 := $load.i32($M.0, $p3383);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i3385 := $zext.i32.i64($i3384);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i3386 := $and.i64($i3385, 65535);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} pci_unmap_single($p3371, $i3381, $i3386, 1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} dev_kfree_skb_irq($p3362);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p3387 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} atomic_dec($p3387);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb480:
    assume $i3338 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p3339 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p3340 := $load.ref($M.0, $p3339);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p3342 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p3343 := $load.ref($M.0, $p3342);
    $i3344 := $add.i64(952, 2);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p3345 := $add.ref($p3340, $mul.ref($i3344, 4));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i3346 := $load.i32($M.0, $p3345);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i3347 := $zext.i32.i64($i3346);
    $i3348 := $add.i64(952, 3);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p3349 := $add.ref($p3340, $mul.ref($i3348, 4));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i3350 := $load.i32($M.0, $p3349);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i3351 := $zext.i32.i64($i3350);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i3352 := $shl.i64($i3351, 32);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i3353 := $or.i64($i3347, $i3352);
    $i3354 := $add.i64(952, 4);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p3355 := $add.ref($p3340, $mul.ref($i3354, 4));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i3356 := $load.i32($M.0, $p3355);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i3357 := $zext.i32.i64($i3356);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i3358 := $and.i64($i3357, 65535);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} pci_unmap_single($p3343, $i3353, $i3358, 1);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} dev_kfree_skb_irq($p3334);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p3359 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} atomic_dec($p3359);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb476:
    assume $i3310 == 1;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p3311 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p3312 := $load.ref($M.0, $p3311);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p3314 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p3315 := $load.ref($M.0, $p3314);
    $i3316 := $add.i64(944, 2);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p3317 := $add.ref($p3312, $mul.ref($i3316, 4));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i3318 := $load.i32($M.0, $p3317);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i3319 := $zext.i32.i64($i3318);
    $i3320 := $add.i64(944, 3);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p3321 := $add.ref($p3312, $mul.ref($i3320, 4));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i3322 := $load.i32($M.0, $p3321);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i3323 := $zext.i32.i64($i3322);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i3324 := $shl.i64($i3323, 32);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i3325 := $or.i64($i3319, $i3324);
    $i3326 := $add.i64(944, 4);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p3327 := $add.ref($p3312, $mul.ref($i3326, 4));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i3328 := $load.i32($M.0, $p3327);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i3329 := $zext.i32.i64($i3328);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i3330 := $and.i64($i3329, 65535);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} pci_unmap_single($p3315, $i3325, $i3330, 1);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} dev_kfree_skb_irq($p3306);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p3331 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} atomic_dec($p3331);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb472:
    assume $i3282 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p3283 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p3284 := $load.ref($M.0, $p3283);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p3286 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p3287 := $load.ref($M.0, $p3286);
    $i3288 := $add.i64(936, 2);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p3289 := $add.ref($p3284, $mul.ref($i3288, 4));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i3290 := $load.i32($M.0, $p3289);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i3291 := $zext.i32.i64($i3290);
    $i3292 := $add.i64(936, 3);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p3293 := $add.ref($p3284, $mul.ref($i3292, 4));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i3294 := $load.i32($M.0, $p3293);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i3295 := $zext.i32.i64($i3294);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i3296 := $shl.i64($i3295, 32);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i3297 := $or.i64($i3291, $i3296);
    $i3298 := $add.i64(936, 4);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p3299 := $add.ref($p3284, $mul.ref($i3298, 4));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i3300 := $load.i32($M.0, $p3299);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i3301 := $zext.i32.i64($i3300);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i3302 := $and.i64($i3301, 65535);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} pci_unmap_single($p3287, $i3297, $i3302, 1);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} dev_kfree_skb_irq($p3278);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p3303 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} atomic_dec($p3303);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb468:
    assume $i3254 == 1;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p3255 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p3256 := $load.ref($M.0, $p3255);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p3258 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p3259 := $load.ref($M.0, $p3258);
    $i3260 := $add.i64(928, 2);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p3261 := $add.ref($p3256, $mul.ref($i3260, 4));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i3262 := $load.i32($M.0, $p3261);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i3263 := $zext.i32.i64($i3262);
    $i3264 := $add.i64(928, 3);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p3265 := $add.ref($p3256, $mul.ref($i3264, 4));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i3266 := $load.i32($M.0, $p3265);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i3267 := $zext.i32.i64($i3266);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i3268 := $shl.i64($i3267, 32);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i3269 := $or.i64($i3263, $i3268);
    $i3270 := $add.i64(928, 4);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p3271 := $add.ref($p3256, $mul.ref($i3270, 4));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i3272 := $load.i32($M.0, $p3271);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i3273 := $zext.i32.i64($i3272);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i3274 := $and.i64($i3273, 65535);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} pci_unmap_single($p3259, $i3269, $i3274, 1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} dev_kfree_skb_irq($p3250);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p3275 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} atomic_dec($p3275);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb464:
    assume $i3226 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p3227 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p3228 := $load.ref($M.0, $p3227);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p3230 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p3231 := $load.ref($M.0, $p3230);
    $i3232 := $add.i64(920, 2);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p3233 := $add.ref($p3228, $mul.ref($i3232, 4));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i3234 := $load.i32($M.0, $p3233);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i3235 := $zext.i32.i64($i3234);
    $i3236 := $add.i64(920, 3);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p3237 := $add.ref($p3228, $mul.ref($i3236, 4));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i3238 := $load.i32($M.0, $p3237);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i3239 := $zext.i32.i64($i3238);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i3240 := $shl.i64($i3239, 32);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i3241 := $or.i64($i3235, $i3240);
    $i3242 := $add.i64(920, 4);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p3243 := $add.ref($p3228, $mul.ref($i3242, 4));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i3244 := $load.i32($M.0, $p3243);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i3245 := $zext.i32.i64($i3244);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i3246 := $and.i64($i3245, 65535);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} pci_unmap_single($p3231, $i3241, $i3246, 1);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} dev_kfree_skb_irq($p3222);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p3247 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} atomic_dec($p3247);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb460:
    assume $i3198 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p3199 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p3200 := $load.ref($M.0, $p3199);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p3202 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p3203 := $load.ref($M.0, $p3202);
    $i3204 := $add.i64(912, 2);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p3205 := $add.ref($p3200, $mul.ref($i3204, 4));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i3206 := $load.i32($M.0, $p3205);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i3207 := $zext.i32.i64($i3206);
    $i3208 := $add.i64(912, 3);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p3209 := $add.ref($p3200, $mul.ref($i3208, 4));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i3210 := $load.i32($M.0, $p3209);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i3211 := $zext.i32.i64($i3210);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i3212 := $shl.i64($i3211, 32);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i3213 := $or.i64($i3207, $i3212);
    $i3214 := $add.i64(912, 4);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p3215 := $add.ref($p3200, $mul.ref($i3214, 4));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i3216 := $load.i32($M.0, $p3215);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i3217 := $zext.i32.i64($i3216);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i3218 := $and.i64($i3217, 65535);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} pci_unmap_single($p3203, $i3213, $i3218, 1);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} dev_kfree_skb_irq($p3194);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p3219 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} atomic_dec($p3219);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb456:
    assume $i3170 == 1;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p3171 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p3172 := $load.ref($M.0, $p3171);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p3174 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p3175 := $load.ref($M.0, $p3174);
    $i3176 := $add.i64(904, 2);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p3177 := $add.ref($p3172, $mul.ref($i3176, 4));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i3178 := $load.i32($M.0, $p3177);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i3179 := $zext.i32.i64($i3178);
    $i3180 := $add.i64(904, 3);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p3181 := $add.ref($p3172, $mul.ref($i3180, 4));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i3182 := $load.i32($M.0, $p3181);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i3183 := $zext.i32.i64($i3182);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i3184 := $shl.i64($i3183, 32);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i3185 := $or.i64($i3179, $i3184);
    $i3186 := $add.i64(904, 4);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p3187 := $add.ref($p3172, $mul.ref($i3186, 4));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i3188 := $load.i32($M.0, $p3187);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i3189 := $zext.i32.i64($i3188);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i3190 := $and.i64($i3189, 65535);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} pci_unmap_single($p3175, $i3185, $i3190, 1);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} dev_kfree_skb_irq($p3166);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p3191 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} atomic_dec($p3191);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb452:
    assume $i3142 == 1;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p3143 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p3144 := $load.ref($M.0, $p3143);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p3146 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p3147 := $load.ref($M.0, $p3146);
    $i3148 := $add.i64(896, 2);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p3149 := $add.ref($p3144, $mul.ref($i3148, 4));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i3150 := $load.i32($M.0, $p3149);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i3151 := $zext.i32.i64($i3150);
    $i3152 := $add.i64(896, 3);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p3153 := $add.ref($p3144, $mul.ref($i3152, 4));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i3154 := $load.i32($M.0, $p3153);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i3155 := $zext.i32.i64($i3154);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i3156 := $shl.i64($i3155, 32);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i3157 := $or.i64($i3151, $i3156);
    $i3158 := $add.i64(896, 4);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p3159 := $add.ref($p3144, $mul.ref($i3158, 4));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i3160 := $load.i32($M.0, $p3159);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i3161 := $zext.i32.i64($i3160);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i3162 := $and.i64($i3161, 65535);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} pci_unmap_single($p3147, $i3157, $i3162, 1);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} dev_kfree_skb_irq($p3138);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p3163 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} atomic_dec($p3163);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb448:
    assume $i3114 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p3115 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p3116 := $load.ref($M.0, $p3115);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p3118 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p3119 := $load.ref($M.0, $p3118);
    $i3120 := $add.i64(888, 2);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p3121 := $add.ref($p3116, $mul.ref($i3120, 4));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i3122 := $load.i32($M.0, $p3121);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i3123 := $zext.i32.i64($i3122);
    $i3124 := $add.i64(888, 3);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p3125 := $add.ref($p3116, $mul.ref($i3124, 4));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i3126 := $load.i32($M.0, $p3125);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i3127 := $zext.i32.i64($i3126);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i3128 := $shl.i64($i3127, 32);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i3129 := $or.i64($i3123, $i3128);
    $i3130 := $add.i64(888, 4);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p3131 := $add.ref($p3116, $mul.ref($i3130, 4));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i3132 := $load.i32($M.0, $p3131);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i3133 := $zext.i32.i64($i3132);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i3134 := $and.i64($i3133, 65535);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} pci_unmap_single($p3119, $i3129, $i3134, 1);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} dev_kfree_skb_irq($p3110);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p3135 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} atomic_dec($p3135);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb444:
    assume $i3086 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p3087 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p3088 := $load.ref($M.0, $p3087);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p3090 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p3091 := $load.ref($M.0, $p3090);
    $i3092 := $add.i64(880, 2);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p3093 := $add.ref($p3088, $mul.ref($i3092, 4));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i3094 := $load.i32($M.0, $p3093);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i3095 := $zext.i32.i64($i3094);
    $i3096 := $add.i64(880, 3);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p3097 := $add.ref($p3088, $mul.ref($i3096, 4));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i3098 := $load.i32($M.0, $p3097);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i3099 := $zext.i32.i64($i3098);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i3100 := $shl.i64($i3099, 32);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i3101 := $or.i64($i3095, $i3100);
    $i3102 := $add.i64(880, 4);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p3103 := $add.ref($p3088, $mul.ref($i3102, 4));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i3104 := $load.i32($M.0, $p3103);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i3105 := $zext.i32.i64($i3104);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i3106 := $and.i64($i3105, 65535);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} pci_unmap_single($p3091, $i3101, $i3106, 1);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} dev_kfree_skb_irq($p3082);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p3107 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} atomic_dec($p3107);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb440:
    assume $i3058 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p3059 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p3060 := $load.ref($M.0, $p3059);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p3062 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p3063 := $load.ref($M.0, $p3062);
    $i3064 := $add.i64(872, 2);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p3065 := $add.ref($p3060, $mul.ref($i3064, 4));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i3066 := $load.i32($M.0, $p3065);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i3067 := $zext.i32.i64($i3066);
    $i3068 := $add.i64(872, 3);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p3069 := $add.ref($p3060, $mul.ref($i3068, 4));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i3070 := $load.i32($M.0, $p3069);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i3071 := $zext.i32.i64($i3070);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i3072 := $shl.i64($i3071, 32);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i3073 := $or.i64($i3067, $i3072);
    $i3074 := $add.i64(872, 4);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p3075 := $add.ref($p3060, $mul.ref($i3074, 4));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i3076 := $load.i32($M.0, $p3075);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i3077 := $zext.i32.i64($i3076);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i3078 := $and.i64($i3077, 65535);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} pci_unmap_single($p3063, $i3073, $i3078, 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} dev_kfree_skb_irq($p3054);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p3079 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} atomic_dec($p3079);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb436:
    assume $i3030 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p3031 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p3032 := $load.ref($M.0, $p3031);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p3034 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p3035 := $load.ref($M.0, $p3034);
    $i3036 := $add.i64(864, 2);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p3037 := $add.ref($p3032, $mul.ref($i3036, 4));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i3038 := $load.i32($M.0, $p3037);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i3039 := $zext.i32.i64($i3038);
    $i3040 := $add.i64(864, 3);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p3041 := $add.ref($p3032, $mul.ref($i3040, 4));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i3042 := $load.i32($M.0, $p3041);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i3043 := $zext.i32.i64($i3042);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i3044 := $shl.i64($i3043, 32);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i3045 := $or.i64($i3039, $i3044);
    $i3046 := $add.i64(864, 4);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p3047 := $add.ref($p3032, $mul.ref($i3046, 4));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i3048 := $load.i32($M.0, $p3047);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i3049 := $zext.i32.i64($i3048);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i3050 := $and.i64($i3049, 65535);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} pci_unmap_single($p3035, $i3045, $i3050, 1);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} dev_kfree_skb_irq($p3026);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p3051 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} atomic_dec($p3051);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb432:
    assume $i3002 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p3003 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p3004 := $load.ref($M.0, $p3003);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p3006 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p3007 := $load.ref($M.0, $p3006);
    $i3008 := $add.i64(856, 2);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p3009 := $add.ref($p3004, $mul.ref($i3008, 4));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i3010 := $load.i32($M.0, $p3009);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i3011 := $zext.i32.i64($i3010);
    $i3012 := $add.i64(856, 3);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p3013 := $add.ref($p3004, $mul.ref($i3012, 4));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i3014 := $load.i32($M.0, $p3013);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i3015 := $zext.i32.i64($i3014);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i3016 := $shl.i64($i3015, 32);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i3017 := $or.i64($i3011, $i3016);
    $i3018 := $add.i64(856, 4);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p3019 := $add.ref($p3004, $mul.ref($i3018, 4));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i3020 := $load.i32($M.0, $p3019);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i3021 := $zext.i32.i64($i3020);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i3022 := $and.i64($i3021, 65535);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} pci_unmap_single($p3007, $i3017, $i3022, 1);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} dev_kfree_skb_irq($p2998);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p3023 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} atomic_dec($p3023);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb428:
    assume $i2974 == 1;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p2975 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p2976 := $load.ref($M.0, $p2975);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p2978 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p2979 := $load.ref($M.0, $p2978);
    $i2980 := $add.i64(848, 2);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p2981 := $add.ref($p2976, $mul.ref($i2980, 4));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i2982 := $load.i32($M.0, $p2981);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i2983 := $zext.i32.i64($i2982);
    $i2984 := $add.i64(848, 3);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p2985 := $add.ref($p2976, $mul.ref($i2984, 4));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i2986 := $load.i32($M.0, $p2985);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i2987 := $zext.i32.i64($i2986);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i2988 := $shl.i64($i2987, 32);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i2989 := $or.i64($i2983, $i2988);
    $i2990 := $add.i64(848, 4);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p2991 := $add.ref($p2976, $mul.ref($i2990, 4));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i2992 := $load.i32($M.0, $p2991);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i2993 := $zext.i32.i64($i2992);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i2994 := $and.i64($i2993, 65535);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} pci_unmap_single($p2979, $i2989, $i2994, 1);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} dev_kfree_skb_irq($p2970);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p2995 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} atomic_dec($p2995);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb424:
    assume $i2946 == 1;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p2947 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p2948 := $load.ref($M.0, $p2947);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p2950 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p2951 := $load.ref($M.0, $p2950);
    $i2952 := $add.i64(840, 2);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p2953 := $add.ref($p2948, $mul.ref($i2952, 4));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i2954 := $load.i32($M.0, $p2953);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i2955 := $zext.i32.i64($i2954);
    $i2956 := $add.i64(840, 3);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p2957 := $add.ref($p2948, $mul.ref($i2956, 4));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i2958 := $load.i32($M.0, $p2957);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i2959 := $zext.i32.i64($i2958);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i2960 := $shl.i64($i2959, 32);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i2961 := $or.i64($i2955, $i2960);
    $i2962 := $add.i64(840, 4);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p2963 := $add.ref($p2948, $mul.ref($i2962, 4));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i2964 := $load.i32($M.0, $p2963);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i2965 := $zext.i32.i64($i2964);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i2966 := $and.i64($i2965, 65535);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} pci_unmap_single($p2951, $i2961, $i2966, 1);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} dev_kfree_skb_irq($p2942);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p2967 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} atomic_dec($p2967);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb420:
    assume $i2918 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p2919 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p2920 := $load.ref($M.0, $p2919);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p2922 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p2923 := $load.ref($M.0, $p2922);
    $i2924 := $add.i64(832, 2);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p2925 := $add.ref($p2920, $mul.ref($i2924, 4));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i2926 := $load.i32($M.0, $p2925);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i2927 := $zext.i32.i64($i2926);
    $i2928 := $add.i64(832, 3);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p2929 := $add.ref($p2920, $mul.ref($i2928, 4));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i2930 := $load.i32($M.0, $p2929);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i2931 := $zext.i32.i64($i2930);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i2932 := $shl.i64($i2931, 32);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i2933 := $or.i64($i2927, $i2932);
    $i2934 := $add.i64(832, 4);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p2935 := $add.ref($p2920, $mul.ref($i2934, 4));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i2936 := $load.i32($M.0, $p2935);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i2937 := $zext.i32.i64($i2936);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i2938 := $and.i64($i2937, 65535);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} pci_unmap_single($p2923, $i2933, $i2938, 1);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} dev_kfree_skb_irq($p2914);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p2939 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} atomic_dec($p2939);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb416:
    assume $i2890 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p2891 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p2892 := $load.ref($M.0, $p2891);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p2894 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p2895 := $load.ref($M.0, $p2894);
    $i2896 := $add.i64(824, 2);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p2897 := $add.ref($p2892, $mul.ref($i2896, 4));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i2898 := $load.i32($M.0, $p2897);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i2899 := $zext.i32.i64($i2898);
    $i2900 := $add.i64(824, 3);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p2901 := $add.ref($p2892, $mul.ref($i2900, 4));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i2902 := $load.i32($M.0, $p2901);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i2903 := $zext.i32.i64($i2902);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i2904 := $shl.i64($i2903, 32);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i2905 := $or.i64($i2899, $i2904);
    $i2906 := $add.i64(824, 4);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p2907 := $add.ref($p2892, $mul.ref($i2906, 4));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i2908 := $load.i32($M.0, $p2907);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i2909 := $zext.i32.i64($i2908);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i2910 := $and.i64($i2909, 65535);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} pci_unmap_single($p2895, $i2905, $i2910, 1);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} dev_kfree_skb_irq($p2886);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p2911 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} atomic_dec($p2911);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb412:
    assume $i2862 == 1;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p2863 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p2864 := $load.ref($M.0, $p2863);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p2866 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p2867 := $load.ref($M.0, $p2866);
    $i2868 := $add.i64(816, 2);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p2869 := $add.ref($p2864, $mul.ref($i2868, 4));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i2870 := $load.i32($M.0, $p2869);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i2871 := $zext.i32.i64($i2870);
    $i2872 := $add.i64(816, 3);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p2873 := $add.ref($p2864, $mul.ref($i2872, 4));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i2874 := $load.i32($M.0, $p2873);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i2875 := $zext.i32.i64($i2874);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i2876 := $shl.i64($i2875, 32);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i2877 := $or.i64($i2871, $i2876);
    $i2878 := $add.i64(816, 4);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p2879 := $add.ref($p2864, $mul.ref($i2878, 4));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i2880 := $load.i32($M.0, $p2879);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i2881 := $zext.i32.i64($i2880);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i2882 := $and.i64($i2881, 65535);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} pci_unmap_single($p2867, $i2877, $i2882, 1);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} dev_kfree_skb_irq($p2858);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p2883 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} atomic_dec($p2883);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb408:
    assume $i2834 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p2835 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p2836 := $load.ref($M.0, $p2835);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p2838 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p2839 := $load.ref($M.0, $p2838);
    $i2840 := $add.i64(808, 2);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p2841 := $add.ref($p2836, $mul.ref($i2840, 4));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i2842 := $load.i32($M.0, $p2841);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i2843 := $zext.i32.i64($i2842);
    $i2844 := $add.i64(808, 3);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p2845 := $add.ref($p2836, $mul.ref($i2844, 4));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i2846 := $load.i32($M.0, $p2845);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i2847 := $zext.i32.i64($i2846);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i2848 := $shl.i64($i2847, 32);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i2849 := $or.i64($i2843, $i2848);
    $i2850 := $add.i64(808, 4);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p2851 := $add.ref($p2836, $mul.ref($i2850, 4));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i2852 := $load.i32($M.0, $p2851);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i2853 := $zext.i32.i64($i2852);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i2854 := $and.i64($i2853, 65535);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} pci_unmap_single($p2839, $i2849, $i2854, 1);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} dev_kfree_skb_irq($p2830);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p2855 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} atomic_dec($p2855);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb404:
    assume $i2806 == 1;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p2807 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p2808 := $load.ref($M.0, $p2807);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p2810 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p2811 := $load.ref($M.0, $p2810);
    $i2812 := $add.i64(800, 2);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p2813 := $add.ref($p2808, $mul.ref($i2812, 4));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i2814 := $load.i32($M.0, $p2813);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i2815 := $zext.i32.i64($i2814);
    $i2816 := $add.i64(800, 3);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p2817 := $add.ref($p2808, $mul.ref($i2816, 4));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i2818 := $load.i32($M.0, $p2817);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i2819 := $zext.i32.i64($i2818);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i2820 := $shl.i64($i2819, 32);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i2821 := $or.i64($i2815, $i2820);
    $i2822 := $add.i64(800, 4);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p2823 := $add.ref($p2808, $mul.ref($i2822, 4));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i2824 := $load.i32($M.0, $p2823);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i2825 := $zext.i32.i64($i2824);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i2826 := $and.i64($i2825, 65535);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} pci_unmap_single($p2811, $i2821, $i2826, 1);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} dev_kfree_skb_irq($p2802);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p2827 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} atomic_dec($p2827);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb400:
    assume $i2778 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p2779 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p2780 := $load.ref($M.0, $p2779);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p2782 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p2783 := $load.ref($M.0, $p2782);
    $i2784 := $add.i64(792, 2);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p2785 := $add.ref($p2780, $mul.ref($i2784, 4));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i2786 := $load.i32($M.0, $p2785);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i2787 := $zext.i32.i64($i2786);
    $i2788 := $add.i64(792, 3);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p2789 := $add.ref($p2780, $mul.ref($i2788, 4));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i2790 := $load.i32($M.0, $p2789);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i2791 := $zext.i32.i64($i2790);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i2792 := $shl.i64($i2791, 32);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i2793 := $or.i64($i2787, $i2792);
    $i2794 := $add.i64(792, 4);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p2795 := $add.ref($p2780, $mul.ref($i2794, 4));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i2796 := $load.i32($M.0, $p2795);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i2797 := $zext.i32.i64($i2796);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i2798 := $and.i64($i2797, 65535);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} pci_unmap_single($p2783, $i2793, $i2798, 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} dev_kfree_skb_irq($p2774);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p2799 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} atomic_dec($p2799);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb396:
    assume $i2750 == 1;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p2751 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p2752 := $load.ref($M.0, $p2751);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p2754 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p2755 := $load.ref($M.0, $p2754);
    $i2756 := $add.i64(784, 2);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p2757 := $add.ref($p2752, $mul.ref($i2756, 4));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i2758 := $load.i32($M.0, $p2757);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i2759 := $zext.i32.i64($i2758);
    $i2760 := $add.i64(784, 3);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p2761 := $add.ref($p2752, $mul.ref($i2760, 4));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i2762 := $load.i32($M.0, $p2761);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i2763 := $zext.i32.i64($i2762);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i2764 := $shl.i64($i2763, 32);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i2765 := $or.i64($i2759, $i2764);
    $i2766 := $add.i64(784, 4);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p2767 := $add.ref($p2752, $mul.ref($i2766, 4));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i2768 := $load.i32($M.0, $p2767);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i2769 := $zext.i32.i64($i2768);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i2770 := $and.i64($i2769, 65535);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} pci_unmap_single($p2755, $i2765, $i2770, 1);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} dev_kfree_skb_irq($p2746);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p2771 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} atomic_dec($p2771);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb392:
    assume $i2722 == 1;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p2723 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p2724 := $load.ref($M.0, $p2723);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p2726 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p2727 := $load.ref($M.0, $p2726);
    $i2728 := $add.i64(776, 2);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p2729 := $add.ref($p2724, $mul.ref($i2728, 4));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i2730 := $load.i32($M.0, $p2729);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i2731 := $zext.i32.i64($i2730);
    $i2732 := $add.i64(776, 3);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p2733 := $add.ref($p2724, $mul.ref($i2732, 4));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i2734 := $load.i32($M.0, $p2733);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i2735 := $zext.i32.i64($i2734);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i2736 := $shl.i64($i2735, 32);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i2737 := $or.i64($i2731, $i2736);
    $i2738 := $add.i64(776, 4);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p2739 := $add.ref($p2724, $mul.ref($i2738, 4));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i2740 := $load.i32($M.0, $p2739);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i2741 := $zext.i32.i64($i2740);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i2742 := $and.i64($i2741, 65535);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} pci_unmap_single($p2727, $i2737, $i2742, 1);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} dev_kfree_skb_irq($p2718);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p2743 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} atomic_dec($p2743);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb388:
    assume $i2694 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p2695 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p2696 := $load.ref($M.0, $p2695);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p2698 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p2699 := $load.ref($M.0, $p2698);
    $i2700 := $add.i64(768, 2);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p2701 := $add.ref($p2696, $mul.ref($i2700, 4));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i2702 := $load.i32($M.0, $p2701);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i2703 := $zext.i32.i64($i2702);
    $i2704 := $add.i64(768, 3);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p2705 := $add.ref($p2696, $mul.ref($i2704, 4));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i2706 := $load.i32($M.0, $p2705);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i2707 := $zext.i32.i64($i2706);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i2708 := $shl.i64($i2707, 32);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i2709 := $or.i64($i2703, $i2708);
    $i2710 := $add.i64(768, 4);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p2711 := $add.ref($p2696, $mul.ref($i2710, 4));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i2712 := $load.i32($M.0, $p2711);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i2713 := $zext.i32.i64($i2712);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i2714 := $and.i64($i2713, 65535);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} pci_unmap_single($p2699, $i2709, $i2714, 1);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dev_kfree_skb_irq($p2690);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p2715 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} atomic_dec($p2715);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb384:
    assume $i2666 == 1;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p2667 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p2668 := $load.ref($M.0, $p2667);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p2670 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p2671 := $load.ref($M.0, $p2670);
    $i2672 := $add.i64(760, 2);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p2673 := $add.ref($p2668, $mul.ref($i2672, 4));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i2674 := $load.i32($M.0, $p2673);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i2675 := $zext.i32.i64($i2674);
    $i2676 := $add.i64(760, 3);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p2677 := $add.ref($p2668, $mul.ref($i2676, 4));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i2678 := $load.i32($M.0, $p2677);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i2679 := $zext.i32.i64($i2678);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i2680 := $shl.i64($i2679, 32);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i2681 := $or.i64($i2675, $i2680);
    $i2682 := $add.i64(760, 4);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p2683 := $add.ref($p2668, $mul.ref($i2682, 4));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i2684 := $load.i32($M.0, $p2683);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i2685 := $zext.i32.i64($i2684);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i2686 := $and.i64($i2685, 65535);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} pci_unmap_single($p2671, $i2681, $i2686, 1);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} dev_kfree_skb_irq($p2662);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p2687 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} atomic_dec($p2687);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb380:
    assume $i2638 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p2639 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p2640 := $load.ref($M.0, $p2639);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p2642 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p2643 := $load.ref($M.0, $p2642);
    $i2644 := $add.i64(752, 2);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p2645 := $add.ref($p2640, $mul.ref($i2644, 4));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i2646 := $load.i32($M.0, $p2645);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i2647 := $zext.i32.i64($i2646);
    $i2648 := $add.i64(752, 3);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p2649 := $add.ref($p2640, $mul.ref($i2648, 4));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i2650 := $load.i32($M.0, $p2649);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i2651 := $zext.i32.i64($i2650);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i2652 := $shl.i64($i2651, 32);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i2653 := $or.i64($i2647, $i2652);
    $i2654 := $add.i64(752, 4);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p2655 := $add.ref($p2640, $mul.ref($i2654, 4));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i2656 := $load.i32($M.0, $p2655);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i2657 := $zext.i32.i64($i2656);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i2658 := $and.i64($i2657, 65535);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} pci_unmap_single($p2643, $i2653, $i2658, 1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} dev_kfree_skb_irq($p2634);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p2659 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} atomic_dec($p2659);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb376:
    assume $i2610 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p2611 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p2612 := $load.ref($M.0, $p2611);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p2614 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p2615 := $load.ref($M.0, $p2614);
    $i2616 := $add.i64(744, 2);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p2617 := $add.ref($p2612, $mul.ref($i2616, 4));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i2618 := $load.i32($M.0, $p2617);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i2619 := $zext.i32.i64($i2618);
    $i2620 := $add.i64(744, 3);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p2621 := $add.ref($p2612, $mul.ref($i2620, 4));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i2622 := $load.i32($M.0, $p2621);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i2623 := $zext.i32.i64($i2622);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i2624 := $shl.i64($i2623, 32);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i2625 := $or.i64($i2619, $i2624);
    $i2626 := $add.i64(744, 4);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p2627 := $add.ref($p2612, $mul.ref($i2626, 4));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i2628 := $load.i32($M.0, $p2627);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i2629 := $zext.i32.i64($i2628);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i2630 := $and.i64($i2629, 65535);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} pci_unmap_single($p2615, $i2625, $i2630, 1);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} dev_kfree_skb_irq($p2606);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p2631 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} atomic_dec($p2631);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb372:
    assume $i2582 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p2583 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p2584 := $load.ref($M.0, $p2583);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p2586 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p2587 := $load.ref($M.0, $p2586);
    $i2588 := $add.i64(736, 2);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p2589 := $add.ref($p2584, $mul.ref($i2588, 4));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i2590 := $load.i32($M.0, $p2589);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i2591 := $zext.i32.i64($i2590);
    $i2592 := $add.i64(736, 3);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p2593 := $add.ref($p2584, $mul.ref($i2592, 4));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i2594 := $load.i32($M.0, $p2593);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i2595 := $zext.i32.i64($i2594);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i2596 := $shl.i64($i2595, 32);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i2597 := $or.i64($i2591, $i2596);
    $i2598 := $add.i64(736, 4);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p2599 := $add.ref($p2584, $mul.ref($i2598, 4));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i2600 := $load.i32($M.0, $p2599);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i2601 := $zext.i32.i64($i2600);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i2602 := $and.i64($i2601, 65535);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} pci_unmap_single($p2587, $i2597, $i2602, 1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} dev_kfree_skb_irq($p2578);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p2603 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} atomic_dec($p2603);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb368:
    assume $i2554 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p2555 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p2556 := $load.ref($M.0, $p2555);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p2558 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p2559 := $load.ref($M.0, $p2558);
    $i2560 := $add.i64(728, 2);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p2561 := $add.ref($p2556, $mul.ref($i2560, 4));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i2562 := $load.i32($M.0, $p2561);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i2563 := $zext.i32.i64($i2562);
    $i2564 := $add.i64(728, 3);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p2565 := $add.ref($p2556, $mul.ref($i2564, 4));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i2566 := $load.i32($M.0, $p2565);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i2567 := $zext.i32.i64($i2566);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i2568 := $shl.i64($i2567, 32);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i2569 := $or.i64($i2563, $i2568);
    $i2570 := $add.i64(728, 4);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p2571 := $add.ref($p2556, $mul.ref($i2570, 4));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i2572 := $load.i32($M.0, $p2571);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i2573 := $zext.i32.i64($i2572);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i2574 := $and.i64($i2573, 65535);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} pci_unmap_single($p2559, $i2569, $i2574, 1);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} dev_kfree_skb_irq($p2550);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p2575 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} atomic_dec($p2575);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb364:
    assume $i2526 == 1;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p2527 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p2528 := $load.ref($M.0, $p2527);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p2530 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p2531 := $load.ref($M.0, $p2530);
    $i2532 := $add.i64(720, 2);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p2533 := $add.ref($p2528, $mul.ref($i2532, 4));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i2534 := $load.i32($M.0, $p2533);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i2535 := $zext.i32.i64($i2534);
    $i2536 := $add.i64(720, 3);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p2537 := $add.ref($p2528, $mul.ref($i2536, 4));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i2538 := $load.i32($M.0, $p2537);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i2539 := $zext.i32.i64($i2538);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i2540 := $shl.i64($i2539, 32);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i2541 := $or.i64($i2535, $i2540);
    $i2542 := $add.i64(720, 4);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p2543 := $add.ref($p2528, $mul.ref($i2542, 4));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i2544 := $load.i32($M.0, $p2543);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i2545 := $zext.i32.i64($i2544);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i2546 := $and.i64($i2545, 65535);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} pci_unmap_single($p2531, $i2541, $i2546, 1);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} dev_kfree_skb_irq($p2522);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p2547 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} atomic_dec($p2547);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb360:
    assume $i2498 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p2499 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p2500 := $load.ref($M.0, $p2499);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p2502 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p2503 := $load.ref($M.0, $p2502);
    $i2504 := $add.i64(712, 2);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p2505 := $add.ref($p2500, $mul.ref($i2504, 4));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i2506 := $load.i32($M.0, $p2505);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i2507 := $zext.i32.i64($i2506);
    $i2508 := $add.i64(712, 3);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p2509 := $add.ref($p2500, $mul.ref($i2508, 4));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i2510 := $load.i32($M.0, $p2509);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i2511 := $zext.i32.i64($i2510);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i2512 := $shl.i64($i2511, 32);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i2513 := $or.i64($i2507, $i2512);
    $i2514 := $add.i64(712, 4);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p2515 := $add.ref($p2500, $mul.ref($i2514, 4));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i2516 := $load.i32($M.0, $p2515);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i2517 := $zext.i32.i64($i2516);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i2518 := $and.i64($i2517, 65535);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} pci_unmap_single($p2503, $i2513, $i2518, 1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} dev_kfree_skb_irq($p2494);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p2519 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} atomic_dec($p2519);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb356:
    assume $i2470 == 1;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p2471 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p2472 := $load.ref($M.0, $p2471);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p2474 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p2475 := $load.ref($M.0, $p2474);
    $i2476 := $add.i64(704, 2);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p2477 := $add.ref($p2472, $mul.ref($i2476, 4));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i2478 := $load.i32($M.0, $p2477);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i2479 := $zext.i32.i64($i2478);
    $i2480 := $add.i64(704, 3);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p2481 := $add.ref($p2472, $mul.ref($i2480, 4));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i2482 := $load.i32($M.0, $p2481);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i2483 := $zext.i32.i64($i2482);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i2484 := $shl.i64($i2483, 32);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i2485 := $or.i64($i2479, $i2484);
    $i2486 := $add.i64(704, 4);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p2487 := $add.ref($p2472, $mul.ref($i2486, 4));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i2488 := $load.i32($M.0, $p2487);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i2489 := $zext.i32.i64($i2488);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i2490 := $and.i64($i2489, 65535);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} pci_unmap_single($p2475, $i2485, $i2490, 1);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} dev_kfree_skb_irq($p2466);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p2491 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} atomic_dec($p2491);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb352:
    assume $i2442 == 1;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p2443 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p2444 := $load.ref($M.0, $p2443);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p2446 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p2447 := $load.ref($M.0, $p2446);
    $i2448 := $add.i64(696, 2);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p2449 := $add.ref($p2444, $mul.ref($i2448, 4));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i2450 := $load.i32($M.0, $p2449);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i2451 := $zext.i32.i64($i2450);
    $i2452 := $add.i64(696, 3);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p2453 := $add.ref($p2444, $mul.ref($i2452, 4));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i2454 := $load.i32($M.0, $p2453);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i2455 := $zext.i32.i64($i2454);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i2456 := $shl.i64($i2455, 32);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i2457 := $or.i64($i2451, $i2456);
    $i2458 := $add.i64(696, 4);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p2459 := $add.ref($p2444, $mul.ref($i2458, 4));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i2460 := $load.i32($M.0, $p2459);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i2461 := $zext.i32.i64($i2460);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i2462 := $and.i64($i2461, 65535);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} pci_unmap_single($p2447, $i2457, $i2462, 1);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} dev_kfree_skb_irq($p2438);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p2463 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} atomic_dec($p2463);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb348:
    assume $i2414 == 1;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p2415 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p2416 := $load.ref($M.0, $p2415);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p2418 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p2419 := $load.ref($M.0, $p2418);
    $i2420 := $add.i64(688, 2);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p2421 := $add.ref($p2416, $mul.ref($i2420, 4));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i2422 := $load.i32($M.0, $p2421);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i2423 := $zext.i32.i64($i2422);
    $i2424 := $add.i64(688, 3);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p2425 := $add.ref($p2416, $mul.ref($i2424, 4));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i2426 := $load.i32($M.0, $p2425);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i2427 := $zext.i32.i64($i2426);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i2428 := $shl.i64($i2427, 32);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i2429 := $or.i64($i2423, $i2428);
    $i2430 := $add.i64(688, 4);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p2431 := $add.ref($p2416, $mul.ref($i2430, 4));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i2432 := $load.i32($M.0, $p2431);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i2433 := $zext.i32.i64($i2432);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i2434 := $and.i64($i2433, 65535);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} pci_unmap_single($p2419, $i2429, $i2434, 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} dev_kfree_skb_irq($p2410);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p2435 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} atomic_dec($p2435);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb344:
    assume $i2386 == 1;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p2387 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p2388 := $load.ref($M.0, $p2387);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p2390 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p2391 := $load.ref($M.0, $p2390);
    $i2392 := $add.i64(680, 2);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p2393 := $add.ref($p2388, $mul.ref($i2392, 4));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i2394 := $load.i32($M.0, $p2393);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i2395 := $zext.i32.i64($i2394);
    $i2396 := $add.i64(680, 3);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p2397 := $add.ref($p2388, $mul.ref($i2396, 4));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i2398 := $load.i32($M.0, $p2397);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i2399 := $zext.i32.i64($i2398);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i2400 := $shl.i64($i2399, 32);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i2401 := $or.i64($i2395, $i2400);
    $i2402 := $add.i64(680, 4);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p2403 := $add.ref($p2388, $mul.ref($i2402, 4));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i2404 := $load.i32($M.0, $p2403);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i2405 := $zext.i32.i64($i2404);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i2406 := $and.i64($i2405, 65535);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} pci_unmap_single($p2391, $i2401, $i2406, 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} dev_kfree_skb_irq($p2382);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p2407 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} atomic_dec($p2407);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb340:
    assume $i2358 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p2359 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p2360 := $load.ref($M.0, $p2359);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p2362 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p2363 := $load.ref($M.0, $p2362);
    $i2364 := $add.i64(672, 2);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p2365 := $add.ref($p2360, $mul.ref($i2364, 4));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i2366 := $load.i32($M.0, $p2365);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i2367 := $zext.i32.i64($i2366);
    $i2368 := $add.i64(672, 3);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p2369 := $add.ref($p2360, $mul.ref($i2368, 4));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i2370 := $load.i32($M.0, $p2369);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i2371 := $zext.i32.i64($i2370);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i2372 := $shl.i64($i2371, 32);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i2373 := $or.i64($i2367, $i2372);
    $i2374 := $add.i64(672, 4);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p2375 := $add.ref($p2360, $mul.ref($i2374, 4));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i2376 := $load.i32($M.0, $p2375);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i2377 := $zext.i32.i64($i2376);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i2378 := $and.i64($i2377, 65535);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} pci_unmap_single($p2363, $i2373, $i2378, 1);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} dev_kfree_skb_irq($p2354);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p2379 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} atomic_dec($p2379);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb336:
    assume $i2330 == 1;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p2331 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p2332 := $load.ref($M.0, $p2331);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p2334 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p2335 := $load.ref($M.0, $p2334);
    $i2336 := $add.i64(664, 2);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p2337 := $add.ref($p2332, $mul.ref($i2336, 4));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i2338 := $load.i32($M.0, $p2337);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i2339 := $zext.i32.i64($i2338);
    $i2340 := $add.i64(664, 3);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p2341 := $add.ref($p2332, $mul.ref($i2340, 4));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i2342 := $load.i32($M.0, $p2341);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i2343 := $zext.i32.i64($i2342);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i2344 := $shl.i64($i2343, 32);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i2345 := $or.i64($i2339, $i2344);
    $i2346 := $add.i64(664, 4);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p2347 := $add.ref($p2332, $mul.ref($i2346, 4));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i2348 := $load.i32($M.0, $p2347);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i2349 := $zext.i32.i64($i2348);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i2350 := $and.i64($i2349, 65535);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} pci_unmap_single($p2335, $i2345, $i2350, 1);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} dev_kfree_skb_irq($p2326);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p2351 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} atomic_dec($p2351);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb332:
    assume $i2302 == 1;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p2303 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p2304 := $load.ref($M.0, $p2303);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p2306 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p2307 := $load.ref($M.0, $p2306);
    $i2308 := $add.i64(656, 2);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p2309 := $add.ref($p2304, $mul.ref($i2308, 4));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i2310 := $load.i32($M.0, $p2309);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i2311 := $zext.i32.i64($i2310);
    $i2312 := $add.i64(656, 3);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p2313 := $add.ref($p2304, $mul.ref($i2312, 4));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i2314 := $load.i32($M.0, $p2313);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i2315 := $zext.i32.i64($i2314);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i2316 := $shl.i64($i2315, 32);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i2317 := $or.i64($i2311, $i2316);
    $i2318 := $add.i64(656, 4);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p2319 := $add.ref($p2304, $mul.ref($i2318, 4));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i2320 := $load.i32($M.0, $p2319);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i2321 := $zext.i32.i64($i2320);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i2322 := $and.i64($i2321, 65535);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} pci_unmap_single($p2307, $i2317, $i2322, 1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} dev_kfree_skb_irq($p2298);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p2323 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} atomic_dec($p2323);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb328:
    assume $i2274 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p2275 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p2276 := $load.ref($M.0, $p2275);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p2278 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p2279 := $load.ref($M.0, $p2278);
    $i2280 := $add.i64(648, 2);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p2281 := $add.ref($p2276, $mul.ref($i2280, 4));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i2282 := $load.i32($M.0, $p2281);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i2283 := $zext.i32.i64($i2282);
    $i2284 := $add.i64(648, 3);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p2285 := $add.ref($p2276, $mul.ref($i2284, 4));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i2286 := $load.i32($M.0, $p2285);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i2287 := $zext.i32.i64($i2286);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i2288 := $shl.i64($i2287, 32);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i2289 := $or.i64($i2283, $i2288);
    $i2290 := $add.i64(648, 4);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p2291 := $add.ref($p2276, $mul.ref($i2290, 4));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i2292 := $load.i32($M.0, $p2291);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i2293 := $zext.i32.i64($i2292);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i2294 := $and.i64($i2293, 65535);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} pci_unmap_single($p2279, $i2289, $i2294, 1);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} dev_kfree_skb_irq($p2270);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p2295 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} atomic_dec($p2295);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb324:
    assume $i2246 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p2247 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p2248 := $load.ref($M.0, $p2247);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p2250 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p2251 := $load.ref($M.0, $p2250);
    $i2252 := $add.i64(640, 2);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p2253 := $add.ref($p2248, $mul.ref($i2252, 4));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i2254 := $load.i32($M.0, $p2253);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i2255 := $zext.i32.i64($i2254);
    $i2256 := $add.i64(640, 3);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p2257 := $add.ref($p2248, $mul.ref($i2256, 4));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i2258 := $load.i32($M.0, $p2257);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i2259 := $zext.i32.i64($i2258);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i2260 := $shl.i64($i2259, 32);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i2261 := $or.i64($i2255, $i2260);
    $i2262 := $add.i64(640, 4);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p2263 := $add.ref($p2248, $mul.ref($i2262, 4));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i2264 := $load.i32($M.0, $p2263);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i2265 := $zext.i32.i64($i2264);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i2266 := $and.i64($i2265, 65535);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} pci_unmap_single($p2251, $i2261, $i2266, 1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} dev_kfree_skb_irq($p2242);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p2267 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} atomic_dec($p2267);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb320:
    assume $i2218 == 1;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p2219 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p2220 := $load.ref($M.0, $p2219);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p2222 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p2223 := $load.ref($M.0, $p2222);
    $i2224 := $add.i64(632, 2);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p2225 := $add.ref($p2220, $mul.ref($i2224, 4));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i2226 := $load.i32($M.0, $p2225);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i2227 := $zext.i32.i64($i2226);
    $i2228 := $add.i64(632, 3);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p2229 := $add.ref($p2220, $mul.ref($i2228, 4));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i2230 := $load.i32($M.0, $p2229);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i2231 := $zext.i32.i64($i2230);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i2232 := $shl.i64($i2231, 32);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i2233 := $or.i64($i2227, $i2232);
    $i2234 := $add.i64(632, 4);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p2235 := $add.ref($p2220, $mul.ref($i2234, 4));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i2236 := $load.i32($M.0, $p2235);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i2237 := $zext.i32.i64($i2236);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i2238 := $and.i64($i2237, 65535);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} pci_unmap_single($p2223, $i2233, $i2238, 1);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} dev_kfree_skb_irq($p2214);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p2239 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} atomic_dec($p2239);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb316:
    assume $i2190 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p2191 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p2192 := $load.ref($M.0, $p2191);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p2194 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p2195 := $load.ref($M.0, $p2194);
    $i2196 := $add.i64(624, 2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p2197 := $add.ref($p2192, $mul.ref($i2196, 4));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i2198 := $load.i32($M.0, $p2197);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i2199 := $zext.i32.i64($i2198);
    $i2200 := $add.i64(624, 3);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p2201 := $add.ref($p2192, $mul.ref($i2200, 4));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i2202 := $load.i32($M.0, $p2201);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i2203 := $zext.i32.i64($i2202);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i2204 := $shl.i64($i2203, 32);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i2205 := $or.i64($i2199, $i2204);
    $i2206 := $add.i64(624, 4);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p2207 := $add.ref($p2192, $mul.ref($i2206, 4));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i2208 := $load.i32($M.0, $p2207);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i2209 := $zext.i32.i64($i2208);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i2210 := $and.i64($i2209, 65535);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} pci_unmap_single($p2195, $i2205, $i2210, 1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} dev_kfree_skb_irq($p2186);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p2211 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} atomic_dec($p2211);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb312:
    assume $i2162 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p2163 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p2164 := $load.ref($M.0, $p2163);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p2166 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p2167 := $load.ref($M.0, $p2166);
    $i2168 := $add.i64(616, 2);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p2169 := $add.ref($p2164, $mul.ref($i2168, 4));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i2170 := $load.i32($M.0, $p2169);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i2171 := $zext.i32.i64($i2170);
    $i2172 := $add.i64(616, 3);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p2173 := $add.ref($p2164, $mul.ref($i2172, 4));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i2174 := $load.i32($M.0, $p2173);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i2175 := $zext.i32.i64($i2174);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i2176 := $shl.i64($i2175, 32);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i2177 := $or.i64($i2171, $i2176);
    $i2178 := $add.i64(616, 4);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p2179 := $add.ref($p2164, $mul.ref($i2178, 4));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i2180 := $load.i32($M.0, $p2179);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i2181 := $zext.i32.i64($i2180);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i2182 := $and.i64($i2181, 65535);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} pci_unmap_single($p2167, $i2177, $i2182, 1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} dev_kfree_skb_irq($p2158);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p2183 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} atomic_dec($p2183);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb308:
    assume $i2134 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p2135 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p2136 := $load.ref($M.0, $p2135);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p2138 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p2139 := $load.ref($M.0, $p2138);
    $i2140 := $add.i64(608, 2);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p2141 := $add.ref($p2136, $mul.ref($i2140, 4));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i2142 := $load.i32($M.0, $p2141);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i2143 := $zext.i32.i64($i2142);
    $i2144 := $add.i64(608, 3);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p2145 := $add.ref($p2136, $mul.ref($i2144, 4));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i2146 := $load.i32($M.0, $p2145);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i2147 := $zext.i32.i64($i2146);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i2148 := $shl.i64($i2147, 32);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i2149 := $or.i64($i2143, $i2148);
    $i2150 := $add.i64(608, 4);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p2151 := $add.ref($p2136, $mul.ref($i2150, 4));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i2152 := $load.i32($M.0, $p2151);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i2153 := $zext.i32.i64($i2152);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i2154 := $and.i64($i2153, 65535);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} pci_unmap_single($p2139, $i2149, $i2154, 1);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} dev_kfree_skb_irq($p2130);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p2155 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} atomic_dec($p2155);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb304:
    assume $i2106 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p2107 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p2108 := $load.ref($M.0, $p2107);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p2110 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p2111 := $load.ref($M.0, $p2110);
    $i2112 := $add.i64(600, 2);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p2113 := $add.ref($p2108, $mul.ref($i2112, 4));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i2114 := $load.i32($M.0, $p2113);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i2115 := $zext.i32.i64($i2114);
    $i2116 := $add.i64(600, 3);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p2117 := $add.ref($p2108, $mul.ref($i2116, 4));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i2118 := $load.i32($M.0, $p2117);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i2119 := $zext.i32.i64($i2118);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i2120 := $shl.i64($i2119, 32);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i2121 := $or.i64($i2115, $i2120);
    $i2122 := $add.i64(600, 4);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p2123 := $add.ref($p2108, $mul.ref($i2122, 4));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i2124 := $load.i32($M.0, $p2123);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i2125 := $zext.i32.i64($i2124);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i2126 := $and.i64($i2125, 65535);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} pci_unmap_single($p2111, $i2121, $i2126, 1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} dev_kfree_skb_irq($p2102);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p2127 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} atomic_dec($p2127);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb300:
    assume $i2078 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p2079 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p2080 := $load.ref($M.0, $p2079);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p2082 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p2083 := $load.ref($M.0, $p2082);
    $i2084 := $add.i64(592, 2);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p2085 := $add.ref($p2080, $mul.ref($i2084, 4));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i2086 := $load.i32($M.0, $p2085);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i2087 := $zext.i32.i64($i2086);
    $i2088 := $add.i64(592, 3);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p2089 := $add.ref($p2080, $mul.ref($i2088, 4));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i2090 := $load.i32($M.0, $p2089);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i2091 := $zext.i32.i64($i2090);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i2092 := $shl.i64($i2091, 32);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i2093 := $or.i64($i2087, $i2092);
    $i2094 := $add.i64(592, 4);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p2095 := $add.ref($p2080, $mul.ref($i2094, 4));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i2096 := $load.i32($M.0, $p2095);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i2097 := $zext.i32.i64($i2096);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i2098 := $and.i64($i2097, 65535);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} pci_unmap_single($p2083, $i2093, $i2098, 1);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} dev_kfree_skb_irq($p2074);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p2099 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} atomic_dec($p2099);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb296:
    assume $i2050 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p2051 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p2052 := $load.ref($M.0, $p2051);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p2054 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p2055 := $load.ref($M.0, $p2054);
    $i2056 := $add.i64(584, 2);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p2057 := $add.ref($p2052, $mul.ref($i2056, 4));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i2058 := $load.i32($M.0, $p2057);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i2059 := $zext.i32.i64($i2058);
    $i2060 := $add.i64(584, 3);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p2061 := $add.ref($p2052, $mul.ref($i2060, 4));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i2062 := $load.i32($M.0, $p2061);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i2063 := $zext.i32.i64($i2062);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i2064 := $shl.i64($i2063, 32);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i2065 := $or.i64($i2059, $i2064);
    $i2066 := $add.i64(584, 4);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p2067 := $add.ref($p2052, $mul.ref($i2066, 4));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i2068 := $load.i32($M.0, $p2067);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i2069 := $zext.i32.i64($i2068);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i2070 := $and.i64($i2069, 65535);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} pci_unmap_single($p2055, $i2065, $i2070, 1);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} dev_kfree_skb_irq($p2046);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p2071 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} atomic_dec($p2071);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb292:
    assume $i2022 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p2023 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p2024 := $load.ref($M.0, $p2023);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p2026 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p2027 := $load.ref($M.0, $p2026);
    $i2028 := $add.i64(576, 2);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p2029 := $add.ref($p2024, $mul.ref($i2028, 4));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i2030 := $load.i32($M.0, $p2029);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i2031 := $zext.i32.i64($i2030);
    $i2032 := $add.i64(576, 3);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p2033 := $add.ref($p2024, $mul.ref($i2032, 4));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i2034 := $load.i32($M.0, $p2033);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i2035 := $zext.i32.i64($i2034);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i2036 := $shl.i64($i2035, 32);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i2037 := $or.i64($i2031, $i2036);
    $i2038 := $add.i64(576, 4);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p2039 := $add.ref($p2024, $mul.ref($i2038, 4));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i2040 := $load.i32($M.0, $p2039);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i2041 := $zext.i32.i64($i2040);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i2042 := $and.i64($i2041, 65535);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} pci_unmap_single($p2027, $i2037, $i2042, 1);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} dev_kfree_skb_irq($p2018);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p2043 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} atomic_dec($p2043);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb288:
    assume $i1994 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p1995 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p1996 := $load.ref($M.0, $p1995);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p1998 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p1999 := $load.ref($M.0, $p1998);
    $i2000 := $add.i64(568, 2);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p2001 := $add.ref($p1996, $mul.ref($i2000, 4));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i2002 := $load.i32($M.0, $p2001);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i2003 := $zext.i32.i64($i2002);
    $i2004 := $add.i64(568, 3);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p2005 := $add.ref($p1996, $mul.ref($i2004, 4));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i2006 := $load.i32($M.0, $p2005);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i2007 := $zext.i32.i64($i2006);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i2008 := $shl.i64($i2007, 32);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i2009 := $or.i64($i2003, $i2008);
    $i2010 := $add.i64(568, 4);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p2011 := $add.ref($p1996, $mul.ref($i2010, 4));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i2012 := $load.i32($M.0, $p2011);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i2013 := $zext.i32.i64($i2012);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i2014 := $and.i64($i2013, 65535);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} pci_unmap_single($p1999, $i2009, $i2014, 1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} dev_kfree_skb_irq($p1990);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p2015 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} atomic_dec($p2015);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb284:
    assume $i1966 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p1967 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p1968 := $load.ref($M.0, $p1967);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p1970 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p1971 := $load.ref($M.0, $p1970);
    $i1972 := $add.i64(560, 2);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p1973 := $add.ref($p1968, $mul.ref($i1972, 4));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i1974 := $load.i32($M.0, $p1973);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i1975 := $zext.i32.i64($i1974);
    $i1976 := $add.i64(560, 3);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p1977 := $add.ref($p1968, $mul.ref($i1976, 4));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i1978 := $load.i32($M.0, $p1977);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i1979 := $zext.i32.i64($i1978);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i1980 := $shl.i64($i1979, 32);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i1981 := $or.i64($i1975, $i1980);
    $i1982 := $add.i64(560, 4);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p1983 := $add.ref($p1968, $mul.ref($i1982, 4));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i1984 := $load.i32($M.0, $p1983);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i1985 := $zext.i32.i64($i1984);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i1986 := $and.i64($i1985, 65535);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} pci_unmap_single($p1971, $i1981, $i1986, 1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} dev_kfree_skb_irq($p1962);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p1987 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} atomic_dec($p1987);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb280:
    assume $i1938 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p1939 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p1940 := $load.ref($M.0, $p1939);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p1942 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p1943 := $load.ref($M.0, $p1942);
    $i1944 := $add.i64(552, 2);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p1945 := $add.ref($p1940, $mul.ref($i1944, 4));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i1946 := $load.i32($M.0, $p1945);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i1947 := $zext.i32.i64($i1946);
    $i1948 := $add.i64(552, 3);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p1949 := $add.ref($p1940, $mul.ref($i1948, 4));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i1950 := $load.i32($M.0, $p1949);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i1951 := $zext.i32.i64($i1950);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i1952 := $shl.i64($i1951, 32);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i1953 := $or.i64($i1947, $i1952);
    $i1954 := $add.i64(552, 4);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p1955 := $add.ref($p1940, $mul.ref($i1954, 4));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i1956 := $load.i32($M.0, $p1955);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i1957 := $zext.i32.i64($i1956);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i1958 := $and.i64($i1957, 65535);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} pci_unmap_single($p1943, $i1953, $i1958, 1);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} dev_kfree_skb_irq($p1934);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p1959 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} atomic_dec($p1959);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb276:
    assume $i1910 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p1911 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p1912 := $load.ref($M.0, $p1911);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p1914 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p1915 := $load.ref($M.0, $p1914);
    $i1916 := $add.i64(544, 2);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p1917 := $add.ref($p1912, $mul.ref($i1916, 4));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i1918 := $load.i32($M.0, $p1917);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i1919 := $zext.i32.i64($i1918);
    $i1920 := $add.i64(544, 3);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p1921 := $add.ref($p1912, $mul.ref($i1920, 4));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i1922 := $load.i32($M.0, $p1921);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i1923 := $zext.i32.i64($i1922);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i1924 := $shl.i64($i1923, 32);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i1925 := $or.i64($i1919, $i1924);
    $i1926 := $add.i64(544, 4);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p1927 := $add.ref($p1912, $mul.ref($i1926, 4));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i1928 := $load.i32($M.0, $p1927);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i1929 := $zext.i32.i64($i1928);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i1930 := $and.i64($i1929, 65535);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} pci_unmap_single($p1915, $i1925, $i1930, 1);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} dev_kfree_skb_irq($p1906);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p1931 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} atomic_dec($p1931);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb272:
    assume $i1882 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p1883 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p1884 := $load.ref($M.0, $p1883);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p1886 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p1887 := $load.ref($M.0, $p1886);
    $i1888 := $add.i64(536, 2);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p1889 := $add.ref($p1884, $mul.ref($i1888, 4));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i1890 := $load.i32($M.0, $p1889);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i1891 := $zext.i32.i64($i1890);
    $i1892 := $add.i64(536, 3);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p1893 := $add.ref($p1884, $mul.ref($i1892, 4));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i1894 := $load.i32($M.0, $p1893);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i1895 := $zext.i32.i64($i1894);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i1896 := $shl.i64($i1895, 32);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i1897 := $or.i64($i1891, $i1896);
    $i1898 := $add.i64(536, 4);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p1899 := $add.ref($p1884, $mul.ref($i1898, 4));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i1900 := $load.i32($M.0, $p1899);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i1901 := $zext.i32.i64($i1900);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i1902 := $and.i64($i1901, 65535);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} pci_unmap_single($p1887, $i1897, $i1902, 1);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} dev_kfree_skb_irq($p1878);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p1903 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} atomic_dec($p1903);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb268:
    assume $i1854 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p1855 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p1856 := $load.ref($M.0, $p1855);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p1858 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p1859 := $load.ref($M.0, $p1858);
    $i1860 := $add.i64(528, 2);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p1861 := $add.ref($p1856, $mul.ref($i1860, 4));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i1862 := $load.i32($M.0, $p1861);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i1863 := $zext.i32.i64($i1862);
    $i1864 := $add.i64(528, 3);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p1865 := $add.ref($p1856, $mul.ref($i1864, 4));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i1866 := $load.i32($M.0, $p1865);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i1867 := $zext.i32.i64($i1866);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i1868 := $shl.i64($i1867, 32);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i1869 := $or.i64($i1863, $i1868);
    $i1870 := $add.i64(528, 4);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p1871 := $add.ref($p1856, $mul.ref($i1870, 4));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i1872 := $load.i32($M.0, $p1871);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i1873 := $zext.i32.i64($i1872);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i1874 := $and.i64($i1873, 65535);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} pci_unmap_single($p1859, $i1869, $i1874, 1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} dev_kfree_skb_irq($p1850);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p1875 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} atomic_dec($p1875);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb264:
    assume $i1826 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p1827 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p1828 := $load.ref($M.0, $p1827);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p1830 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p1831 := $load.ref($M.0, $p1830);
    $i1832 := $add.i64(520, 2);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p1833 := $add.ref($p1828, $mul.ref($i1832, 4));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i1834 := $load.i32($M.0, $p1833);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i1835 := $zext.i32.i64($i1834);
    $i1836 := $add.i64(520, 3);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p1837 := $add.ref($p1828, $mul.ref($i1836, 4));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i1838 := $load.i32($M.0, $p1837);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i1839 := $zext.i32.i64($i1838);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i1840 := $shl.i64($i1839, 32);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i1841 := $or.i64($i1835, $i1840);
    $i1842 := $add.i64(520, 4);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p1843 := $add.ref($p1828, $mul.ref($i1842, 4));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i1844 := $load.i32($M.0, $p1843);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i1845 := $zext.i32.i64($i1844);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i1846 := $and.i64($i1845, 65535);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} pci_unmap_single($p1831, $i1841, $i1846, 1);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} dev_kfree_skb_irq($p1822);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p1847 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} atomic_dec($p1847);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb260:
    assume $i1798 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p1799 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p1800 := $load.ref($M.0, $p1799);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p1802 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p1803 := $load.ref($M.0, $p1802);
    $i1804 := $add.i64(512, 2);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p1805 := $add.ref($p1800, $mul.ref($i1804, 4));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i1806 := $load.i32($M.0, $p1805);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i1807 := $zext.i32.i64($i1806);
    $i1808 := $add.i64(512, 3);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p1809 := $add.ref($p1800, $mul.ref($i1808, 4));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i1810 := $load.i32($M.0, $p1809);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i1811 := $zext.i32.i64($i1810);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i1812 := $shl.i64($i1811, 32);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i1813 := $or.i64($i1807, $i1812);
    $i1814 := $add.i64(512, 4);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p1815 := $add.ref($p1800, $mul.ref($i1814, 4));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i1816 := $load.i32($M.0, $p1815);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i1817 := $zext.i32.i64($i1816);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i1818 := $and.i64($i1817, 65535);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} pci_unmap_single($p1803, $i1813, $i1818, 1);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} dev_kfree_skb_irq($p1794);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p1819 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} atomic_dec($p1819);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb256:
    assume $i1770 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p1771 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p1772 := $load.ref($M.0, $p1771);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p1774 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p1775 := $load.ref($M.0, $p1774);
    $i1776 := $add.i64(504, 2);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p1777 := $add.ref($p1772, $mul.ref($i1776, 4));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i1778 := $load.i32($M.0, $p1777);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i1779 := $zext.i32.i64($i1778);
    $i1780 := $add.i64(504, 3);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p1781 := $add.ref($p1772, $mul.ref($i1780, 4));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i1782 := $load.i32($M.0, $p1781);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i1783 := $zext.i32.i64($i1782);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i1784 := $shl.i64($i1783, 32);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i1785 := $or.i64($i1779, $i1784);
    $i1786 := $add.i64(504, 4);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p1787 := $add.ref($p1772, $mul.ref($i1786, 4));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i1788 := $load.i32($M.0, $p1787);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i1789 := $zext.i32.i64($i1788);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i1790 := $and.i64($i1789, 65535);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} pci_unmap_single($p1775, $i1785, $i1790, 1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} dev_kfree_skb_irq($p1766);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p1791 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} atomic_dec($p1791);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb252:
    assume $i1742 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p1743 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p1744 := $load.ref($M.0, $p1743);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p1746 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p1747 := $load.ref($M.0, $p1746);
    $i1748 := $add.i64(496, 2);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p1749 := $add.ref($p1744, $mul.ref($i1748, 4));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i1750 := $load.i32($M.0, $p1749);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i1751 := $zext.i32.i64($i1750);
    $i1752 := $add.i64(496, 3);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p1753 := $add.ref($p1744, $mul.ref($i1752, 4));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i1754 := $load.i32($M.0, $p1753);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i1755 := $zext.i32.i64($i1754);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i1756 := $shl.i64($i1755, 32);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i1757 := $or.i64($i1751, $i1756);
    $i1758 := $add.i64(496, 4);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p1759 := $add.ref($p1744, $mul.ref($i1758, 4));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i1760 := $load.i32($M.0, $p1759);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i1761 := $zext.i32.i64($i1760);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i1762 := $and.i64($i1761, 65535);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} pci_unmap_single($p1747, $i1757, $i1762, 1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} dev_kfree_skb_irq($p1738);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p1763 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} atomic_dec($p1763);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb248:
    assume $i1714 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p1715 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p1716 := $load.ref($M.0, $p1715);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p1718 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p1719 := $load.ref($M.0, $p1718);
    $i1720 := $add.i64(488, 2);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p1721 := $add.ref($p1716, $mul.ref($i1720, 4));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i1722 := $load.i32($M.0, $p1721);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i1723 := $zext.i32.i64($i1722);
    $i1724 := $add.i64(488, 3);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p1725 := $add.ref($p1716, $mul.ref($i1724, 4));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i1726 := $load.i32($M.0, $p1725);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i1727 := $zext.i32.i64($i1726);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i1728 := $shl.i64($i1727, 32);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i1729 := $or.i64($i1723, $i1728);
    $i1730 := $add.i64(488, 4);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p1731 := $add.ref($p1716, $mul.ref($i1730, 4));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i1732 := $load.i32($M.0, $p1731);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i1733 := $zext.i32.i64($i1732);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i1734 := $and.i64($i1733, 65535);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} pci_unmap_single($p1719, $i1729, $i1734, 1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} dev_kfree_skb_irq($p1710);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p1735 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} atomic_dec($p1735);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb244:
    assume $i1686 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p1687 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p1688 := $load.ref($M.0, $p1687);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p1690 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p1691 := $load.ref($M.0, $p1690);
    $i1692 := $add.i64(480, 2);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p1693 := $add.ref($p1688, $mul.ref($i1692, 4));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i1694 := $load.i32($M.0, $p1693);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i1695 := $zext.i32.i64($i1694);
    $i1696 := $add.i64(480, 3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p1697 := $add.ref($p1688, $mul.ref($i1696, 4));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i1698 := $load.i32($M.0, $p1697);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i1699 := $zext.i32.i64($i1698);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i1700 := $shl.i64($i1699, 32);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i1701 := $or.i64($i1695, $i1700);
    $i1702 := $add.i64(480, 4);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p1703 := $add.ref($p1688, $mul.ref($i1702, 4));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i1704 := $load.i32($M.0, $p1703);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i1705 := $zext.i32.i64($i1704);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i1706 := $and.i64($i1705, 65535);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} pci_unmap_single($p1691, $i1701, $i1706, 1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} dev_kfree_skb_irq($p1682);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p1707 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} atomic_dec($p1707);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb240:
    assume $i1658 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p1659 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p1660 := $load.ref($M.0, $p1659);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p1662 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p1663 := $load.ref($M.0, $p1662);
    $i1664 := $add.i64(472, 2);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p1665 := $add.ref($p1660, $mul.ref($i1664, 4));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i1666 := $load.i32($M.0, $p1665);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i1667 := $zext.i32.i64($i1666);
    $i1668 := $add.i64(472, 3);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p1669 := $add.ref($p1660, $mul.ref($i1668, 4));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i1670 := $load.i32($M.0, $p1669);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i1671 := $zext.i32.i64($i1670);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i1672 := $shl.i64($i1671, 32);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i1673 := $or.i64($i1667, $i1672);
    $i1674 := $add.i64(472, 4);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p1675 := $add.ref($p1660, $mul.ref($i1674, 4));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i1676 := $load.i32($M.0, $p1675);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i1677 := $zext.i32.i64($i1676);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i1678 := $and.i64($i1677, 65535);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} pci_unmap_single($p1663, $i1673, $i1678, 1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_kfree_skb_irq($p1654);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p1679 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} atomic_dec($p1679);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb236:
    assume $i1630 == 1;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p1631 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p1632 := $load.ref($M.0, $p1631);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p1634 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p1635 := $load.ref($M.0, $p1634);
    $i1636 := $add.i64(464, 2);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p1637 := $add.ref($p1632, $mul.ref($i1636, 4));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i1638 := $load.i32($M.0, $p1637);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i1639 := $zext.i32.i64($i1638);
    $i1640 := $add.i64(464, 3);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($p1632, $mul.ref($i1640, 4));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i1642 := $load.i32($M.0, $p1641);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i1643 := $zext.i32.i64($i1642);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i1644 := $shl.i64($i1643, 32);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i1645 := $or.i64($i1639, $i1644);
    $i1646 := $add.i64(464, 4);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($p1632, $mul.ref($i1646, 4));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i1648 := $load.i32($M.0, $p1647);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i1649 := $zext.i32.i64($i1648);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i1650 := $and.i64($i1649, 65535);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} pci_unmap_single($p1635, $i1645, $i1650, 1);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} dev_kfree_skb_irq($p1626);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p1651 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} atomic_dec($p1651);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb232:
    assume $i1602 == 1;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p1603 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p1604 := $load.ref($M.0, $p1603);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p1606 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p1607 := $load.ref($M.0, $p1606);
    $i1608 := $add.i64(456, 2);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p1609 := $add.ref($p1604, $mul.ref($i1608, 4));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i1610 := $load.i32($M.0, $p1609);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i1611 := $zext.i32.i64($i1610);
    $i1612 := $add.i64(456, 3);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p1613 := $add.ref($p1604, $mul.ref($i1612, 4));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i1614 := $load.i32($M.0, $p1613);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i1615 := $zext.i32.i64($i1614);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i1616 := $shl.i64($i1615, 32);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i1617 := $or.i64($i1611, $i1616);
    $i1618 := $add.i64(456, 4);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p1619 := $add.ref($p1604, $mul.ref($i1618, 4));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i1620 := $load.i32($M.0, $p1619);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i1621 := $zext.i32.i64($i1620);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i1622 := $and.i64($i1621, 65535);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} pci_unmap_single($p1607, $i1617, $i1622, 1);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} dev_kfree_skb_irq($p1598);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p1623 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} atomic_dec($p1623);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb228:
    assume $i1574 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p1575 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p1576 := $load.ref($M.0, $p1575);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p1578 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p1579 := $load.ref($M.0, $p1578);
    $i1580 := $add.i64(448, 2);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p1581 := $add.ref($p1576, $mul.ref($i1580, 4));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i1582 := $load.i32($M.0, $p1581);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i1583 := $zext.i32.i64($i1582);
    $i1584 := $add.i64(448, 3);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p1585 := $add.ref($p1576, $mul.ref($i1584, 4));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i1586 := $load.i32($M.0, $p1585);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i1587 := $zext.i32.i64($i1586);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i1588 := $shl.i64($i1587, 32);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i1589 := $or.i64($i1583, $i1588);
    $i1590 := $add.i64(448, 4);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p1591 := $add.ref($p1576, $mul.ref($i1590, 4));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i1592 := $load.i32($M.0, $p1591);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i1593 := $zext.i32.i64($i1592);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i1594 := $and.i64($i1593, 65535);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} pci_unmap_single($p1579, $i1589, $i1594, 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} dev_kfree_skb_irq($p1570);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p1595 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} atomic_dec($p1595);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb224:
    assume $i1546 == 1;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p1547 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p1548 := $load.ref($M.0, $p1547);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p1551 := $load.ref($M.0, $p1550);
    $i1552 := $add.i64(440, 2);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p1553 := $add.ref($p1548, $mul.ref($i1552, 4));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i1554 := $load.i32($M.0, $p1553);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i1555 := $zext.i32.i64($i1554);
    $i1556 := $add.i64(440, 3);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p1557 := $add.ref($p1548, $mul.ref($i1556, 4));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i1558 := $load.i32($M.0, $p1557);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i1559 := $zext.i32.i64($i1558);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i1560 := $shl.i64($i1559, 32);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i1561 := $or.i64($i1555, $i1560);
    $i1562 := $add.i64(440, 4);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p1563 := $add.ref($p1548, $mul.ref($i1562, 4));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i1564 := $load.i32($M.0, $p1563);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i1565 := $zext.i32.i64($i1564);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i1566 := $and.i64($i1565, 65535);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} pci_unmap_single($p1551, $i1561, $i1566, 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} dev_kfree_skb_irq($p1542);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p1567 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} atomic_dec($p1567);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb220:
    assume $i1518 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p1519 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p1520 := $load.ref($M.0, $p1519);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p1522 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p1523 := $load.ref($M.0, $p1522);
    $i1524 := $add.i64(432, 2);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p1525 := $add.ref($p1520, $mul.ref($i1524, 4));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i1526 := $load.i32($M.0, $p1525);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i1527 := $zext.i32.i64($i1526);
    $i1528 := $add.i64(432, 3);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p1529 := $add.ref($p1520, $mul.ref($i1528, 4));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i1530 := $load.i32($M.0, $p1529);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i1531 := $zext.i32.i64($i1530);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i1532 := $shl.i64($i1531, 32);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i1533 := $or.i64($i1527, $i1532);
    $i1534 := $add.i64(432, 4);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($p1520, $mul.ref($i1534, 4));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i1536 := $load.i32($M.0, $p1535);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i1537 := $zext.i32.i64($i1536);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i1538 := $and.i64($i1537, 65535);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} pci_unmap_single($p1523, $i1533, $i1538, 1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} dev_kfree_skb_irq($p1514);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p1539 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} atomic_dec($p1539);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb216:
    assume $i1490 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p1491 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p1492 := $load.ref($M.0, $p1491);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p1494 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p1495 := $load.ref($M.0, $p1494);
    $i1496 := $add.i64(424, 2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($p1492, $mul.ref($i1496, 4));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i1498 := $load.i32($M.0, $p1497);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i1499 := $zext.i32.i64($i1498);
    $i1500 := $add.i64(424, 3);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p1501 := $add.ref($p1492, $mul.ref($i1500, 4));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i1502 := $load.i32($M.0, $p1501);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i1503 := $zext.i32.i64($i1502);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i1504 := $shl.i64($i1503, 32);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i1505 := $or.i64($i1499, $i1504);
    $i1506 := $add.i64(424, 4);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p1507 := $add.ref($p1492, $mul.ref($i1506, 4));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i1508 := $load.i32($M.0, $p1507);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i1509 := $zext.i32.i64($i1508);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i1510 := $and.i64($i1509, 65535);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} pci_unmap_single($p1495, $i1505, $i1510, 1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} dev_kfree_skb_irq($p1486);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p1511 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} atomic_dec($p1511);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb212:
    assume $i1462 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p1463 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p1464 := $load.ref($M.0, $p1463);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p1466 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p1467 := $load.ref($M.0, $p1466);
    $i1468 := $add.i64(416, 2);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p1469 := $add.ref($p1464, $mul.ref($i1468, 4));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i1470 := $load.i32($M.0, $p1469);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i1471 := $zext.i32.i64($i1470);
    $i1472 := $add.i64(416, 3);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p1473 := $add.ref($p1464, $mul.ref($i1472, 4));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i1474 := $load.i32($M.0, $p1473);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i1475 := $zext.i32.i64($i1474);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i1476 := $shl.i64($i1475, 32);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i1477 := $or.i64($i1471, $i1476);
    $i1478 := $add.i64(416, 4);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p1479 := $add.ref($p1464, $mul.ref($i1478, 4));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i1480 := $load.i32($M.0, $p1479);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i1481 := $zext.i32.i64($i1480);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i1482 := $and.i64($i1481, 65535);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} pci_unmap_single($p1467, $i1477, $i1482, 1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} dev_kfree_skb_irq($p1458);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p1483 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} atomic_dec($p1483);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb208:
    assume $i1434 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p1435 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p1436 := $load.ref($M.0, $p1435);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p1438 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p1439 := $load.ref($M.0, $p1438);
    $i1440 := $add.i64(408, 2);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p1441 := $add.ref($p1436, $mul.ref($i1440, 4));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i1442 := $load.i32($M.0, $p1441);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i1443 := $zext.i32.i64($i1442);
    $i1444 := $add.i64(408, 3);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p1445 := $add.ref($p1436, $mul.ref($i1444, 4));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i1446 := $load.i32($M.0, $p1445);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i1447 := $zext.i32.i64($i1446);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i1448 := $shl.i64($i1447, 32);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i1449 := $or.i64($i1443, $i1448);
    $i1450 := $add.i64(408, 4);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p1451 := $add.ref($p1436, $mul.ref($i1450, 4));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i1452 := $load.i32($M.0, $p1451);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i1453 := $zext.i32.i64($i1452);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i1454 := $and.i64($i1453, 65535);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} pci_unmap_single($p1439, $i1449, $i1454, 1);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} dev_kfree_skb_irq($p1430);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p1455 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} atomic_dec($p1455);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb204:
    assume $i1406 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p1407 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p1408 := $load.ref($M.0, $p1407);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p1410 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p1411 := $load.ref($M.0, $p1410);
    $i1412 := $add.i64(400, 2);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p1413 := $add.ref($p1408, $mul.ref($i1412, 4));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i1414 := $load.i32($M.0, $p1413);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i1415 := $zext.i32.i64($i1414);
    $i1416 := $add.i64(400, 3);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p1417 := $add.ref($p1408, $mul.ref($i1416, 4));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i1418 := $load.i32($M.0, $p1417);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i1419 := $zext.i32.i64($i1418);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i1420 := $shl.i64($i1419, 32);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i1421 := $or.i64($i1415, $i1420);
    $i1422 := $add.i64(400, 4);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p1423 := $add.ref($p1408, $mul.ref($i1422, 4));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i1424 := $load.i32($M.0, $p1423);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i1425 := $zext.i32.i64($i1424);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i1426 := $and.i64($i1425, 65535);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} pci_unmap_single($p1411, $i1421, $i1426, 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} dev_kfree_skb_irq($p1402);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p1427 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} atomic_dec($p1427);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb200:
    assume $i1378 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p1379 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p1380 := $load.ref($M.0, $p1379);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p1382 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p1383 := $load.ref($M.0, $p1382);
    $i1384 := $add.i64(392, 2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p1385 := $add.ref($p1380, $mul.ref($i1384, 4));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i1386 := $load.i32($M.0, $p1385);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i1387 := $zext.i32.i64($i1386);
    $i1388 := $add.i64(392, 3);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($p1380, $mul.ref($i1388, 4));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i1390 := $load.i32($M.0, $p1389);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i1391 := $zext.i32.i64($i1390);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i1392 := $shl.i64($i1391, 32);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i1393 := $or.i64($i1387, $i1392);
    $i1394 := $add.i64(392, 4);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($p1380, $mul.ref($i1394, 4));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i1396 := $load.i32($M.0, $p1395);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i1397 := $zext.i32.i64($i1396);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i1398 := $and.i64($i1397, 65535);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} pci_unmap_single($p1383, $i1393, $i1398, 1);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} dev_kfree_skb_irq($p1374);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p1399 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} atomic_dec($p1399);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb196:
    assume $i1350 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p1351 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p1352 := $load.ref($M.0, $p1351);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p1354 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p1355 := $load.ref($M.0, $p1354);
    $i1356 := $add.i64(384, 2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p1357 := $add.ref($p1352, $mul.ref($i1356, 4));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i1358 := $load.i32($M.0, $p1357);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i1359 := $zext.i32.i64($i1358);
    $i1360 := $add.i64(384, 3);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($p1352, $mul.ref($i1360, 4));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i1362 := $load.i32($M.0, $p1361);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i1363 := $zext.i32.i64($i1362);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i1364 := $shl.i64($i1363, 32);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i1365 := $or.i64($i1359, $i1364);
    $i1366 := $add.i64(384, 4);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p1367 := $add.ref($p1352, $mul.ref($i1366, 4));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i1368 := $load.i32($M.0, $p1367);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i1369 := $zext.i32.i64($i1368);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i1370 := $and.i64($i1369, 65535);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} pci_unmap_single($p1355, $i1365, $i1370, 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} dev_kfree_skb_irq($p1346);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p1371 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} atomic_dec($p1371);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb192:
    assume $i1322 == 1;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p1323 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p1324 := $load.ref($M.0, $p1323);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p1326 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p1327 := $load.ref($M.0, $p1326);
    $i1328 := $add.i64(376, 2);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($p1324, $mul.ref($i1328, 4));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i1330 := $load.i32($M.0, $p1329);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i1331 := $zext.i32.i64($i1330);
    $i1332 := $add.i64(376, 3);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p1333 := $add.ref($p1324, $mul.ref($i1332, 4));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i1334 := $load.i32($M.0, $p1333);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i1335 := $zext.i32.i64($i1334);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i1336 := $shl.i64($i1335, 32);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i1337 := $or.i64($i1331, $i1336);
    $i1338 := $add.i64(376, 4);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($p1324, $mul.ref($i1338, 4));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i1340 := $load.i32($M.0, $p1339);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i1341 := $zext.i32.i64($i1340);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i1342 := $and.i64($i1341, 65535);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} pci_unmap_single($p1327, $i1337, $i1342, 1);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} dev_kfree_skb_irq($p1318);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p1343 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} atomic_dec($p1343);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb188:
    assume $i1294 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p1296 := $load.ref($M.0, $p1295);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p1299 := $load.ref($M.0, $p1298);
    $i1300 := $add.i64(368, 2);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p1301 := $add.ref($p1296, $mul.ref($i1300, 4));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i1302 := $load.i32($M.0, $p1301);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i1303 := $zext.i32.i64($i1302);
    $i1304 := $add.i64(368, 3);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($p1296, $mul.ref($i1304, 4));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i1306 := $load.i32($M.0, $p1305);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i1307 := $zext.i32.i64($i1306);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i1308 := $shl.i64($i1307, 32);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i1309 := $or.i64($i1303, $i1308);
    $i1310 := $add.i64(368, 4);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($p1296, $mul.ref($i1310, 4));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i1312 := $load.i32($M.0, $p1311);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i1313 := $zext.i32.i64($i1312);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i1314 := $and.i64($i1313, 65535);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} pci_unmap_single($p1299, $i1309, $i1314, 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} dev_kfree_skb_irq($p1290);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p1315 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} atomic_dec($p1315);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb184:
    assume $i1266 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p1267 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p1268 := $load.ref($M.0, $p1267);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p1271 := $load.ref($M.0, $p1270);
    $i1272 := $add.i64(360, 2);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p1273 := $add.ref($p1268, $mul.ref($i1272, 4));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i1274 := $load.i32($M.0, $p1273);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i1275 := $zext.i32.i64($i1274);
    $i1276 := $add.i64(360, 3);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p1277 := $add.ref($p1268, $mul.ref($i1276, 4));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i1278 := $load.i32($M.0, $p1277);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i1279 := $zext.i32.i64($i1278);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i1280 := $shl.i64($i1279, 32);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i1281 := $or.i64($i1275, $i1280);
    $i1282 := $add.i64(360, 4);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p1283 := $add.ref($p1268, $mul.ref($i1282, 4));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i1284 := $load.i32($M.0, $p1283);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i32.i64($i1284);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i1286 := $and.i64($i1285, 65535);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} pci_unmap_single($p1271, $i1281, $i1286, 1);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} dev_kfree_skb_irq($p1262);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p1287 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} atomic_dec($p1287);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb180:
    assume $i1238 == 1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p1239 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p1240 := $load.ref($M.0, $p1239);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p1243 := $load.ref($M.0, $p1242);
    $i1244 := $add.i64(352, 2);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p1245 := $add.ref($p1240, $mul.ref($i1244, 4));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i1246 := $load.i32($M.0, $p1245);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i1247 := $zext.i32.i64($i1246);
    $i1248 := $add.i64(352, 3);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p1249 := $add.ref($p1240, $mul.ref($i1248, 4));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i1250 := $load.i32($M.0, $p1249);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i1251 := $zext.i32.i64($i1250);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i1252 := $shl.i64($i1251, 32);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i1253 := $or.i64($i1247, $i1252);
    $i1254 := $add.i64(352, 4);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p1255 := $add.ref($p1240, $mul.ref($i1254, 4));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i1256 := $load.i32($M.0, $p1255);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i1257 := $zext.i32.i64($i1256);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i1258 := $and.i64($i1257, 65535);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} pci_unmap_single($p1243, $i1253, $i1258, 1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} dev_kfree_skb_irq($p1234);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p1259 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} atomic_dec($p1259);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb176:
    assume $i1210 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p1212 := $load.ref($M.0, $p1211);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p1214 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p1215 := $load.ref($M.0, $p1214);
    $i1216 := $add.i64(344, 2);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p1217 := $add.ref($p1212, $mul.ref($i1216, 4));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i1218 := $load.i32($M.0, $p1217);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i1219 := $zext.i32.i64($i1218);
    $i1220 := $add.i64(344, 3);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($p1212, $mul.ref($i1220, 4));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i1222 := $load.i32($M.0, $p1221);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i1223 := $zext.i32.i64($i1222);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i1224 := $shl.i64($i1223, 32);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i1225 := $or.i64($i1219, $i1224);
    $i1226 := $add.i64(344, 4);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($p1212, $mul.ref($i1226, 4));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i1228 := $load.i32($M.0, $p1227);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i1229 := $zext.i32.i64($i1228);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i1230 := $and.i64($i1229, 65535);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} pci_unmap_single($p1215, $i1225, $i1230, 1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} dev_kfree_skb_irq($p1206);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p1231 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} atomic_dec($p1231);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb172:
    assume $i1182 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p1183 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p1184 := $load.ref($M.0, $p1183);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p1187 := $load.ref($M.0, $p1186);
    $i1188 := $add.i64(336, 2);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p1189 := $add.ref($p1184, $mul.ref($i1188, 4));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i1190 := $load.i32($M.0, $p1189);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i1191 := $zext.i32.i64($i1190);
    $i1192 := $add.i64(336, 3);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p1193 := $add.ref($p1184, $mul.ref($i1192, 4));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i1194 := $load.i32($M.0, $p1193);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i1195 := $zext.i32.i64($i1194);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i1196 := $shl.i64($i1195, 32);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i1197 := $or.i64($i1191, $i1196);
    $i1198 := $add.i64(336, 4);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($p1184, $mul.ref($i1198, 4));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i1200 := $load.i32($M.0, $p1199);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i1201 := $zext.i32.i64($i1200);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i1202 := $and.i64($i1201, 65535);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} pci_unmap_single($p1187, $i1197, $i1202, 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} dev_kfree_skb_irq($p1178);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} atomic_dec($p1203);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb168:
    assume $i1154 == 1;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p1156 := $load.ref($M.0, $p1155);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p1158 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p1159 := $load.ref($M.0, $p1158);
    $i1160 := $add.i64(328, 2);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($p1156, $mul.ref($i1160, 4));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i1162 := $load.i32($M.0, $p1161);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i1163 := $zext.i32.i64($i1162);
    $i1164 := $add.i64(328, 3);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p1165 := $add.ref($p1156, $mul.ref($i1164, 4));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i1166 := $load.i32($M.0, $p1165);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i1167 := $zext.i32.i64($i1166);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i1168 := $shl.i64($i1167, 32);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i1169 := $or.i64($i1163, $i1168);
    $i1170 := $add.i64(328, 4);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p1171 := $add.ref($p1156, $mul.ref($i1170, 4));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i1172 := $load.i32($M.0, $p1171);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i1173 := $zext.i32.i64($i1172);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i1174 := $and.i64($i1173, 65535);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} pci_unmap_single($p1159, $i1169, $i1174, 1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} dev_kfree_skb_irq($p1150);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p1175 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} atomic_dec($p1175);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb164:
    assume $i1126 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p1127 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p1128 := $load.ref($M.0, $p1127);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p1131 := $load.ref($M.0, $p1130);
    $i1132 := $add.i64(320, 2);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p1133 := $add.ref($p1128, $mul.ref($i1132, 4));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i1134 := $load.i32($M.0, $p1133);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i1135 := $zext.i32.i64($i1134);
    $i1136 := $add.i64(320, 3);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p1137 := $add.ref($p1128, $mul.ref($i1136, 4));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i1138 := $load.i32($M.0, $p1137);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i1139 := $zext.i32.i64($i1138);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i1140 := $shl.i64($i1139, 32);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i1141 := $or.i64($i1135, $i1140);
    $i1142 := $add.i64(320, 4);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p1143 := $add.ref($p1128, $mul.ref($i1142, 4));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i1144 := $load.i32($M.0, $p1143);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i1145 := $zext.i32.i64($i1144);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i1146 := $and.i64($i1145, 65535);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} pci_unmap_single($p1131, $i1141, $i1146, 1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} dev_kfree_skb_irq($p1122);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p1147 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} atomic_dec($p1147);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb160:
    assume $i1098 == 1;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p1099 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p1100 := $load.ref($M.0, $p1099);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p1102 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p1103 := $load.ref($M.0, $p1102);
    $i1104 := $add.i64(312, 2);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($p1100, $mul.ref($i1104, 4));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i1106 := $load.i32($M.0, $p1105);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i1107 := $zext.i32.i64($i1106);
    $i1108 := $add.i64(312, 3);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($p1100, $mul.ref($i1108, 4));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i1110 := $load.i32($M.0, $p1109);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i1111 := $zext.i32.i64($i1110);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i1112 := $shl.i64($i1111, 32);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i1113 := $or.i64($i1107, $i1112);
    $i1114 := $add.i64(312, 4);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($p1100, $mul.ref($i1114, 4));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i1116 := $load.i32($M.0, $p1115);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i1117 := $zext.i32.i64($i1116);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i1118 := $and.i64($i1117, 65535);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} pci_unmap_single($p1103, $i1113, $i1118, 1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} dev_kfree_skb_irq($p1094);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} atomic_dec($p1119);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb156:
    assume $i1070 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.0, $p1071);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p1075 := $load.ref($M.0, $p1074);
    $i1076 := $add.i64(304, 2);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p1077 := $add.ref($p1072, $mul.ref($i1076, 4));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i1078 := $load.i32($M.0, $p1077);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i1079 := $zext.i32.i64($i1078);
    $i1080 := $add.i64(304, 3);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($p1072, $mul.ref($i1080, 4));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i1082 := $load.i32($M.0, $p1081);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i1083 := $zext.i32.i64($i1082);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i1084 := $shl.i64($i1083, 32);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i1085 := $or.i64($i1079, $i1084);
    $i1086 := $add.i64(304, 4);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($p1072, $mul.ref($i1086, 4));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i1088 := $load.i32($M.0, $p1087);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i1089 := $zext.i32.i64($i1088);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i1090 := $and.i64($i1089, 65535);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} pci_unmap_single($p1075, $i1085, $i1090, 1);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} dev_kfree_skb_irq($p1066);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p1091 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} atomic_dec($p1091);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb152:
    assume $i1042 == 1;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p1043 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p1044 := $load.ref($M.0, $p1043);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p1047 := $load.ref($M.0, $p1046);
    $i1048 := $add.i64(296, 2);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p1049 := $add.ref($p1044, $mul.ref($i1048, 4));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i1050 := $load.i32($M.0, $p1049);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i1051 := $zext.i32.i64($i1050);
    $i1052 := $add.i64(296, 3);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($p1044, $mul.ref($i1052, 4));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i1054 := $load.i32($M.0, $p1053);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i1055 := $zext.i32.i64($i1054);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i1056 := $shl.i64($i1055, 32);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i1057 := $or.i64($i1051, $i1056);
    $i1058 := $add.i64(296, 4);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p1059 := $add.ref($p1044, $mul.ref($i1058, 4));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i1060 := $load.i32($M.0, $p1059);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i1061 := $zext.i32.i64($i1060);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i1062 := $and.i64($i1061, 65535);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} pci_unmap_single($p1047, $i1057, $i1062, 1);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} dev_kfree_skb_irq($p1038);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p1063 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} atomic_dec($p1063);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb148:
    assume $i1014 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p1015 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p1016 := $load.ref($M.0, $p1015);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p1019 := $load.ref($M.0, $p1018);
    $i1020 := $add.i64(288, 2);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($p1016, $mul.ref($i1020, 4));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i1022 := $load.i32($M.0, $p1021);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i1023 := $zext.i32.i64($i1022);
    $i1024 := $add.i64(288, 3);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p1025 := $add.ref($p1016, $mul.ref($i1024, 4));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i1026 := $load.i32($M.0, $p1025);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i1027 := $zext.i32.i64($i1026);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i1028 := $shl.i64($i1027, 32);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i1029 := $or.i64($i1023, $i1028);
    $i1030 := $add.i64(288, 4);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($p1016, $mul.ref($i1030, 4));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i1032 := $load.i32($M.0, $p1031);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i1033 := $zext.i32.i64($i1032);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i1034 := $and.i64($i1033, 65535);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} pci_unmap_single($p1019, $i1029, $i1034, 1);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} dev_kfree_skb_irq($p1010);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} atomic_dec($p1035);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb144:
    assume $i986 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p988 := $load.ref($M.0, $p987);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p991 := $load.ref($M.0, $p990);
    $i992 := $add.i64(280, 2);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($p988, $mul.ref($i992, 4));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i994 := $load.i32($M.0, $p993);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i995 := $zext.i32.i64($i994);
    $i996 := $add.i64(280, 3);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($p988, $mul.ref($i996, 4));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i998 := $load.i32($M.0, $p997);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i999 := $zext.i32.i64($i998);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i1000 := $shl.i64($i999, 32);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i1001 := $or.i64($i995, $i1000);
    $i1002 := $add.i64(280, 4);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($p988, $mul.ref($i1002, 4));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i1004 := $load.i32($M.0, $p1003);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i1005 := $zext.i32.i64($i1004);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i1006 := $and.i64($i1005, 65535);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} pci_unmap_single($p991, $i1001, $i1006, 1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} dev_kfree_skb_irq($p982);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p1007 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} atomic_dec($p1007);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb140:
    assume $i958 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p960 := $load.ref($M.0, $p959);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p963 := $load.ref($M.0, $p962);
    $i964 := $add.i64(272, 2);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($p960, $mul.ref($i964, 4));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i966 := $load.i32($M.0, $p965);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i967 := $zext.i32.i64($i966);
    $i968 := $add.i64(272, 3);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($p960, $mul.ref($i968, 4));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i970 := $load.i32($M.0, $p969);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i971 := $zext.i32.i64($i970);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i972 := $shl.i64($i971, 32);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i973 := $or.i64($i967, $i972);
    $i974 := $add.i64(272, 4);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($p960, $mul.ref($i974, 4));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i976 := $load.i32($M.0, $p975);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i977 := $zext.i32.i64($i976);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i978 := $and.i64($i977, 65535);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} pci_unmap_single($p963, $i973, $i978, 1);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} dev_kfree_skb_irq($p954);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p979 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} atomic_dec($p979);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb136:
    assume $i930 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.0, $p931);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p935 := $load.ref($M.0, $p934);
    $i936 := $add.i64(264, 2);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p937 := $add.ref($p932, $mul.ref($i936, 4));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i938 := $load.i32($M.0, $p937);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i939 := $zext.i32.i64($i938);
    $i940 := $add.i64(264, 3);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($p932, $mul.ref($i940, 4));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i942 := $load.i32($M.0, $p941);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i943 := $zext.i32.i64($i942);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i944 := $shl.i64($i943, 32);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i945 := $or.i64($i939, $i944);
    $i946 := $add.i64(264, 4);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p947 := $add.ref($p932, $mul.ref($i946, 4));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i948 := $load.i32($M.0, $p947);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i949 := $zext.i32.i64($i948);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i950 := $and.i64($i949, 65535);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} pci_unmap_single($p935, $i945, $i950, 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} dev_kfree_skb_irq($p926);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} atomic_dec($p951);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb132:
    assume $i902 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p904 := $load.ref($M.0, $p903);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p907 := $load.ref($M.0, $p906);
    $i908 := $add.i64(256, 2);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($p904, $mul.ref($i908, 4));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i910 := $load.i32($M.0, $p909);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i911 := $zext.i32.i64($i910);
    $i912 := $add.i64(256, 3);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($p904, $mul.ref($i912, 4));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i914 := $load.i32($M.0, $p913);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i915 := $zext.i32.i64($i914);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i916 := $shl.i64($i915, 32);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i917 := $or.i64($i911, $i916);
    $i918 := $add.i64(256, 4);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($p904, $mul.ref($i918, 4));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i920 := $load.i32($M.0, $p919);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i921 := $zext.i32.i64($i920);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i922 := $and.i64($i921, 65535);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} pci_unmap_single($p907, $i917, $i922, 1);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} dev_kfree_skb_irq($p898);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} atomic_dec($p923);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb128:
    assume $i874 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p876 := $load.ref($M.0, $p875);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p879 := $load.ref($M.0, $p878);
    $i880 := $add.i64(248, 2);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($p876, $mul.ref($i880, 4));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i882 := $load.i32($M.0, $p881);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i883 := $zext.i32.i64($i882);
    $i884 := $add.i64(248, 3);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($p876, $mul.ref($i884, 4));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i886 := $load.i32($M.0, $p885);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i887 := $zext.i32.i64($i886);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i888 := $shl.i64($i887, 32);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i889 := $or.i64($i883, $i888);
    $i890 := $add.i64(248, 4);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($p876, $mul.ref($i890, 4));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i892 := $load.i32($M.0, $p891);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i893 := $zext.i32.i64($i892);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i894 := $and.i64($i893, 65535);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} pci_unmap_single($p879, $i889, $i894, 1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} dev_kfree_skb_irq($p870);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} atomic_dec($p895);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb124:
    assume $i846 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.0, $p847);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p851 := $load.ref($M.0, $p850);
    $i852 := $add.i64(240, 2);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($p848, $mul.ref($i852, 4));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i854 := $load.i32($M.0, $p853);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i855 := $zext.i32.i64($i854);
    $i856 := $add.i64(240, 3);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($p848, $mul.ref($i856, 4));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i858 := $load.i32($M.0, $p857);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i859 := $zext.i32.i64($i858);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i860 := $shl.i64($i859, 32);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i861 := $or.i64($i855, $i860);
    $i862 := $add.i64(240, 4);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($p848, $mul.ref($i862, 4));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i864 := $load.i32($M.0, $p863);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i865 := $zext.i32.i64($i864);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i866 := $and.i64($i865, 65535);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} pci_unmap_single($p851, $i861, $i866, 1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} dev_kfree_skb_irq($p842);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} atomic_dec($p867);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i818 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p820 := $load.ref($M.0, $p819);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p823 := $load.ref($M.0, $p822);
    $i824 := $add.i64(232, 2);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($p820, $mul.ref($i824, 4));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i826 := $load.i32($M.0, $p825);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i827 := $zext.i32.i64($i826);
    $i828 := $add.i64(232, 3);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($p820, $mul.ref($i828, 4));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i830 := $load.i32($M.0, $p829);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i831 := $zext.i32.i64($i830);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i832 := $shl.i64($i831, 32);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i833 := $or.i64($i827, $i832);
    $i834 := $add.i64(232, 4);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($p820, $mul.ref($i834, 4));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i836 := $load.i32($M.0, $p835);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i837 := $zext.i32.i64($i836);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i838 := $and.i64($i837, 65535);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} pci_unmap_single($p823, $i833, $i838, 1);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} dev_kfree_skb_irq($p814);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} atomic_dec($p839);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb116:
    assume $i790 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.0, $p791);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p795 := $load.ref($M.0, $p794);
    $i796 := $add.i64(224, 2);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($p792, $mul.ref($i796, 4));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i798 := $load.i32($M.0, $p797);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i799 := $zext.i32.i64($i798);
    $i800 := $add.i64(224, 3);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($p792, $mul.ref($i800, 4));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p801);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i803 := $zext.i32.i64($i802);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i804 := $shl.i64($i803, 32);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i805 := $or.i64($i799, $i804);
    $i806 := $add.i64(224, 4);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($p792, $mul.ref($i806, 4));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i808 := $load.i32($M.0, $p807);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i809 := $zext.i32.i64($i808);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i810 := $and.i64($i809, 65535);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} pci_unmap_single($p795, $i805, $i810, 1);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} dev_kfree_skb_irq($p786);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} atomic_dec($p811);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb112:
    assume $i762 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p764 := $load.ref($M.0, $p763);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p767 := $load.ref($M.0, $p766);
    $i768 := $add.i64(216, 2);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($p764, $mul.ref($i768, 4));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i770 := $load.i32($M.0, $p769);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i771 := $zext.i32.i64($i770);
    $i772 := $add.i64(216, 3);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($p764, $mul.ref($i772, 4));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i774 := $load.i32($M.0, $p773);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i775 := $zext.i32.i64($i774);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i776 := $shl.i64($i775, 32);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i777 := $or.i64($i771, $i776);
    $i778 := $add.i64(216, 4);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($p764, $mul.ref($i778, 4));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i780 := $load.i32($M.0, $p779);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i781 := $zext.i32.i64($i780);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i782 := $and.i64($i781, 65535);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} pci_unmap_single($p767, $i777, $i782, 1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} dev_kfree_skb_irq($p758);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} atomic_dec($p783);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume $i734 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p736 := $load.ref($M.0, $p735);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p739 := $load.ref($M.0, $p738);
    $i740 := $add.i64(208, 2);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($p736, $mul.ref($i740, 4));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i742 := $load.i32($M.0, $p741);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i743 := $zext.i32.i64($i742);
    $i744 := $add.i64(208, 3);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($p736, $mul.ref($i744, 4));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i746 := $load.i32($M.0, $p745);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i747 := $zext.i32.i64($i746);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i748 := $shl.i64($i747, 32);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i749 := $or.i64($i743, $i748);
    $i750 := $add.i64(208, 4);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($p736, $mul.ref($i750, 4));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i752 := $load.i32($M.0, $p751);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i753 := $zext.i32.i64($i752);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i754 := $and.i64($i753, 65535);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} pci_unmap_single($p739, $i749, $i754, 1);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} dev_kfree_skb_irq($p730);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} atomic_dec($p755);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb104:
    assume $i706 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.0, $p707);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p711 := $load.ref($M.0, $p710);
    $i712 := $add.i64(200, 2);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($p708, $mul.ref($i712, 4));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i714 := $load.i32($M.0, $p713);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i715 := $zext.i32.i64($i714);
    $i716 := $add.i64(200, 3);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($p708, $mul.ref($i716, 4));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i718 := $load.i32($M.0, $p717);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i719 := $zext.i32.i64($i718);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i720 := $shl.i64($i719, 32);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i721 := $or.i64($i715, $i720);
    $i722 := $add.i64(200, 4);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($p708, $mul.ref($i722, 4));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i724 := $load.i32($M.0, $p723);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i725 := $zext.i32.i64($i724);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i726 := $and.i64($i725, 65535);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} pci_unmap_single($p711, $i721, $i726, 1);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} dev_kfree_skb_irq($p702);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} atomic_dec($p727);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i678 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.0, $p679);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p683 := $load.ref($M.0, $p682);
    $i684 := $add.i64(192, 2);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($p680, $mul.ref($i684, 4));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i686 := $load.i32($M.0, $p685);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i687 := $zext.i32.i64($i686);
    $i688 := $add.i64(192, 3);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($p680, $mul.ref($i688, 4));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i690 := $load.i32($M.0, $p689);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i691 := $zext.i32.i64($i690);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i692 := $shl.i64($i691, 32);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i693 := $or.i64($i687, $i692);
    $i694 := $add.i64(192, 4);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($p680, $mul.ref($i694, 4));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i696 := $load.i32($M.0, $p695);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i697 := $zext.i32.i64($i696);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i698 := $and.i64($i697, 65535);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} pci_unmap_single($p683, $i693, $i698, 1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} dev_kfree_skb_irq($p674);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} atomic_dec($p699);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb96:
    assume $i650 == 1;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.0, $p651);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p655 := $load.ref($M.0, $p654);
    $i656 := $add.i64(184, 2);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($p652, $mul.ref($i656, 4));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i658 := $load.i32($M.0, $p657);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i659 := $zext.i32.i64($i658);
    $i660 := $add.i64(184, 3);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($p652, $mul.ref($i660, 4));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i662 := $load.i32($M.0, $p661);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i663 := $zext.i32.i64($i662);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i664 := $shl.i64($i663, 32);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i665 := $or.i64($i659, $i664);
    $i666 := $add.i64(184, 4);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($p652, $mul.ref($i666, 4));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i668 := $load.i32($M.0, $p667);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i669 := $zext.i32.i64($i668);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i670 := $and.i64($i669, 65535);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} pci_unmap_single($p655, $i665, $i670, 1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} dev_kfree_skb_irq($p646);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} atomic_dec($p671);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i622 == 1;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.0, $p623);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p627 := $load.ref($M.0, $p626);
    $i628 := $add.i64(176, 2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($p624, $mul.ref($i628, 4));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i630 := $load.i32($M.0, $p629);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i631 := $zext.i32.i64($i630);
    $i632 := $add.i64(176, 3);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($p624, $mul.ref($i632, 4));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i634 := $load.i32($M.0, $p633);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i635 := $zext.i32.i64($i634);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i636 := $shl.i64($i635, 32);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i637 := $or.i64($i631, $i636);
    $i638 := $add.i64(176, 4);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($p624, $mul.ref($i638, 4));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i640 := $load.i32($M.0, $p639);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i641 := $zext.i32.i64($i640);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i642 := $and.i64($i641, 65535);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} pci_unmap_single($p627, $i637, $i642, 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} dev_kfree_skb_irq($p618);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} atomic_dec($p643);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i594 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.0, $p595);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.0, $p598);
    $i600 := $add.i64(168, 2);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($p596, $mul.ref($i600, 4));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i602 := $load.i32($M.0, $p601);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i603 := $zext.i32.i64($i602);
    $i604 := $add.i64(168, 3);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($p596, $mul.ref($i604, 4));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i606 := $load.i32($M.0, $p605);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i607 := $zext.i32.i64($i606);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i608 := $shl.i64($i607, 32);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i609 := $or.i64($i603, $i608);
    $i610 := $add.i64(168, 4);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($p596, $mul.ref($i610, 4));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i612 := $load.i32($M.0, $p611);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i613 := $zext.i32.i64($i612);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i614 := $and.i64($i613, 65535);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} pci_unmap_single($p599, $i609, $i614, 1);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} dev_kfree_skb_irq($p590);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} atomic_dec($p615);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i566 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.0, $p567);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p571 := $load.ref($M.0, $p570);
    $i572 := $add.i64(160, 2);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($p568, $mul.ref($i572, 4));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i574 := $load.i32($M.0, $p573);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i575 := $zext.i32.i64($i574);
    $i576 := $add.i64(160, 3);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($p568, $mul.ref($i576, 4));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i578 := $load.i32($M.0, $p577);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i579 := $zext.i32.i64($i578);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i580 := $shl.i64($i579, 32);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i581 := $or.i64($i575, $i580);
    $i582 := $add.i64(160, 4);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($p568, $mul.ref($i582, 4));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i584 := $load.i32($M.0, $p583);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i585 := $zext.i32.i64($i584);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i586 := $and.i64($i585, 65535);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} pci_unmap_single($p571, $i581, $i586, 1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} dev_kfree_skb_irq($p562);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} atomic_dec($p587);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i538 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.0, $p539);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p543 := $load.ref($M.0, $p542);
    $i544 := $add.i64(152, 2);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($p540, $mul.ref($i544, 4));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i546 := $load.i32($M.0, $p545);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i547 := $zext.i32.i64($i546);
    $i548 := $add.i64(152, 3);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($p540, $mul.ref($i548, 4));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.0, $p549);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i551 := $zext.i32.i64($i550);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i552 := $shl.i64($i551, 32);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i553 := $or.i64($i547, $i552);
    $i554 := $add.i64(152, 4);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($p540, $mul.ref($i554, 4));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i556 := $load.i32($M.0, $p555);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i557 := $zext.i32.i64($i556);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i558 := $and.i64($i557, 65535);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} pci_unmap_single($p543, $i553, $i558, 1);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} dev_kfree_skb_irq($p534);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} atomic_dec($p559);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i510 == 1;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.0, $p511);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p515 := $load.ref($M.0, $p514);
    $i516 := $add.i64(144, 2);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($p512, $mul.ref($i516, 4));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i518 := $load.i32($M.0, $p517);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i519 := $zext.i32.i64($i518);
    $i520 := $add.i64(144, 3);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($p512, $mul.ref($i520, 4));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i522 := $load.i32($M.0, $p521);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i523 := $zext.i32.i64($i522);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i524 := $shl.i64($i523, 32);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i525 := $or.i64($i519, $i524);
    $i526 := $add.i64(144, 4);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($p512, $mul.ref($i526, 4));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i528 := $load.i32($M.0, $p527);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i529 := $zext.i32.i64($i528);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i530 := $and.i64($i529, 65535);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} pci_unmap_single($p515, $i525, $i530, 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} dev_kfree_skb_irq($p506);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} atomic_dec($p531);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i482 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.0, $p483);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.0, $p486);
    $i488 := $add.i64(136, 2);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($p484, $mul.ref($i488, 4));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i490 := $load.i32($M.0, $p489);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i491 := $zext.i32.i64($i490);
    $i492 := $add.i64(136, 3);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($p484, $mul.ref($i492, 4));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i494 := $load.i32($M.0, $p493);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i495 := $zext.i32.i64($i494);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i496 := $shl.i64($i495, 32);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i497 := $or.i64($i491, $i496);
    $i498 := $add.i64(136, 4);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($p484, $mul.ref($i498, 4));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i500 := $load.i32($M.0, $p499);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i501 := $zext.i32.i64($i500);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i502 := $and.i64($i501, 65535);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} pci_unmap_single($p487, $i497, $i502, 1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} dev_kfree_skb_irq($p478);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} atomic_dec($p503);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i454 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.0, $p455);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    $i460 := $add.i64(128, 2);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($p456, $mul.ref($i460, 4));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.0, $p461);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i463 := $zext.i32.i64($i462);
    $i464 := $add.i64(128, 3);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($p456, $mul.ref($i464, 4));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i466 := $load.i32($M.0, $p465);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i467 := $zext.i32.i64($i466);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i468 := $shl.i64($i467, 32);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i469 := $or.i64($i463, $i468);
    $i470 := $add.i64(128, 4);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($p456, $mul.ref($i470, 4));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.0, $p471);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i473 := $zext.i32.i64($i472);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i474 := $and.i64($i473, 65535);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} pci_unmap_single($p459, $i469, $i474, 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} dev_kfree_skb_irq($p450);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} atomic_dec($p475);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i426 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.0, $p427);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.0, $p430);
    $i432 := $add.i64(120, 2);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p428, $mul.ref($i432, 4));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.0, $p433);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i435 := $zext.i32.i64($i434);
    $i436 := $add.i64(120, 3);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($p428, $mul.ref($i436, 4));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i438 := $load.i32($M.0, $p437);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i439 := $zext.i32.i64($i438);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i440 := $shl.i64($i439, 32);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i441 := $or.i64($i435, $i440);
    $i442 := $add.i64(120, 4);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($p428, $mul.ref($i442, 4));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.0, $p443);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i445 := $zext.i32.i64($i444);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i446 := $and.i64($i445, 65535);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} pci_unmap_single($p431, $i441, $i446, 1);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} dev_kfree_skb_irq($p422);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} atomic_dec($p447);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i398 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p403 := $load.ref($M.0, $p402);
    $i404 := $add.i64(112, 2);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($p400, $mul.ref($i404, 4));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i406 := $load.i32($M.0, $p405);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i407 := $zext.i32.i64($i406);
    $i408 := $add.i64(112, 3);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($p400, $mul.ref($i408, 4));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i410 := $load.i32($M.0, $p409);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i411 := $zext.i32.i64($i410);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i412 := $shl.i64($i411, 32);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i413 := $or.i64($i407, $i412);
    $i414 := $add.i64(112, 4);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($p400, $mul.ref($i414, 4));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i416 := $load.i32($M.0, $p415);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i417 := $zext.i32.i64($i416);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i418 := $and.i64($i417, 65535);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} pci_unmap_single($p403, $i413, $i418, 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} dev_kfree_skb_irq($p394);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} atomic_dec($p419);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume $i370 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    $i376 := $add.i64(104, 2);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($p372, $mul.ref($i376, 4));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i379 := $zext.i32.i64($i378);
    $i380 := $add.i64(104, 3);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($p372, $mul.ref($i380, 4));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.0, $p381);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i383 := $zext.i32.i64($i382);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i384 := $shl.i64($i383, 32);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i385 := $or.i64($i379, $i384);
    $i386 := $add.i64(104, 4);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($p372, $mul.ref($i386, 4));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.0, $p387);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i389 := $zext.i32.i64($i388);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i390 := $and.i64($i389, 65535);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} pci_unmap_single($p375, $i385, $i390, 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} dev_kfree_skb_irq($p366);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} atomic_dec($p391);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i342 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.0, $p343);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    $i348 := $add.i64(96, 2);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($p344, $mul.ref($i348, 4));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i351 := $zext.i32.i64($i350);
    $i352 := $add.i64(96, 3);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p344, $mul.ref($i352, 4));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.0, $p353);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i355 := $zext.i32.i64($i354);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i356 := $shl.i64($i355, 32);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i357 := $or.i64($i351, $i356);
    $i358 := $add.i64(96, 4);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p344, $mul.ref($i358, 4));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.0, $p359);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i361 := $zext.i32.i64($i360);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i362 := $and.i64($i361, 65535);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} pci_unmap_single($p347, $i357, $i362, 1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} dev_kfree_skb_irq($p338);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} atomic_dec($p363);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i314 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.0, $p315);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    $i320 := $add.i64(88, 2);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($p316, $mul.ref($i320, 4));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p321);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i323 := $zext.i32.i64($i322);
    $i324 := $add.i64(88, 3);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($p316, $mul.ref($i324, 4));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.0, $p325);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i327 := $zext.i32.i64($i326);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i328 := $shl.i64($i327, 32);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i329 := $or.i64($i323, $i328);
    $i330 := $add.i64(88, 4);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($p316, $mul.ref($i330, 4));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i333 := $zext.i32.i64($i332);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i334 := $and.i64($i333, 65535);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} pci_unmap_single($p319, $i329, $i334, 1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} dev_kfree_skb_irq($p310);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} atomic_dec($p335);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i286 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    $i292 := $add.i64(80, 2);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($p288, $mul.ref($i292, 4));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i295 := $zext.i32.i64($i294);
    $i296 := $add.i64(80, 3);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p288, $mul.ref($i296, 4));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p297);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i299 := $zext.i32.i64($i298);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i300 := $shl.i64($i299, 32);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i301 := $or.i64($i295, $i300);
    $i302 := $add.i64(80, 4);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p288, $mul.ref($i302, 4));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p303);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i305 := $zext.i32.i64($i304);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i306 := $and.i64($i305, 65535);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} pci_unmap_single($p291, $i301, $i306, 1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} dev_kfree_skb_irq($p282);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} atomic_dec($p307);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i258 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.0, $p259);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    $i264 := $add.i64(72, 2);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p260, $mul.ref($i264, 4));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p265);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i267 := $zext.i32.i64($i266);
    $i268 := $add.i64(72, 3);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($p260, $mul.ref($i268, 4));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i271 := $zext.i32.i64($i270);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i272 := $shl.i64($i271, 32);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i273 := $or.i64($i267, $i272);
    $i274 := $add.i64(72, 4);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($p260, $mul.ref($i274, 4));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.0, $p275);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i277 := $zext.i32.i64($i276);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i278 := $and.i64($i277, 65535);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} pci_unmap_single($p263, $i273, $i278, 1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} dev_kfree_skb_irq($p254);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} atomic_dec($p279);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i230 == 1;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    $i236 := $add.i64(64, 2);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p232, $mul.ref($i236, 4));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i239 := $zext.i32.i64($i238);
    $i240 := $add.i64(64, 3);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p232, $mul.ref($i240, 4));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i243 := $zext.i32.i64($i242);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i244 := $shl.i64($i243, 32);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i245 := $or.i64($i239, $i244);
    $i246 := $add.i64(64, 4);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p232, $mul.ref($i246, 4));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i249 := $zext.i32.i64($i248);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i250 := $and.i64($i249, 65535);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} pci_unmap_single($p235, $i245, $i250, 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} dev_kfree_skb_irq($p226);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} atomic_dec($p251);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i202 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    $i208 := $add.i64(56, 2);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p204, $mul.ref($i208, 4));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i211 := $zext.i32.i64($i210);
    $i212 := $add.i64(56, 3);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p204, $mul.ref($i212, 4));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i215 := $zext.i32.i64($i214);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i216 := $shl.i64($i215, 32);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i217 := $or.i64($i211, $i216);
    $i218 := $add.i64(56, 4);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p204, $mul.ref($i218, 4));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i221 := $zext.i32.i64($i220);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i222 := $and.i64($i221, 65535);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} pci_unmap_single($p207, $i217, $i222, 1);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} dev_kfree_skb_irq($p198);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} atomic_dec($p223);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i174 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    $i180 := $add.i64(48, 2);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p176, $mul.ref($i180, 4));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i182);
    $i184 := $add.i64(48, 3);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p176, $mul.ref($i184, 4));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i187 := $zext.i32.i64($i186);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i188 := $shl.i64($i187, 32);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i189 := $or.i64($i183, $i188);
    $i190 := $add.i64(48, 4);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p176, $mul.ref($i190, 4));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i193 := $zext.i32.i64($i192);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i194 := $and.i64($i193, 65535);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} pci_unmap_single($p179, $i189, $i194, 1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} dev_kfree_skb_irq($p170);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} atomic_dec($p195);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i146 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    $i152 := $add.i64(40, 2);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p148, $mul.ref($i152, 4));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i155 := $zext.i32.i64($i154);
    $i156 := $add.i64(40, 3);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p148, $mul.ref($i156, 4));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i159 := $zext.i32.i64($i158);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i160 := $shl.i64($i159, 32);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i161 := $or.i64($i155, $i160);
    $i162 := $add.i64(40, 4);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p148, $mul.ref($i162, 4));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i165 := $zext.i32.i64($i164);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i166 := $and.i64($i165, 65535);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} pci_unmap_single($p151, $i161, $i166, 1);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} dev_kfree_skb_irq($p142);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} atomic_dec($p167);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i118 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    $i124 := $add.i64(32, 2);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p120, $mul.ref($i124, 4));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i127 := $zext.i32.i64($i126);
    $i128 := $add.i64(32, 3);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p120, $mul.ref($i128, 4));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i130);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i132 := $shl.i64($i131, 32);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i133 := $or.i64($i127, $i132);
    $i134 := $add.i64(32, 4);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p120, $mul.ref($i134, 4));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i137 := $zext.i32.i64($i136);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i138 := $and.i64($i137, 65535);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} pci_unmap_single($p123, $i133, $i138, 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} dev_kfree_skb_irq($p114);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} atomic_dec($p139);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i90 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    $i96 := $add.i64(24, 2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p92, $mul.ref($i96, 4));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    $i100 := $add.i64(24, 3);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p92, $mul.ref($i100, 4));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i104 := $shl.i64($i103, 32);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i105 := $or.i64($i99, $i104);
    $i106 := $add.i64(24, 4);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p92, $mul.ref($i106, 4));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i108);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 65535);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} pci_unmap_single($p95, $i105, $i110, 1);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} dev_kfree_skb_irq($p86);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} atomic_dec($p111);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i62 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    $i68 := $add.i64(16, 2);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p64, $mul.ref($i68, 4));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    $i72 := $add.i64(16, 3);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p64, $mul.ref($i72, 4));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i76 := $shl.i64($i75, 32);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i77 := $or.i64($i71, $i76);
    $i78 := $add.i64(16, 4);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p64, $mul.ref($i78, 4));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i82 := $and.i64($i81, 65535);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} pci_unmap_single($p67, $i77, $i82, 1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} dev_kfree_skb_irq($p58);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} atomic_dec($p83);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    $i40 := $add.i64(8, 2);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p36, $mul.ref($i40, 4));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    $i44 := $add.i64(8, 3);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p36, $mul.ref($i44, 4));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i48 := $shl.i64($i47, 32);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i49 := $or.i64($i43, $i48);
    $i50 := $add.i64(8, 4);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p36, $mul.ref($i50, 4));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 65535);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} pci_unmap_single($p39, $i49, $i54, 1);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} dev_kfree_skb_irq($p30);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} atomic_dec($p55);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p9, $mul.ref(2, 4));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p9, $mul.ref(3, 4));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i18 := $shl.i64($i17, 32);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i14, $i18);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p9, $mul.ref(4, 4));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 65535);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} pci_unmap_single($p11, $i19, $i23, 1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} dev_kfree_skb_irq($p3);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} atomic_dec($p24);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 183863);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const clear_rx_desc: ref;

axiom clear_rx_desc == $sub.ref(0, 184895);

procedure clear_rx_desc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_rx_desc($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} {:cexpr "clear_rx_desc:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i1, 8);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref($i6, 4));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} build_rx_desc($p0, $p7, 0, 0, $sub.i32(0, 2147483648), 0);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 185927);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    return;
}



const build_rx_desc: ref;

axiom build_rx_desc == $sub.ref(0, 186959);

procedure build_rx_desc($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation build_rx_desc($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32)
{
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "build_rx_desc:arg:link"} boogie_si_record_i64($i2);
    call {:si_unique_call 817} {:cexpr "build_rx_desc:arg:buf"} boogie_si_record_i64($i3);
    call {:si_unique_call 818} {:cexpr "build_rx_desc:arg:cmdsts"} boogie_si_record_i32($i4);
    call {:si_unique_call 819} {:cexpr "build_rx_desc:arg:extsts"} boogie_si_record_i32($i5);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i6);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i2, 32);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i3);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i64($i3, 32);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(5, 4));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i5);
    call {:si_unique_call 820} devirtbounce.1(0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i4);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 187991);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 189023);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 821} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 822} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 190055);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p2 := $M.4;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 823} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(0);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ns83820_setup_rx: ref;

axiom ns83820_setup_rx == $sub.ref(0, 191087);

procedure ns83820_setup_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.7, $M.6, $M.1, $CurrAddr, $M.4, $M.5, assertsPassed;



implementation ns83820_setup_rx($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p1 := PRIV($p0);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(80, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 0);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(600, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} clear_rx_desc($p1, 0);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} clear_rx_desc($p1, 1);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} clear_rx_desc($p1, 2);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} clear_rx_desc($p1, 3);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} clear_rx_desc($p1, 4);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} clear_rx_desc($p1, 5);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} clear_rx_desc($p1, 6);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} clear_rx_desc($p1, 7);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} clear_rx_desc($p1, 8);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} clear_rx_desc($p1, 9);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} clear_rx_desc($p1, 10);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} clear_rx_desc($p1, 11);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} clear_rx_desc($p1, 12);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} clear_rx_desc($p1, 13);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} clear_rx_desc($p1, 14);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} clear_rx_desc($p1, 15);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} clear_rx_desc($p1, 16);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} clear_rx_desc($p1, 17);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} clear_rx_desc($p1, 18);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} clear_rx_desc($p1, 19);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} clear_rx_desc($p1, 20);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} clear_rx_desc($p1, 21);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} clear_rx_desc($p1, 22);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} clear_rx_desc($p1, 23);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} clear_rx_desc($p1, 24);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} clear_rx_desc($p1, 25);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} clear_rx_desc($p1, 26);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} clear_rx_desc($p1, 27);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} clear_rx_desc($p1, 28);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} clear_rx_desc($p1, 29);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} clear_rx_desc($p1, 30);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} clear_rx_desc($p1, 31);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} clear_rx_desc($p1, 32);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} clear_rx_desc($p1, 33);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} clear_rx_desc($p1, 34);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} clear_rx_desc($p1, 35);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} clear_rx_desc($p1, 36);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} clear_rx_desc($p1, 37);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} clear_rx_desc($p1, 38);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} clear_rx_desc($p1, 39);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} clear_rx_desc($p1, 40);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} clear_rx_desc($p1, 41);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} clear_rx_desc($p1, 42);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} clear_rx_desc($p1, 43);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} clear_rx_desc($p1, 44);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} clear_rx_desc($p1, 45);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} clear_rx_desc($p1, 46);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} clear_rx_desc($p1, 47);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} clear_rx_desc($p1, 48);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} clear_rx_desc($p1, 49);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} clear_rx_desc($p1, 50);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} clear_rx_desc($p1, 51);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} clear_rx_desc($p1, 52);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} clear_rx_desc($p1, 53);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} clear_rx_desc($p1, 54);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} clear_rx_desc($p1, 55);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} clear_rx_desc($p1, 56);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} clear_rx_desc($p1, 57);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} clear_rx_desc($p1, 58);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} clear_rx_desc($p1, 59);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} clear_rx_desc($p1, 60);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} clear_rx_desc($p1, 61);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} clear_rx_desc($p1, 62);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} clear_rx_desc($p1, 63);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(52, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} writel(0, $p15);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(624, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(48, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} writel($i19, $p22);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i23 := rx_refill($p0, 208);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 830} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} spin_lock_irq($p26);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(204, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} writel(1, $p29);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(72, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} writel(0, $p32);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(72, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} writel(2143289344, $p35);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(72, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} writel($sub.i32(0, 4194304), $p38);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 1);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} phy_intr($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} spin_lock($p41);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 16384);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 2097152);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 32);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 65536);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 2);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 16);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i64);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 128);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 512);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(20, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} writel($i75, $p78);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(24, 1));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} writel(1, $p81);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} spin_unlock($p82);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} kick_rx($p0);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} spin_unlock_irq($p84);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 192119);

procedure reg_timer_3($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5;



implementation reg_timer_3($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(1);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ns83820_tx_watch: ref;

axiom ns83820_tx_watch == $sub.ref(0, 193151);

procedure ns83820_tx_watch($i0: i64);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.4, $M.5;



implementation ns83820_tx_watch($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "ns83820_tx_watch:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p2 := PRIV($p1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i3 := dev_trans_start($p1);
    call {:si_unique_call 909} {:cexpr "tmp___1"} boogie_si_record_i64($i3);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i3, $i4);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 250);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64($i6, 0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(2016, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, jiffies);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 500);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_24 := ldv_mod_timer_44($p26, $i28);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i10, $i13);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i16 := atomic_read($p15);
    call {:si_unique_call 911} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_23 := printk.ref.ref.i32.i32.i32(.str.45, $p18, $i21, $i24, $i16);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ns83820_tx_timeout($p1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_mod_timer_45: ref;

axiom ldv_mod_timer_45 == $sub.ref(0, 194183);

procedure ldv_mod_timer_45($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.5;



implementation ldv_mod_timer_45($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} {:cexpr "ldv_mod_timer_45:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 917} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 195215);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 919} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 921} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_3: ref;

axiom activate_pending_timer_3 == $sub.ref(0, 196247);

procedure activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.5;



implementation activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} {:cexpr "activate_pending_timer_3:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 923} {:cexpr "activate_pending_timer_3:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p3 := $M.4;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_25 := reg_timer_3($p0);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p13 := $M.4;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p10 := $M.4;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const dev_trans_start: ref;

axiom dev_trans_start == $sub.ref(0, 197279);

procedure dev_trans_start($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dev_trans_start($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 927} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 198311);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mod_timer_44: ref;

axiom ldv_mod_timer_44 == $sub.ref(0, 199343);

procedure ldv_mod_timer_44($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.5;



implementation ldv_mod_timer_44($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} {:cexpr "ldv_mod_timer_44:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 930} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rx_refill: ref;

axiom rx_refill == $sub.ref(0, 200375);

procedure rx_refill($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, assertsPassed;



implementation rx_refill($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i20: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i21: i32;
  var $i51: i32;
  var $i30: i32;
  var $i52: i1;
  var $p54: ref;
  var $i55: i1;
  var $i56: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} {:cexpr "rx_refill:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p2 := PRIV($p0);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 62);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i7, $i11);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i13 := $srem.i32($i12, 64);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 2);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 935} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 32);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb8:
    call $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p31, $p32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $i49, $i50, $i21, $i51 := rx_refill_loop_$bb8($p0, $i1, $p2, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p31, $p32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $i49, $i50, $i21, $i51);
    goto $bb8_last;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p22 := ldv___netdev_alloc_skb_42($p0, 1530, $i1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 939} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p22, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 15);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, $sub.i32(0, 16));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i34, $i40);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} skb_reserve($p22, $i41);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i1, 32);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i43 := ns83820_add_rx_skb($p2, $p22);
    call {:si_unique_call 943} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 944} {:cexpr "res"} boogie_si_record_i64($i44);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i1, 32);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i44, 0);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i21, 1);
    call {:si_unique_call 946} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i50 := $ule.i32($i49, 63);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i30 := $i51;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i1, 32);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i30, 0);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i56 := (if $i55 == 1 then 0 else $sub.i32(0, 12));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i19 := $i56;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} spin_unlock_irqrestore($p54, 0);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i49;
    goto $bb23_dummy;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb12;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} spin_unlock_irqrestore($p47, 0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_spin_lock();
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb12;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_spin_lock();
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;
}



const phy_intr: ref;

axiom phy_intr == $sub.ref(0, 201407);

procedure phy_intr($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.1, $M.0, $CurrAddr, $M.4, $M.5, $M.3, assertsPassed;



implementation phy_intr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i34: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i109: i32;
  var $i108: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i131: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $i100: i32;
  var $i101: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $i177: i1;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p188: ref;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p2 := PRIV($p0);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 8));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, .str.5);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(1, 8));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p4, .str.6);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(2, 8));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.7);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(3, 8));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.8);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 8));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.9);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i11 := readl($p10);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 951} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i12 := $M.8;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i14 := (if $i13 == 1 then $sub.i32(0, 268435456) else 1879048192);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i11, $i14);
    call {:si_unique_call 952} {:cexpr "cfg"} boogie_si_record_i32($i15);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 16777216);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.6, $p102);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, $sub.i32(0, 1614807105));
    call {:si_unique_call 959} {:cexpr "new_cfg"} boogie_si_record_i32($i104);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i15, 1073741824);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i106 == 1);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i104, $sub.i32(0, 4194305));
    call {:si_unique_call 981} {:cexpr "new_cfg"} boogie_si_record_i32($i109);
    assume {:verifier.code 0} true;
    $i108 := $i109;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i110 := $udiv.i32($i15, 536870912);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 3);
    call {:si_unique_call 982} {:cexpr "speed"} boogie_si_record_i32($i111);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i15, 268435456);
    call {:si_unique_call 983} {:cexpr "fullduplex"} boogie_si_record_i32($i112);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i113 == 1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.6, $p132);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(40, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i135 := readl($p134);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 992} {:cexpr "tmp___9"} boogie_si_record_i32($i135);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 1073741823);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.6, $p137);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(40, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} writel($i136, $p139);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.6, $p140);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p141, $mul.ref(56, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i143 := readl($p142);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 995} {:cexpr "tmp___10"} boogie_si_record_i32($i143);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, $sub.i32(0, 268435457));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.6, $p145);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(56, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} writel($i144, $p147);
    assume {:verifier.code 0} true;
    $i131 := $i108;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i15, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.6, $p156);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, $sub.i32(0, 1610612737));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p159, $i158);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.6, $p160);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i15, 1610612736);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i161, $i162);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p164, $i163);
    assume {:verifier.code 0} true;
    $i100, $i101 := $i111, $i112;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i15, 0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i166 := (if $i165 == 1 then 4 else 2);
    call {:si_unique_call 979} {:cexpr "newlinkstate"} boogie_si_record_i32($i166);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 4);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i166, 2);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(868, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p188, $i166);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    return;

  $bb45:
    assume $i181 == 1;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(868, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.6, $p182);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, $i166);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb47;

  $bb48:
    assume $i184 == 1;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} netif_stop_queue($p0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_27 := printk.ref.ref(.str.13, $p186);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume $i168 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(868, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.6, $p169);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, $i166);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb41;

  $bb42:
    assume $i171 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} netif_start_queue($p0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} netif_wake_queue($p0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i100);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref($i174, 8));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.7, $p175);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i101, 0);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p178 := (if $i177 == 1 then .str.11 else .str.12);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_26 := printk.ref.ref.ref.ref(.str.10, $p173, $p176, $p178);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb33:
    assume $i148 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.6, $p149);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, $i131);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb35;

  $bb36:
    assume $i151 == 1;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.6, $p152);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(4, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} writel($i131, $p154);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p155, $i131);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i113 == 1;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i108, 64);
    call {:si_unique_call 984} {:cexpr "new_cfg"} boogie_si_record_i32($i114);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p115);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(40, 1));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i118 := readl($p117);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 986} {:cexpr "tmp___7"} boogie_si_record_i32($i118);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i119 := $or.i32($i118, $sub.i32(0, 1073741824));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.6, $p120);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref(40, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} writel($i119, $p122);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.6, $p123);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref(56, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i126 := readl($p125);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 989} {:cexpr "tmp___8"} boogie_si_record_i32($i126);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 268435456);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.6, $p128);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(56, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} writel($i127, $p130);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i131 := $i114;
    goto $bb32;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i106 == 1;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i104, 4194304);
    call {:si_unique_call 980} {:cexpr "new_cfg"} boogie_si_record_i32($i107);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb29;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(228, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i23 := readl($p22);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 954} {:cexpr "tbisr"} boogie_si_record_i32($i23);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(232, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i27 := readl($p26);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 956} {:cexpr "tanar"} boogie_si_record_i32($i27);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(236, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i31 := readl($p30);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 958} {:cexpr "tanlpar"} boogie_si_record_i32($i31);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 32);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i34);
    call {:si_unique_call 960} {:cexpr "fullduplex"} boogie_si_record_i32($i37);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i31, 64);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i31, 32);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i31, 64);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i100, $i101 := 4, $i37;
    goto $bb26;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i27, 32);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(40, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i78 := readl($p77);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 971} {:cexpr "tmp___4"} boogie_si_record_i32($i78);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 805306367);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i79, 268435456);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p81);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(40, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} writel($i80, $p83);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(56, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i87 := readl($p86);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 974} {:cexpr "tmp___5"} boogie_si_record_i32($i87);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, $sub.i32(0, 268435457));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p89);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(56, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} writel($i88, $p91);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.6, $p92);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(44, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i95 := readl($p94);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 977} {:cexpr "tmp___6"} boogie_si_record_i32($i95);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, $sub.i32(0, 2));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.6, $p97);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(44, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} writel($i96, $p99);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i68 == 1;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i27, 64);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb13;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i27, 64);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb13;

  $bb6:
    assume $i38 == 1;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(40, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i42 := readl($p41);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 962} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, $sub.i32(0, 805306368));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(40, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} writel($i43, $p46);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(56, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i50 := readl($p49);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 965} {:cexpr "tmp___2"} boogie_si_record_i32($i50);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 268435456);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(56, 1));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} writel($i51, $p54);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(44, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i58 := readl($p57);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 968} {:cexpr "tmp___3"} boogie_si_record_i32($i58);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 1);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(44, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} writel($i59, $p62);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i33 == 1;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i27, 32);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    assume {:verifier.code 0} true;
    $i34 := $i36;
    goto $bb5;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 202439);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ldv_spin_lock();
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} ldv_spin_lock_5($p0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 203471);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_spin_unlock();
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ldv_spin_unlock_9($p0);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    return;
}



const kick_rx: ref;

axiom kick_rx == $sub.ref(0, 204503);

procedure kick_rx($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kick_rx($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p1 := PRIV($p0);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(80, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i4 := test_and_clear_bit(0, $p3);
    call {:si_unique_call 1009} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(624, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 32);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i9, $i14);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(48, 1));
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} writel($i15, $p18);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i22, $i26);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} writel(4, $p32);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_28 := printk.ref.ref(.str.4, $p29);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 205535);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1014} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1015} devirtbounce.8(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p2);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 206567);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} _raw_spin_unlock($p2);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 207599);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 208631);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} _raw_spin_lock($p2);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 209663);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    return;
}



const ldv___netdev_alloc_skb_42: ref;

axiom ldv___netdev_alloc_skb_42 == $sub.ref(0, 210695);

procedure ldv___netdev_alloc_skb_42($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_42($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} {:cexpr "ldv___netdev_alloc_skb_42:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1019} {:cexpr "ldv___netdev_alloc_skb_42:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ldv_check_alloc_flags($i2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p3 := ldv_undef_ptr();
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 211727);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_add_rx_skb: ref;

axiom ns83820_add_rx_skb == $sub.ref(0, 212759);

procedure ns83820_add_rx_skb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ns83820_add_rx_skb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 1023} {:cexpr "next_empty"} boogie_si_record_i32($i5);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 62);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i10, $i14);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i16 := $srem.i32($i15, 64);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 2);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1025} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i5, 8);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p25, $mul.ref($i27, 4));
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i5);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref($i29, 8));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 1028} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i5);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref($i40, 8));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p1);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i5);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 63);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i48);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i55 := pci_map_single($p52, $p54, 1514, 2);
    call {:si_unique_call 1031} {:cexpr "buf"} boogie_si_record_i64($i55);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} build_rx_desc($p0, $p28, 0, $i55, 536872426, 0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, $i5);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i63 := ldv__builtin_expect($i62, 1);
    call {:si_unique_call 1034} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(624, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i5, 32);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i68, $i69);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i5, 63);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 63);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i76 := $mul.i32($i75, 8);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p73, $mul.ref($i77, 4));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i70);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i39 == 1;
    call {:si_unique_call 1029} devirtbounce.4(0, .str.2, 538, 12);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call ns83820_add_rx_skb_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} kfree_skb($p1);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 213791);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_error();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 214823);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 215855);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} __VERIFIER_error();
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ns83820_get_settings: ref;

axiom ns83820_get_settings == $sub.ref(0, 216887);

procedure ns83820_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p2 := PRIV($p0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(4, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i6 := readl($p5);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 1042} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then $sub.i32(0, 268435456) else 1879048192);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i6, $i9);
    call {:si_unique_call 1043} {:cexpr "cfg"} boogie_si_record_i32($i10);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(232, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i14 := readl($p13);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1045} {:cexpr "tanar"} boogie_si_record_i32($i14);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(224, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i18 := readl($p17);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 1047} {:cexpr "tbicr"} boogie_si_record_i32($i18);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i10, 268435456);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 1048} {:cexpr "fullduplex"} boogie_si_record_i32($i21);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 64);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16777216);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 575);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i21, 0);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i39);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i41 := $udiv.i32($i10, 536870912);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 3);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i42, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} ethtool_cmd_speed_set($p1, 10);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i18, 4096);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ethtool_cmd_speed_set($p1, 1000);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i42, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb9;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ethtool_cmd_speed_set($p1, 100);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 1072);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 3);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ns83820_set_settings: ref;

axiom ns83820_set_settings == $sub.ref(0, 217919);

procedure ns83820_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.7, $M.6, $M.1, $M.4, $M.5, $CurrAddr, assertsPassed;



implementation ns83820_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i22: i32;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $p2 := PRIV($p0);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(4, 1));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i6 := readl($p5);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 1054} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then $sub.i32(0, 268435456) else 1879048192);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i6, $i9);
    call {:si_unique_call 1055} {:cexpr "cfg"} boogie_si_record_i32($i10);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(232, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i14 := readl($p13);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 1057} {:cexpr "tanar"} boogie_si_record_i32($i14);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 16777216);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i10, 268435456);
    call {:si_unique_call 1059} {:cexpr "fullduplex"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    $i20, $i21 := 0, $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} spin_lock_irq($p23);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} spin_lock($p24);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, $i21);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i64 == 1);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(224, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} writel(0, $p77);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p84 := (if $i83 == 1 then .str.19 else .str.20);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_31 := printk.ref.ref.ref(.str.18, $p79, $p84);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} phy_intr($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} spin_unlock($p86);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} spin_unlock_irq($p87);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i64 == 1;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(224, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} writel(4608, $p67);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(224, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} writel(4096, $p70);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(868, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 1);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_30 := printk.ref.ref(.str.17, $p73);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i20, 0);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_29 := printk.ref.ref(.str.16, $p59);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(40, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i37 := readl($p36);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 1063} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $sub.i32(0, 805306368));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(40, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} writel($i38, $p41);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(56, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i45 := readl($p44);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 1066} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 268435456);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(56, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} writel($i46, $p49);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(44, 1));
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i53 := readl($p52);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 1069} {:cexpr "tmp___3"} boogie_si_record_i32($i53);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 1);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(44, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} writel($i54, $p57);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i14, 32);
    call {:si_unique_call 1058} {:cexpr "fullduplex"} boogie_si_record_i32($i19);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i20, $i21 := 1, $i19;
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ns83820_get_drvinfo: ref;

axiom ns83820_get_drvinfo == $sub.ref(0, 218951);

procedure ns83820_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ns83820_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_32: i64;
  var vslice_dummy_var_33: i64;
  var vslice_dummy_var_34: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $p2 := PRIV($p0);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_32 := strlcpy($p4, .str.14, 32);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_33 := strlcpy($p7, .str.15, 32);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p11 := pci_name($p10);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} vslice_dummy_var_34 := strlcpy($p13, $p11, 32);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_get_link: ref;

axiom ns83820_get_link == $sub.ref(0, 219983);

procedure ns83820_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_get_link($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p1 := PRIV($p0);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.10, $p2);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i5 := readl($p4);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 1087} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i6 := $M.8;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then $sub.i32(0, 268435456) else 1879048192);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i9 := $xor.i32($i5, $i8);
    call {:si_unique_call 1088} {:cexpr "cfg"} boogie_si_record_i32($i9);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 221015);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1089} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1090} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1091} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 222047);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p2 := dev_name($p1);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 223079);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p9 := kobject_name($p8);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 224111);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ethtool_cmd_speed_set: ref;

axiom ethtool_cmd_speed_set == $sub.ref(0, 225143);

procedure ethtool_cmd_speed_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ethtool_cmd_speed_set($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} {:cexpr "ethtool_cmd_speed_set:arg:speed"} boogie_si_record_i32($i1);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 16);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_init_one: ref;

axiom ns83820_init_one == $sub.ref(0, 226175);

procedure ns83820_init_one($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.12, $M.14, $M.16, $M.18, $CurrAddr, $M.4, $M.5, $M.3, $M.13, $M.21, $M.15, $M.22, $M.17, $M.23, $M.19, $M.24, $M.7, $M.6, assertsPassed;



implementation ns83820_init_one($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i9: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i32;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i32;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i64;
  var $i269: i64;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $i276: i64;
  var $i277: i64;
  var $p278: ref;
  var $i279: i1;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $i284: i64;
  var $i285: i64;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i32;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $p303: ref;
  var $i304: i64;
  var $i305: i64;
  var $i306: i1;
  var $p307: ref;
  var $i309: i32;
  var $i310: i1;
  var $i103: i32;
  var $p312: ref;
  var $i313: i32;
  var $p314: ref;
  var $i88: i32;
  var $p315: ref;
  var $p316: ref;
  var $i317: i64;
  var $i318: i1;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p331: ref;
  var $i332: i64;
  var $i58: i32;
  var $i17: i32;
  var $i13: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var vslice_dummy_var_35: ref;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: ref;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i7 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 1101} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i10 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} dev_warn.ref.ref($p12, .str.21);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $p14 := alloc_etherdev_mqs(2144, 1, 1);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p18 := PRIV($p14);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p14);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_35 := spinlock_check($p21);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __raw_spin_lock_init($p26, .str.22, $p2);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_36 := spinlock_check($p27);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(872, 1)), $mul.ref(0, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __raw_spin_lock_init($p31, .str.23, $p3);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_37 := spinlock_check($p32);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __raw_spin_lock_init($p36, .str.24, $p4);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(704, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __init_work($p41, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, 137438953408);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p6);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 1114} cmdloc_dummy_var_6 := $memcpy.i8(cmdloc_dummy_var_4, cmdloc_dummy_var_5, $p45, $p46, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(704, 1)), $mul.ref(32, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} lockdep_init_map($p48, .str.25, $p5, 0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(704, 1)), $mul.ref(8, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} INIT_LIST_HEAD($p50);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(704, 1)), $mul.ref(24, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, queue_refill);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(656, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p14);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} tasklet_init($p53, rx_action, $i54);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i55 := pci_enable_device($p0);
    call {:si_unique_call 1119} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} pci_set_master($p0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    call {:si_unique_call 1123} {:cexpr "addr"} boogie_si_record_i64($i62);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $p63 := ioremap_nocache($i62, 4096);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p63);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p66 := pci_alloc_consistent($p0, 4096, $p65);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p66);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(624, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $p71 := pci_alloc_consistent($p0, 2048, $p70);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p71);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i78 == 1);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i82 == 1);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} ns83820_disable_interrupts($p18);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 0);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p14);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i93 := ldv_request_irq_46($i91, ns83820_irq, 128, .str.14, $p92);
    call {:si_unique_call 1129} {:cexpr "err"} boogie_si_record_i32($i93);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} rtnl_lock();
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i100 := dev_alloc_name($p14, $p99);
    call {:si_unique_call 1133} {:cexpr "err"} boogie_si_record_i32($i100);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(556, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i107 := readl($p106);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 1138} {:cexpr "tmp___4"} boogie_si_record_i32($i107);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(64, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.0, $p110);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(66, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_38 := printk.ref.ref.i32.i32.i32(.str.29, $p109, $i107, $i112, $i115);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, netdev_ops);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(520, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, ops);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(1120, 1));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 1250);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p14);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} pci_set_drvdata($p0, $p120);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} ns83820_do_reset($p18, 256);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(12, 1));
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} writel(8192, $p123);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} ns83820_run_bist($p14, .str.30, 1024, 512, 440);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} ns83820_run_bist($p14, .str.31, 2, 0, 1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} ns83820_run_bist($p14, .str.32, 4, 0, 0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(4, 1));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i127 := readl($p126);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 8192);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i132 == 1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, $sub.i32(0, 4097));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i145);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i148, 16898050);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i149);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, 1835288);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, $i153);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i156, 128);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i161 := $or.i32($i160, 32);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, $i161);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i164, 131072);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i168, 2048);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i169);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i9, 0);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, $sub.i32(0, 2));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, $i178);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 16777216);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p217, $mul.ref(4, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} writel($i215, $p218);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i219 := $M.11;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p236, $mul.ref(40, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} writel($sub.i32(0, 797953536), $p237);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p239, $mul.ref(28, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} writel(0, $p240);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p242, $mul.ref(28, 1));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} writel(256, $p243);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p245, $mul.ref(28, 1));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} writel(0, $p246);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p248, $mul.ref(56, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} writel($sub.i32(0, 193986560), $p249);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p251, $mul.ref(60, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} writel(0, $p252);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p254, $mul.ref(188, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} writel(19, $p255);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p257, $mul.ref(192, 1));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} writel(10, $p258);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.0, $p259);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p260, $mul.ref(68, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} writel($sub.i32(0, 505348098), $p261);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($p263, $mul.ref(64, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} writel(0, $p264);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} ns83820_getmac($p18, $p266);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i268 := $load.i64($M.0, $p267);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i269 := $or.i64($i268, 1);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p270, $i269);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i272 := $load.i64($M.0, $p271);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i273 := $or.i64($i272, 2);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p274, $i273);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.0, $p275);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i277 := $or.i64($i276, 384);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p278, $i277);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i279 := $ne.i32($i9, 0);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p288, $mul.ref(88, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i290 := readl($p289);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 1176} {:cexpr "tmp___7"} boogie_si_record_i32($i290);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($p292, $mul.ref(88, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i294 := readl($p293);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 1178} {:cexpr "tmp___8"} boogie_si_record_i32($i294);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p296 := $bitcast.ref.ref($p295);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i297 := $lshr.i32($i294, 8);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i290, 255);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.0, $p299);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.0, $p301);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i304 := $load.i64($M.0, $p303);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i305 := $and.i64($i304, 32);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i306 := $ne.i64($i305, 0);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $p307 := (if $i306 == 1 then .str.39 else .str.40);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} vslice_dummy_var_44 := printk.ref.ref.i32.i32.ref.i64.i32.ref(.str.38, $p296, $i297, $i298, $p300, $i62, $i302, $p307);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i309 := register_netdevice($p14);
    call {:si_unique_call 1181} {:cexpr "err"} boogie_si_record_i32($i309);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 0);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} rtnl_unlock();
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb50:
    assume $i310 == 1;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vslice_dummy_var_45 := printk.ref.i32(.str.41, $i309);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ns83820_disable_interrupts($p18);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i103 := $i309;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} rtnl_unlock();
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p312);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p14);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ldv_free_irq_47($i313, $p314);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i88 := $i103;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.0, $p315);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p316);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i318 := $ne.i64($i317, 0);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.0, $p324);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} pci_free_consistent($p0, 4096, $p323, $i325);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(624, 1));
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i332 := $load.i64($M.0, $p331);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} pci_free_consistent($p0, 2048, $p329, $i332);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} pci_disable_device($p0);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i58 := $i88;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} free_netdev($p14);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i17 := $i58;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb7;

  $bb54:
    assume $i318 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} iounmap($p320);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i279 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p281 := $bitcast.ref.ref($p280);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} vslice_dummy_var_43 := printk.ref.ref(.str.37, $p281);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i284 := $load.i64($M.0, $p283);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i285 := $or.i64($i284, 32);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p286, $i285);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i220 == 1;
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_42 := printk.ref.ref(.str.36, $p222);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i226 := $or.i32($i225, 1024);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p228, $mul.ref(4, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} writel($i226, $p229);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} msleep(10);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p233, $mul.ref(4, 1));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} writel($i231, $p234);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i183 == 1;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_41 := printk.ref.ref(.str.35, $p185);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(44, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i190 := readl($p189);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 1151} {:cexpr "tmp___5"} boogie_si_record_i32($i190);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i191 := $or.i32($i190, 1000);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p193, $mul.ref(44, 1));
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} writel($i191, $p194);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p196, $mul.ref(232, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i198 := readl($p197);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 1154} {:cexpr "tmp___6"} boogie_si_record_i32($i198);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i199 := $or.i32($i198, 96);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p201, $mul.ref(232, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} writel($i199, $p202);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p204, $mul.ref(224, 1));
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} writel(4608, $p205);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p207, $mul.ref(224, 1));
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} writel(4096, $p208);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(868, 1));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, 1);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p210);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i212 := $or.i32($i211, 4194304);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, $i212);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i171 == 1;
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i173, 16384);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i174);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i132 == 1;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_39 := printk.ref.ref(.str.33, $p134);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p18, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 4096);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i139 == 1;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_40 := printk.ref.ref(.str.34, $p141);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i101 == 1;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} _dev_info.ref.ref.i32($p102, .str.28, $i100);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i103 := $i100;
    goto $bb30;

  $bb25:
    assume $i94 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} _dev_info.ref.ref.i32.i32($p95, .str.27, $i97, $i93);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i88 := $i93;
    goto $bb23;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 12);
    goto $bb23;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb17;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} _dev_info.ref.ref.i32($p57, .str.26, $i55);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb14;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const ns83820_remove_one: ref;

axiom ns83820_remove_one == $sub.ref(0, 227207);

procedure ns83820_remove_one($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.12, $M.14, $M.16, $M.18, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_remove_one($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p3 := PRIV($p2);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} ns83820_disable_interrupts($p3);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} unregister_netdev($p2);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} ldv_free_irq_48($i9, $p10);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} iounmap($p12);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} pci_free_consistent($p14, 4096, $p17, $i19);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(624, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} pci_free_consistent($p21, 2048, $p25, $i28);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} pci_disable_device($p30);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} free_netdev($p2);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 228239);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 229271);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_48: ref;

axiom ldv_free_irq_48 == $sub.ref(0, 230303);

procedure ldv_free_irq_48($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation ldv_free_irq_48($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} {:cexpr "ldv_free_irq_48:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} free_irq($i0, $p1);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 231335);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    return;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 232367);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1204} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 233399);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 234431);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 235463);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1207} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 236495);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 237527);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i2 := $M.12;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.14;
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.16;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.18;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i16 := $M.19;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1213} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i12 := $M.17;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1212} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i8 := $M.15;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 1211} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i4 := $M.13;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1210} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 238559);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 239591);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 1216} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 240623);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 241655);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1218} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1219} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p3 := external_alloc();
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 242687);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 243719);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 244751);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 245783);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 246815);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 247847);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    return;
}



const queue_refill: ref;

axiom queue_refill == $sub.ref(0, 248879);

procedure queue_refill($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $CurrAddr, assertsPassed;



implementation queue_refill($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 704), 2144)), $mul.ref(16, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_46 := rx_refill($p4, 208);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 704), 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} kick_rx($p4);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const rx_action: ref;

axiom rx_action == $sub.ref(0, 249911);

procedure rx_action($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation rx_action($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} {:cexpr "rx_action:arg:_dev"} boogie_si_record_i64($i0);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p2 := PRIV($p1);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} rx_irq($p1);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i3 := $M.20;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(28, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} writel($i3, $p6);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} spin_lock_irq($p7);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 2);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(20, 1));
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} writel($i13, $p16);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} spin_unlock_irq($p17);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} rx_irq($p1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} ns83820_rx_kick($p1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 250943);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 251975);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1235} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 253007);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 254039);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 255071);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1238} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p2 := external_alloc();
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 256103);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const ns83820_irq: ref;

axiom ns83820_irq == $sub.ref(0, 257135);

procedure ns83820_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.7, $M.6, $M.4, $M.5, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation ns83820_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} {:cexpr "ns83820_irq:arg:foo"} boogie_si_record_i32($i0);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p3 := PRIV($p2);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(696, 1));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(16, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i8 := readl($p7);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1245} {:cexpr "isr"} boogie_si_record_i32($i8);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} ns83820_do_isr($p2, $i8);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ldv_request_irq_46: ref;

axiom ldv_request_irq_46 == $sub.ref(0, 258167);

procedure ldv_request_irq_46($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.21, $M.12, $M.15, $M.22, $M.14, $M.17, $M.23, $M.16, $M.19, $M.24, $M.18;



implementation ldv_request_irq_46($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} {:cexpr "ldv_request_irq_46:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1248} {:cexpr "ldv_request_irq_46:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1250} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i6 := reg_check_1($p1);
    call {:si_unique_call 1252} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 259199);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    return;
}



const dev_alloc_name: ref;

axiom dev_alloc_name == $sub.ref(0, 260231);

procedure dev_alloc_name($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_alloc_name($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1254} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 261263);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} dev_set_drvdata($p2, $p1);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_run_bist: ref;

axiom ns83820_run_bist == $sub.ref(0, 262295);

procedure ns83820_run_bist($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_run_bist($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i19: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i20: i32;
  var $i21: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_47: i64;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} {:cexpr "ns83820_run_bist:arg:enable"} boogie_si_record_i32($i2);
    call {:si_unique_call 1258} {:cexpr "ns83820_run_bist:arg:done"} boogie_si_record_i32($i3);
    call {:si_unique_call 1259} {:cexpr "ns83820_run_bist:arg:fail"} boogie_si_record_i32($i4);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p5 := PRIV($p0);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    call {:si_unique_call 1261} {:cexpr "start"} boogie_si_record_i64($i6);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(12, 1));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} writel($i2, $p9);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(12, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i13 := readl($p12);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 1264} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $i2);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i13, 1;
    goto $bb4;

  $bb4:
    call $i19, $i17, $i18, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $p35, $p36, $i37, $i38, $i39, vslice_dummy_var_47 := ns83820_run_bist_loop_$bb4($i2, $i3, $i4, $i6, $p10, $i19, $i17, $i18, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $p35, $p36, $i37, $i38, $i39, vslice_dummy_var_47);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i17, $i3);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i24 := $i17;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i17, $i4);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i27 := $i17;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, jiffies);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i28, $i6);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i29, 250);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i31 := $sge.i64($i30, 0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i32 := $i17;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_47 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i18, 1);
    call {:si_unique_call 1266} {:cexpr "loops"} boogie_si_record_i32($i34);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p10);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(12, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i37 := readl($p36);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 1268} {:cexpr "status"} boogie_si_record_i32($i37);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $i2);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i19 := $i37;
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i17, $i18 := $i37, $i34;
    goto $bb17_dummy;

  $bb5:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i16, 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i20, $i4);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i21, 0);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} vslice_dummy_var_49 := printk.ref.ref.ref.i32(.str.43, $p47, $p1, $i20);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} vslice_dummy_var_48 := printk.ref.ref.ref.i32.i32(.str.42, $p43, $p1, $i20, $i4);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i32, 1;
    goto $bb6;

  $bb11:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i27, 0;
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i24, 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 263327);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_getmac: ref;

axiom ns83820_getmac == $sub.ref(0, 264359);

procedure ns83820_getmac($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_getmac($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(72, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} writel(0, $p4);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(76, 1));
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i8 := readl($p7);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 1274} {:cexpr "data"} boogie_si_record_i32($i8);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i8);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    $i11 := $add.i64(1, 1);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref($i11, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i8, 8);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i14);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(72, 1));
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} writel(2, $p17);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(76, 1));
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i21 := readl($p20);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    $i22 := $add.i64($i11, 1);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref($i22, 1));
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i21);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i24);
    $i25 := $add.i64($i22, 1);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 1));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i21, 8);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i28);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(72, 1));
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} writel(4, $p31);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(76, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i35 := readl($p34);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    $i36 := $add.i64($i25, 1);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref($i36, 1));
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i35);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i38);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i35, 8);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i40);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const register_netdevice: ref;

axiom register_netdevice == $sub.ref(0, 265391);

procedure register_netdevice($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdevice($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1279} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 266423);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_47: ref;

axiom ldv_free_irq_47 == $sub.ref(0, 267455);

procedure ldv_free_irq_47($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation ldv_free_irq_47($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} {:cexpr "ldv_free_irq_47:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} free_irq($i0, $p1);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout_uninterruptible: ref;

axiom schedule_timeout_uninterruptible == $sub.ref(0, 268487);

procedure schedule_timeout_uninterruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_uninterruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1284} {:cexpr "schedule_timeout_uninterruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1285} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 1286} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 269519);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 270551);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1288} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1290} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 271583);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(ns83820_irq));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 272615);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.13, $M.21, $M.12, $M.15, $M.22, $M.14, $M.17, $M.23, $M.16, $M.19, $M.24, $M.18;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i2 := $M.12;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.14;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $M.19 := $i0;
    call {:si_unique_call 1298} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.24 := $p1;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.17 := $i0;
    call {:si_unique_call 1296} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $M.23 := $p1;
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1297} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $M.15 := $i0;
    call {:si_unique_call 1294} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $M.22 := $p1;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $M.13 := $i0;
    call {:si_unique_call 1292} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $M.21 := $p1;
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 273647);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1300} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1301} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1302} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ns83820_do_isr: ref;

axiom ns83820_do_isr == $sub.ref(0, 274679);

procedure ns83820_do_isr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.7, $M.6, $M.1, $M.4, $M.5, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation ns83820_do_isr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "ns83820_do_isr:arg:isr"} boogie_si_record_i32($i1);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p2 := PRIV($p0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 16);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 3);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i1, 55);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i1, 65536);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i1, 32);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 1316} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i1, 2097152);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i1, 512);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i1, 960);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i1, 512);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i1, 2048);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i32($i130);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i133 := ldv__builtin_expect($i132, 0);
    call {:si_unique_call 1333} {:cexpr "tmp___2"} boogie_si_record_i64($i133);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i1, 16384);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i137);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i139 := ldv__builtin_expect($i138, 0);
    call {:si_unique_call 1336} {:cexpr "tmp___3"} boogie_si_record_i64($i139);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    return;

  $bb49:
    assume $i140 == 1;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} phy_intr($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i134 == 1;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} ns83820_mib_isr($p2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i111 == 1;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i114, $i117);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb42;

  $bb43:
    assume $i118 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv_spin_lock();
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 64);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, $i121);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(20, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} writel($i124, $p127);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} spin_unlock_irqrestore($p128, $u0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb31:
    assume $i87 == 1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} ldv_spin_lock();
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} do_tx_done($p0);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(872, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} spin_unlock_irqrestore($p88, $u0);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i91, $i94);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i95 == 1;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 64);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb35;

  $bb36:
    assume $i99 == 1;
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_spin_lock();
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, $sub.i32(0, 65));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref(20, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} writel($i105, $p108);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} spin_unlock_irqrestore($p109, $u0);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb22:
    assume $i59 == 1;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(32, 1));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i63 := readl($p62);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 1319} {:cexpr "txdp"} boogie_si_record_i32($i63);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i63, $i66);
    call {:si_unique_call 1320} {:cexpr "txdp"} boogie_si_record_i32($i67);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i68 := $udiv.i32($i67, 32);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(946, 1));
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i69);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(946, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i74 := $ugt.i32($i73, 127);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(946, 1));
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i81, $i84);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i85 == 1;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} kick_tx($p2);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i74 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} vslice_dummy_var_50 := printk.ref.ref(.str, $p76);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(946, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, 0);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb18;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} writel(4, $p57);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(112, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(112, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i47);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(112, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(112, 1));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i35);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} ns83820_rx_kick($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(600, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} llvm.prefetch($p12, 0, 3, 1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} ldv_spin_lock();
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $sub.i32(0, 4));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(864, 1));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(20, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} writel($i18, $p21);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(656, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} tasklet_schedule($p23);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(80, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 1);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} ns83820_rx_kick($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ns83820_rx_kick: ref;

axiom ns83820_rx_kick == $sub.ref(0, 275711);

procedure ns83820_rx_kick($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation ns83820_rx_kick($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_51: i1;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p1 := PRIV($p0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} kick_rx($p0);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(80, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_52 := printk.ref.ref(.str.1, $p29);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 62);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(610, 1));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i14, $i18);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i20 := $srem.i32($i19, 64);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 48);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(704, 1));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vslice_dummy_var_51 := schedule_work($p22);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} rx_refill_atomic($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} kick_rx($p0);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 276743);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 277775);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 1345} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} __tasklet_schedule($p0);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ns83820_mib_isr: ref;

axiom ns83820_mib_isr == $sub.ref(0, 278807);

procedure ns83820_mib_isr($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.1, $M.4, $M.5, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation ns83820_mib_isr($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ldv_spin_lock();
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} ns83820_update_stats($p0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(784, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} spin_unlock_irqrestore($p1, $u0);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 279839);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1351} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1352} devirtbounce.8(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p2);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 280871);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    return;
}



const rx_refill_atomic: ref;

axiom rx_refill_atomic == $sub.ref(0, 281903);

procedure rx_refill_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, assertsPassed;



implementation rx_refill_atomic($p0: ref)
{
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_53 := rx_refill($p0, 32);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 282935);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.26, $M.25, $M.27, $M.29, $M.31;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i2 := queue_work($p1, $p0);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1355} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 283967);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.26, $M.25, $M.27, $M.29, $M.31;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1357} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 284999);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.26, $M.25, $M.27, $M.29, $M.31;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1360} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1361} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} activate_work_2($p2, 2);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 286031);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1363} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1364} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1365} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_2: ref;

axiom activate_work_2 == $sub.ref(0, 287063);

procedure activate_work_2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.26, $M.25, $M.27, $M.29, $M.31;



implementation activate_work_2($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} {:cexpr "activate_work_2:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i2 := $M.25;
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.27;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.29;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.31;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.31 := $i1;
    call {:si_unique_call 1370} {:cexpr "ldv_work_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $M.29 := $i1;
    call {:si_unique_call 1369} {:cexpr "ldv_work_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.27 := $i1;
    call {:si_unique_call 1368} {:cexpr "ldv_work_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $M.25 := $i1;
    call {:si_unique_call 1367} {:cexpr "ldv_work_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 288095);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} {:cexpr "dma_alloc_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1372} {:cexpr "dma_alloc_attrs:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p5 := external_alloc();
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 289127);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1374} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1375} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const rx_irq: ref;

axiom rx_irq == $sub.ref(0, 290159);

procedure rx_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation rx_irq($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i32;
  var $i51: i1;
  var $i53: i1;
  var $i52: i1;
  var $i49: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p78: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i16;
  var $i99: i32;
  var $i100: i16;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i1;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i127: i32;
  var $i16: i32;
  var $i128: i16;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var vslice_dummy_var_54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p1 := PRIV($p0);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} ldv_spin_lock();
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(72, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 1379} {:cexpr "next_rx"} boogie_si_record_i32($i8);
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(600, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(4, 4));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1380} {:cexpr "cmdsts"} boogie_si_record_i32($i12);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $sub.i32(0, 2147483648));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i15 := $and.i1($i13, $i14);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i16 := $i8;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i16);
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $i128);
    $p130 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i132 := $mul.i32($i16, 8);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p131, $mul.ref($i133, 4));
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(600, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p134);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} spin_unlock_irqrestore($p136, $u0);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i17, $i18, $p19, $i20 := $i12, 0, $p10, $i8;
    goto $bb8;

  $bb8:
    call $p21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $i35, $p37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i50, $i51, $i53, $i52, $i49, $i54, $i55, $i56, $i57, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p68, $i69, $i70, $p72, $p74, $i75, $i76, $p78, $p80, $i81, $i82, $i83, $p85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p107, $i108, $i109, $p111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $p120, $i121, $p122, $i123, $i124, $i125, $i126, $i17, $i18, $p19, $i20, $i127, vslice_dummy_var_54 := rx_irq_loop_$bb8($p0, $p1, $p21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $i35, $p37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i50, $i51, $i53, $i52, $i49, $i54, $i55, $i56, $i57, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p68, $i69, $i70, $p72, $p74, $i75, $i76, $p78, $p80, $i81, $i82, $i83, $p85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p107, $i108, $i109, $p111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $p120, $i121, $p122, $i123, $i124, $i125, $i126, $i17, $i18, $p19, $i20, $i127, vslice_dummy_var_54);
    goto $bb8_last;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref(5, 4));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 1381} {:cexpr "extsts"} boogie_si_record_i32($i22);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p19, $mul.ref(2, 4));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p19, $mul.ref(3, 4));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i29 := $shl.i64($i28, 32);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i30 := $or.i64($i25, $i29);
    call {:si_unique_call 1382} {:cexpr "bufptr"} boogie_si_record_i64($i30);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i20);
    $p33 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref($i31, 8));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i20);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref($i35, 8));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i20);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 63);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    call {:si_unique_call 1383} devirtbounce.1(0);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} clear_rx_desc($p1, $i20);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} pci_unmap_single($p45, $i30, 1500, 2);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i17, 65535);
    call {:si_unique_call 1386} {:cexpr "len"} boogie_si_record_i32($i46);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i17, 134217728);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i48 == 1);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i17, 2097152);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i52 := 0;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i49 := $i52;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i49);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i56 := ldv__builtin_expect($i55, 1);
    call {:si_unique_call 1388} {:cexpr "tmp___2"} boogie_si_record_i64($i56);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} kfree_skb($p34);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i18, 1);
    call {:si_unique_call 1400} {:cexpr "nr"} boogie_si_record_i32($i112);
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    call {:si_unique_call 1401} {:cexpr "next_rx"} boogie_si_record_i32($i115);
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i118 := $mul.i32($i115, 8);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i119 := $zext.i32.i64($i118);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p117, $mul.ref($i119, 4));
    $i121 := $add.i64($i119, 4);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p117, $mul.ref($i121, 4));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    call {:si_unique_call 1402} {:cexpr "cmdsts"} boogie_si_record_i32($i123);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i123, $sub.i32(0, 2147483648));
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i126 := $and.i1($i124, $i125);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i127 := $i115;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i16 := $i127;
    goto $bb7;

  $bb38:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18, $p19, $i20 := $i123, $i112, $p120, $i115;
    goto $bb38_dummy;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_54 := skb_put($p34, $i46);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p34);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 1391} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i17, 16777216);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 1);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, $i76);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i46);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i81, $i82);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, $i83);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i22, 2752512);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} skb_checksum_none_assert($p34);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $i94 := eth_type_trans($p34, $p0);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p34, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $i94);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i22, 65536);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i104 := netif_rx($p34);
    call {:si_unique_call 1399} {:cexpr "rx_rc"} boogie_si_record_i32($i104);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i105 == 1;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 1);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p111, $i109);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i97 == 1;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i22);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i101 := __fswab16($i100);
    call {:si_unique_call 1396} {:cexpr "tmp___1"} boogie_si_record_i16($i101);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __vlan_hwaccel_put_tag($p34, $sub.i16(0, 8826), $i103);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i87 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i22, 5505024);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb27;

  $bb28:
    assume $i89 == 1;
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p34, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, $sub.i32(0, 1537));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i92, 512);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i93);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i66 == 1;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 1);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i70);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i46, 55);
    assume {:verifier.code 0} true;
    $i52 := $i53;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 291191);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p2 := external_alloc();
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_checksum_none_assert: ref;

axiom skb_checksum_none_assert == $sub.ref(0, 292223);

procedure skb_checksum_none_assert($p0: ref);
  free requires assertsPassed;



implementation skb_checksum_none_assert($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    return;
}



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 293255);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation eth_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1405} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1406} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __vlan_hwaccel_put_tag: ref;

axiom __vlan_hwaccel_put_tag == $sub.ref(0, 294287);

procedure __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} {:cexpr "__vlan_hwaccel_put_tag:arg:vlan_proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 1408} {:cexpr "__vlan_hwaccel_put_tag:arg:vlan_tci"} boogie_si_record_i16($i2);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i1);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i2);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 4096);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(170, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i6);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    return;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 295319);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1409} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 296351);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1411} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1412} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1413} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 297383);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p1 := calloc(1, $i0);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1416} __VERIFIER_assume($i4);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 298415);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1418} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.33;
    call {:si_unique_call 1419} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.33 := cmdloc_dummy_var_8;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_net_device_ops_5: ref;

axiom ldv_net_device_ops_5 == $sub.ref(0, 299447);

procedure ldv_net_device_ops_5();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_net_device_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 300479);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.25, $M.27, $M.29, $M.31;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 1421} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1422} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1423} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 1424} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_3: ref;

axiom choose_timer_3 == $sub.ref(0, 301511);

procedure choose_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $M.3, $M.4, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation choose_timer_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 1426} devirtbounce.9($p2, $i4);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 1428} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(2);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 302543);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.7, $M.6, $M.4, $M.5, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1429} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1430} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1433} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1434} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1435} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1436} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_stop();
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i8 := ns83820_irq($i1, $p2);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 1439} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 303575);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_ethtool_ops_6: ref;

axiom ldv_initialize_ethtool_ops_6 == $sub.ref(0, 304607);

procedure ldv_initialize_ethtool_ops_6();
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $p2 := ldv_init_zalloc(44);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $M.37 := $p2;
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_driver_4: ref;

axiom ldv_pci_driver_4 == $sub.ref(0, 305639);

procedure ldv_pci_driver_4();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_pci_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 306671);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.1, $M.3, $M.7, $M.6, $M.4, $M.5, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1447} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_stop();
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i18 := $M.18;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i19 := $M.19;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p20 := $M.24;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $M.12 := $i21;
    call {:si_unique_call 1451} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i14 := $M.16;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i15 := $M.17;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p16 := $M.23;
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $M.12 := $i17;
    call {:si_unique_call 1449} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i10 := $M.14;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i11 := $M.15;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p12 := $M.22;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $M.12 := $i13;
    call {:si_unique_call 1453} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i6 := $M.12;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i7 := $M.13;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p8 := $M.21;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $M.12 := $i9;
    call {:si_unique_call 1455} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 307703);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.25, $M.3, $M.27, $M.29, $M.31, $M.0, $CurrAddr, assertsPassed;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1459} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_stop();
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i21 := $M.31;
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i23 := $M.31;
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.31 := 4;
    call {:si_unique_call 1469} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p25 := $M.26;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} queue_refill($p25);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1471} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i16 := $M.29;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i18 := $M.29;
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 1466} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p20 := $M.26;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} queue_refill($p20);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1468} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i11 := $M.27;
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i13 := $M.27;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 1463} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p15 := $M.26;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} queue_refill($p15);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1465} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i6 := $M.25;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i8 := $M.25;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.25 := 4;
    call {:si_unique_call 1460} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p10 := $M.26;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} queue_refill($p10);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 308735);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.25, $M.27, $M.29, $M.31, $M.45, $M.46, $M.0, $M.3, $M.7, $M.6, $M.47, $M.12, $M.48, $M.34, $M.36, $M.37, $M.5, $M.1, $M.49, $M.50, $M.18, $M.16, $M.14, $M.4, $M.26, $M.13, $M.15, $M.17, $M.19, $M.21, $M.22, $M.23, $M.24, $M.38, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.11, $M.20, $M.8, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $i192: i32;
  var $i193: i32;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: ref;
  var vslice_dummy_var_65: ref;
  var vslice_dummy_var_66: ref;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    call {:si_unique_call 1473} $initialize();
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p1 := ldv_init_zalloc(196);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p3 := ldv_init_zalloc(32);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $p5 := ldv_init_zalloc(232);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_initialize();
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_55 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1485} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} work_init_2();
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $i32, $i33, $p34, $i35, $i36, $p37, $p38, $i40, $i41, $p42, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i141, $i142, $p143, $i144, $i146, $i147, $p148, $i149, $i151, $i152, $p153, $i154, $i155, $i156, $i157, $i158, $p159, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $p181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i192, $i193, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73 := main_loop_$bb1($p0, $p2, $p4, $p6, $p7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $i32, $i33, $p34, $i35, $i36, $p37, $p38, $i40, $i41, $p42, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i141, $i142, $p143, $i144, $i146, $i147, $p148, $i149, $i151, $i152, $p153, $i154, $i155, $i156, $i157, $i158, $p159, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $p181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i192, $i193, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_stop();
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i89 := $M.46;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb118:
    assume $i90 == 1;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1536} $i91 := __VERIFIER_nondet_int();
    call {:si_unique_call 1537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i91);
    call {:si_unique_call 1538} {:cexpr "tmp___7"} boogie_si_record_i32($i91);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i91, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i91, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i91, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i91, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_stop();
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb129:
    assume $i96 == 1;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $i189 := $M.46;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 2);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb216:
    assume $i190 == 1;
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_73 := ldv_ndo_uninit_5();
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i192 := $M.42;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i193 := $sub.i32($i192, 1);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $M.42 := $i193;
    call {:si_unique_call 1586} {:cexpr "ref_cnt"} boogie_si_record_i32($i193);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb127:
    assume $i95 == 1;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i182 := $M.46;
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb210:
    assume $i183 == 1;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i184 := ldv_ndo_init_5();
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $M.50 := $i184;
    call {:si_unique_call 1581} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i184);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i185 := $M.50;
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 0);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb212:
    assume $i186 == 1;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i187 := $M.42;
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i187, 1);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $M.42 := $i188;
    call {:si_unique_call 1583} {:cexpr "ref_cnt"} boogie_si_record_i32($i188);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb125:
    assume $i94 == 1;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i173 := $M.46;
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i176 := $M.46;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 3);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i179 := $M.46;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb207:
    assume $i180 == 1;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p181 := $M.34;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} ns83820_tx_timeout($p181);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i177 == 1;
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p178 := $M.34;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ns83820_tx_timeout($p178);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i174 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p175 := $M.34;
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} ns83820_tx_timeout($p175);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb123:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i91, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i91, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i98 == 1);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i161 := $M.46;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i165 := $M.46;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 3);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i169 := $M.46;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 2);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb198:
    assume $i170 == 1;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p171 := $M.34;
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_72 := eth_mac_addr($p171, $p7);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb195:
    assume $i166 == 1;
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p167 := $M.34;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_71 := eth_mac_addr($p167, $p7);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i162 == 1;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p163 := $M.34;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_70 := eth_mac_addr($p163, $p7);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb134:
    assume $i98 == 1;
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i157 := $M.46;
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 3);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb189:
    assume $i158 == 1;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p159 := $M.34;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_69 := ns83820_hard_start_xmit($p6, $p159);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb132:
    assume $i97 == 1;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i151 := $M.46;
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb183:
    assume $i152 == 1;
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p153 := $M.34;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $i154 := ns83820_open($p153);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $M.49 := $i154;
    call {:si_unique_call 1564} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i154);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i155 := $M.49;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 0);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb185:
    assume $i156 == 1;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb187;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i91, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i91, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i91, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i101 == 1);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i141 := $M.46;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 3);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i146 := $M.46;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 2);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb180:
    assume $i147 == 1;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p148 := $M.34;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.33, $p0);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_68 := ns83820_change_mtu($p148, $i149);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb177:
    assume $i142 == 1;
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p143 := $M.34;
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.33, $p0);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_67 := ns83820_change_mtu($p143, $i144);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb140:
    assume $i101 == 1;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i129 := $M.46;
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i133 := $M.46;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 3);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i137 := $M.46;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 2);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb174:
    assume $i138 == 1;
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p139 := $M.34;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_66 := ns83820_get_stats($p139);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1558} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb176;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb171:
    assume $i134 == 1;
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p135 := $M.34;
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_65 := ns83820_get_stats($p135);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    goto $bb173;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb168:
    assume $i130 == 1;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p131 := $M.34;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_64 := ns83820_get_stats($p131);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto $bb170;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb138:
    assume $i100 == 1;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i117 := $M.46;
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i121 := $M.46;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 3);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i125 := $M.46;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 2);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb165:
    assume $i126 == 1;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p127 := $M.34;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_63 := eth_validate_addr($p127);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb162:
    assume $i122 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p123 := $M.34;
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_62 := eth_validate_addr($p123);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb159:
    assume $i118 == 1;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p119 := $M.34;
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_61 := eth_validate_addr($p119);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb136:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i91, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i102 == 1);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i113 := $M.46;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 3);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb156:
    assume $i114 == 1;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p115 := $M.34;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_60 := ns83820_stop($p115);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    goto $bb158;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb142:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i91, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb131;

  $bb144:
    assume $i103 == 1;
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i104 := $M.46;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i107 := $M.46;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 3);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i110 := $M.46;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb152:
    assume $i111 == 1;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p112 := $M.34;
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ns83820_set_multicast($p112);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb149:
    assume $i108 == 1;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p109 := $M.34;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ns83820_set_multicast($p109);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto $bb151;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb146:
    assume $i105 == 1;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $p106 := $M.34;
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} ns83820_set_multicast($p106);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i87 := $M.45;
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb115:
    assume $i88 == 1;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} invoke_work_2();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i84 := $M.44;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb112:
    assume $i85 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p86 := $M.4;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} choose_timer_3($p86);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i67 := $M.43;
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb82:
    assume $i68 == 1;
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} $i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1520} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i69);
    call {:si_unique_call 1521} {:cexpr "tmp___6"} boogie_si_record_i32($i69);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} ldv_stop();
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb87:
    assume $i71 == 1;
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i77 := $M.43;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb100:
    assume $i78 == 1;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i79 := ns83820_init();
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $M.48 := $i79;
    call {:si_unique_call 1526} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i79);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i80 := $M.48;
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i82 := $M.48;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb105:
    assume $i83 == 1;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_check_final_state();
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb102:
    assume $i81 == 1;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_net_device_ops_5();
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_initialize_ethtool_ops_6();
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb85:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i69, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb89;

  $bb90:
    assume $i72 == 1;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i73 := $M.43;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb92:
    assume $i74 == 1;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i75 := $M.42;
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb94;

  $bb95:
    assume $i76 == 1;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ns83820_exit();
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1523} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb3:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i17 == 1);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i65 := $M.41;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb79:
    assume $i66 == 1;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} choose_interrupt_1();
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i44 := $M.40;
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51:
    assume $i45 == 1;
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1506} $i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 1507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i46);
    call {:si_unique_call 1508} {:cexpr "tmp___5"} boogie_si_record_i32($i46);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i46, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i46, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_stop();
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb58:
    assume $i49 == 1;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i62 := $M.40;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb73:
    assume $i63 == 1;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_59 := ldv_shutdown_4();
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb56:
    assume $i48 == 1;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i59 := $M.40;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 2);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb70:
    assume $i60 == 1;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p61 := $M.38;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ns83820_remove_one($p61);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i46, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb60;

  $bb61:
    assume $i50 == 1;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i51 := $M.40;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume $i52 == 1;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p53 := $M.38;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i54 := ns83820_init_one($p53, $p4);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $M.47 := $i54;
    call {:si_unique_call 1510} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i54);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i55 := $M.47;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i56 == 1;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i57 := $M.42;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 1);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $M.42 := $i58;
    call {:si_unique_call 1512} {:cexpr "ref_cnt"} boogie_si_record_i32($i58);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i19 := $M.39;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1494} $i21 := __VERIFIER_nondet_int();
    call {:si_unique_call 1495} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i21);
    call {:si_unique_call 1496} {:cexpr "tmp___4"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_stop();
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb27:
    assume $i24 == 1;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i40 := $M.39;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb44:
    assume $i41 == 1;
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p42 := $M.36;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_58 := ns83820_get_link($p42);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1504} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i23 == 1;
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i35 := $M.39;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb41:
    assume $i36 == 1;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $p37 := $M.36;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p38 := $M.37;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} vslice_dummy_var_57 := ns83820_set_settings($p37, $p38);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i32 := $M.39;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i33 == 1;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p34 := $M.36;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ns83820_get_drvinfo($p34, $p2);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1500} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb29;

  $bb32:
    assume $i26 == 1;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i27 := $M.39;
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i28 == 1;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p29 := $M.36;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $p30 := $M.37;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} vslice_dummy_var_56 := ns83820_get_settings($p29, $p30);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb50_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1491} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1493} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 309767);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    return;
}



const ldv_shutdown_4: ref;

axiom ldv_shutdown_4 == $sub.ref(0, 310799);

procedure ldv_shutdown_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ns83820_exit: ref;

axiom ns83820_exit == $sub.ref(0, 311831);

procedure ns83820_exit();
  free requires assertsPassed;
  modifies $M.40;



implementation ns83820_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} ldv_pci_unregister_driver_50(driver);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    return;
}



const ns83820_init: ref;

axiom ns83820_init == $sub.ref(0, 312863);

procedure ns83820_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.38, $M.0, $CurrAddr;



implementation ns83820_init() returns ($r: i32)
{
  var $i1: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_74 := printk.ref(.str.44);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i1 := ldv___pci_register_driver_49(driver, __this_module, .str.14);
    call {:si_unique_call 1594} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ndo_init_5: ref;

axiom ldv_ndo_init_5 == $sub.ref(0, 313895);

procedure ldv_ndo_init_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1595} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1596} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_5: ref;

axiom ldv_ndo_uninit_5 == $sub.ref(0, 314927);

procedure ldv_ndo_uninit_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1597} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1598} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 315959);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    return;
}



const ldv___pci_register_driver_49: ref;

axiom ldv___pci_register_driver_49 == $sub.ref(0, 316991);

procedure ldv___pci_register_driver_49($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.38, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_49($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1600} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_pci_driver_4();
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 318023);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1603} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_50: ref;

axiom ldv_pci_unregister_driver_50 == $sub.ref(0, 319055);

procedure ldv_pci_unregister_driver_50($p0: ref);
  free requires assertsPassed;
  modifies $M.40;



implementation ldv_pci_unregister_driver_50($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} pci_unregister_driver($p0);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 320087);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 321119);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1607} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 1} true;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 322151);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 323183);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 324215);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 325247);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 326279);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 327311);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 328343);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 329375);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 330407);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 331439);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 332471);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1608} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1609} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1610} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1611} __VERIFIER_assume($i6);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 333503);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 334535);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 335567);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1612} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1613} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1614} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1615} __VERIFIER_assume($i4);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 336599);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 337631);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 338663);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 339695);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 340727);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1616} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1617} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1618} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1619} __VERIFIER_assume($i4);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 341759);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 342791);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 343823);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 344855);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 345887);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1620} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1621} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1622} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1623} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1624} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1625} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1628} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} __VERIFIER_assume($i7);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} __VERIFIER_assume($i11);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 346919);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 347951);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 348983);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 350015);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 351047);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 352079);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 353111);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 354143);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 355175);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1633} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1634} __VERIFIER_assume($i10);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 356207);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1637} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 357239);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1638} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1639} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1640} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 358271);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 359303);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 360335);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1643} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1644} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 361367);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 362399);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 363431);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1645} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1646} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p6 := malloc($i5);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 1650} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 364463);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 365495);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.18, $M.12, $M.5, $M.16, $M.14, $M.4, $M.34, $M.25, $M.26, $M.27, $M.29, $M.31, $M.13, $M.15, $M.17, $M.19, $M.21, $M.22, $M.23, $M.24, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.3, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $M.59, $M.11, $M.20, $M.8;



implementation __SMACK_static_init()
{

  $bb0:
    $M.18 := 0;
    call {:si_unique_call 1651} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1652} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1653} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1654} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1655} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.14 := 0;
    call {:si_unique_call 1656} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.4 := $0.ref;
    $M.34 := $0.ref;
    $M.25 := 0;
    call {:si_unique_call 1657} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.26 := $0.ref;
    $M.27 := 0;
    call {:si_unique_call 1658} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1659} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1660} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 1661} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1662} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 1663} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 1664} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.21 := $0.ref;
    $M.22 := $0.ref;
    $M.23 := $0.ref;
    $M.24 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.39 := 0;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1668} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1673} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1674} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1675} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1676} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1677} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 1678} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.52 := $store.i32($M.52, __mod_pci__ns83820_pci_tbl_device_table, 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.58 := $store.i64($M.58, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.52 := $store.i32($M.52, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.58 := $store.i64($M.58, $add.ref($add.ref($add.ref(__mod_pci__ns83820_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, ns83820_pci_tbl, 4107);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ns83820_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.59 := $store.ref($M.59, driver, $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.14);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(24, 1)), ns83820_pci_tbl);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(32, 1)), ns83820_init_one);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(40, 1)), ns83820_remove_one);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.11 := 0;
    call {:si_unique_call 1679} {:cexpr "reset_phy"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, ops, ns83820_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(8, 1)), ns83820_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(16, 1)), ns83820_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(80, 1)), ns83820_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ops, $mul.ref(0, 392)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), ns83820_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), ns83820_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), ns83820_hard_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), ns83820_set_multicast);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), eth_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), ns83820_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), ns83820_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), ns83820_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.20 := 2;
    call {:si_unique_call 1680} {:cexpr "ihr"} boogie_si_record_i32(2);
    $M.8 := 0;
    call {:si_unique_call 1681} {:cexpr "lnksts"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.5, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 3)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.8, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(4, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(5, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(6, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 6)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 6)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 6)), $mul.ref(4, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 5)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 5)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 5)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 5)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(3, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(3, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(3, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(5, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(6, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(4, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(5, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(6, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(7, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 5)), $mul.ref(1, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 5)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 5)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 3)), $mul.ref(1, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    call {:si_unique_call 1682} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 366527);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(ns83820_get_link, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(eth_validate_addr, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(ns83820_stop, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(ns83820_open, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1683} $i2 := ns83820_open($p1);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    $r := $i2;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1684} $i4 := ns83820_stop($p3);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    $r := $i4;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1685} $i6 := eth_validate_addr($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1686} $i8 := ns83820_get_link($p7);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    $r := $i8;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 367559);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 368591);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(ns83820_get_drvinfo, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1687} ns83820_get_drvinfo($p1, $p2);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 369623);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 370655);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 371687);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 372719);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 373751);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 374783);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 375815);

procedure devirtbounce.9(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $CurrAddr, $M.26, $M.25, $M.27, $M.29, $M.31, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(rx_action, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(ns83820_tx_watch, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1688} ns83820_tx_watch(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1689} rx_action(arg);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.18, $M.12, $M.5, $M.16, $M.14, $M.4, $M.34, $M.25, $M.26, $M.27, $M.29, $M.31, $M.13, $M.15, $M.17, $M.19, $M.21, $M.22, $M.23, $M.24, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.3, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $M.59, $M.11, $M.20, $M.8, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1690} __SMACK_static_init();
    call {:si_unique_call 1691} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.25, $M.27, $M.29, $M.31, $M.45, $M.46, $M.0, $M.3, $M.7, $M.6, $M.47, $M.12, $M.48, $M.34, $M.36, $M.37, $M.5, $M.1, $M.49, $M.50, $M.18, $M.16, $M.14, $M.4, $M.26, $M.13, $M.15, $M.17, $M.19, $M.21, $M.22, $M.23, $M.24, $M.38, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.11, $M.20, $M.8, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ns83820_hard_start_xmit_loop_$bb39(in_$p2: ref, in_$i52: i32, in_$i99: i32, in_$p117: ref, in_$i118: i32, in_$i119: i64, in_$i120: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$i131: i64, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i64, in_$p137: ref, in_$i138: i64, in_$i139: i32, in_$i140: i64, in_$p141: ref, in_$i142: i64, in_$p143: ref, in_$i144: i1, in_$i145: i1, in_$i146: i32, in_$i147: i32, in_$i148: i64, in_$i149: i64, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i64, in_$p155: ref, in_$i156: i1, in_$i157: i32, in_$i158: i32, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$i164: i64, in_$i165: i32, in_$p166: ref, in_$i167: i32) returns (out_$i118: i32, out_$i119: i64, out_$i120: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$i131: i64, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i64, out_$p137: ref, out_$i138: i64, out_$i139: i32, out_$i140: i64, out_$p141: ref, out_$i142: i64, out_$p143: ref, out_$i144: i1, out_$i145: i1, out_$i146: i32, out_$i147: i32, out_$i148: i64, out_$i149: i64, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i64, out_$p155: ref, out_$i156: i1, out_$i157: i32, out_$i158: i32, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$i164: i64, out_$i165: i32, out_$p166: ref, out_$i167: i32)
{

  entry:
    out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167 := in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$p141, in_$i142, in_$p143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$p160, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p166, in_$i167;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$i118, out_$i119, out_$i120, out_$i121, out_$p122 := out_$i167, out_$i164, out_$i129, out_$i165, out_$p166;
    goto corral_source_split_1458_dummy;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i167 := $sub.i32(out_$i118, 1);
    call {:si_unique_call 67} {:cexpr "nr_frags"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref(out_$p122, $mul.ref(1, 16));
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i165 := skb_frag_size(out_$p122);
    call {:si_unique_call 66} {:cexpr "len"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$i164 := skb_frag_dma_map(out_$p162, out_$p122, 0, out_$i163, 1);
    call {:si_unique_call 64} {:cexpr "buf"} boogie_si_record_i64(out_$i164);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i32.i64(out_$i159);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p161, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p161 := $load.ref($M.0, out_$p160);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1451;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_$i159 := skb_frag_size(out_$p122);
    call {:si_unique_call 62} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_1450;

  $bb44:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$i157, out_$i158 := out_$i120, out_$i129;
    assume true;
    goto $bb44;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i118, 0);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p155, out_$i153);
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref(out_$p124, $mul.ref(out_$i154, 4));
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$i153 := $or.i32(out_$i152, out_$i121);
    call {:si_unique_call 56} {:cexpr "cmdsts"} boogie_si_record_i32(out_$i153);
    out_$i154 := $add.i64(out_$i126, 4);
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i152 := $or.i32(out_$i151, out_$i147);
    call {:si_unique_call 55} {:cexpr "cmdsts"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i151 := (if out_$i150 == 1 then 0 else $sub.i32(0, 2147483648));
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i64(out_$i148, out_$i149);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(in_$p117);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i148 := $p2i.ref.i64(out_$p127);
    goto corral_source_split_1418;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i147 := 1073741824;
    goto $bb42;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i146;
    goto $bb42;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i146 := (if out_$i145 == 1 then 536870912 else 0);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i32(in_$i52, 0);
    goto corral_source_split_1412;

  $bb40:
    assume out_$i144 == 1;
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i118, 0);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p143, in_$i99);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref(out_$p124, $mul.ref(out_$i142, 4));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p141, out_$i139);
    out_$i142 := $add.i64(out_$i126, 5);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref(out_$p124, $mul.ref(out_$i140, 4));
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i64.i32(out_$i138);
    out_$i140 := $add.i64(out_$i126, 3);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i138 := $lshr.i64(out_$i119, 32);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p137, out_$i135);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref(out_$p124, $mul.ref(out_$i136, 4));
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i135 := $trunc.i64.i32(out_$i119);
    out_$i136 := $add.i64(out_$i126, 2);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p127, out_$i134);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i132, out_$i133);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$i133 := $mul.i32(out_$i129, 32);
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$i132 := $trunc.i64.i32(out_$i131);
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i64($M.0, out_$p130);
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(2008, 1));
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i32(out_$i128, 127);
    call {:si_unique_call 54} {:cexpr "free_idx"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i120, 1);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p124, $mul.ref(out_$i126, 4));
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i32.i64(out_$i125);
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$i125 := $mul.i32(out_$i120, 8);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1387;

  $bb41:
    assume !(out_$i144 == 1);
    goto corral_source_split_1415;

  corral_source_split_1458_dummy:
    call {:si_unique_call 1} out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167 := ns83820_hard_start_xmit_loop_$bb39(in_$p2, in_$i52, in_$i99, in_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167);
    return;

  exit:
    return;
}



procedure ns83820_hard_start_xmit_loop_$bb39(in_$p2: ref, in_$i52: i32, in_$i99: i32, in_$p117: ref, in_$i118: i32, in_$i119: i64, in_$i120: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$i131: i64, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i64, in_$p137: ref, in_$i138: i64, in_$i139: i32, in_$i140: i64, in_$p141: ref, in_$i142: i64, in_$p143: ref, in_$i144: i1, in_$i145: i1, in_$i146: i32, in_$i147: i32, in_$i148: i64, in_$i149: i64, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i64, in_$p155: ref, in_$i156: i1, in_$i157: i32, in_$i158: i32, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$i164: i64, in_$i165: i32, in_$p166: ref, in_$i167: i32) returns (out_$i118: i32, out_$i119: i64, out_$i120: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$i131: i64, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i64, out_$p137: ref, out_$i138: i64, out_$i139: i32, out_$i140: i64, out_$p141: ref, out_$i142: i64, out_$p143: ref, out_$i144: i1, out_$i145: i1, out_$i146: i32, out_$i147: i32, out_$i148: i64, out_$i149: i64, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i64, out_$p155: ref, out_$i156: i1, out_$i157: i32, out_$i158: i32, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$i164: i64, out_$i165: i32, out_$p166: ref, out_$i167: i32);
  modifies $M.0;



implementation ns83820_hard_start_xmit_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i1, in_$i34: i32, in_$i35: i32, in_$i36: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i1, out_$i34: i32, out_$i35: i32, out_$i36: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i34, out_$i35, out_$i36 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p37, in_$i38, in_$i39, in_$i40, in_$i34, in_$i35, in_$i36;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_1236;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto corral_source_split_1280_dummy;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} netif_start_queue(in_$p1);
    goto corral_source_split_1280;

  $bb11:
    assume out_$i40 == 1;
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, out_$i28);
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} netif_stop_queue(in_$p1);
    goto corral_source_split_1273;

  $bb9:
    assume out_$i33 == 1;
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$i34, out_$i35, out_$i36 := out_$i25, out_$i28, out_$i32;
    assume true;
    goto $bb9;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$i33 := $sle.i32(out_$i32, in_$i7);
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i31, $sub.i32(0, 1));
    call {:si_unique_call 35} {:cexpr "nr_free"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$i31 := $and.i32(out_$i30, 127);
    call {:si_unique_call 34} {:cexpr "nr_free"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 126);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i28, out_$i25);
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    call {:si_unique_call 33} {:cexpr "tx_done_idx"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.0, out_$p26);
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    call {:si_unique_call 32} {:cexpr "free_idx"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.0, out_$p23);
    goto corral_source_split_1261;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(948, 1));
    goto corral_source_split_1260;

  $bb3:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} netif_start_queue(in_$p1);
    goto corral_source_split_1258;

  $bb5:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} out_$i20 := ldv__builtin_expect(out_$i19, 0);
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 0);
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(856, 1));
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} netif_stop_queue(in_$p1);
    goto corral_source_split_1245;

  $bb2:
    assume out_$i14 == 1;
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_$i13 := ldv__builtin_expect(out_$i12, 0);
    call {:si_unique_call 27} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i1.i32(out_$i10);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i9, 0);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_1237;

  corral_source_split_1280_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i34, out_$i35, out_$i36 := ns83820_hard_start_xmit_loop_$bb1(in_$p1, in_$p2, in_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure ns83820_hard_start_xmit_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i1, in_$i34: i32, in_$i35: i32, in_$i36: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i1, out_$i34: i32, out_$i35: i32, out_$i36: i32);



implementation do_tx_done_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p10: ref, in_$i16: i32, in_$i18: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i32, in_$i69: i32, in_$i70: i16, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i16, in_$i79: i32, in_$i80: i1, in_$p14: ref, in_$i15: i32, in_$p81: ref, in_$i17: i32, in_$i82: i1) returns (out_$i16: i32, out_$i18: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i32, out_$i69: i32, out_$i70: i16, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i16, out_$i79: i32, out_$i80: i1, out_$p14: ref, out_$i15: i32, out_$p81: ref, out_$i17: i32, out_$i82: i1)
{

  entry:
    out_$i16, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p14, out_$i15, out_$p81, out_$i17, out_$i82 := in_$i16, in_$i18, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$p45, in_$p46, in_$i47, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p14, in_$i15, in_$p81, in_$i17, in_$i82;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  $bb18:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15 := out_$p77, out_$i69;
    goto $bb18_dummy;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, out_$i69);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i16.i32(out_$i78);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i16($M.0, in_$p10);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p74, $mul.ref(out_$i76, 4));
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i75);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i75 := $mul.i32(out_$i69, 8);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(2000, 1));
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, 0);
    call {:si_unique_call 155} devirtbounce.1(0);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p14, $mul.ref(4, 4));
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p71, out_$i70);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(944, 1));
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i16(out_$i69);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 127);
    call {:si_unique_call 154} {:cexpr "tx_done_idx"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_1817;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i15, 1);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} pci_unmap_page(out_$p66, out_$i58, out_$i67, 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} atomic_dec(out_$p64);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(952, 1));
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} dev_kfree_skb_irq(out_$p46);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} pci_unmap_single(out_$p62, out_$i58, out_$i63, 1);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i50);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  $bb15:
    assume out_$i60 == 1;
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$i58 := $or.i64(out_$i53, out_$i57);
    call {:si_unique_call 149} {:cexpr "addr"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i57 := $shl.i64(out_$i56, 32);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i32.i64(out_$i55);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p14, $mul.ref(3, 4));
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(out_$i52);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p14, $mul.ref(2, 4));
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i17, 65535);
    call {:si_unique_call 148} {:cexpr "len"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, $0.ref);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(out_$i47, 8));
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i32.i64(out_$i15);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(960, 1)), $mul.ref(out_$i43, 8));
    goto corral_source_split_1785;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i32.i64(out_$i15);
    goto corral_source_split_1784;

  $bb13:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p42, out_$i40);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i64(out_$i37, out_$i39);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i64(out_$i38, 65535);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i17);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_1776;

  $bb12:
    assume out_$i34 == 1;
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_1773;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i17, 134217728);
    goto corral_source_split_1772;

  $bb10:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p32, out_$i30);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 1);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_1766;

  $bb9:
    assume out_$i26 == 1;
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_1763;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i17, 134217728);
    goto corral_source_split_1762;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p24, out_$i22);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 1);
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_1756;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i16, 0);
    goto corral_source_split_1753;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i17, 268435456);
    goto corral_source_split_1752;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume out_$i82 == 1;
    goto corral_source_split_1834;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i82 := $sge.i32(out_$i17, 0);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p81);
    call {:si_unique_call 147} {:cexpr "cmdsts"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p14, $mul.ref(4, 4));
    goto corral_source_split_1748;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i32.i64(out_$i50);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_1812;

  $bb16:
    assume !(out_$i60 == 1);
    goto corral_source_split_1811;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i16, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p14, out_$i15, out_$p81, out_$i17, out_$i82 := do_tx_done_loop_$bb4(in_$p0, in_$p1, in_$p10, out_$i16, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p14, out_$i15, out_$p81, out_$i17, out_$i82);
    return;

  exit:
    return;
}



procedure do_tx_done_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p10: ref, in_$i16: i32, in_$i18: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i32, in_$i69: i32, in_$i70: i16, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i16, in_$i79: i32, in_$i80: i1, in_$p14: ref, in_$i15: i32, in_$p81: ref, in_$i17: i32, in_$i82: i1) returns (out_$i16: i32, out_$i18: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i32, out_$i69: i32, out_$i70: i16, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i16, out_$i79: i32, out_$i80: i1, out_$p14: ref, out_$i15: i32, out_$p81: ref, out_$i17: i32, out_$i82: i1);
  modifies $M.0;



implementation dma_unmap_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_page_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation dma_map_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_page_loop_$bb3();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation ns83820_do_reset_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1) returns (out_$p4: ref, out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p4, out_$p5, out_$i6, out_$i7, out_$i8 := in_$p4, in_$p5, in_$i6, in_$i7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} schedule();
    goto corral_source_split_2196;

  $bb2:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb2_dummy;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, in_$i1);
    goto corral_source_split_2200;

  SeqInstr_63:
    call {:si_unique_call 293} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_2199;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} out_$i6 := readl(out_$p5);
    goto SeqInstr_62;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  $bb2_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$i6, out_$i7, out_$i8 := ns83820_do_reset_loop_$bb1(in_$p0, in_$i1, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ns83820_do_reset_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1) returns (out_$p4: ref, out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1);
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation rx_refill_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i45: i1, in_$p47: ref, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i21: i32, in_$i51: i32) returns (out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i45: i1, out_$p47: ref, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i21: i32, out_$i51: i32)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$i21, out_$i51 := in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$i50, in_$i21, in_$i51;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;

  $bb23:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i49;
    goto $bb23_dummy;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    assume true;
    goto $bb23;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$i50 := $ule.i32(out_$i49, 63);
    goto corral_source_split_6961;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i21, 1);
    call {:si_unique_call 946} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6960;

  $bb21:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i44, 0);
    goto corral_source_split_6956;

  $bb18:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} spin_unlock_irqrestore(out_$p47, 0);
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6953;

  $bb17:
    assume out_$i45 == 1;
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(in_$i1, 32);
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    call {:si_unique_call 944} {:cexpr "res"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_6949;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_$i43 := ns83820_add_rx_skb(in_$p2, out_$p22);
    call {:si_unique_call 943} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_6948;

  $bb15:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_spin_lock();
    goto corral_source_split_6946;

  $bb14:
    assume out_$i42 == 1;
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(in_$i1, 32);
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} skb_reserve(out_$p22, out_$i41);
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i34, out_$i40);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, $sub.i32(0, 16));
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 15);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i64.i32(out_$i37);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p22, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i64.i32(out_$i33);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_6932;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p22, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6931;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb11;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_$i27 := ldv__builtin_expect(out_$i26, 0);
    call {:si_unique_call 939} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_6919;

  SeqInstr_75:
    goto corral_source_split_6918;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} out_$p22 := ldv___netdev_alloc_skb_42(in_$p0, 1530, in_$i1);
    goto SeqInstr_74;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$i21, out_$i51 := rx_refill_loop_$bb8(in_$p0, in_$i1, in_$p2, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$i21, out_$i51);
    return;

  exit:
    return;
}



procedure rx_refill_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i45: i1, in_$p47: ref, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i21: i32, in_$i51: i32) returns (out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i45: i1, out_$p47: ref, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i21: i32, out_$i51: i32);
  modifies $M.3, $M.0, assertsPassed;



implementation ns83820_add_rx_skb_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} ns83820_add_rx_skb_loop_$bb7();
    return;

  exit:
    return;
}



procedure ns83820_add_rx_skb_loop_$bb7();



implementation ns83820_run_bist_loop_$bb4(in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i6: i64, in_$p10: ref, in_$i19: i32, in_$i17: i32, in_$i18: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$i32: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_vslice_dummy_var_47: i64) returns (out_$i19: i32, out_$i17: i32, out_$i18: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$i32: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_vslice_dummy_var_47: i64)
{

  entry:
    out_$i19, out_$i17, out_$i18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_47 := in_$i19, in_$i17, in_$i18, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_vslice_dummy_var_47;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i37, out_$i34;
    goto $bb17_dummy;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i37;
    assume true;
    goto $bb17;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, in_$i2);
    goto corral_source_split_8380;

  SeqInstr_216:
    call {:si_unique_call 1268} {:cexpr "status"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_8379;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} out_$i37 := readl(out_$p36);
    goto SeqInstr_215;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref(12, 1));
    goto corral_source_split_8378;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, in_$p10);
    goto corral_source_split_8377;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1266} {:cexpr "loops"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_8376;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out_vslice_dummy_var_47 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_8375;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i17;
    assume true;
    goto $bb15;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i31 := $sge.i64(out_$i30, 0);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i64(out_$i29, 250);
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i64(out_$i28, in_$i6);
    goto corral_source_split_8369;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, jiffies);
    goto corral_source_split_8368;

  $bb12:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i17;
    assume true;
    goto $bb12;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_8364;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i17, in_$i4);
    goto corral_source_split_8363;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i17;
    assume true;
    goto $bb9;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_8359;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i17, in_$i3);
    goto corral_source_split_8358;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i19, out_$i17, out_$i18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_47 := ns83820_run_bist_loop_$bb4(in_$i2, in_$i3, in_$i4, in_$i6, in_$p10, out_$i19, out_$i17, out_$i18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_47);
    return;

  exit:
    return;
}



procedure ns83820_run_bist_loop_$bb4(in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i6: i64, in_$p10: ref, in_$i19: i32, in_$i17: i32, in_$i18: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$i32: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_vslice_dummy_var_47: i64) returns (out_$i19: i32, out_$i17: i32, out_$i18: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$i32: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_vslice_dummy_var_47: i64);
  modifies $M.1, $M.0, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed;



implementation rx_irq_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i16, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i50: i32, in_$i51: i1, in_$i53: i1, in_$i52: i1, in_$i49: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i59: i64, in_$i60: i1, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$p74: ref, in_$i75: i64, in_$i76: i64, in_$p78: ref, in_$p80: ref, in_$i81: i64, in_$i82: i64, in_$i83: i64, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i16, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i16, in_$i99: i32, in_$i100: i16, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i32, in_$i105: i1, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i64, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i127: i32, in_vslice_dummy_var_54: ref) returns (out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i16, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i50: i32, out_$i51: i1, out_$i53: i1, out_$i52: i1, out_$i49: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i59: i64, out_$i60: i1, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$p74: ref, out_$i75: i64, out_$i76: i64, out_$p78: ref, out_$p80: ref, out_$i81: i64, out_$i82: i64, out_$i83: i64, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i16, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i16, out_$i99: i32, out_$i100: i16, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i32, out_$i105: i1, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i64, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i127: i32, out_vslice_dummy_var_54: ref)
{

  entry:
    out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i50, out_$i51, out_$i53, out_$i52, out_$i49, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$p72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p80, out_$i81, out_$i82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i17, out_$i18, out_$p19, out_$i20, out_$i127, out_vslice_dummy_var_54 := in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i50, in_$i51, in_$i53, in_$i52, in_$i49, in_$i54, in_$i55, in_$i56, in_$i57, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p68, in_$i69, in_$i70, in_$p72, in_$p74, in_$i75, in_$i76, in_$p78, in_$p80, in_$i81, in_$i82, in_$i83, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p107, in_$i108, in_$i109, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i17, in_$i18, in_$p19, in_$i20, in_$i127, in_vslice_dummy_var_54;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;

  $bb38:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$p19, out_$i20 := out_$i123, out_$i112, out_$p120, out_$i115;
    goto $bb38_dummy;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    out_$i127 := out_$i115;
    assume true;
    goto $bb38;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$i126 := $and.i1(out_$i124, out_$i125);
    goto corral_source_split_8990;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i123, $sub.i32(0, 2147483648));
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 0);
    goto corral_source_split_8988;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.0, out_$p122);
    call {:si_unique_call 1402} {:cexpr "cmdsts"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_8987;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p117, $mul.ref(out_$i121, 4));
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref(out_$p117, $mul.ref(out_$i119, 4));
    out_$i121 := $add.i64(out_$i119, 4);
    goto corral_source_split_8985;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i32.i64(out_$i118);
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    out_$i118 := $mul.i32(out_$i115, 8);
    goto corral_source_split_8983;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_8982;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i16.i32(out_$i114);
    call {:si_unique_call 1401} {:cexpr "next_rx"} boogie_si_record_i32(out_$i115);
    out_$p116 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(616, 1));
    goto corral_source_split_8981;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i16($M.0, out_$p113);
    goto corral_source_split_8980;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1400} {:cexpr "nr"} boogie_si_record_i32(out_$i112);
    out_$p113 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8979;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} kfree_skb(out_$p34);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p111, out_$i109);
    goto corral_source_split_8922;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_8921;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i64(out_$i108, 1);
    goto corral_source_split_8920;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.0, out_$p107);
    goto corral_source_split_8919;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_8918;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i64 == 1;
    goto corral_source_split_8916;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_8912;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} out_$i63 := ldv__builtin_expect(out_$i62, 0);
    call {:si_unique_call 1391} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_8911;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_8910;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i1.i32(out_$i60);
    goto corral_source_split_8909;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i59, 0);
    goto corral_source_split_8908;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_8907;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_vslice_dummy_var_54 := skb_put(out_$p34, out_$i46);
    goto corral_source_split_8906;

  $bb16:
    assume out_$i57 == 1;
    goto corral_source_split_8905;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_8895;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} out_$i56 := ldv__builtin_expect(out_$i55, 1);
    call {:si_unique_call 1388} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_8894;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8893;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i32(out_$i49);
    goto corral_source_split_8892;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8891;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i52;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb11;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    out_$i49 := 1;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_8889;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i17, 134217728);
    goto corral_source_split_8888;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i17, 65535);
    call {:si_unique_call 1386} {:cexpr "len"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_8887;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} pci_unmap_single(out_$p45, out_$i30, 1500, 2);
    goto corral_source_split_8886;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_8885;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} clear_rx_desc(in_$p1, out_$i20);
    goto corral_source_split_8883;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p43, out_$i42);
    call {:si_unique_call 1383} devirtbounce.1(0);
    goto corral_source_split_8882;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i41);
    out_$p43 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(608, 1));
    goto corral_source_split_8881;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 63);
    goto corral_source_split_8880;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_8879;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, $0.ref);
    goto corral_source_split_8876;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i20);
    out_$p37 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(out_$i35, 8));
    goto corral_source_split_8875;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_8874;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i20);
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(24, 1)), $mul.ref(88, 1)), $mul.ref(out_$i31, 8));
    goto corral_source_split_8873;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    out_$i30 := $or.i64(out_$i25, out_$i29);
    call {:si_unique_call 1382} {:cexpr "bufptr"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_8872;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$i29 := $shl.i64(out_$i28, 32);
    goto corral_source_split_8871;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_8870;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_8869;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p19, $mul.ref(3, 4));
    goto corral_source_split_8868;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i24);
    goto corral_source_split_8867;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_8866;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p19, $mul.ref(2, 4));
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    call {:si_unique_call 1381} {:cexpr "extsts"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_8864;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(5, 4));
    goto corral_source_split_8863;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8903;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb15;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    out_$i53 := $sgt.i32(out_$i46, 55);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i53;
    goto $bb15;

  $bb13:
    assume out_$i51 == 1;
    goto corral_source_split_8901;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    out_$i52 := 0;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_8899;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i17, 2097152);
    goto corral_source_split_8898;

  $bb12:
    assume !(out_$i48 == 1);
    goto corral_source_split_8897;

  $bb34:
    assume out_$i105 == 1;
    goto corral_source_split_8977;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_8975;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} out_$i104 := netif_rx(out_$p34);
    call {:si_unique_call 1399} {:cexpr "rx_rc"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_8974;

  $bb32:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __vlan_hwaccel_put_tag(out_$p34, $sub.i16(0, 8826), out_$i103);
    goto corral_source_split_8972;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i16(out_$i102);
    goto corral_source_split_8971;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i32(out_$i101);
    goto corral_source_split_8970;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} out_$i101 := __fswab16(out_$i100);
    call {:si_unique_call 1396} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i101);
    goto corral_source_split_8969;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i32.i16(out_$i99);
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i98);
    goto corral_source_split_8967;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i16(out_$i22);
    goto corral_source_split_8966;

  $bb31:
    assume out_$i97 == 1;
    goto corral_source_split_8965;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_8963;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i32(out_$i22, 65536);
    goto corral_source_split_8962;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p95, out_$i94);
    goto corral_source_split_8961;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p34, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_8960;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} out_$i94 := eth_type_trans(out_$p34, in_$p0);
    goto corral_source_split_8959;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} skb_checksum_none_assert(out_$p34);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p90, out_$i93);
    goto corral_source_split_8957;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    out_$i93 := $or.i32(out_$i92, 512);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$i92 := $and.i32(out_$i91, $sub.i32(0, 1537));
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p34, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_8953;

  $bb28:
    assume out_$i89 == 1;
    goto corral_source_split_8952;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 0);
    goto corral_source_split_8950;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    out_$i88 := $and.i32(out_$i22, 5505024);
    goto corral_source_split_8949;

  $bb25:
    assume out_$i87 == 1;
    goto corral_source_split_8948;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_8946;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    out_$i86 := $and.i32(out_$i22, 2752512);
    goto corral_source_split_8945;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p85, out_$i83);
    goto corral_source_split_8944;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_8943;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i64(out_$i81, out_$i82);
    goto corral_source_split_8942;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i46);
    goto corral_source_split_8941;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.0, out_$p80);
    goto corral_source_split_8940;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_8939;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p78, out_$i76);
    goto corral_source_split_8938;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_8937;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i64(out_$i75, 1);
    goto corral_source_split_8936;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.0, out_$p74);
    goto corral_source_split_8935;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_8934;

  $bb23:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p72, out_$i70);
    goto corral_source_split_8932;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_8931;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i64(out_$i69, 1);
    goto corral_source_split_8930;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_8929;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_8928;

  $bb22:
    assume out_$i66 == 1;
    goto corral_source_split_8927;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_8925;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i17, 16777216);
    goto corral_source_split_8924;

  $bb19:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb27;

  $bb17:
    assume !(out_$i57 == 1);
    goto corral_source_split_8914;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i50, out_$i51, out_$i53, out_$i52, out_$i49, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$p72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p80, out_$i81, out_$i82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i17, out_$i18, out_$p19, out_$i20, out_$i127, out_vslice_dummy_var_54 := rx_irq_loop_$bb8(in_$p0, in_$p1, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i50, out_$i51, out_$i53, out_$i52, out_$i49, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$p72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p80, out_$i81, out_$i82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i17, out_$i18, out_$p19, out_$i20, out_$i127, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure rx_irq_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i16, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i50: i32, in_$i51: i1, in_$i53: i1, in_$i52: i1, in_$i49: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i59: i64, in_$i60: i1, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$p74: ref, in_$i75: i64, in_$i76: i64, in_$p78: ref, in_$p80: ref, in_$i81: i64, in_$i82: i64, in_$i83: i64, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i16, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i16, in_$i99: i32, in_$i100: i16, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i32, in_$i105: i1, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i64, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i127: i32, in_vslice_dummy_var_54: ref) returns (out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i16, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i50: i32, out_$i51: i1, out_$i53: i1, out_$i52: i1, out_$i49: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i59: i64, out_$i60: i1, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$p74: ref, out_$i75: i64, out_$i76: i64, out_$p78: ref, out_$p80: ref, out_$i81: i64, out_$i82: i64, out_$i83: i64, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i16, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i16, out_$i99: i32, out_$i100: i16, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i32, out_$i105: i1, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i64, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i127: i32, out_vslice_dummy_var_54: ref);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i32, in_$i190: i1, in_$i192: i32, in_$i193: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: ref, in_vslice_dummy_var_65: ref, in_vslice_dummy_var_66: ref, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i32, out_$i190: i1, out_$i192: i32, out_$i193: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: ref, out_vslice_dummy_var_65: ref, out_vslice_dummy_var_66: ref, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i40, out_$i41, out_$p42, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i192, out_$i193, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i40, in_$i41, in_$p42, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$p127, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$p135, in_$i137, in_$i138, in_$p139, in_$i141, in_$i142, in_$p143, in_$i144, in_$i146, in_$i147, in_$p148, in_$i149, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$p159, in_$i161, in_$i162, in_$p163, in_$i165, in_$i166, in_$p167, in_$i169, in_$i170, in_$p171, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i192, in_$i193, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1491} out_$i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i10);
    call {:si_unique_call 1493} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i10);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb21:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9247;

  SeqInstr_282:
    goto corral_source_split_9246;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} out_vslice_dummy_var_56 := ns83820_get_settings(out_$p29, out_$p30);
    goto SeqInstr_281;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    out_$p30 := $M.37;
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    out_$p29 := $M.36;
    goto corral_source_split_9244;

  $bb34:
    assume out_$i28 == 1;
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 1);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$i27 := $M.39;
    goto corral_source_split_9240;

  $bb32:
    assume out_$i26 == 1;
    goto corral_source_split_9239;

  $bb30:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb23:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1494} out_$i21 := __VERIFIER_nondet_int();
    call {:si_unique_call 1495} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i21);
    call {:si_unique_call 1496} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i21);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i20 == 1;
    goto corral_source_split_9225;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_9223;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    out_$i19 := $M.39;
    goto corral_source_split_9222;

  $bb18:
    assume out_$i18 == 1;
    goto corral_source_split_9221;

  $bb14:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb39:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1500} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9252;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ns83820_get_drvinfo(out_$p34, in_$p2);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$p34 := $M.36;
    goto corral_source_split_9250;

  $bb38:
    assume out_$i33 == 1;
    goto corral_source_split_9249;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 1);
    goto corral_source_split_9237;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    out_$i32 := $M.39;
    goto corral_source_split_9236;

  $bb31:
    assume !(out_$i25 == 1);
    goto corral_source_split_9235;

  $bb42:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9258;

  SeqInstr_285:
    goto corral_source_split_9257;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} out_vslice_dummy_var_57 := ns83820_set_settings(out_$p37, out_$p38);
    goto SeqInstr_284;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    out_$p38 := $M.37;
    goto corral_source_split_9256;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    out_$p37 := $M.36;
    goto corral_source_split_9255;

  $bb41:
    assume out_$i36 == 1;
    goto corral_source_split_9254;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 1);
    goto corral_source_split_9229;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    out_$i35 := $M.39;
    goto corral_source_split_9228;

  $bb25:
    assume out_$i23 == 1;
    goto corral_source_split_9227;

  $bb24:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb45:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1504} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9263;

  SeqInstr_288:
    goto corral_source_split_9262;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} out_vslice_dummy_var_58 := ns83820_get_link(out_$p42);
    goto SeqInstr_287;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    out_$p42 := $M.36;
    goto corral_source_split_9261;

  $bb44:
    assume out_$i41 == 1;
    goto corral_source_split_9260;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_9233;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    out_$i40 := $M.39;
    goto corral_source_split_9232;

  $bb27:
    assume out_$i24 == 1;
    goto corral_source_split_9231;

  $bb26:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_stop();
    goto corral_source_split_9265;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb29;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb29;

  $bb52:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $M.42 := out_$i58;
    call {:si_unique_call 1512} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_9292;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, 1);
    goto corral_source_split_9291;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    out_$i57 := $M.42;
    goto corral_source_split_9290;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9289;

  $bb65:
    assume out_$i56 == 1;
    goto corral_source_split_9288;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_9286;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    out_$i55 := $M.47;
    goto corral_source_split_9285;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $M.47 := out_$i54;
    call {:si_unique_call 1510} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_9284;

  SeqInstr_291:
    goto corral_source_split_9283;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_$i54 := ns83820_init_one(out_$p53, in_$p4);
    goto SeqInstr_290;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    out_$p53 := $M.38;
    goto corral_source_split_9282;

  $bb63:
    assume out_$i52 == 1;
    goto corral_source_split_9281;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_9279;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    out_$i51 := $M.40;
    goto corral_source_split_9278;

  $bb61:
    assume out_$i50 == 1;
    goto corral_source_split_9277;

  $bb54:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i46, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_9267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1506} out_$i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 1507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i46);
    call {:si_unique_call 1508} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i46);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i45 == 1;
    goto corral_source_split_9267;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_9215;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    out_$i44 := $M.40;
    goto corral_source_split_9214;

  $bb16:
    assume out_$i17 == 1;
    goto corral_source_split_9213;

  $bb15:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb71:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9297;

  SeqInstr_294:
    goto corral_source_split_9296;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ns83820_remove_one(out_$p61);
    goto SeqInstr_293;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    out_$p61 := $M.38;
    goto corral_source_split_9295;

  $bb70:
    assume out_$i60 == 1;
    goto corral_source_split_9294;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 2);
    goto corral_source_split_9271;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    out_$i59 := $M.40;
    goto corral_source_split_9270;

  $bb56:
    assume out_$i48 == 1;
    goto corral_source_split_9269;

  $bb55:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i46, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb74:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9301;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_vslice_dummy_var_59 := ldv_shutdown_4();
    goto corral_source_split_9300;

  $bb73:
    assume out_$i63 == 1;
    goto corral_source_split_9299;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 2);
    goto corral_source_split_9275;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    out_$i62 := $M.40;
    goto corral_source_split_9274;

  $bb58:
    assume out_$i49 == 1;
    goto corral_source_split_9273;

  $bb57:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i46, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_stop();
    goto corral_source_split_9303;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb60;

  $bb80:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_297:
    goto corral_source_split_9306;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} choose_interrupt_1();
    goto SeqInstr_296;

  $bb79:
    assume out_$i66 == 1;
    goto corral_source_split_9305;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_9219;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    out_$i65 := $M.41;
    goto corral_source_split_9218;

  $bb17:
    assume !(out_$i17 == 1);
    goto corral_source_split_9217;

  $bb83:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb94;

  $bb96:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb94;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 0);
    goto corral_source_split_9320;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    out_$i75 := $M.42;
    goto corral_source_split_9319;

  $bb92:
    assume out_$i74 == 1;
    goto corral_source_split_9318;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 3);
    goto corral_source_split_9316;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    out_$i73 := $M.43;
    goto corral_source_split_9315;

  $bb90:
    assume out_$i72 == 1;
    goto corral_source_split_9314;

  $bb85:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i69, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_9308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} out_$i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1520} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i69);
    call {:si_unique_call 1521} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i69);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume out_$i68 == 1;
    goto corral_source_split_9308;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_9207;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    out_$i67 := $M.43;
    goto corral_source_split_9206;

  $bb12:
    assume out_$i15 == 1;
    goto corral_source_split_9205;

  $bb5:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb101:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb106:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_9342;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i82 := $M.48;
    goto corral_source_split_9341;

  $bb103:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_initialize_ethtool_ops_6();
    goto corral_source_split_9339;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9338;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_net_device_ops_5();
    goto corral_source_split_9337;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9336;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9335;

  $bb102:
    assume out_$i81 == 1;
    goto corral_source_split_9334;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_9332;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    out_$i80 := $M.48;
    goto corral_source_split_9331;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $M.48 := out_$i79;
    call {:si_unique_call 1526} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_9330;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_$i79 := ns83820_init();
    goto corral_source_split_9329;

  $bb100:
    assume out_$i78 == 1;
    goto corral_source_split_9328;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 1);
    goto corral_source_split_9312;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    out_$i77 := $M.43;
    goto corral_source_split_9311;

  $bb87:
    assume out_$i71 == 1;
    goto corral_source_split_9310;

  $bb86:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} ldv_stop();
    goto corral_source_split_9347;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb89;

  $bb91:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb89;

  $bb113:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_300:
    goto corral_source_split_9351;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} choose_timer_3(out_$p86);
    goto SeqInstr_299;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    out_$p86 := $M.4;
    goto corral_source_split_9350;

  $bb112:
    assume out_$i85 == 1;
    goto corral_source_split_9349;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    out_$i84 := $M.44;
    goto corral_source_split_9210;

  $bb13:
    assume !(out_$i15 == 1);
    goto corral_source_split_9209;

  $bb116:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_303:
    goto corral_source_split_9354;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} invoke_work_2();
    goto SeqInstr_302;

  $bb115:
    assume out_$i88 == 1;
    goto corral_source_split_9353;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_9199;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    out_$i87 := $M.45;
    goto corral_source_split_9198;

  $bb7:
    assume out_$i13 == 1;
    goto corral_source_split_9197;

  $bb6:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb119:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb153:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9421;

  SeqInstr_312:
    goto corral_source_split_9420;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ns83820_set_multicast(out_$p112);
    goto SeqInstr_311;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    out_$p112 := $M.34;
    goto corral_source_split_9419;

  $bb152:
    assume out_$i111 == 1;
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 2);
    goto corral_source_split_9416;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i110 := $M.46;
    goto corral_source_split_9415;

  $bb150:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9413;

  SeqInstr_309:
    goto corral_source_split_9412;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ns83820_set_multicast(out_$p109);
    goto SeqInstr_308;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    out_$p109 := $M.34;
    goto corral_source_split_9411;

  $bb149:
    assume out_$i108 == 1;
    goto corral_source_split_9410;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 3);
    goto corral_source_split_9408;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i107 := $M.46;
    goto corral_source_split_9407;

  $bb147:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9405;

  SeqInstr_306:
    goto corral_source_split_9404;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} ns83820_set_multicast(out_$p106);
    goto SeqInstr_305;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    out_$p106 := $M.34;
    goto corral_source_split_9403;

  $bb146:
    assume out_$i105 == 1;
    goto corral_source_split_9402;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_9400;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    out_$i104 := $M.46;
    goto corral_source_split_9399;

  $bb144:
    assume out_$i103 == 1;
    goto corral_source_split_9398;

  $bb142:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i91, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb136:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i91, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb121:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i91, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i91, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_9356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1536} out_$i91 := __VERIFIER_nondet_int();
    call {:si_unique_call 1537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i91);
    call {:si_unique_call 1538} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i91);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb118:
    assume out_$i90 == 1;
    goto corral_source_split_9356;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_9203;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    out_$i89 := $M.46;
    goto corral_source_split_9202;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_9201;

  $bb8:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb157:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9426;

  SeqInstr_315:
    goto corral_source_split_9425;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_60 := ns83820_stop(out_$p115);
    goto SeqInstr_314;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    out_$p115 := $M.34;
    goto corral_source_split_9424;

  $bb156:
    assume out_$i114 == 1;
    goto corral_source_split_9423;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 3);
    goto corral_source_split_9396;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    out_$i113 := $M.46;
    goto corral_source_split_9395;

  $bb143:
    assume !(out_$i102 == 1);
    goto corral_source_split_9394;

  $bb166:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9447;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_vslice_dummy_var_63 := eth_validate_addr(out_$p127);
    goto corral_source_split_9446;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    out_$p127 := $M.34;
    goto corral_source_split_9445;

  $bb165:
    assume out_$i126 == 1;
    goto corral_source_split_9444;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 2);
    goto corral_source_split_9442;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i125 := $M.46;
    goto corral_source_split_9441;

  $bb163:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9439;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_vslice_dummy_var_62 := eth_validate_addr(out_$p123);
    goto corral_source_split_9438;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    out_$p123 := $M.34;
    goto corral_source_split_9437;

  $bb162:
    assume out_$i122 == 1;
    goto corral_source_split_9436;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 3);
    goto corral_source_split_9434;

  $bb161:
    assume {:verifier.code 0} true;
    out_$i121 := $M.46;
    goto corral_source_split_9433;

  $bb160:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9431;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_vslice_dummy_var_61 := eth_validate_addr(out_$p119);
    goto corral_source_split_9430;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    out_$p119 := $M.34;
    goto corral_source_split_9429;

  $bb159:
    assume out_$i118 == 1;
    goto corral_source_split_9428;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_9384;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    out_$i117 := $M.46;
    goto corral_source_split_9383;

  $bb138:
    assume out_$i100 == 1;
    goto corral_source_split_9382;

  $bb137:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i91, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb175:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1558} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9468;

  SeqInstr_324:
    goto corral_source_split_9467;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_vslice_dummy_var_66 := ns83820_get_stats(out_$p139);
    goto SeqInstr_323;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$p139 := $M.34;
    goto corral_source_split_9466;

  $bb174:
    assume out_$i138 == 1;
    goto corral_source_split_9465;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 2);
    goto corral_source_split_9463;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i137 := $M.46;
    goto corral_source_split_9462;

  $bb172:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9460;

  SeqInstr_321:
    goto corral_source_split_9459;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} out_vslice_dummy_var_65 := ns83820_get_stats(out_$p135);
    goto SeqInstr_320;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    out_$p135 := $M.34;
    goto corral_source_split_9458;

  $bb171:
    assume out_$i134 == 1;
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 3);
    goto corral_source_split_9455;

  $bb170:
    assume {:verifier.code 0} true;
    out_$i133 := $M.46;
    goto corral_source_split_9454;

  $bb169:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9452;

  SeqInstr_318:
    goto corral_source_split_9451;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} out_vslice_dummy_var_64 := ns83820_get_stats(out_$p131);
    goto SeqInstr_317;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    out_$p131 := $M.34;
    goto corral_source_split_9450;

  $bb168:
    assume out_$i130 == 1;
    goto corral_source_split_9449;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_9388;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    out_$i129 := $M.46;
    goto corral_source_split_9387;

  $bb140:
    assume out_$i101 == 1;
    goto corral_source_split_9386;

  $bb139:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i91, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb181:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9483;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} out_vslice_dummy_var_68 := ns83820_change_mtu(out_$p148, out_$i149);
    goto corral_source_split_9482;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.33, in_$p0);
    goto corral_source_split_9481;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$p148 := $M.34;
    goto corral_source_split_9480;

  $bb180:
    assume out_$i147 == 1;
    goto corral_source_split_9479;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 2);
    goto corral_source_split_9477;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i146 := $M.46;
    goto corral_source_split_9476;

  $bb178:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9474;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} out_vslice_dummy_var_67 := ns83820_change_mtu(out_$p143, out_$i144);
    goto corral_source_split_9473;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.33, in_$p0);
    goto corral_source_split_9472;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    out_$p143 := $M.34;
    goto corral_source_split_9471;

  $bb177:
    assume out_$i142 == 1;
    goto corral_source_split_9470;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 3);
    goto corral_source_split_9392;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    out_$i141 := $M.46;
    goto corral_source_split_9391;

  $bb141:
    assume !(out_$i101 == 1);
    goto corral_source_split_9390;

  $bb184:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9493;

  $bb185:
    assume out_$i156 == 1;
    goto corral_source_split_9492;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 0);
    goto corral_source_split_9490;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$i155 := $M.49;
    goto corral_source_split_9489;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $M.49 := out_$i154;
    call {:si_unique_call 1564} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_9488;

  SeqInstr_327:
    goto corral_source_split_9487;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} out_$i154 := ns83820_open(out_$p153);
    goto SeqInstr_326;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    out_$p153 := $M.34;
    goto corral_source_split_9486;

  $bb183:
    assume out_$i152 == 1;
    goto corral_source_split_9485;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 2);
    goto corral_source_split_9372;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    out_$i151 := $M.46;
    goto corral_source_split_9371;

  $bb132:
    assume out_$i97 == 1;
    goto corral_source_split_9370;

  $bb123:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i91, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb122:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i91, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb190:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9498;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} out_vslice_dummy_var_69 := ns83820_hard_start_xmit(in_$p6, out_$p159);
    goto corral_source_split_9497;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$p159 := $M.34;
    goto corral_source_split_9496;

  $bb189:
    assume out_$i158 == 1;
    goto corral_source_split_9495;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 3);
    goto corral_source_split_9376;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    out_$i157 := $M.46;
    goto corral_source_split_9375;

  $bb134:
    assume out_$i98 == 1;
    goto corral_source_split_9374;

  $bb133:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i91, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb199:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_vslice_dummy_var_72 := eth_mac_addr(out_$p171, in_$p7);
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    out_$p171 := $M.34;
    goto corral_source_split_9517;

  $bb198:
    assume out_$i170 == 1;
    goto corral_source_split_9516;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 2);
    goto corral_source_split_9514;

  $bb197:
    assume {:verifier.code 0} true;
    out_$i169 := $M.46;
    goto corral_source_split_9513;

  $bb196:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9511;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_vslice_dummy_var_71 := eth_mac_addr(out_$p167, in_$p7);
    goto corral_source_split_9510;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    out_$p167 := $M.34;
    goto corral_source_split_9509;

  $bb195:
    assume out_$i166 == 1;
    goto corral_source_split_9508;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 3);
    goto corral_source_split_9506;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i165 := $M.46;
    goto corral_source_split_9505;

  $bb193:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9503;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_vslice_dummy_var_70 := eth_mac_addr(out_$p163, in_$p7);
    goto corral_source_split_9502;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$p163 := $M.34;
    goto corral_source_split_9501;

  $bb192:
    assume out_$i162 == 1;
    goto corral_source_split_9500;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_9380;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    out_$i161 := $M.46;
    goto corral_source_split_9379;

  $bb135:
    assume !(out_$i98 == 1);
    goto corral_source_split_9378;

  $bb208:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9540;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} ns83820_tx_timeout(out_$p181);
    goto corral_source_split_9539;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    out_$p181 := $M.34;
    goto corral_source_split_9538;

  $bb207:
    assume out_$i180 == 1;
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_9535;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i179 := $M.46;
    goto corral_source_split_9534;

  $bb205:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9532;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ns83820_tx_timeout(out_$p178);
    goto corral_source_split_9531;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    out_$p178 := $M.34;
    goto corral_source_split_9530;

  $bb204:
    assume out_$i177 == 1;
    goto corral_source_split_9529;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 3);
    goto corral_source_split_9527;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i176 := $M.46;
    goto corral_source_split_9526;

  $bb202:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9524;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} ns83820_tx_timeout(out_$p175);
    goto corral_source_split_9523;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    out_$p175 := $M.34;
    goto corral_source_split_9522;

  $bb201:
    assume out_$i174 == 1;
    goto corral_source_split_9521;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 1);
    goto corral_source_split_9360;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    out_$i173 := $M.46;
    goto corral_source_split_9359;

  $bb125:
    assume out_$i94 == 1;
    goto corral_source_split_9358;

  $bb124:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i91, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb211:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb213:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $M.42 := out_$i188;
    call {:si_unique_call 1583} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i188);
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    out_$i188 := $add.i32(out_$i187, 1);
    goto corral_source_split_9551;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    out_$i187 := $M.42;
    goto corral_source_split_9550;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9549;

  $bb212:
    assume out_$i186 == 1;
    goto corral_source_split_9548;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 0);
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$i185 := $M.50;
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $M.50 := out_$i184;
    call {:si_unique_call 1581} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i184);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} out_$i184 := ldv_ndo_init_5();
    goto corral_source_split_9543;

  $bb210:
    assume out_$i183 == 1;
    goto corral_source_split_9542;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_9364;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    out_$i182 := $M.46;
    goto corral_source_split_9363;

  $bb127:
    assume out_$i95 == 1;
    goto corral_source_split_9362;

  $bb126:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i91, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb217:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $M.42 := out_$i193;
    call {:si_unique_call 1586} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_9559;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    out_$i193 := $sub.i32(out_$i192, 1);
    goto corral_source_split_9558;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    out_$i192 := $M.42;
    goto corral_source_split_9557;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9556;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_73 := ldv_ndo_uninit_5();
    goto corral_source_split_9555;

  $bb216:
    assume out_$i190 == 1;
    goto corral_source_split_9554;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 2);
    goto corral_source_split_9368;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    out_$i189 := $M.46;
    goto corral_source_split_9367;

  $bb129:
    assume out_$i96 == 1;
    goto corral_source_split_9366;

  $bb128:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i91, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_stop();
    goto corral_source_split_9561;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb130:
    assume {:verifier.code 0} true;
    assume !(out_$i96 == 1);
    goto $bb131;

  $bb145:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb131;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_stop();
    goto corral_source_split_9563;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb11;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i40, out_$i41, out_$p42, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i192, out_$i193, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := main_loop_$bb1(in_$p0, in_$p2, in_$p4, in_$p6, in_$p7, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i40, out_$i41, out_$p42, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i192, out_$i193, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i32, in_$i190: i1, in_$i192: i32, in_$i193: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: ref, in_vslice_dummy_var_65: ref, in_vslice_dummy_var_66: ref, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i32, out_$i190: i1, out_$i192: i32, out_$i193: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: ref, out_vslice_dummy_var_65: ref, out_vslice_dummy_var_66: ref, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32);
  modifies $M.39, $M.0, $M.1, $M.4, $M.5, $M.3, $M.7, $M.6, $CurrAddr, assertsPassed, $M.42, $M.40, $M.47, $M.12, $M.14, $M.16, $M.18, $M.13, $M.21, $M.15, $M.22, $M.17, $M.23, $M.19, $M.24, $M.26, $M.25, $M.27, $M.29, $M.31, $M.36, $M.37, $M.34, $M.46, $M.43, $M.48, $M.38, $M.49, $M.50;


