var $M.0: [ref]i8;

var $M.1: i32;

var $M.3: i32;

var $M.4: ref;

var $M.5: ref;

var $M.6: ref;

var $M.7: ref;

var $M.8: ref;

var $M.9: ref;

var $M.10: ref;

var $M.11: ref;

var $M.12: ref;

var $M.13: i32;

var $M.14: [ref]ref;

var $M.15: ref;

var $M.16: ref;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: ref;

var $M.21: [ref]i32;

var $M.22: ref;

var $M.23: ref;

var $M.27: ref;

var $M.28: i32;

var $M.29: ref;

var $M.30: [ref]ref;

var $M.58: [ref]i32;

var $M.116: [ref]i8;

var $M.120: [ref]i32;

var $M.121: [ref]i32;

var $M.122: [ref]i32;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]i32;

var $M.126: [ref]i16;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]i32;

var $M.135: [ref]i16;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]i32;

var $M.144: [ref]i16;

var $M.145: [ref]ref;

var $M.146: [ref]ref;

var $M.147: [ref]ref;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 468760);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32944));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const xpc_dbg_name: ref;

axiom xpc_dbg_name == $sub.ref(0, 1136);

const .str: ref;

axiom .str == $sub.ref(0, 2164);

const xpc_part_dbg_subname: ref;

axiom xpc_part_dbg_subname == $sub.ref(0, 4340);

const .str.1: ref;

axiom .str.1 == $sub.ref(0, 5365);

const xpc_chan_dbg_subname: ref;

axiom xpc_chan_dbg_subname == $sub.ref(0, 7541);

const xpc_part: ref;

axiom xpc_part == $sub.ref(0, 8573);

const xpc_chan: ref;

axiom xpc_chan == $sub.ref(0, 9605);

const xpc_disengage_timelimit: ref;

axiom xpc_disengage_timelimit == $sub.ref(0, 10633);

const xpc_activate_IRQ_rcvd_lock: ref;

axiom xpc_activate_IRQ_rcvd_lock == $sub.ref(0, 11729);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 12780);

const xpc_activate_IRQ_wq: ref;

axiom xpc_activate_IRQ_wq == $sub.ref(0, 13892);

const {:count 25} .str.3: ref;

axiom .str.3 == $sub.ref(0, 14941);

const xpc_partitions: ref;

axiom xpc_partitions == $sub.ref(0, 15973);

const xpc_arch_ops: ref;

axiom xpc_arch_ops == $sub.ref(0, 17325);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 18353);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 19381);

const xpc_nasid_mask_nlongs: ref;

axiom xpc_nasid_mask_nlongs == $sub.ref(0, 20409);

const xpc_mach_nasids: ref;

axiom xpc_mach_nasids == $sub.ref(0, 21441);

const xpc_rsvd_page: ref;

axiom xpc_rsvd_page == $sub.ref(0, 22473);

const xpc_disengage_timedout: ref;

axiom xpc_disengage_timedout == $sub.ref(0, 23501);

const xpc_exiting: ref;

axiom xpc_exiting == $sub.ref(0, 24529);

const xpc_activate_IRQ_rcvd: ref;

axiom xpc_activate_IRQ_rcvd == $sub.ref(0, 25557);

const xpc_heartbeat_uv: ref;

axiom xpc_heartbeat_uv == $sub.ref(0, 26589);

const xpc_arch_ops_uv: ref;

axiom xpc_arch_ops_uv == $sub.ref(0, 27941);

const xpc_discovery_exited: ref;

axiom xpc_discovery_exited == $sub.ref(0, 29061);

const xpc_hb_checker_exited: ref;

axiom xpc_hb_checker_exited == $sub.ref(0, 30181);

const xpc_hb_timer: ref;

axiom xpc_hb_timer == $sub.ref(0, 31333);

const xpc_hb_check_timeout: ref;

axiom xpc_hb_check_timeout == $sub.ref(0, 32365);

const xpc_die_notifier: ref;

axiom xpc_die_notifier == $sub.ref(0, 33413);

const xpc_reboot_notifier: ref;

axiom xpc_reboot_notifier == $sub.ref(0, 34461);

const xpc_disengage_max_timelimit: ref;

axiom xpc_disengage_max_timelimit == $sub.ref(0, 35489);

const xpc_disengage_min_timelimit: ref;

axiom xpc_disengage_min_timelimit == $sub.ref(0, 36517);

const xpc_hb_check_max_interval: ref;

axiom xpc_hb_check_max_interval == $sub.ref(0, 37545);

const xpc_hb_check_min_interval: ref;

axiom xpc_hb_check_min_interval == $sub.ref(0, 38573);

const xpc_hb_check_interval: ref;

axiom xpc_hb_check_interval == $sub.ref(0, 39601);

const xpc_hb_max_interval: ref;

axiom xpc_hb_max_interval == $sub.ref(0, 40629);

const xpc_hb_min_interval: ref;

axiom xpc_hb_min_interval == $sub.ref(0, 41657);

const xpc_hb_interval: ref;

axiom xpc_hb_interval == $sub.ref(0, 42685);

const {:count 3} xpc_sys_xpc_hb_dir: ref;

axiom xpc_sys_xpc_hb_dir == $sub.ref(0, 43901);

const {:count 3} xpc_sys_xpc_dir: ref;

axiom xpc_sys_xpc_dir == $sub.ref(0, 45117);

const {:count 2} xpc_sys_dir: ref;

axiom xpc_sys_dir == $sub.ref(0, 46269);

const xpc_notify_mq_uv: ref;

axiom xpc_notify_mq_uv == $sub.ref(0, 47301);

const xpc_activate_mq_uv: ref;

axiom xpc_activate_mq_uv == $sub.ref(0, 48333);

const xpc_nasid_mask_nbytes: ref;

axiom xpc_nasid_mask_nbytes == $sub.ref(0, 49361);

const xpc_part_nasids: ref;

axiom xpc_part_nasids == $sub.ref(0, 50393);

const xpc_sysctl: ref;

axiom xpc_sysctl == $sub.ref(0, 51425);

const {:count 3} .str.73: ref;

axiom .str.73 == $sub.ref(0, 52452);

const {:count 20} .str.74: ref;

axiom .str.74 == $sub.ref(0, 53496);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 54532);

const {:count 18} .str.76: ref;

axiom .str.76 == $sub.ref(0, 55574);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const xp_max_npartitions: ref;

axiom xp_max_npartitions == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 69} .str.87: ref;

axiom .str.87 == $sub.ref(0, 56667);

const {:count 43} .str.88: ref;

axiom .str.88 == $sub.ref(0, 57734);

const {:count 33} .str.89: ref;

axiom .str.89 == $sub.ref(0, 58791);

const xp_pa: ref;

axiom xp_pa == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const xp_restrict_memprotect: ref;

axiom xp_restrict_memprotect == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 181} .str.114: ref;

axiom .str.114 == $sub.ref(0, 59996);

const uv_blade_info: ref;

axiom uv_blade_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 25} .str.43: ref;

axiom .str.43 == $sub.ref(0, 61045);

const {:count 188} .str.38: ref;

axiom .str.38 == $sub.ref(0, 62257);

const {:count 41} .str.44: ref;

axiom .str.44 == $sub.ref(0, 63322);

const {:count 25} .str.20: ref;

axiom .str.20 == $sub.ref(0, 64371);

const {:count 186} .str.21: ref;

axiom .str.21 == $sub.ref(0, 65581);

const {:count 38} .str.22: ref;

axiom .str.22 == $sub.ref(0, 66643);

const {:count 23} .str.26: ref;

axiom .str.26 == $sub.ref(0, 67690);

const {:count 43} .str.27: ref;

axiom .str.27 == $sub.ref(0, 68757);

const {:count 183} .str.6: ref;

axiom .str.6 == $sub.ref(0, 69964);

const {:count 11} .str.9: ref;

axiom .str.9 == $sub.ref(0, 70999);

const {:count 18} .str.65: ref;

axiom .str.65 == $sub.ref(0, 72041);

const {:count 41} .str.66: ref;

axiom .str.66 == $sub.ref(0, 73106);

const {:count 40} .str.67: ref;

axiom .str.67 == $sub.ref(0, 74170);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 75217);

const {:count 53} .str.29: ref;

axiom .str.29 == $sub.ref(0, 76294);

const {:count 55} .str.30: ref;

axiom .str.30 == $sub.ref(0, 77373);

const {:count 21} .str.68: ref;

axiom .str.68 == $sub.ref(0, 78418);

const {:count 59} .str.69: ref;

axiom .str.69 == $sub.ref(0, 79501);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 80545);

const {:count 54} .str.35: ref;

axiom .str.35 == $sub.ref(0, 81623);

const {:count 56} .str.36: ref;

axiom .str.36 == $sub.ref(0, 82703);

const {:count 22} .str.5: ref;

axiom .str.5 == $sub.ref(0, 83749);

const {:count 48} .str.7: ref;

axiom .str.7 == $sub.ref(0, 84821);

const {:count 47} .str.8: ref;

axiom .str.8 == $sub.ref(0, 85892);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 86938);

const {:count 62} .str.24: ref;

axiom .str.24 == $sub.ref(0, 88024);

const {:count 64} .str.25: ref;

axiom .str.25 == $sub.ref(0, 89112);

const {:count 53} .str.40: ref;

axiom .str.40 == $sub.ref(0, 90189);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 47} .str.90: ref;

axiom .str.90 == $sub.ref(0, 91260);

const {:count 34} .str.83: ref;

axiom .str.83 == $sub.ref(0, 92318);

const {:count 33} .str.86: ref;

axiom .str.86 == $sub.ref(0, 93375);

const {:count 21} .str.119: ref;

axiom .str.119 == $sub.ref(0, 94420);

const {:count 80} .str.120: ref;

axiom .str.120 == $sub.ref(0, 95524);

const {:count 82} .str.121: ref;

axiom .str.121 == $sub.ref(0, 96630);

const xp_partition_id: ref;

axiom xp_partition_id == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 17} .str.124: ref;

axiom .str.124 == $sub.ref(0, 97671);

const {:count 54} .str.125: ref;

axiom .str.125 == $sub.ref(0, 98749);

const {:count 54} .str.126: ref;

axiom .str.126 == $sub.ref(0, 99827);

const {:count 42} .str.127: ref;

axiom .str.127 == $sub.ref(0, 100893);

const xp_remote_memcpy: ref;

axiom xp_remote_memcpy == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const __uv_hub_info: ref;

axiom __uv_hub_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 22} .str.128: ref;

axiom .str.128 == $sub.ref(0, 101939);

const {:count 26} .str.129: ref;

axiom .str.129 == $sub.ref(0, 102989);

const {:count 49} .str.130: ref;

axiom .str.130 == $sub.ref(0, 104062);

const sn_partition_id: ref;

axiom sn_partition_id == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 8} .str.4: ref;

axiom .str.4 == $sub.ref(0, 105094);

const {:count 15} .str.55: ref;

axiom .str.55 == $sub.ref(0, 106133);

const {:count 25} .str.56: ref;

axiom .str.56 == $sub.ref(0, 107182);

const {:count 28} .str.45: ref;

axiom .str.45 == $sub.ref(0, 108234);

const {:count 34} .str.46: ref;

axiom .str.46 == $sub.ref(0, 109292);

const xpc_registrations: ref;

axiom xpc_registrations == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 38} .str.99: ref;

axiom .str.99 == $sub.ref(0, 110354);

const {:count 52} .str.100: ref;

axiom .str.100 == $sub.ref(0, 111430);

const {:count 34} .str.91: ref;

axiom .str.91 == $sub.ref(0, 112488);

const {:count 72} .str.92: ref;

axiom .str.92 == $sub.ref(0, 113584);

const {:count 58} .str.93: ref;

axiom .str.93 == $sub.ref(0, 114666);

const {:count 94} .str.94: ref;

axiom .str.94 == $sub.ref(0, 115784);

const {:count 122} .str.95: ref;

axiom .str.95 == $sub.ref(0, 116930);

const {:count 92} .str.96: ref;

axiom .str.96 == $sub.ref(0, 118046);

const {:count 90} .str.97: ref;

axiom .str.97 == $sub.ref(0, 119160);

const {:count 60} .str.98: ref;

axiom .str.98 == $sub.ref(0, 120244);

const {:count 26} .str.41: ref;

axiom .str.41 == $sub.ref(0, 121294);

const {:count 32} .str.42: ref;

axiom .str.42 == $sub.ref(0, 122350);

const {:count 31} .str.57: ref;

axiom .str.57 == $sub.ref(0, 123405);

const {:count 42} .str.58: ref;

axiom .str.58 == $sub.ref(0, 124471);

const {:count 28} .str.59: ref;

axiom .str.59 == $sub.ref(0, 125523);

const {:count 22} .str.60: ref;

axiom .str.60 == $sub.ref(0, 126569);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 127613);

const {:count 21} .str.62: ref;

axiom .str.62 == $sub.ref(0, 128658);

const {:count 13} .str.63: ref;

axiom .str.63 == $sub.ref(0, 129695);

const {:count 9} .str.64: ref;

axiom .str.64 == $sub.ref(0, 130728);

const {:count 44} .str.122: ref;

axiom .str.122 == $sub.ref(0, 131796);

const {:count 31} .str.123: ref;

axiom .str.123 == $sub.ref(0, 132851);

const {:count 5} .str.10: ref;

axiom .str.10 == $sub.ref(0, 133880);

const {:count 5} .str.11: ref;

axiom .str.11 == $sub.ref(0, 134909);

const {:count 42} .str.12: ref;

axiom .str.12 == $sub.ref(0, 135975);

const {:count 31} .str.13: ref;

axiom .str.13 == $sub.ref(0, 137030);

const {:count 32} .str.14: ref;

axiom .str.14 == $sub.ref(0, 138086);

const {:count 29} .str.15: ref;

axiom .str.15 == $sub.ref(0, 139139);

const {:count 7} .str.16: ref;

axiom .str.16 == $sub.ref(0, 140170);

const {:count 38} .str.17: ref;

axiom .str.17 == $sub.ref(0, 141232);

const {:count 14} .str.18: ref;

axiom .str.18 == $sub.ref(0, 142270);

const {:count 39} .str.19: ref;

axiom .str.19 == $sub.ref(0, 143333);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 144382);

const {:count 37} .str.32: ref;

axiom .str.32 == $sub.ref(0, 145443);

const {:count 18} .str.31: ref;

axiom .str.31 == $sub.ref(0, 146485);

const {:count 23} .str.84: ref;

axiom .str.84 == $sub.ref(0, 147532);

const {:count 29} .str.85: ref;

axiom .str.85 == $sub.ref(0, 148585);

const xp_region_size: ref;

axiom xp_region_size == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 21} .str.47: ref;

axiom .str.47 == $sub.ref(0, 149630);

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 150673);

const {:count 73} .str.49: ref;

axiom .str.49 == $sub.ref(0, 151770);

const {:count 63} .str.50: ref;

axiom .str.50 == $sub.ref(0, 152857);

const {:count 65} .str.51: ref;

axiom .str.51 == $sub.ref(0, 153946);

const {:count 54} .str.52: ref;

axiom .str.52 == $sub.ref(0, 155024);

const {:count 21} .str.101: ref;

axiom .str.101 == $sub.ref(0, 156069);

const {:count 75} .str.102: ref;

axiom .str.102 == $sub.ref(0, 157168);

const {:count 32} .str.103: ref;

axiom .str.103 == $sub.ref(0, 158224);

const {:count 28} .str.104: ref;

axiom .str.104 == $sub.ref(0, 159276);

const {:count 40} .str.105: ref;

axiom .str.105 == $sub.ref(0, 160340);

const {:count 15} .str.77: ref;

axiom .str.77 == $sub.ref(0, 161379);

const {:count 55} .str.78: ref;

axiom .str.78 == $sub.ref(0, 162458);

const {:count 28} .str.79: ref;

axiom .str.79 == $sub.ref(0, 163510);

const {:count 35} .str.80: ref;

axiom .str.80 == $sub.ref(0, 164569);

const {:count 30} .str.81: ref;

axiom .str.81 == $sub.ref(0, 165623);

const {:count 14} .str.82: ref;

axiom .str.82 == $sub.ref(0, 166661);

const cpu_bit_bitmap: ref;

axiom cpu_bit_bitmap == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const xp_cpu_to_nasid: ref;

axiom xp_cpu_to_nasid == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

const {:count 40} .str.37: ref;

axiom .str.37 == $sub.ref(0, 167725);

const xp_socket_pa: ref;

axiom xp_socket_pa == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32912));

const {:count 76} .str.39: ref;

axiom .str.39 == $sub.ref(0, 168825);

const {:count 26} .str.70: ref;

axiom .str.70 == $sub.ref(0, 169875);

const {:count 23} .str.71: ref;

axiom .str.71 == $sub.ref(0, 170922);

const {:count 19} .str.72: ref;

axiom .str.72 == $sub.ref(0, 171965);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 173002);

const {:count 11} .str.54: ref;

axiom .str.54 == $sub.ref(0, 174037);

const {:count 68} .str.117: ref;

axiom .str.117 == $sub.ref(0, 175129);

const {:count 91} .str.118: ref;

axiom .str.118 == $sub.ref(0, 176244);

const {:count 70} .str.106: ref;

axiom .str.106 == $sub.ref(0, 177338);

const {:count 79} .str.107: ref;

axiom .str.107 == $sub.ref(0, 178441);

const {:count 80} .str.108: ref;

axiom .str.108 == $sub.ref(0, 179545);

const {:count 39} .str.109: ref;

axiom .str.109 == $sub.ref(0, 180608);

const {:count 46} .str.110: ref;

axiom .str.110 == $sub.ref(0, 181678);

const xp_expand_memprotect: ref;

axiom xp_expand_memprotect == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32920));

const {:count 34} .str.113: ref;

axiom .str.113 == $sub.ref(0, 182736);

const {:count 45} .str.112: ref;

axiom .str.112 == $sub.ref(0, 183805);

const {:count 20} .str.111: ref;

axiom .str.111 == $sub.ref(0, 184849);

const node_data: ref;

axiom node_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32928));

const node_states: ref;

axiom node_states == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32936));

const uv_cpu_to_blade: ref;

axiom uv_cpu_to_blade == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32944));

const {:count 70} .str.115: ref;

axiom .str.115 == $sub.ref(0, 185943);

const {:count 60} .str.116: ref;

axiom .str.116 == $sub.ref(0, 187027);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 188059);

const {:count 3} .str.1.272: ref;

axiom .str.1.272 == $sub.ref(0, 189086);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 190124);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 191152);

const xpc_kzalloc_cacheline_aligned: ref;

axiom xpc_kzalloc_cacheline_aligned == $sub.ref(0, 192184);

procedure xpc_kzalloc_cacheline_aligned($i0: i64, $i1: i32, $p2: ref) returns ($r: ref);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 193216);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 194248);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} ldv_check_alloc_flags($i1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 4} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 195280);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} free_($p0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 196312);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 6} $free($p0);
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 197344);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 32);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} ldv_blast_assert();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ldv_blast_assert: ref;

axiom ldv_blast_assert == $sub.ref(0, 198376);

procedure ldv_blast_assert();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_blast_assert()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 9} __VERIFIER_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const proc_dointvec_minmax: ref;

axiom proc_dointvec_minmax == $sub.ref(0, 199408);

procedure proc_dointvec_minmax($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const xpc_system_reboot: ref;

axiom xpc_system_reboot == $sub.ref(0, 200440);

procedure xpc_system_reboot($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14, $M.1, $M.21, $M.28, $CurrAddr, assertsPassed;



implementation xpc_system_reboot($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} {:cexpr "xpc_system_reboot:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := 45;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} xpc_do_exit($i9);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := 48;
    goto $bb14;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i9 := 46;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := 47;
    goto $bb14;
}



const xpc_do_exit: ref;

axiom xpc_do_exit == $sub.ref(0, 201472);

procedure xpc_do_exit($i0: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14, $M.1, $M.21, $M.28, $CurrAddr, assertsPassed;



implementation xpc_do_exit($i0: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i26: i32;
  var $i27: i64;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i12: i64;
  var $i13: i16;
  var $i14: i32;
  var $i46: i32;
  var $i47: i64;
  var $i10: i32;
  var $i11: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i59: i64;
  var $i60: i64;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i71: i32;
  var $i61: i64;
  var $i62: i32;
  var $i72: i64;
  var $i73: i32;
  var $i75: i1;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var vslice_dummy_var_9: i64;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i64;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} {:cexpr "xpc_do_exit:arg:reason"} boogie_si_record_i32($i0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} {:cexpr "xpc_exiting"} boogie_si_record_i32(1);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} wait_for_completion(xpc_discovery_exited);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} wait_for_completion(xpc_hb_checker_exited);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_9 := msleep_interruptible(300);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, jiffies);
    call {:si_unique_call 18} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i2);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2500);
    call {:si_unique_call 19} {:cexpr "printmsg_time"} boogie_si_record_i64($i3);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 20} {:cexpr "xpc_disengage_timedout"} boogie_si_record_i32(0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i4, $i5, $i6 := $i3, 0, 0;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $i7, $i8, $i9, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i26, $i27, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i12, $i13, $i14, $i46, $i47, $i10, $i11, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i59, $i60, $i63, $i64, $p65, $i71, $i61, $i62, $i72, $i73, vslice_dummy_var_10, vslice_dummy_var_11, vslice_dummy_var_13 := xpc_do_exit_loop_$bb1($i0, $i4, $i5, $i6, $i7, $i8, $i9, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i26, $i27, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i12, $i13, $i14, $i46, $i47, $i10, $i11, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i59, $i60, $i63, $i64, $p65, $i71, $i61, $i62, $i72, $i73, vslice_dummy_var_10, vslice_dummy_var_11, vslice_dummy_var_13);
    goto $bb1_last;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    call {:si_unique_call 21} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i8);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32(0, $i8);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i10, $i11 := 0, $i6;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $M.5;
    call {:si_unique_call 42} $i49 := devirtbounce($p48);
    call {:si_unique_call 43} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i72, $i73 := $i4, $i5;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_13 := msleep_interruptible(300);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i4, $i5, $i6 := $i72, $i73, $i11;
    goto corral_source_split_154_dummy;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, jiffies);
    call {:si_unique_call 44} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i51);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i4, $i51);
    call {:si_unique_call 45} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i52);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i52, 0);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i10, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i71 := $i5;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i61, $i62 := $i4, $i71;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i72, $i73 := $i61, $i62;
    goto $bb35;

  $bb25:
    assume $i63 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i5, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i64 == 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i67 := $M.3;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} xpc_teardown_rsvd_page();
    call {:si_unique_call 55} {:cexpr "xpc_do_exit:arg:__cil_tmp42"} boogie_si_record_i32($i0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i0, 19);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} xpc_clear_interface();
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 60} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i78);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p79 := $M.7;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    call {:si_unique_call 61} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i80);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, $i78);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} xpc_teardown_partitions();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i83 := is_uv_system();
    call {:si_unique_call 65} {:cexpr "tmp___1"} boogie_si_record_i32($i83);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i84 == 1;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} xpc_exit_uv();
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i81 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p82 := $M.7;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} unregister_sysctl_table($p82);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_14 := unregister_die_notifier(xpc_die_notifier);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_15 := unregister_reboot_notifier(xpc_reboot_notifier);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p69 := $M.6;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_12 := _dev_info.ref.ref($p69, .str.89);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p65 := $M.6;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_11 := _dev_info.ref.ref($p65, .str.88);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb34;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p54 := $M.6;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, jiffies);
    call {:si_unique_call 46} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i55);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i56 := $sub.i64($i11, $i55);
    call {:si_unique_call 47} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i56);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i57 := $udiv.i64($i56, 250);
    call {:si_unique_call 48} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i57);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_10 := _dev_info.ref.ref.i64($p54, .str.87, $i57);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, jiffies);
    call {:si_unique_call 50} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i59);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 2500);
    call {:si_unique_call 51} {:cexpr "printmsg_time"} boogie_si_record_i64($i60);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i61, $i62 := $i60, 1;
    goto $bb24;

  $bb2:
    assume $i9 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i12, $i13, $i14 := $i6, 0, 0;
    goto $bb5;

  $bb5:
    call $i15, $p16, $p17, $i18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i26, $i27, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i12, $i13, $i14, $i46, $i47 := xpc_do_exit_loop_$bb5($i0, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i26, $i27, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i12, $i13, $i14, $i46, $i47);
    goto $bb5_last;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i64($i13);
    call {:si_unique_call 22} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p16 := $M.4;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($i15, 872));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i18 := xpc_partition_disengaged($p17);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 24} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i14, 1);
    call {:si_unique_call 34} {:cexpr "active_part_count"} boogie_si_record_i32($i28);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} xpc_deactivate_partition(1011, $p17, $i0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p17);
    call {:si_unique_call 36} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i29);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 128);
    call {:si_unique_call 37} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    call {:si_unique_call 38} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i32);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i64($i32, $i12);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i28, $i38;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i39 := $sext.i16.i32($i13);
    call {:si_unique_call 29} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i39);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    call {:si_unique_call 30} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i40);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    call {:si_unique_call 31} {:cexpr "partid"} boogie_si_record_i16($i41);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i43 := $sext.i16.i32($i42);
    call {:si_unique_call 32} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i43);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i41);
    call {:si_unique_call 33} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i44);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, $i43);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i46, $i47 := $i26, $i27;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i10, $i11 := $i46, $i47;
    goto $bb4;

  $bb17:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13, $i14 := $i27, $i41, $i26;
    goto $bb17_dummy;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p17);
    call {:si_unique_call 39} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i34);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 128);
    call {:si_unique_call 40} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    call {:si_unique_call 41} {:cexpr "disengage_timeout"} boogie_si_record_i64($i37);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb16;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p17);
    call {:si_unique_call 25} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 112);
    call {:si_unique_call 26} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    call {:si_unique_call 27} {:cexpr "__cil_tmp20"} boogie_si_record_i8($i23);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    call {:si_unique_call 28} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i24);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i14, $i12;
    goto $bb11;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_154_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_59;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 202504);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 68} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 203536);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    return;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 204568);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_partition_disengaged: ref;

axiom xpc_partition_disengaged == $sub.ref(0, 205600);

procedure xpc_partition_disengaged($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.1, $M.21, $M.28, $M.14, $CurrAddr, assertsPassed;



implementation xpc_partition_disengaged($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i26: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p1 := $M.4;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 72} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 73} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i3);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, $i2);
    call {:si_unique_call 74} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i4);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i64($i4, 896);
    call {:si_unique_call 75} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i16($i5);
    call {:si_unique_call 76} {:cexpr "partid"} boogie_si_record_i16($i6);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i32($i6);
    call {:si_unique_call 77} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i7);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    call {:si_unique_call 78} {:cexpr "__cil_tmp15"} boogie_si_record_i16($i8);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p9 := $M.8;
    call {:si_unique_call 79} $i10 := devirtbounce.1($p9, $i8);
    call {:si_unique_call 80} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 81} {:cexpr "disengaged"} boogie_si_record_i32($i12);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 82} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 128);
    call {:si_unique_call 83} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    call {:si_unique_call 84} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i26 := $i56;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i12;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 96} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 128);
    call {:si_unique_call 97} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p37 := current_thread_info();
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    call {:si_unique_call 99} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i38);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 28);
    call {:si_unique_call 100} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i39);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 101} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i41);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    call {:si_unique_call 102} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i42);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 134217472);
    call {:si_unique_call 103} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 107} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i49);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 112);
    call {:si_unique_call 108} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i50);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    call {:si_unique_call 109} {:cexpr "__cil_tmp41"} boogie_si_record_i8($i52);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    call {:si_unique_call 110} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i53);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $M.10;
    call {:si_unique_call 112} devirtbounce.3($p55, $p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i56 := $i33;
    goto $bb16;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    call {:si_unique_call 104} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i45);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 136);
    call {:si_unique_call 105} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i46);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_17 := del_timer_sync($p47);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 85} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 128);
    call {:si_unique_call 86} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    call {:si_unique_call 87} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, jiffies);
    call {:si_unique_call 88} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i24 := $sub.i64($i23, $i22);
    call {:si_unique_call 89} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i24);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i25 := $slt.i64($i24, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $M.6;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i6);
    call {:si_unique_call 90} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i28);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_16 := _dev_info.ref.ref.i32($p27, .str.40, $i28);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 92} {:cexpr "xpc_disengage_timedout"} boogie_si_record_i32(1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i30 := $sext.i16.i32($i6);
    call {:si_unique_call 93} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i30);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    call {:si_unique_call 94} {:cexpr "__cil_tmp28"} boogie_si_record_i16($i31);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p32 := $M.9;
    call {:si_unique_call 95} devirtbounce.2($p32, $i31);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb9;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb7;
}



const xpc_deactivate_partition: ref;

axiom xpc_deactivate_partition == $sub.ref(0, 206632);

procedure xpc_deactivate_partition($i0: i32, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, $M.3, assertsPassed;



implementation xpc_deactivate_partition($i0: i32, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i32;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i16;
  var $i112: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 114} {:cexpr "xpc_deactivate_partition:arg:line"} boogie_si_record_i32($i0);
    call {:si_unique_call 115} {:cexpr "xpc_deactivate_partition:arg:reason"} boogie_si_record_i32($i2);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} ldv_spin_lock();
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    call {:si_unique_call 117} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 112);
    call {:si_unique_call 118} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 119} {:cexpr "__cil_tmp9"} boogie_si_record_i8($i7);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    call {:si_unique_call 120} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i8);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    call {:si_unique_call 130} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 112);
    call {:si_unique_call 131} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    call {:si_unique_call 132} {:cexpr "__cil_tmp21"} boogie_si_record_i8($i24);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    call {:si_unique_call 133} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i25);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 4);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p1);
    call {:si_unique_call 150} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i49);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 112);
    call {:si_unique_call 151} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i50);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 4);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p1);
    call {:si_unique_call 152} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i52);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 116);
    call {:si_unique_call 153} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i53);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i2);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p1);
    call {:si_unique_call 154} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i55);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 120);
    call {:si_unique_call 155} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i56);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p1);
    call {:si_unique_call 156} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i58);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 40);
    call {:si_unique_call 157} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i59);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} spin_unlock_irqrestore($p60, $u0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p61 := $M.12;
    call {:si_unique_call 159} devirtbounce.3($p61, $p1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p1);
    call {:si_unique_call 160} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i62);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 128);
    call {:si_unique_call 161} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i63);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, jiffies);
    call {:si_unique_call 162} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i64);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i65 := $M.13;
    call {:si_unique_call 163} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i65);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i65, 250);
    call {:si_unique_call 164} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i66);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    call {:si_unique_call 165} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i67);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, $i64);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i63);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i68);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p1);
    call {:si_unique_call 166} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i70);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 152);
    call {:si_unique_call 167} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i71);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p1);
    call {:si_unique_call 168} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i72);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 128);
    call {:si_unique_call 169} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i73);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i71);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i75);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p1);
    call {:si_unique_call 170} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i77);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 136);
    call {:si_unique_call 171} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i78);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} add_timer($p79);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p80, .str);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p3);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 8);
    call {:si_unique_call 173} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i82);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, .str.43);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p3);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 16);
    call {:si_unique_call 174} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i85);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, .str.38);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p3);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 24);
    call {:si_unique_call 175} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i88);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, .str.44);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p3);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 32);
    call {:si_unique_call 176} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i91);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 391);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p3);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 35);
    call {:si_unique_call 177} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i94);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p3);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 35);
    call {:si_unique_call 178} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i97);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    call {:si_unique_call 179} {:cexpr "__cil_tmp71"} boogie_si_record_i8($i99);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    call {:si_unique_call 180} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i100);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    call {:si_unique_call 181} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i101);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i102 := __builtinx_expect.i64.i64($i101, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    call {:si_unique_call 183} {:cexpr "tmp"} boogie_si_record_i64($i103);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} xpc_partition_going_down($p1, $i2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i104 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p105 := $M.6;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p106 := $M.4;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    call {:si_unique_call 184} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i107);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p1);
    call {:si_unique_call 185} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i108);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i109 := $sub.i64($i108, $i107);
    call {:si_unique_call 186} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i109);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i110 := $sdiv.i64($i109, 896);
    call {:si_unique_call 187} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i110);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i64.i16($i110);
    call {:si_unique_call 188} {:cexpr "__cil_tmp79"} boogie_si_record_i16($i111);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i112 := $sext.i16.i32($i111);
    call {:si_unique_call 189} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i112);
    call {:si_unique_call 190} {:cexpr "xpc_deactivate_partition:arg:__cil_tmp81"} boogie_si_record_i32($i2);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_18 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p105, .str.44, $i112, $i2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    call {:si_unique_call 134} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 116);
    call {:si_unique_call 135} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 136} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i30);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 19);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call {:si_unique_call 142} {:cexpr "xpc_deactivate_partition:arg:__cil_tmp32"} boogie_si_record_i32($i2);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i2, 21);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p1);
    call {:si_unique_call 143} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i46);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 40);
    call {:si_unique_call 144} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i47);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} spin_unlock_irqrestore($p48, $u0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p1);
    call {:si_unique_call 146} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i40);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 116);
    call {:si_unique_call 147} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i41);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i2);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p1);
    call {:si_unique_call 148} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 120);
    call {:si_unique_call 149} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i44);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i0);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i31 == 1;
    call {:si_unique_call 137} {:cexpr "xpc_deactivate_partition:arg:__cil_tmp27"} boogie_si_record_i32($i2);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i2, 19);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p1);
    call {:si_unique_call 138} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 116);
    call {:si_unique_call 139} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i2);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p1);
    call {:si_unique_call 140} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i36);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 120);
    call {:si_unique_call 141} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 121} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 116);
    call {:si_unique_call 122} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i2);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    call {:si_unique_call 123} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 120);
    call {:si_unique_call 124} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 125} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 40);
    call {:si_unique_call 126} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} spin_unlock_irqrestore($p18, $u0);
    call {:si_unique_call 128} {:cexpr "xpc_deactivate_partition:arg:__cil_tmp18"} boogie_si_record_i32($i2);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i2, 21);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p20 := $M.11;
    call {:si_unique_call 129} devirtbounce.3($p20, $p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 207664);

procedure _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 195} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 196} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 197} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_teardown_rsvd_page: ref;

axiom xpc_teardown_rsvd_page == $sub.ref(0, 208696);

procedure xpc_teardown_rsvd_page();
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_teardown_rsvd_page()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p0 := $M.15;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 199} {:cexpr "__cil_tmp1"} boogie_si_record_i64($i1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24);
    call {:si_unique_call 200} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i2);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    return;
}



const unregister_die_notifier: ref;

axiom unregister_die_notifier == $sub.ref(0, 209728);

procedure unregister_die_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_die_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 201} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unregister_reboot_notifier: ref;

axiom unregister_reboot_notifier == $sub.ref(0, 210760);

procedure unregister_reboot_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_reboot_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 203} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 204} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_clear_interface: ref;

axiom xpc_clear_interface == $sub.ref(0, 211792);

procedure xpc_clear_interface();
  free requires assertsPassed;



implementation xpc_clear_interface()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    return;
}



const unregister_sysctl_table: ref;

axiom unregister_sysctl_table == $sub.ref(0, 212824);

procedure unregister_sysctl_table($p0: ref);
  free requires assertsPassed;



implementation unregister_sysctl_table($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    return;
}



const xpc_teardown_partitions: ref;

axiom xpc_teardown_partitions == $sub.ref(0, 213856);

procedure xpc_teardown_partitions();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.28, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_teardown_partitions()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p0 := $M.16;
    call {:si_unique_call 205} devirtbounce.4($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p1 := $M.4;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} kfree($p2);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const is_uv_system: ref;

axiom is_uv_system == $sub.ref(0, 214888);

procedure is_uv_system() returns ($r: i32);
  free requires assertsPassed;



implementation is_uv_system() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 207} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 208} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const xpc_exit_uv: ref;

axiom xpc_exit_uv == $sub.ref(0, 215920);

procedure xpc_exit_uv();
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation xpc_exit_uv()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p0 := $M.17;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} xpc_destroy_gru_mq_uv($p0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p1 := $M.18;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} xpc_destroy_gru_mq_uv($p1);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    return;
}



const xpc_destroy_gru_mq_uv: ref;

axiom xpc_destroy_gru_mq_uv == $sub.ref(0, 216952);

procedure xpc_destroy_gru_mq_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation xpc_destroy_gru_mq_uv($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i32;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 211} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 212} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 213} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i4);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i6 := $shl.i64(1, $i5);
    call {:si_unique_call 214} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 215} {:cexpr "mq_size"} boogie_si_record_i32($i7);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, xp_pa);
    call {:si_unique_call 216} $i11 := devirtbounce.5($p10, $p9);
    call {:si_unique_call 217} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i7);
    call {:si_unique_call 218} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, xp_restrict_memprotect);
    call {:si_unique_call 219} $i14 := devirtbounce.6($p13, $i11, $i12);
    call {:si_unique_call 220} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 221} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 222} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i18 := __builtinx_expect.i64.i64($i17, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    call {:si_unique_call 224} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 226} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 12);
    call {:si_unique_call 227} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 228} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i24);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} free_irq($i24, $0.ref);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} xpc_release_gru_mq_irq_uv($p0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} xpc_gru_mq_watchlist_free_uv($p0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 232} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 8);
    call {:si_unique_call 233} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 234} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i28);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 12);
    call {:si_unique_call 235} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i29);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    call {:si_unique_call 236} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} free_pages($i32, $i29);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} kfree($p33);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    call {:si_unique_call 225} devirtbounce.7(0, .str.114, 330, 12);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call xpc_destroy_gru_mq_uv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __builtinx_expect: ref;

axiom __builtinx_expect == $sub.ref(0, 217984);

procedure __builtinx_expect() returns ($r: i32);



procedure __builtinx_expect.i64.i64(p.0: i64, p.1: i64) returns ($r: i32);



const free_irq: ref;

axiom free_irq == $sub.ref(0, 219016);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    return;
}



const xpc_release_gru_mq_irq_uv: ref;

axiom xpc_release_gru_mq_irq_uv == $sub.ref(0, 220048);

procedure xpc_release_gru_mq_irq_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_release_gru_mq_irq_uv($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 240} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 12);
    call {:si_unique_call 241} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 242} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i4);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} uv_teardown_irq($i4);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    return;
}



const xpc_gru_mq_watchlist_free_uv: ref;

axiom xpc_gru_mq_watchlist_free_uv == $sub.ref(0, 221080);

procedure xpc_gru_mq_watchlist_free_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_gru_mq_watchlist_free_uv($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 244} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 16);
    call {:si_unique_call 245} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 246} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i5 := uv_blade_to_pnode($i4);
    call {:si_unique_call 248} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 249} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 40);
    call {:si_unique_call 250} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 251} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i9);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i10 := uv_bios_mq_watchlist_free($i5, $i9);
    call {:si_unique_call 253} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 254} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i12);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 255} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i14 := __builtinx_expect.i64.i64($i13, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 257} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    call {:si_unique_call 258} devirtbounce.7(0, .str.114, 210, 12);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call xpc_gru_mq_watchlist_free_uv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 222112);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 260} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    return;
}



const uv_blade_to_pnode: ref;

axiom uv_blade_to_pnode == $sub.ref(0, 223144);

procedure uv_blade_to_pnode($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_blade_to_pnode($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "uv_blade_to_pnode:arg:bid"} boogie_si_record_i32($i0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    call {:si_unique_call 262} {:cexpr "uv_blade_to_pnode:arg:__cil_tmp2"} boogie_si_record_i32($i0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, uv_blade_info);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 88));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 263} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 4);
    call {:si_unique_call 264} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 265} {:cexpr "__cil_tmp6"} boogie_si_record_i16($i7);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const uv_bios_mq_watchlist_free: ref;

axiom uv_bios_mq_watchlist_free == $sub.ref(0, 224176);

procedure uv_bios_mq_watchlist_free($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_bios_mq_watchlist_free($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 266} {:cexpr "uv_bios_mq_watchlist_free:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 267} {:cexpr "uv_bios_mq_watchlist_free:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const uv_teardown_irq: ref;

axiom uv_teardown_irq == $sub.ref(0, 225208);

procedure uv_teardown_irq($i0: i32);
  free requires assertsPassed;



implementation uv_teardown_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} {:cexpr "uv_teardown_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 226240);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 271} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 227272);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} ldv_spin_unlock();
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    return;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 228304);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 229336);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 275} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 276} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 278} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 279} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i64.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 282} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 286} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);



const xpc_partition_going_down: ref;

axiom xpc_partition_going_down == $sub.ref(0, 230368);

procedure xpc_partition_going_down($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.1, $CurrAddr, $M.21, $M.28, $M.3, assertsPassed;



implementation xpc_partition_going_down($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i16;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i46: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 289} {:cexpr "xpc_partition_going_down:arg:reason"} boogie_si_record_i32($i1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p4, .str);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 8);
    call {:si_unique_call 290} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, .str.20);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p3);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 16);
    call {:si_unique_call 291} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, .str.21);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p3);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 24);
    call {:si_unique_call 292} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, .str.22);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p3);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 32);
    call {:si_unique_call 293} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 638);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p3);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 35);
    call {:si_unique_call 294} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i18);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p3);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 35);
    call {:si_unique_call 295} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i21);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    call {:si_unique_call 296} {:cexpr "__cil_tmp16"} boogie_si_record_i8($i23);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    call {:si_unique_call 297} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i24);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    call {:si_unique_call 298} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i25);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i26 := __builtinx_expect.i64.i64($i25, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i38 := xpc_part_ref($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 310} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 311} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 364);
    call {:si_unique_call 312} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    call {:si_unique_call 313} {:cexpr "__cil_tmp39"} boogie_si_record_i8($i43);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    call {:si_unique_call 314} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i44);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} xpc_part_deref($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb11;

  $bb11:
    call $i47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $i46 := xpc_partition_going_down_loop_$bb11($p0, $i1, $p2, $p42, $i47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $i46);
    goto $bb11_last;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    call {:si_unique_call 315} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i47);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p0);
    call {:si_unique_call 316} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i48);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 376);
    call {:si_unique_call 317} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i49);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($i47, 720));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} xpc_msgqueue_ref($p52);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_spin_lock();
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} xpc_disconnect_channel(653, $p52, $i1, $p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    call {:si_unique_call 321} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i53);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 8);
    call {:si_unique_call 322} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i54);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p2);
    call {:si_unique_call 323} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i56);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} spin_unlock_irqrestore($p55, $i56);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} xpc_msgqueue_deref($p52);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i46, 1);
    call {:si_unique_call 326} {:cexpr "ch_number"} boogie_si_record_i32($i57);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p42);
    call {:si_unique_call 327} {:cexpr "__cil_tmp39"} boogie_si_record_i8($i58);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    call {:si_unique_call 328} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i59);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, $i57);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i60 == 1);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i57;
    goto $bb13_dummy;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p29 := $M.19;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p30 := $M.4;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 301} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i31);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 302} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i32);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i32, $i31);
    call {:si_unique_call 303} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i33);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i34 := $sdiv.i64($i33, 896);
    call {:si_unique_call 304} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i34);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i16($i34);
    call {:si_unique_call 305} {:cexpr "__cil_tmp24"} boogie_si_record_i16($i35);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i36 := $sext.i16.i32($i35);
    call {:si_unique_call 306} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i36);
    call {:si_unique_call 307} {:cexpr "xpc_partition_going_down:arg:__cil_tmp26"} boogie_si_record_i32($i1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_19 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p29, .str.22, $i36, $i1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;
}



const xpc_part_ref: ref;

axiom xpc_part_ref == $sub.ref(0, 231400);

procedure xpc_part_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, $M.3, assertsPassed;



implementation xpc_part_ref($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 331} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 360);
    call {:si_unique_call 332} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} atomic_inc($p3);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 334} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 264);
    call {:si_unique_call 335} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 336} {:cexpr "__cil_tmp8"} boogie_si_record_i8($i7);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    call {:si_unique_call 337} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 338} {:cexpr "setup"} boogie_si_record_i32($i10);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} xpc_part_deref($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const xpc_msgqueue_ref: ref;

axiom xpc_msgqueue_ref == $sub.ref(0, 232432);

procedure xpc_msgqueue_ref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation xpc_msgqueue_ref($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 340} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 100);
    call {:si_unique_call 341} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} atomic_inc($p3);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const xpc_disconnect_channel: ref;

axiom xpc_disconnect_channel == $sub.ref(0, 233464);

procedure xpc_disconnect_channel($i0: i32, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.1, $M.21, $CurrAddr, $M.28, $M.3, assertsPassed;



implementation xpc_disconnect_channel($i0: i32, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i1;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 344} {:cexpr "xpc_disconnect_channel:arg:line"} boogie_si_record_i32($i0);
    call {:si_unique_call 345} {:cexpr "xpc_disconnect_channel:arg:reason"} boogie_si_record_i32($i2);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 346} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 80);
    call {:si_unique_call 347} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i6);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 348} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i8);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1024);
    call {:si_unique_call 349} {:cexpr "channel_was_connected"} boogie_si_record_i32($i9);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 350} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 80);
    call {:si_unique_call 351} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 352} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i13);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 196608);
    call {:si_unique_call 353} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i14);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p16, .str);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p4);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 8);
    call {:si_unique_call 354} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, .str.26);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p4);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 16);
    call {:si_unique_call 355} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, .str.21);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p4);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 24);
    call {:si_unique_call 356} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, .str.27);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p4);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 32);
    call {:si_unique_call 357} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 783);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p4);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 35);
    call {:si_unique_call 358} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i30);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p4);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 35);
    call {:si_unique_call 359} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i33);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    call {:si_unique_call 360} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i35);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    call {:si_unique_call 361} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i36);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    call {:si_unique_call 362} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i37);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i38 := __builtinx_expect.i64.i64($i37, 0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    call {:si_unique_call 364} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p1);
    call {:si_unique_call 373} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i51);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 84);
    call {:si_unique_call 374} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i52);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i2);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p1);
    call {:si_unique_call 375} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i54);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 88);
    call {:si_unique_call 376} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i55);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p1);
    call {:si_unique_call 377} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i57);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 80);
    call {:si_unique_call 378} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i58);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p1);
    call {:si_unique_call 379} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i59);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 80);
    call {:si_unique_call 380} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i60);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    call {:si_unique_call 381} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i62);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 163840);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i58);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p1);
    call {:si_unique_call 382} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i65);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 80);
    call {:si_unique_call 383} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i66);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p1);
    call {:si_unique_call 384} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i67);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 80);
    call {:si_unique_call 385} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i68);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    call {:si_unique_call 386} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i70);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, $sub.i32(0, 3193));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i66);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p73 := $M.20;
    call {:si_unique_call 387} devirtbounce.8($p73, $p1, $p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i9, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p1);
    call {:si_unique_call 393} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i83);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 8);
    call {:si_unique_call 394} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i84);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p3);
    call {:si_unique_call 395} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i86);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} spin_unlock_irqrestore($p85, $i86);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p1);
    call {:si_unique_call 397} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i87);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 328);
    call {:si_unique_call 398} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i88);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i90 := atomic_read($p89);
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i32($i90);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i91 := $sgt.i32($i90, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i91 == 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p1);
    call {:si_unique_call 404} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i95);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 80);
    call {:si_unique_call 405} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i96);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    call {:si_unique_call 406} {:cexpr "__cil_tmp68"} boogie_si_record_i32($i98);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 512);
    call {:si_unique_call 407} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i99);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p1);
    call {:si_unique_call 408} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i107);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 104);
    call {:si_unique_call 409} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i108);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i110 := atomic_read($p109);
    call {:si_unique_call 411} {:cexpr "tmp___1"} boogie_si_record_i32($i110);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i111 := $sgt.i32($i110, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} ldv_spin_lock();
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i111 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p1);
    call {:si_unique_call 417} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i112);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 112);
    call {:si_unique_call 418} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i113);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __wake_up($p114, 3, 1, $0.ref);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i100 == 1;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p1);
    call {:si_unique_call 412} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i101);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 80);
    call {:si_unique_call 413} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i102);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    call {:si_unique_call 414} {:cexpr "__cil_tmp72"} boogie_si_record_i32($i104);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 262144);
    call {:si_unique_call 415} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i105);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i106 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} xpc_create_kthreads($p1, 1, 1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i91 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p1);
    call {:si_unique_call 401} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i92);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 344);
    call {:si_unique_call 402} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i93);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} __wake_up($p94, 3, 0, $0.ref);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i74 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p1);
    call {:si_unique_call 388} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i75);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 80);
    call {:si_unique_call 389} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i76);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p1);
    call {:si_unique_call 390} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i77);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 80);
    call {:si_unique_call 391} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i78);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    call {:si_unique_call 392} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i80);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, 1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i76);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p41 := $M.19;
    call {:si_unique_call 365} {:cexpr "xpc_disconnect_channel:arg:__cil_tmp28"} boogie_si_record_i32($i2);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    call {:si_unique_call 366} {:cexpr "__cil_tmp29"} boogie_si_record_i16($i43);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    call {:si_unique_call 367} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i44);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p1);
    call {:si_unique_call 368} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i45);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 92);
    call {:si_unique_call 369} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i46);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    call {:si_unique_call 370} {:cexpr "__cil_tmp33"} boogie_si_record_i16($i48);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    call {:si_unique_call 371} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i49);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_20 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p4, $p41, .str.27, $i2, $i0, $i44, $i49);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_msgqueue_deref: ref;

axiom xpc_msgqueue_deref == $sub.ref(0, 234496);

procedure xpc_msgqueue_deref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation xpc_msgqueue_deref($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 421} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 100);
    call {:si_unique_call 422} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i4 := atomic_sub_return(1, $p3);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 425} {:cexpr "__cil_tmp7"} boogie_si_record_i16($i7);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i64($i7);
    call {:si_unique_call 426} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p9 := $M.4;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($i8, 872));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} xpc_wakeup_channel_mgr($p10);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const xpc_wakeup_channel_mgr: ref;

axiom xpc_wakeup_channel_mgr == $sub.ref(0, 235528);

procedure xpc_wakeup_channel_mgr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation xpc_wakeup_channel_mgr($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 428} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 480);
    call {:si_unique_call 429} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i4 := atomic_add_return(1, $p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 432} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 488);
    call {:si_unique_call 433} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __wake_up($p8, 3, 1, $0.ref);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const xpc_part_deref: ref;

axiom xpc_part_deref == $sub.ref(0, 236560);

procedure xpc_part_deref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation xpc_part_deref($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 435} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 360);
    call {:si_unique_call 436} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i4 := atomic_sub_return(1, $p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 439} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 264);
    call {:si_unique_call 440} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 441} {:cexpr "__cil_tmp9"} boogie_si_record_i8($i9);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 442} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i10);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 443} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 272);
    call {:si_unique_call 444} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __wake_up($p14, 3, 1, $0.ref);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const atomic_sub_return: ref;

axiom atomic_sub_return == $sub.ref(0, 237592);

procedure atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} {:cexpr "atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, $i0);
    call {:si_unique_call 447} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i2);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i3 := atomic_add_return($i2, $p1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 449} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 238624);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i5: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 451} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __xadd_wrong_size();
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i5 := $i0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i5, $i0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    call {:si_unique_call 452} $i10 := devirtbounce.9(0, $p9, $i0, $p9);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 453} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb9;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const __xadd_wrong_size: ref;

axiom __xadd_wrong_size == $sub.ref(0, 239656);

procedure __xadd_wrong_size();



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 240688);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $CurrAddr;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p1, $i3);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.21, $p1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const xpc_create_kthreads: ref;

axiom xpc_create_kthreads == $sub.ref(0, 241720);

procedure xpc_create_kthreads($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.1, $M.14, $CurrAddr, $M.3, $M.28, assertsPassed;



implementation xpc_create_kthreads($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i16;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $i100: i1;
  var $i23: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 460} {:cexpr "xpc_create_kthreads:arg:needed"} boogie_si_record_i32($i1);
    call {:si_unique_call 461} {:cexpr "xpc_create_kthreads:arg:ignore_disconnecting"} boogie_si_record_i32($i2);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 462} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i4);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 92);
    call {:si_unique_call 463} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i5);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 464} {:cexpr "__cil_tmp23"} boogie_si_record_i16($i7);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i64($i7);
    call {:si_unique_call 465} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i8);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i9 := $shl.i64($i8, 32);
    call {:si_unique_call 466} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i9);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    call {:si_unique_call 467} {:cexpr "__cil_tmp26"} boogie_si_record_i16($i11);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i12 := $sext.i16.i64($i11);
    call {:si_unique_call 468} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i12);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 4294967295);
    call {:si_unique_call 469} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i13);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i13, $i9);
    call {:si_unique_call 470} {:cexpr "args"} boogie_si_record_i64($i14);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    call {:si_unique_call 471} {:cexpr "__cil_tmp29"} boogie_si_record_i16($i16);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i64($i16);
    call {:si_unique_call 472} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i17);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p18 := $M.4;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($i17, 872));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p20 := $M.22;
    call {:si_unique_call 473} {:cexpr "xpc_create_kthreads:arg:tmp___9"} boogie_si_record_i32($i1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i1, 1);
    call {:si_unique_call 474} {:cexpr "needed"} boogie_si_record_i32($i21);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i1, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb4;

  $bb4:
    call $i24, $i25, $i26, $p27, $i28, $i29, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $p57, $p59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $p68, $p69, $i70, $i71, $p73, $i74, $i75, $i99, $i100, $i23, vslice_dummy_var_21, vslice_dummy_var_22 := xpc_create_kthreads_loop_$bb4($p0, $i2, $i14, $p19, $i24, $i25, $i26, $p27, $i28, $i29, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $p57, $p59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $p68, $p69, $i70, $i71, $p73, $i74, $i75, $i99, $i100, $i23, vslice_dummy_var_21, vslice_dummy_var_22);
    goto $bb4_last;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i2, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_21 := xpc_part_ref($p19);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} xpc_msgqueue_ref($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i14);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    call {:si_unique_call 503} {:cexpr "__cil_tmp51"} boogie_si_record_i16($i61);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    call {:si_unique_call 504} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i62);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    call {:si_unique_call 505} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i63);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 92);
    call {:si_unique_call 506} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i64);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    call {:si_unique_call 507} {:cexpr "__cil_tmp55"} boogie_si_record_i16($i66);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    call {:si_unique_call 508} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i67);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p68 := kthread_create_on_node.ref.ref.i32.ref.i32.i32(xpc_kthread_start, $p59, $sub.i32(0, 1), .str.9, $i62, $i67);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i70 := IS_ERR($p69);
    call {:si_unique_call 511} {:cexpr "tmp___4"} boogie_si_record_i64($i70);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p68);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i74 := IS_ERR($p73);
    call {:si_unique_call 514} {:cexpr "tmp___8"} boogie_si_record_i64($i74);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i23, 1);
    call {:si_unique_call 539} {:cexpr "needed"} boogie_si_record_i32($i99);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i23, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i100 == 1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb41:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i99;
    goto $bb41_dummy;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p0);
    call {:si_unique_call 515} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i76);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 320);
    call {:si_unique_call 516} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i77);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i79 := atomic_sub_return(1, $p78);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 518} {:cexpr "tmp___5"} boogie_si_record_i32($i79);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} xpc_msgqueue_deref($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} xpc_part_deref($p19);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p0);
    call {:si_unique_call 526} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i86);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 320);
    call {:si_unique_call 527} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i87);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i89 := atomic_read($p88);
    call {:si_unique_call 529} {:cexpr "tmp___7"} boogie_si_record_i32($i89);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p0);
    call {:si_unique_call 530} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i90);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 332);
    call {:si_unique_call 531} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i91);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    call {:si_unique_call 532} {:cexpr "__cil_tmp71"} boogie_si_record_i32($i93);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i94 := $ult.i32($i89, $i93);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb37:
    assume $i94 == 1;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_spin_lock();
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} xpc_disconnect_channel(856, $p0, 14, $p3);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p0);
    call {:si_unique_call 535} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i95);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 8);
    call {:si_unique_call 536} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i96);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p3);
    call {:si_unique_call 537} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i98);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} spin_unlock_irqrestore($p97, $i98);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i80 == 1;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p19);
    call {:si_unique_call 519} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i81);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 372);
    call {:si_unique_call 520} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i82);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i84 := atomic_sub_return(1, $p83);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 522} {:cexpr "tmp___6"} boogie_si_record_i32($i84);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i85 == 1;
    call {:si_unique_call 523} devirtbounce.3($p20, $p19);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_22 := wake_up_process($p68);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 475} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i25);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 320);
    call {:si_unique_call 476} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i26);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i28 := atomic_add_unless($p27, 1, 0);
    call {:si_unique_call 478} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 487} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i41);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 80);
    call {:si_unique_call 488} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i42);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    call {:si_unique_call 489} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i44);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 131072);
    call {:si_unique_call 490} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i45);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 492} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i47);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 320);
    call {:si_unique_call 493} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i48);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i50 := atomic_add_return(1, $p49);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 495} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i51 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p19);
    call {:si_unique_call 496} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i52);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 372);
    call {:si_unique_call 497} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i53);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i55 := atomic_add_return(1, $p54);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 499} {:cexpr "tmp___1"} boogie_si_record_i32($i55);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p57 := $M.23;
    call {:si_unique_call 500} devirtbounce.3($p57, $p19);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 479} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i30);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 80);
    call {:si_unique_call 480} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i31);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 481} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i33);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 524288);
    call {:si_unique_call 482} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i34);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 483} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i36);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    call {:si_unique_call 484} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i37);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i38 := __builtinx_expect.i64.i64($i37, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i40 == 1;
    call {:si_unique_call 491} devirtbounce.7(0, .str.6, 811, 12);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call xpc_create_kthreads_loop_$bb12();
    goto $bb12_last;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb41_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 242752);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 541} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 543} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const xpc_kthread_start: ref;

axiom xpc_kthread_start == $sub.ref(0, 243784);

procedure xpc_kthread_start($p0: ref) returns ($r: i32);



const kthread_create_on_node: ref;

axiom kthread_create_on_node == $sub.ref(0, 244816);

procedure kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p4 := external_alloc();
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



procedure kthread_create_on_node.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p4 := external_alloc();
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 245848);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 548} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 549} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i3);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 550} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i5 := __builtinx_expect.i64.i64($i4, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 246880);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 553} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 554} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 247912);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 556} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const xpc_connected_callout: ref;

axiom xpc_connected_callout == $sub.ref(0, 248944);

procedure xpc_connected_callout($p0: ref);



const xpc_activate_kthreads: ref;

axiom xpc_activate_kthreads == $sub.ref(0, 249976);

procedure xpc_activate_kthreads($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.21, $M.14, $M.0, $M.1, $CurrAddr, $M.3, $M.28, assertsPassed;



implementation xpc_activate_kthreads($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i32;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 559} {:cexpr "xpc_activate_kthreads:arg:needed"} boogie_si_record_i32($i1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 560} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i4);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 328);
    call {:si_unique_call 561} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i7 := atomic_read($p6);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 564} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i8);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 320);
    call {:si_unique_call 565} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i9);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i11 := atomic_read($p10);
    call {:si_unique_call 567} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i7, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i54, 0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    call {:si_unique_call 591} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i56);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 324);
    call {:si_unique_call 592} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i57);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    call {:si_unique_call 593} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i59);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i54, $i11);
    call {:si_unique_call 594} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i60);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i32($i60, $i59);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i54;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p3);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p69, .str);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p3);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 8);
    call {:si_unique_call 599} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i71);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, .str.5);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p3);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 16);
    call {:si_unique_call 600} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i74);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, .str.6);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p3);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 24);
    call {:si_unique_call 601} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i77);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, .str.8);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p3);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 32);
    call {:si_unique_call 602} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i80);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 657);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p3);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 35);
    call {:si_unique_call 603} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i83);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p3);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 35);
    call {:si_unique_call 604} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i86);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    call {:si_unique_call 605} {:cexpr "__cil_tmp58"} boogie_si_record_i8($i88);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    call {:si_unique_call 606} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i89);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    call {:si_unique_call 607} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i90);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i91 := __builtinx_expect.i64.i64($i90, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    call {:si_unique_call 609} {:cexpr "tmp___2"} boogie_si_record_i64($i92);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} xpc_create_kthreads($p0, $i68, 0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i93 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p94 := $M.19;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    call {:si_unique_call 610} {:cexpr "__cil_tmp62"} boogie_si_record_i16($i96);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i97 := $sext.i16.i32($i96);
    call {:si_unique_call 611} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i97);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p0);
    call {:si_unique_call 612} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i98);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 92);
    call {:si_unique_call 613} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i99);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    call {:si_unique_call 614} {:cexpr "__cil_tmp66"} boogie_si_record_i16($i101);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    call {:si_unique_call 615} {:cexpr "__cil_tmp67"} boogie_si_record_i32($i102);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_24 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p3, $p94, .str.8, $i68, $i97, $i102);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 595} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i62);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 324);
    call {:si_unique_call 596} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i63);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 597} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i65);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i65, $i11);
    call {:si_unique_call 598} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i66);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i67 := $sle.i32($i66, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    goto $bb19;

  $bb16:
    assume $i67 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i7, $i1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    call {:si_unique_call 568} {:cexpr "xpc_activate_kthreads:arg:wakeup"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i14 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i1, $i14);
    call {:si_unique_call 569} {:cexpr "needed"} boogie_si_record_i32($i15);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p16, .str);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 8);
    call {:si_unique_call 570} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i18);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, .str.5);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p2);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 16);
    call {:si_unique_call 571} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, .str.6);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p2);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 24);
    call {:si_unique_call 572} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, .str.7);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p2);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 32);
    call {:si_unique_call 573} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 641);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p2);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 35);
    call {:si_unique_call 574} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p2);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 35);
    call {:si_unique_call 575} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i33);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    call {:si_unique_call 576} {:cexpr "__cil_tmp27"} boogie_si_record_i8($i35);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    call {:si_unique_call 577} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    call {:si_unique_call 578} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i38 := __builtinx_expect.i64.i64($i37, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    call {:si_unique_call 580} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 588} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i51);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 344);
    call {:si_unique_call 589} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __wake_up($p53, 3, $i14, $0.ref);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i54 := $i15;
    goto $bb9;

  $bb6:
    assume $i40 == 1;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p41 := $M.19;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    call {:si_unique_call 581} {:cexpr "__cil_tmp31"} boogie_si_record_i16($i43);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    call {:si_unique_call 582} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i44);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    call {:si_unique_call 583} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i45);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 92);
    call {:si_unique_call 584} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i46);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    call {:si_unique_call 585} {:cexpr "__cil_tmp35"} boogie_si_record_i16($i48);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    call {:si_unique_call 586} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i49);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_23 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p2, $p41, .str.7, $i14, $i44, $i49);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb5;
}



const xpc_kthread_waitmsgs: ref;

axiom xpc_kthread_waitmsgs == $sub.ref(0, 251008);

procedure xpc_kthread_waitmsgs($p0: ref, $p1: ref);



const xpc_disconnect_callout: ref;

axiom xpc_disconnect_callout == $sub.ref(0, 252040);

procedure xpc_disconnect_callout($p0: ref, $i1: i32);



const xpc_deliver_payload: ref;

axiom xpc_deliver_payload == $sub.ref(0, 253072);

procedure xpc_deliver_payload($p0: ref);



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 254104);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 618} devirtbounce.13(0, $p1, $p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 255136);

procedure get_current() returns ($r: ref);



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 256168);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait_exclusive: ref;

axiom prepare_to_wait_exclusive == $sub.ref(0, 257200);

procedure prepare_to_wait_exclusive($p0: ref, $p1: ref, $i2: i32);



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 258232);

procedure finish_wait($p0: ref, $p1: ref);



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 259264);

procedure signal_pending($p0: ref) returns ($r: i32);



const schedule: ref;

axiom schedule == $sub.ref(0, 260296);

procedure schedule();



const abort_exclusive_wait: ref;

axiom abort_exclusive_wait == $sub.ref(0, 261328);

procedure abort_exclusive_wait($p0: ref, $p1: ref, $i2: i32, $p3: ref);



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 262360);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 263392);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 264424);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 265456);

procedure __bad_percpu_size();



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 266488);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 619} devirtbounce.13(0, $p1, $p1);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 267520);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i12: i32;
  var $i10: i32;
  var $i11: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 621} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i3 := atomic_read($p0);
    call {:si_unique_call 623} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 624} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i5);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    call {:si_unique_call 625} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i7 := __builtinx_expect.i64.i64($i6, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    call {:si_unique_call 627} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb4;

  $bb4:
    call $i12, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i12, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i11, $i1);
    call {:si_unique_call 628} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i14);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i15 := atomic_cmpxchg($p0, $i11, $i14);
    call {:si_unique_call 630} {:cexpr "old"} boogie_si_record_i32($i15);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $i11);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 631} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i17);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    call {:si_unique_call 632} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i19 := __builtinx_expect.i64.i64($i18, 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 634} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i22 := $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i15, $i2);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 635} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i24);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 636} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i25);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i26 := __builtinx_expect.i64.i64($i25, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 638} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb11_dummy;

  $bb5:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 268552);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 640} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 641} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 642} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} __cmpxchg_wrong_size();
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i6 := $u2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    call {:si_unique_call 643} $i11 := devirtbounce.18(0, $p10, $i2, $i1, $p10);
    call {:si_unique_call 644} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb9;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 269584);

procedure __cmpxchg_wrong_size();



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 270616);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 649} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 271648);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} _raw_spin_unlock_irqrestore($p2, $i1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 272680);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 273712);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i1: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} __bad_percpu_size();
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i1 := $u0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i1, 8152);
    call {:si_unique_call 657} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i5);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 653} $i4 := devirtbounce.20(0, kernel_stack);
    call {:si_unique_call 654} {:cexpr "pfo_ret__"} boogie_si_record_i64($i4);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i1 := $i4;
    goto $bb9;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 274744);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 660} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_system_die: ref;

axiom xpc_system_die == $sub.ref(0, 275776);

procedure xpc_system_die($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.28, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_system_die($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} {:cexpr "xpc_system_die:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} xpc_die_deactivate();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const xpc_die_deactivate: ref;

axiom xpc_die_deactivate == $sub.ref(0, 276808);

procedure xpc_die_deactivate();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.28, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_die_deactivate()
{
  var $p0: ref;
  var $i1: i16;
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i4: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p38: ref;
  var $i36: i64;
  var $i37: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i45: i16;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} {:cexpr "xpc_exiting"} boogie_si_record_i32(1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p0 := $M.27;
    call {:si_unique_call 665} devirtbounce.4($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i32($i1);
    call {:si_unique_call 666} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i2);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i30 := $M.13;
    call {:si_unique_call 685} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i30);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, 5000);
    call {:si_unique_call 686} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i31);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    call {:si_unique_call 687} {:cexpr "keep_waiting"} boogie_si_record_i64($i32);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p33 := $M.5;
    call {:si_unique_call 688} $i34 := devirtbounce($p33);
    call {:si_unique_call 689} {:cexpr "any_engaged"} boogie_si_record_i32($i34);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i35 == 1);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i36, $i37 := 50000, $i32;
    goto $bb18;

  $bb18:
    call $i36, $i37, $i40, $i41, $i61, $i62, $p63, $i64, $i66, $p67, $i68, $i69, vslice_dummy_var_27 := xpc_die_deactivate_loop_$bb18($i36, $i37, $i40, $i41, $i61, $i62, $p63, $i64, $i66, $p67, $i68, $i69, vslice_dummy_var_27);
    goto $bb18_last;

  $bb21:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64($i37, 1);
    call {:si_unique_call 691} {:cexpr "keep_waiting"} boogie_si_record_i64($i40);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i37, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64($i36, 1);
    call {:si_unique_call 704} {:cexpr "wait_to_print"} boogie_si_record_i64($i61);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i36, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i61;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} ___udelay(859000);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p67 := $M.5;
    call {:si_unique_call 708} $i68 := devirtbounce($p67);
    call {:si_unique_call 709} {:cexpr "any_engaged"} boogie_si_record_i32($i68);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i36, $i37 := $i66, $i40;
    goto $bb39_dummy;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $M.6;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_25 := _dev_info.ref.ref($p38, .str.89);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume $i62 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p63 := $M.6;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i64 := $sdiv.i64($i40, 5000);
    call {:si_unique_call 705} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i64);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_27 := _dev_info.ref.ref.i64($p63, .str.87, $i64);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i66 := 50000;
    goto $bb38;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i43 := $sext.i16.i32($i42);
    call {:si_unique_call 692} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i43);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32(0, $i43);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb27;

  $bb27:
    call $i46, $i47, $p48, $i49, $i50, $p51, $i52, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i45, vslice_dummy_var_26 := xpc_die_deactivate_loop_$bb27($i46, $i47, $p48, $i49, $i50, $p51, $i52, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i45, vslice_dummy_var_26);
    goto $bb27_last;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i46 := $sext.i16.i32($i45);
    call {:si_unique_call 693} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i46);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 694} {:cexpr "__cil_tmp26"} boogie_si_record_i16($i47);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p48 := $M.8;
    call {:si_unique_call 695} $i49 := devirtbounce.1($p48, $i47);
    call {:si_unique_call 696} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i54 := $sext.i16.i32($i45);
    call {:si_unique_call 699} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i54);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 1);
    call {:si_unique_call 700} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i55);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    call {:si_unique_call 701} {:cexpr "partid"} boogie_si_record_i16($i56);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i58 := $sext.i16.i32($i57);
    call {:si_unique_call 702} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i58);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($i56);
    call {:si_unique_call 703} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i59);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, $i58);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i60 == 1);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i56;
    goto $bb32_dummy;

  $bb29:
    assume $i50 == 1;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p51 := $M.6;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i52 := $sext.i16.i32($i45);
    call {:si_unique_call 697} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i52);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_26 := _dev_info.ref.ref.i32($p51, .str.90, $i52);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb16;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p6, $p7, $i8, $i9, $p10, $i11, $i12, $p13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i4 := xpc_die_deactivate_loop_$bb4($i5, $p6, $p7, $i8, $i9, $p10, $i11, $i12, $p13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i4);
    goto $bb4_last;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i64($i4);
    call {:si_unique_call 667} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p6 := $M.4;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i5, 872));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i4);
    call {:si_unique_call 668} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i8);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    call {:si_unique_call 669} {:cexpr "__cil_tmp12"} boogie_si_record_i16($i9);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p10 := $M.8;
    call {:si_unique_call 670} $i11 := devirtbounce.1($p10, $i9);
    call {:si_unique_call 671} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p7);
    call {:si_unique_call 674} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 112);
    call {:si_unique_call 675} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    call {:si_unique_call 676} {:cexpr "__cil_tmp15"} boogie_si_record_i8($i18);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    call {:si_unique_call 677} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i19);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32($i4);
    call {:si_unique_call 678} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i23);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    call {:si_unique_call 679} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i24);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 680} {:cexpr "partid"} boogie_si_record_i16($i25);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    call {:si_unique_call 681} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i27);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i25);
    call {:si_unique_call 682} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i28);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, $i27);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i25;
    goto $bb12_dummy;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p21 := $M.12;
    call {:si_unique_call 683} devirtbounce.3($p21, $p7);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p22 := $M.22;
    call {:si_unique_call 684} devirtbounce.3($p22, $p7);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p13 := $M.12;
    call {:si_unique_call 672} devirtbounce.3($p13, $p7);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p14 := $M.22;
    call {:si_unique_call 673} devirtbounce.3($p14, $p7);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb32_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1402;

  $bb39_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;
}



const ___udelay: ref;

axiom ___udelay == $sub.ref(0, 277840);

procedure ___udelay($i0: i64);
  free requires assertsPassed;



implementation ___udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "___udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    return;
}



const xpc_setup_partitions_uv: ref;

axiom xpc_setup_partitions_uv == $sub.ref(0, 278872);

procedure xpc_setup_partitions_uv() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation xpc_setup_partitions_uv() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i2: i16;
  var vslice_dummy_var_28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $i3, $p4, $p5, $i6, $i7, $p8, $i9, $i10, $p11, $i12, $i13, $p14, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i2, vslice_dummy_var_28 := xpc_setup_partitions_uv_loop_$bb1($p0, $p1, $i3, $p4, $p5, $i6, $i7, $p8, $i9, $i10, $p11, $i12, $i13, $p14, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i2, vslice_dummy_var_28);
    goto $bb1_last;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $sext.i16.i64($i2);
    call {:si_unique_call 713} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p4 := $M.4;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($i3, 872));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 714} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 576);
    call {:si_unique_call 715} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 716} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 40);
    call {:si_unique_call 717} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __mutex_init($p11, .str.122, $p0);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p8);
    call {:si_unique_call 719} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 208);
    call {:si_unique_call 720} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_28 := spinlock_check($p14);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p8);
    call {:si_unique_call 722} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 208);
    call {:si_unique_call 723} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __raw_spin_lock_init($p18, .str.123, $p1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p8);
    call {:si_unique_call 725} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 284);
    call {:si_unique_call 726} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i22 := $sext.i16.i32($i2);
    call {:si_unique_call 727} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i22);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    call {:si_unique_call 728} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i23);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    call {:si_unique_call 729} {:cexpr "partid"} boogie_si_record_i16($i24);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i25 := $sext.i16.i32($i24);
    call {:si_unique_call 730} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i25);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i26 := $sle.i32($i25, 255);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb3:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i24;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1441;
}



const xpc_teardown_partitions_uv: ref;

axiom xpc_teardown_partitions_uv == $sub.ref(0, 279904);

procedure xpc_teardown_partitions_uv();
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation xpc_teardown_partitions_uv()
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i0: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $p2, $p3, $i4, $i5, $p6, $i7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $i28, $i29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i0 := xpc_teardown_partitions_uv_loop_$bb1($i1, $p2, $p3, $i4, $i5, $p6, $i7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $i28, $i29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i0);
    goto $bb1_last;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i64($i0);
    call {:si_unique_call 731} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p2 := $M.4;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 872));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 732} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 576);
    call {:si_unique_call 733} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 734} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    call {:si_unique_call 735} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 32);
    call {:si_unique_call 736} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 737} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, $i7);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i0);
    call {:si_unique_call 758} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i38);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    call {:si_unique_call 759} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    call {:si_unique_call 760} {:cexpr "partid"} boogie_si_record_i16($i40);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i41 := $sext.i16.i32($i40);
    call {:si_unique_call 761} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i41);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i41, 255);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i40;
    goto $bb6_dummy;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p6);
    call {:si_unique_call 738} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 40);
    call {:si_unique_call 739} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} mutex_lock_nested($p16, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_spin_lock();
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p6);
    call {:si_unique_call 742} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 280);
    call {:si_unique_call 743} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p6);
    call {:si_unique_call 744} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 280);
    call {:si_unique_call 745} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 746} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i22);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 2));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i18);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p6);
    call {:si_unique_call 747} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 208);
    call {:si_unique_call 748} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p6);
    call {:si_unique_call 750} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i28);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 32);
    call {:si_unique_call 751} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i29);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} kfree($p31);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p6);
    call {:si_unique_call 753} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 32);
    call {:si_unique_call 754} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p6);
    call {:si_unique_call 755} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i35);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 40);
    call {:si_unique_call 756} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i36);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} mutex_unlock($p37);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1475;
}



const xpc_process_activate_IRQ_rcvd_uv: ref;

axiom xpc_process_activate_IRQ_rcvd_uv == $sub.ref(0, 280936);

procedure xpc_process_activate_IRQ_rcvd_uv();
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.0, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_process_activate_IRQ_rcvd_uv()
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i32;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i1;
  var $i0: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_spin_lock();
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $p2, $p3, $i4, $i5, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i0 := xpc_process_activate_IRQ_rcvd_uv_loop_$bb1($i1, $p2, $p3, $i4, $i5, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i0);
    goto $bb1_last;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i64($i0);
    call {:si_unique_call 763} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p2 := $M.4;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 872));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i4 := $add.i64(576, 285);
    call {:si_unique_call 764} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i4);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    call {:si_unique_call 765} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i5);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $i4);
    call {:si_unique_call 766} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 767} {:cexpr "__cil_tmp11"} boogie_si_record_i8($i8);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 768} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i9);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $M.28;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i11, 1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.28 := $i12;
    call {:si_unique_call 773} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i12);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i13 := $M.28;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 774} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i15);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 775} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i17 := __builtinx_expect.i64.i64($i16, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $add.i64(576, 285);
    call {:si_unique_call 779} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p3);
    call {:si_unique_call 780} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, $i20);
    call {:si_unique_call 781} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    call {:si_unique_call 782} {:cexpr "act_state_req"} boogie_si_record_i8($i24);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i25 := $add.i64(576, 285);
    call {:si_unique_call 783} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i25);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p3);
    call {:si_unique_call 784} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i26);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, $i25);
    call {:si_unique_call 785} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i27);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i24);
    call {:si_unique_call 787} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i29);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} ldv_spin_lock();
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i58 := $M.28;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i60 := $sext.i16.i32($i0);
    call {:si_unique_call 769} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i60);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    call {:si_unique_call 770} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i61);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    call {:si_unique_call 771} {:cexpr "partid"} boogie_si_record_i16($i62);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i63 := $sext.i16.i32($i62);
    call {:si_unique_call 772} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i63);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i63, 255);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i64 == 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i62;
    goto $bb34_dummy;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p3);
    call {:si_unique_call 788} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i31);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 112);
    call {:si_unique_call 789} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i32);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    call {:si_unique_call 790} {:cexpr "__cil_tmp26"} boogie_si_record_i8($i34);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    call {:si_unique_call 791} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i35);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p3);
    call {:si_unique_call 793} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i37);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 112);
    call {:si_unique_call 794} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i38);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    call {:si_unique_call 795} {:cexpr "__cil_tmp30"} boogie_si_record_i8($i40);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    call {:si_unique_call 796} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i41);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 4);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i24);
    call {:si_unique_call 798} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i43);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i24);
    call {:si_unique_call 803} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i51);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 3);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    call {:si_unique_call 811} devirtbounce.7(0, .str.114, 421, 12);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call xpc_process_activate_IRQ_rcvd_uv_loop_$bb28();
    goto $bb28_last;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i53 := $add.i64(576, 288);
    call {:si_unique_call 806} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i53);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p3);
    call {:si_unique_call 807} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i54);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $i53);
    call {:si_unique_call 808} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i55);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    call {:si_unique_call 809} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i57);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} xpc_deactivate_partition(418, $p3, $i57);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p3);
    call {:si_unique_call 799} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i45);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 112);
    call {:si_unique_call 800} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i46);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    call {:si_unique_call 801} {:cexpr "__cil_tmp37"} boogie_si_record_i8($i48);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    call {:si_unique_call 802} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i49);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} xpc_deactivate_partition(415, $p3, 21);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} xpc_activate_partition($p3);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} xpc_deactivate_partition(409, $p3, 21);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} xpc_activate_partition($p3);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i19 == 1;
    call {:si_unique_call 778} devirtbounce.7(0, .str.114, 399, 12);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call xpc_process_activate_IRQ_rcvd_uv_loop_$bb9();
    goto $bb9_last;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb28_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb9_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb34_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;
}



const xpc_get_partition_rsvd_page_pa_uv: ref;

axiom xpc_get_partition_rsvd_page_pa_uv == $sub.ref(0, 281968);

procedure xpc_get_partition_rsvd_page_pa_uv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_get_partition_rsvd_page_pa_uv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $i9: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 814} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i5 := uv_bios_reserved_page_pa($i4, $p1, $p2, $p3);
    call {:si_unique_call 816} {:cexpr "status"} boogie_si_record_i64($i5);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 62;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i9 := 57;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const xpc_setup_rsvd_page_uv: ref;

axiom xpc_setup_rsvd_page_uv == $sub.ref(0, 283000);

procedure xpc_setup_rsvd_page_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0;



implementation xpc_setup_rsvd_page_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i1 := $add.i64(576, 8);
    call {:si_unique_call 817} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, sn_partition_id);
    call {:si_unique_call 818} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p3 := $M.4;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i2, 872));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 819} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $i1);
    call {:si_unique_call 820} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.29 := $p7;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 821} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 32);
    call {:si_unique_call 822} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p10 := $M.29;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i12 := uv_gpa($p11);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i9);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i14 := $add.i64(32, 8);
    call {:si_unique_call 824} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 825} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i14);
    call {:si_unique_call 826} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p17 := $M.18;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    call {:si_unique_call 827} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i18);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 48);
    call {:si_unique_call 828} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i22 := uv_gpa($p21);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i16);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const xpc_allow_hb_uv: ref;

axiom xpc_allow_hb_uv == $sub.ref(0, 284032);

procedure xpc_allow_hb_uv($i0: i16);
  free requires assertsPassed;



implementation xpc_allow_hb_uv($i0: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "xpc_allow_hb_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    return;
}



const xpc_disallow_hb_uv: ref;

axiom xpc_disallow_hb_uv == $sub.ref(0, 285064);

procedure xpc_disallow_hb_uv($i0: i16);
  free requires assertsPassed;



implementation xpc_disallow_hb_uv($i0: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "xpc_disallow_hb_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    return;
}



const xpc_disallow_all_hbs_uv: ref;

axiom xpc_disallow_all_hbs_uv == $sub.ref(0, 286096);

procedure xpc_disallow_all_hbs_uv();
  free requires assertsPassed;



implementation xpc_disallow_all_hbs_uv()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    return;
}



const xpc_increment_heartbeat_uv: ref;

axiom xpc_increment_heartbeat_uv == $sub.ref(0, 287128);

procedure xpc_increment_heartbeat_uv();
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_increment_heartbeat_uv()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p0 := $M.29;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    call {:si_unique_call 832} {:cexpr "__cil_tmp1"} boogie_si_record_i64($i2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p4 := $M.29;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i3);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    return;
}



const xpc_offline_heartbeat_uv: ref;

axiom xpc_offline_heartbeat_uv == $sub.ref(0, 288160);

procedure xpc_offline_heartbeat_uv();
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_offline_heartbeat_uv()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} xpc_increment_heartbeat_uv();
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p0 := $M.29;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 834} {:cexpr "__cil_tmp1"} boogie_si_record_i64($i1);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 835} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i2);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    return;
}



const xpc_online_heartbeat_uv: ref;

axiom xpc_online_heartbeat_uv == $sub.ref(0, 289192);

procedure xpc_online_heartbeat_uv();
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_online_heartbeat_uv()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} xpc_increment_heartbeat_uv();
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p0 := $M.29;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 837} {:cexpr "__cil_tmp1"} boogie_si_record_i64($i1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 838} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i2);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    return;
}



const xpc_heartbeat_init_uv: ref;

axiom xpc_heartbeat_init_uv == $sub.ref(0, 290224);

procedure xpc_heartbeat_init_uv();
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_heartbeat_init_uv()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p0 := $M.29;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, 1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p2 := $M.29;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 839} {:cexpr "__cil_tmp1"} boogie_si_record_i64($i3);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 8);
    call {:si_unique_call 840} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i4);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    return;
}



const xpc_heartbeat_exit_uv: ref;

axiom xpc_heartbeat_exit_uv == $sub.ref(0, 291256);

procedure xpc_heartbeat_exit_uv();
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_heartbeat_exit_uv()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} xpc_offline_heartbeat_uv();
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    return;
}



const xpc_get_remote_heartbeat_uv: ref;

axiom xpc_get_remote_heartbeat_uv == $sub.ref(0, 292288);

procedure xpc_get_remote_heartbeat_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_get_remote_heartbeat_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i29: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i37: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 842} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 576);
    call {:si_unique_call 843} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 844} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 8);
    call {:si_unique_call 845} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i8 := uv_gpa($p7);
    call {:si_unique_call 847} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    call {:si_unique_call 848} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, xp_remote_memcpy);
    call {:si_unique_call 849} $i12 := devirtbounce.21($p11, $i8, $i10, 16);
    call {:si_unique_call 850} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 851} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 24);
    call {:si_unique_call 852} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    call {:si_unique_call 853} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p3);
    call {:si_unique_call 854} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i19);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 8);
    call {:si_unique_call 855} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    call {:si_unique_call 856} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i22);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, $i18);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    call {:si_unique_call 860} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 24);
    call {:si_unique_call 861} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p3);
    call {:si_unique_call 862} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i40);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 8);
    call {:si_unique_call 863} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i41);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    call {:si_unique_call 864} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i43);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i39);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i43);
    assume {:verifier.code 0} true;
    $i37 := $i12;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i14 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p3);
    call {:si_unique_call 857} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 16);
    call {:si_unique_call 858} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    call {:si_unique_call 859} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 865} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 24);
    call {:si_unique_call 866} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p3);
    call {:si_unique_call 867} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 8);
    call {:si_unique_call 868} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    call {:si_unique_call 869} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i35);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i31);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    assume {:verifier.code 0} true;
    $i29 := $i12;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i37 := $i29;
    goto $bb10;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i29 := 26;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;
}



const xpc_request_partition_activation_uv: ref;

axiom xpc_request_partition_activation_uv == $sub.ref(0, 293320);

procedure xpc_request_partition_activation_uv($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.28, $CurrAddr, $M.21, assertsPassed, $M.3;



implementation xpc_request_partition_activation_uv($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 871} {:cexpr "xpc_request_partition_activation_uv:arg:remote_rp_gpa"} boogie_si_record_i64($i1);
    call {:si_unique_call 872} {:cexpr "xpc_request_partition_activation_uv:arg:nasid"} boogie_si_record_i32($i2);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 873} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 16);
    call {:si_unique_call 874} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 875} {:cexpr "partid"} boogie_si_record_i16($i7);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i64($i7);
    call {:si_unique_call 876} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p9 := $M.4;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($i8, 872));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 877} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 16);
    call {:si_unique_call 878} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p10);
    call {:si_unique_call 879} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 880} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 881} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 24);
    call {:si_unique_call 882} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i15);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p10);
    call {:si_unique_call 883} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 576);
    call {:si_unique_call 884} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    call {:si_unique_call 885} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i23);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 32);
    call {:si_unique_call 886} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i24);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i22);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i28 := $add.i64(576, 24);
    call {:si_unique_call 887} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i28);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p10);
    call {:si_unique_call 888} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i29);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i28);
    call {:si_unique_call 889} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i30);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i31 := $add.i64(32, 8);
    call {:si_unique_call 890} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 891} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i32);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, $i31);
    call {:si_unique_call 892} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i33);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i30);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i37 := $add.i64(576, 284);
    call {:si_unique_call 893} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p10);
    call {:si_unique_call 894} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, $i37);
    call {:si_unique_call 895} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    call {:si_unique_call 896} {:cexpr "__cil_tmp32"} boogie_si_record_i8($i41);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    call {:si_unique_call 897} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i42);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p10);
    call {:si_unique_call 908} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i68);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 112);
    call {:si_unique_call 909} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i69);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    call {:si_unique_call 910} {:cexpr "__cil_tmp47"} boogie_si_record_i8($i71);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    call {:si_unique_call 911} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i72);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i73 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} xpc_send_local_activate_IRQ_uv($p10, 1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i43 == 1;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p3);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 16);
    call {:si_unique_call 898} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i45);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p46 := $M.15;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i48 := uv_gpa($p47);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i45);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i48);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p3);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 24);
    call {:si_unique_call 900} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i51);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p52 := $M.15;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    call {:si_unique_call 901} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i53);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 32);
    call {:si_unique_call 902} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i54);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i51);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p3);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 32);
    call {:si_unique_call 903} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i59);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i60 := $add.i64(32, 8);
    call {:si_unique_call 904} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i60);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p61 := $M.15;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    call {:si_unique_call 905} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i62);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, $i60);
    call {:si_unique_call 906} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i63);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i59);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i65);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} xpc_send_activate_IRQ_part_uv($p10, $p67, 40, 1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const xpc_request_partition_reactivation_uv: ref;

axiom xpc_request_partition_reactivation_uv == $sub.ref(0, 294352);

procedure xpc_request_partition_reactivation_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.0;



implementation xpc_request_partition_reactivation_uv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} xpc_send_local_activate_IRQ_uv($p0, 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    return;
}



const xpc_request_partition_deactivation_uv: ref;

axiom xpc_request_partition_deactivation_uv == $sub.ref(0, 295384);

procedure xpc_request_partition_deactivation_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.1, $M.21, $M.28, assertsPassed, $M.3;



implementation xpc_request_partition_deactivation_uv($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i2 := $add.i64(576, 284);
    call {:si_unique_call 915} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 916} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $i2);
    call {:si_unique_call 917} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 918} {:cexpr "__cil_tmp7"} boogie_si_record_i8($i6);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 919} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i7);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 4);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i9 := $add.i64(576, 284);
    call {:si_unique_call 920} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 921} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, $i9);
    call {:si_unique_call 922} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 923} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i13);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 924} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i14);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 16);
    call {:si_unique_call 925} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 926} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 116);
    call {:si_unique_call 927} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i19);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i17);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} xpc_send_activate_IRQ_part_uv($p0, $p23, 24, 2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const xpc_cancel_partition_deactivation_request_uv: ref;

axiom xpc_cancel_partition_deactivation_request_uv == $sub.ref(0, 296416);

procedure xpc_cancel_partition_deactivation_request_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_cancel_partition_deactivation_request_uv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    return;
}



const xpc_setup_ch_structures_uv: ref;

axiom xpc_setup_ch_structures_uv == $sub.ref(0, 297448);

procedure xpc_setup_ch_structures_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation xpc_setup_ch_structures_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 929} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 364);
    call {:si_unique_call 930} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i2);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    call {:si_unique_call 931} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i4);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    call {:si_unique_call 932} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i5);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $p11, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i7 := xpc_setup_ch_structures_uv_loop_$bb4($p0, $p3, $i8, $i9, $i10, $p11, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i7);
    goto $bb4_last;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    call {:si_unique_call 933} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i8);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 934} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i9);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 376);
    call {:si_unique_call 935} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i10);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($i8, 720));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    call {:si_unique_call 936} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i14);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 432);
    call {:si_unique_call 937} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i15);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 938} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i17);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 24);
    call {:si_unique_call 939} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i18);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} xpc_init_fifo_uv($p19);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p16);
    call {:si_unique_call 941} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 120);
    call {:si_unique_call 942} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i21);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} xpc_init_fifo_uv($p22);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i7, 1);
    call {:si_unique_call 944} {:cexpr "ch_number"} boogie_si_record_i32($i23);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p3);
    call {:si_unique_call 945} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i24);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    call {:si_unique_call 946} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i25);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, $i23);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;
}



const xpc_teardown_ch_structures_uv: ref;

axiom xpc_teardown_ch_structures_uv == $sub.ref(0, 298480);

procedure xpc_teardown_ch_structures_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_teardown_ch_structures_uv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    return;
}



const xpc_make_first_contact_uv: ref;

axiom xpc_make_first_contact_uv == $sub.ref(0, 299512);

procedure xpc_make_first_contact_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $CurrAddr, $M.1, $M.21, $M.28, assertsPassed, $M.3;



implementation xpc_make_first_contact_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i16;
  var $i43: i32;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i56: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} xpc_send_activate_IRQ_part_uv($p0, $p3, 16, 0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i4 := $add.i64(576, 284);
    call {:si_unique_call 950} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i4);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 951} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i5);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $i4);
    call {:si_unique_call 952} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i6);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 953} {:cexpr "__cil_tmp33"} boogie_si_record_i8($i8);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 954} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i9);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 2);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i46, $i47, $p48, $i49, $i50, $i51, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, vslice_dummy_var_29, vslice_dummy_var_30 := xpc_make_first_contact_uv_loop_$bb4($p0, $p2, $p7, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i46, $i47, $p48, $i49, $i50, $i51, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, vslice_dummy_var_29, vslice_dummy_var_30);
    goto $bb4_last;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p0);
    call {:si_unique_call 956} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i61);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, $i60);
    call {:si_unique_call 957} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i62);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    call {:si_unique_call 958} {:cexpr "__cil_tmp39"} boogie_si_record_i8($i64);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    call {:si_unique_call 959} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i65);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 3);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i66 == 1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume $i66 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p11, .str);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 8);
    call {:si_unique_call 960} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i13);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, .str.129);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p2);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 16);
    call {:si_unique_call 961} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i16);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, .str.114);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 24);
    call {:si_unique_call 962} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i19);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, .str.130);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p2);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 32);
    call {:si_unique_call 963} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i22);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1067);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 35);
    call {:si_unique_call 964} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i25);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 35);
    call {:si_unique_call 965} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i28);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    call {:si_unique_call 966} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i30);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    call {:si_unique_call 967} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i31);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    call {:si_unique_call 968} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i32);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i33 := __builtinx_expect.i64.i64($i32, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 970} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_30 := msleep_interruptible(250);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 979} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i46);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 112);
    call {:si_unique_call 980} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i47);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    call {:si_unique_call 981} {:cexpr "__cil_tmp25"} boogie_si_record_i8($i49);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    call {:si_unique_call 982} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i50);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 4);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p7);
    call {:si_unique_call 985} {:cexpr "__cil_tmp33"} boogie_si_record_i8($i57);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    call {:si_unique_call 986} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i58);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 2);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i59 == 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb13_dummy;

  $bb9:
    assume $i51 == 1;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p0);
    call {:si_unique_call 983} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i52);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 116);
    call {:si_unique_call 984} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i53);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb11;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p36 := $M.6;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p37 := $M.4;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    call {:si_unique_call 971} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i38);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 972} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i39);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64($i39, $i38);
    call {:si_unique_call 973} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i40);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i41 := $sdiv.i64($i40, 896);
    call {:si_unique_call 974} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i41);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i16($i41);
    call {:si_unique_call 975} {:cexpr "__cil_tmp21"} boogie_si_record_i16($i42);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i43 := $sext.i16.i32($i42);
    call {:si_unique_call 976} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i43);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_29 := __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p36, .str.130, $i43);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $i60 := $add.i64(576, 284);
    call {:si_unique_call 955} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i60);
    goto corral_source_split_1963;
}



const xpc_get_chctl_all_flags_uv: ref;

axiom xpc_get_chctl_all_flags_uv == $sub.ref(0, 300544);

procedure xpc_get_chctl_all_flags_uv($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation xpc_get_chctl_all_flags_uv($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ldv_spin_lock();
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 989} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 384);
    call {:si_unique_call 990} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 991} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 994} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i13);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 392);
    call {:si_unique_call 995} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i14);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} spin_unlock_irqrestore($p15, $u0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 992} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i10);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 384);
    call {:si_unique_call 993} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i11);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_send_chctl_closerequest_uv: ref;

axiom xpc_send_chctl_closerequest_uv == $sub.ref(0, 301576);

procedure xpc_send_chctl_closerequest_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, $M.28, $M.21, assertsPassed, $M.3;



implementation xpc_send_chctl_closerequest_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 16);
    call {:si_unique_call 998} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 999} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 92);
    call {:si_unique_call 1000} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 1001} {:cexpr "__cil_tmp7"} boogie_si_record_i16($i8);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i4);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i8);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 20);
    call {:si_unique_call 1002} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i11);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 84);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i11);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p17, 24, 3);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_closereply_uv: ref;

axiom xpc_send_chctl_closereply_uv == $sub.ref(0, 302608);

procedure xpc_send_chctl_closereply_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, $M.28, $M.21, assertsPassed, $M.3;



implementation xpc_send_chctl_closereply_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 16);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1008} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 92);
    call {:si_unique_call 1009} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 1010} {:cexpr "__cil_tmp7"} boogie_si_record_i16($i8);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i4);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i8);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p10, 24, 4);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_openrequest_uv: ref;

axiom xpc_send_chctl_openrequest_uv == $sub.ref(0, 303640);

procedure xpc_send_chctl_openrequest_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, $M.28, $M.21, assertsPassed, $M.3;



implementation xpc_send_chctl_openrequest_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 16);
    call {:si_unique_call 1013} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1014} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 92);
    call {:si_unique_call 1015} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 1016} {:cexpr "__cil_tmp7"} boogie_si_record_i16($i8);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i4);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i8);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 18);
    call {:si_unique_call 1017} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i11);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1018} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 94);
    call {:si_unique_call 1019} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    call {:si_unique_call 1020} {:cexpr "__cil_tmp11"} boogie_si_record_i16($i15);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i11);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i15);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 20);
    call {:si_unique_call 1021} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i18);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1022} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i19);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 96);
    call {:si_unique_call 1023} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    call {:si_unique_call 1024} {:cexpr "__cil_tmp15"} boogie_si_record_i16($i22);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i18);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p24, 24, 5);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_openreply_uv: ref;

axiom xpc_send_chctl_openreply_uv == $sub.ref(0, 304672);

procedure xpc_send_chctl_openreply_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, $M.28, $M.21, assertsPassed, $M.3;



implementation xpc_send_chctl_openreply_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 16);
    call {:si_unique_call 1027} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1028} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 92);
    call {:si_unique_call 1029} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 1030} {:cexpr "__cil_tmp7"} boogie_si_record_i16($i8);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i4);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i8);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 20);
    call {:si_unique_call 1031} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i11);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1032} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 96);
    call {:si_unique_call 1033} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    call {:si_unique_call 1034} {:cexpr "__cil_tmp11"} boogie_si_record_i16($i15);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i11);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i15);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 18);
    call {:si_unique_call 1035} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i18);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1036} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i19);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 98);
    call {:si_unique_call 1037} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    call {:si_unique_call 1038} {:cexpr "__cil_tmp15"} boogie_si_record_i16($i22);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i18);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 24);
    call {:si_unique_call 1039} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i25);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p26 := $M.17;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    call {:si_unique_call 1040} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i27);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 48);
    call {:si_unique_call 1041} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i28);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i31 := uv_gpa($p30);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i25);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p33, 32, 6);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_opencomplete_uv: ref;

axiom xpc_send_chctl_opencomplete_uv == $sub.ref(0, 305704);

procedure xpc_send_chctl_opencomplete_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, $M.28, $M.21, assertsPassed, $M.3;



implementation xpc_send_chctl_opencomplete_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 16);
    call {:si_unique_call 1045} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1046} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 92);
    call {:si_unique_call 1047} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 1048} {:cexpr "__cil_tmp7"} boogie_si_record_i16($i8);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i4);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i8);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p10, 24, 7);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const xpc_process_msg_chctl_flags_uv: ref;

axiom xpc_process_msg_chctl_flags_uv == $sub.ref(0, 306736);

procedure xpc_process_msg_chctl_flags_uv($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.21, $M.14, $M.0, $M.1, $CurrAddr, $M.3, $M.28, assertsPassed;



implementation xpc_process_msg_chctl_flags_uv($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "xpc_process_msg_chctl_flags_uv:arg:ch_number"} boogie_si_record_i32($i1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    call {:si_unique_call 1051} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 1052} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 376);
    call {:si_unique_call 1053} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 720));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} xpc_msgqueue_ref($p7);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i8 := xpc_n_of_deliverable_payloads_uv($p7);
    call {:si_unique_call 1056} {:cexpr "ndeliverable_payloads"} boogie_si_record_i32($i8);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} xpc_msgqueue_deref($p7);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    call {:si_unique_call 1057} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i10);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 80);
    call {:si_unique_call 1058} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1059} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i13);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1024);
    call {:si_unique_call 1060} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i14);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p7);
    call {:si_unique_call 1061} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 80);
    call {:si_unique_call 1062} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 1063} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i19);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 512);
    call {:si_unique_call 1064} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i20);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} xpc_activate_kthreads($p7, $i8);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const xpc_save_remote_msgqueue_pa_uv: ref;

axiom xpc_save_remote_msgqueue_pa_uv == $sub.ref(0, 307768);

procedure xpc_save_remote_msgqueue_pa_uv($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_save_remote_msgqueue_pa_uv($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} {:cexpr "xpc_save_remote_msgqueue_pa_uv:arg:gru_mq_desc_gpa"} boogie_si_record_i64($i1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1068} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 432);
    call {:si_unique_call 1069} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i8 := xpc_cache_remote_gru_mq_desc_uv($p7, $i1);
    call {:si_unique_call 1071} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const xpc_setup_msg_structures_uv: ref;

axiom xpc_setup_msg_structures_uv == $sub.ref(0, 308800);

procedure xpc_setup_msg_structures_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation xpc_setup_msg_structures_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1072} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 432);
    call {:si_unique_call 1073} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p4 := kmalloc(32, 208);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1075} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 1076} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, $i6);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i12 := xpc_allocate_send_msg_slot_uv($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1078} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i12;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i14 := xpc_allocate_recv_msg_slot_uv($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 1080} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $i14;
    goto $bb10;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p3);
    call {:si_unique_call 1081} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i16);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 8);
    call {:si_unique_call 1082} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i17);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} kfree($p20);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p3);
    call {:si_unique_call 1084} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 24);
    call {:si_unique_call 1085} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} xpc_init_fifo_uv($p23);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i11 := 13;
    goto $bb3;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const xpc_teardown_msg_structures_uv: ref;

axiom xpc_teardown_msg_structures_uv == $sub.ref(0, 309832);

procedure xpc_teardown_msg_structures_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation xpc_teardown_msg_structures_uv($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1087} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 432);
    call {:si_unique_call 1088} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} kfree($p5);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 1090} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 80);
    call {:si_unique_call 1091} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 1092} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i10);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 128);
    call {:si_unique_call 1093} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i11);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p3);
    call {:si_unique_call 1094} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 24);
    call {:si_unique_call 1095} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} xpc_init_fifo_uv($p15);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p3);
    call {:si_unique_call 1097} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 8);
    call {:si_unique_call 1098} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} kfree($p20);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p3);
    call {:si_unique_call 1100} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 120);
    call {:si_unique_call 1101} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i22);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} xpc_init_fifo_uv($p23);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p3);
    call {:si_unique_call 1103} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i24);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 16);
    call {:si_unique_call 1104} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} kfree($p27);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_indicate_partition_engaged_uv: ref;

axiom xpc_indicate_partition_engaged_uv == $sub.ref(0, 310864);

procedure xpc_indicate_partition_engaged_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.1, $M.21, $M.28, assertsPassed, $M.3;



implementation xpc_indicate_partition_engaged_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} xpc_send_activate_IRQ_part_uv($p0, $p2, 16, 8);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const xpc_indicate_partition_disengaged_uv: ref;

axiom xpc_indicate_partition_disengaged_uv == $sub.ref(0, 311896);

procedure xpc_indicate_partition_disengaged_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.1, $M.21, $M.28, assertsPassed, $M.3;



implementation xpc_indicate_partition_disengaged_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} xpc_send_activate_IRQ_part_uv($p0, $p2, 16, 9);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const xpc_assume_partition_disengaged_uv: ref;

axiom xpc_assume_partition_disengaged_uv == $sub.ref(0, 312928);

procedure xpc_assume_partition_disengaged_uv($i0: i16);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation xpc_assume_partition_disengaged_uv($i0: i16)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} {:cexpr "xpc_assume_partition_disengaged_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i64($i0);
    call {:si_unique_call 1111} {:cexpr "xpc_assume_partition_disengaged_uv:arg:__cil_tmp4"} boogie_si_record_i16($i0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p2 := $M.4;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 872));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 1112} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 576);
    call {:si_unique_call 1113} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_spin_lock();
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    call {:si_unique_call 1115} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 280);
    call {:si_unique_call 1116} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    call {:si_unique_call 1117} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 280);
    call {:si_unique_call 1118} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1119} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i12);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 3));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i8);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p6);
    call {:si_unique_call 1120} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 208);
    call {:si_unique_call 1121} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    return;
}



const xpc_partition_engaged_uv: ref;

axiom xpc_partition_engaged_uv == $sub.ref(0, 313960);

procedure xpc_partition_engaged_uv($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_partition_engaged_uv($i0: i16) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} {:cexpr "xpc_partition_engaged_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i1 := $add.i64(576, 280);
    call {:si_unique_call 1124} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i64($i0);
    call {:si_unique_call 1125} {:cexpr "xpc_partition_engaged_uv:arg:__cil_tmp4"} boogie_si_record_i16($i0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p3 := $M.4;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i2, 872));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1126} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $i1);
    call {:si_unique_call 1127} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1128} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i8);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2);
    call {:si_unique_call 1129} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const xpc_any_partition_engaged_uv: ref;

axiom xpc_any_partition_engaged_uv == $sub.ref(0, 314992);

procedure xpc_any_partition_engaged_uv() returns ($r: i32);
  free requires assertsPassed;



implementation xpc_any_partition_engaged_uv() returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i0: i16;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $p2, $p3, $i4, $i5, $p6, $i7, $i8, $p9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i0 := xpc_any_partition_engaged_uv_loop_$bb1($i1, $p2, $p3, $i4, $i5, $p6, $i7, $i8, $p9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i0);
    goto $bb1_last;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i64($i0);
    call {:si_unique_call 1130} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p2 := $M.4;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 872));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 1131} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 576);
    call {:si_unique_call 1132} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    call {:si_unique_call 1133} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 280);
    call {:si_unique_call 1134} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 1135} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i10);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    call {:si_unique_call 1136} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i11);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i0);
    call {:si_unique_call 1137} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i14);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    call {:si_unique_call 1138} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i15);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 1139} {:cexpr "partid"} boogie_si_record_i16($i16);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i32($i16);
    call {:si_unique_call 1140} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i17);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 255);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i16;
    goto $bb7_dummy;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;
}



const xpc_n_of_deliverable_payloads_uv: ref;

axiom xpc_n_of_deliverable_payloads_uv == $sub.ref(0, 316024);

procedure xpc_n_of_deliverable_payloads_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_n_of_deliverable_payloads_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i1 := $add.i64(432, 120);
    call {:si_unique_call 1141} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1142} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $i1);
    call {:si_unique_call 1143} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i5 := xpc_n_of_fifo_entries_uv($p4);
    call {:si_unique_call 1145} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const xpc_send_payload_uv: ref;

axiom xpc_send_payload_uv == $sub.ref(0, 317056);

procedure xpc_send_payload_uv($p0: ref, $i1: i32, $p2: ref, $i3: i16, $i4: i8, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.0, $M.14, $M.1, $M.28, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_send_payload_uv($p0: ref, $i1: i32, $p2: ref, $i3: i16, $i4: i8, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i16;
  var $i15: i64;
  var $i16: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i16;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i16;
  var $i73: i8;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i8;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i16;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i61: i32;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p114: ref;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i28: i32;
  var $i17: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p8 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 1148} {:cexpr "xpc_send_payload_uv:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 1149} {:cexpr "xpc_send_payload_uv:arg:payload_size"} boogie_si_record_i16($i3);
    call {:si_unique_call 1150} {:cexpr "xpc_send_payload_uv:arg:notify_type"} boogie_si_record_i8($i4);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p7, $0.ref);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i3);
    call {:si_unique_call 1151} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i9);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 16);
    call {:si_unique_call 1152} {:cexpr "msg_size"} boogie_si_record_i64($i10);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 1153} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i11);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 94);
    call {:si_unique_call 1154} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i12);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    call {:si_unique_call 1155} {:cexpr "__cil_tmp26"} boogie_si_record_i16($i14);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i64($i14);
    call {:si_unique_call 1156} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i15);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64($i15, $i10);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} xpc_msgqueue_ref($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 1158} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i18);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 80);
    call {:si_unique_call 1159} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i19);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 1160} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i21);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 131072);
    call {:si_unique_call 1161} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i22);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 1166} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i29);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 80);
    call {:si_unique_call 1167} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i30);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 1168} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i32);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1024);
    call {:si_unique_call 1169} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i33);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i35 := xpc_allocate_msg_slot_uv($p0, $i1, $p7);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 1171} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1172} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i37);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p5);
    call {:si_unique_call 1173} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i38);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i37);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p8);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    call {:si_unique_call 1191} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i63);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 8);
    call {:si_unique_call 1192} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i64);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, xp_partition_id);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i64);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, $i65);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p62);
    call {:si_unique_call 1193} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i67);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 10);
    call {:si_unique_call 1194} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i68);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    call {:si_unique_call 1195} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i69);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 92);
    call {:si_unique_call 1196} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i70);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    call {:si_unique_call 1197} {:cexpr "__cil_tmp67"} boogie_si_record_i16($i72);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i16.i8($i72);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i68);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p62);
    call {:si_unique_call 1198} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i75);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 11);
    call {:si_unique_call 1199} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i76);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i8($i10);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i76);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i77);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p62);
    call {:si_unique_call 1200} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i79);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 12);
    call {:si_unique_call 1201} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i80);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.30, $p7);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    call {:si_unique_call 1202} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i82);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 8);
    call {:si_unique_call 1203} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i83);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i80);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i64($i3);
    call {:si_unique_call 1204} {:cexpr "__len"} boogie_si_record_i64($i87);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p62);
    call {:si_unique_call 1205} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i88);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 16);
    call {:si_unique_call 1206} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i89);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 1207} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p91, $p2, $i87, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p0);
    call {:si_unique_call 1208} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i92);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 432);
    call {:si_unique_call 1209} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i93);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p62);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i98 := xpc_send_gru_msg($p96, $p97, $i10);
    call {:si_unique_call 1211} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    call {:si_unique_call 1212} {:cexpr "__cil_tmp90"} boogie_si_record_i16($i101);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i102 := $sext.i16.i64($i101);
    call {:si_unique_call 1213} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i102);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p103 := $M.4;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref($i102, 872));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} xpc_deactivate_partition(1599, $p104, $i98);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i61 := $i98;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1189} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i105);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p5);
    call {:si_unique_call 1190} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i106);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, $i105);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.30, $p7);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} xpc_free_msg_slot_uv($p0, $p143);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i28 := $i61;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} xpc_msgqueue_deref($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i17 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i107 == 1;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb27, $bb28;

  $bb28:
    assume !(1 == 1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} __cmpxchg_wrong_size();
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p114 := $u7;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p5);
    call {:si_unique_call 1222} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i133);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p114);
    call {:si_unique_call 1223} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i134);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, $i133);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.30, $p7);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    call {:si_unique_call 1230} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i137);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i138 := $add.i64($i137, 24);
    call {:si_unique_call 1231} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i138);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p139 := $i2p.i64.ref($i138);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $0.ref);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p0);
    call {:si_unique_call 1232} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i140);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 204);
    call {:si_unique_call 1233} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i141);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} atomic_dec($p142);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i135 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb7;

  $bb27:
    assume 1 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.30, $p7);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    call {:si_unique_call 1215} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i128);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 16);
    call {:si_unique_call 1216} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i129);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i129);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    call {:si_unique_call 1217} $p132 := devirtbounce.25(0, $p131, $0.ref, $p5, $p131);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p114 := $p132;
    goto $bb35;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i99 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i28 := $i98;
    goto $bb7;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 1174} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i40);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 204);
    call {:si_unique_call 1175} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i41);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} atomic_inc($p42);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.30, $p7);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    call {:si_unique_call 1177} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i44);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 24);
    call {:si_unique_call 1178} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i45);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p6);
    call {:si_unique_call 1179} devirtbounce.4(0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.30, $p7);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    call {:si_unique_call 1180} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i48);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 16);
    call {:si_unique_call 1181} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i49);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p5);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 1182} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i51);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 80);
    call {:si_unique_call 1183} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i52);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 1184} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i54);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 131072);
    call {:si_unique_call 1185} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i55);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p0);
    call {:si_unique_call 1186} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i57);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 84);
    call {:si_unique_call 1187} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i58);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 1188} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb19;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i28 := $i35;
    goto $bb7;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb7;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 1162} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i24);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 84);
    call {:si_unique_call 1163} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i25);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 1164} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb7;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i17 := 55;
    goto $bb3;
}



const xpc_get_deliverable_payload_uv: ref;

axiom xpc_get_deliverable_payload_uv == $sub.ref(0, 318088);

procedure xpc_get_deliverable_payload_uv($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation xpc_get_deliverable_payload_uv($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1236} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 80);
    call {:si_unique_call 1237} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 1238} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i4);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 131072);
    call {:si_unique_call 1239} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i5);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i7 := $add.i64(432, 120);
    call {:si_unique_call 1240} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 1241} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i7);
    call {:si_unique_call 1242} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p11 := xpc_get_fifo_entry_uv($p10);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1244} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p12);
    call {:si_unique_call 1245} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, $i13);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p12);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 1246} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 16);
    call {:si_unique_call 1247} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i18);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p21 := $p19;
    goto $bb5;
}



const xpc_received_payload_uv: ref;

axiom xpc_received_payload_uv == $sub.ref(0, 319120);

procedure xpc_received_payload_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, $M.3, assertsPassed;



implementation xpc_received_payload_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i16;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 24));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1248} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 8);
    call {:si_unique_call 1249} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, xp_partition_id);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i6);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i7);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p4);
    call {:si_unique_call 1250} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 11);
    call {:si_unique_call 1251} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1252} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 432);
    call {:si_unique_call 1253} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i18 := xpc_send_gru_msg($p16, $p17, 16);
    call {:si_unique_call 1255} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    call {:si_unique_call 1256} {:cexpr "__cil_tmp20"} boogie_si_record_i16($i21);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i22 := $sext.i16.i64($i21);
    call {:si_unique_call 1257} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p23 := $M.4;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($i22, 872));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} xpc_deactivate_partition(1689, $p24, $i18);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const xpc_notify_senders_of_disconnect_uv: ref;

axiom xpc_notify_senders_of_disconnect_uv == $sub.ref(0, 320152);

procedure xpc_notify_senders_of_disconnect_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.21, $M.0, $M.14, $CurrAddr, $M.1, $M.28, assertsPassed, $M.3;



implementation xpc_notify_senders_of_disconnect_uv($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1259} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 96);
    call {:si_unique_call 1260} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    call {:si_unique_call 1261} {:cexpr "__cil_tmp26"} boogie_si_record_i16($i4);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 1262} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i5);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $i9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i7 := xpc_notify_senders_of_disconnect_uv_loop_$bb4($p0, $p3, $i8, $i9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i7);
    goto $bb4_last;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 1263} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i8);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 204);
    call {:si_unique_call 1264} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i9);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i11 := atomic_read($p10);
    call {:si_unique_call 1266} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i7);
    call {:si_unique_call 1267} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i13);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i14 := $add.i64(432, 8);
    call {:si_unique_call 1268} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i14);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 1269} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i15);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i14);
    call {:si_unique_call 1270} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($i13, 32));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1271} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p19);
    call {:si_unique_call 1272} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 16);
    call {:si_unique_call 1273} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    call {:si_unique_call 1274} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i25);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i20);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i7, 1);
    call {:si_unique_call 1279} {:cexpr "entry"} boogie_si_record_i32($i31);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p3);
    call {:si_unique_call 1280} {:cexpr "__cil_tmp26"} boogie_si_record_i16($i32);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    call {:si_unique_call 1281} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i33);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, $i31);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i31;
    goto $bb13_dummy;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 1275} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 84);
    call {:si_unique_call 1276} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i28);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1277} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i30);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} xpc_notify_sender_uv($p0, $p19, $i30);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;
}



const xpc_notify_sender_uv: ref;

axiom xpc_notify_sender_uv == $sub.ref(0, 321184);

procedure xpc_notify_sender_uv($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.1, $M.21, $M.28, assertsPassed, $M.3;



implementation xpc_notify_sender_uv($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p17: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i32;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i16;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i8;
  var $i111: i64;
  var $i112: i64;
  var $i113: i32;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1284} {:cexpr "xpc_notify_sender_uv:arg:reason"} boogie_si_record_i32($i2);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 1285} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i5);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 16);
    call {:si_unique_call 1286} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i6);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1287} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i9);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p8);
    call {:si_unique_call 1288} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i10);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $i9);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} __cmpxchg_wrong_size();
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p17 := $u7;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p8);
    call {:si_unique_call 1296} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i33);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p17);
    call {:si_unique_call 1297} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, $i33);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 1304} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i36);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 204);
    call {:si_unique_call 1305} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i37);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} atomic_dec($p38);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p39, .str);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p3);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 8);
    call {:si_unique_call 1307} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i41);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, .str.119);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p3);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 16);
    call {:si_unique_call 1308} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i44);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, .str.114);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p3);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 24);
    call {:si_unique_call 1309} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i47);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, .str.120);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p3);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 32);
    call {:si_unique_call 1310} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i50);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 1390);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p3);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 35);
    call {:si_unique_call 1311} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i53);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p3);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 35);
    call {:si_unique_call 1312} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i56);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    call {:si_unique_call 1313} {:cexpr "__cil_tmp45"} boogie_si_record_i8($i58);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    call {:si_unique_call 1314} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i59);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    call {:si_unique_call 1315} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i60);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i61 := __builtinx_expect.i64.i64($i60, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    call {:si_unique_call 1317} {:cexpr "tmp"} boogie_si_record_i64($i62);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    call {:si_unique_call 1328} {:cexpr "__cil_tmp58"} boogie_si_record_i16($i79);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i80 := $sext.i16.i32($i79);
    call {:si_unique_call 1329} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i80);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    call {:si_unique_call 1330} {:cexpr "__cil_tmp60"} boogie_si_record_i16($i81);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p0);
    call {:si_unique_call 1331} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i82);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 92);
    call {:si_unique_call 1332} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i83);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    call {:si_unique_call 1333} {:cexpr "__cil_tmp63"} boogie_si_record_i16($i85);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    call {:si_unique_call 1334} {:cexpr "__cil_tmp64"} boogie_si_record_i32($i86);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p1);
    call {:si_unique_call 1335} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i87);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 24);
    call {:si_unique_call 1336} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i88);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    call {:si_unique_call 1337} devirtbounce.26($p8, $i2, $i81, $i86, $p90);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p4);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p91, .str);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p4);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 8);
    call {:si_unique_call 1338} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i93);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, .str.119);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p4);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 16);
    call {:si_unique_call 1339} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i96);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, .str.114);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p4);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 24);
    call {:si_unique_call 1340} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i99);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, .str.121);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p4);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 32);
    call {:si_unique_call 1341} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i102);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 1396);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p4);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, 35);
    call {:si_unique_call 1342} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i105);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i105);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p4);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 35);
    call {:si_unique_call 1343} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i108);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    call {:si_unique_call 1344} {:cexpr "__cil_tmp75"} boogie_si_record_i8($i110);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i64($i110);
    call {:si_unique_call 1345} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i111);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 1);
    call {:si_unique_call 1346} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i112);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i113 := __builtinx_expect.i64.i64($i112, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    call {:si_unique_call 1348} {:cexpr "tmp___0"} boogie_si_record_i64($i114);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i115 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p116 := $M.19;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p1);
    call {:si_unique_call 1349} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i117);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 8);
    call {:si_unique_call 1350} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i118);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i118);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    call {:si_unique_call 1351} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i120);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    call {:si_unique_call 1352} {:cexpr "__cil_tmp82"} boogie_si_record_i16($i122);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i123 := $sext.i16.i32($i122);
    call {:si_unique_call 1353} {:cexpr "__cil_tmp83"} boogie_si_record_i32($i123);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p0);
    call {:si_unique_call 1354} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i124);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 92);
    call {:si_unique_call 1355} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i125);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    call {:si_unique_call 1356} {:cexpr "__cil_tmp86"} boogie_si_record_i16($i127);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    call {:si_unique_call 1357} {:cexpr "__cil_tmp87"} boogie_si_record_i32($i128);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_32 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p4, $p116, .str.121, $p1, $i120, $i123, $i128);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p64 := $M.19;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p1);
    call {:si_unique_call 1318} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i65);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 8);
    call {:si_unique_call 1319} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i66);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    call {:si_unique_call 1320} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i68);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    call {:si_unique_call 1321} {:cexpr "__cil_tmp52"} boogie_si_record_i16($i70);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i71 := $sext.i16.i32($i70);
    call {:si_unique_call 1322} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i71);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 1323} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i72);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 92);
    call {:si_unique_call 1324} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i73);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    call {:si_unique_call 1325} {:cexpr "__cil_tmp56"} boogie_si_record_i16($i75);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    call {:si_unique_call 1326} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i76);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_31 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p3, $p64, .str.120, $p1, $i68, $i71, $i76);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    call {:si_unique_call 1289} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i28);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 16);
    call {:si_unique_call 1290} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    call {:si_unique_call 1291} $p32 := devirtbounce.25(0, $p31, $0.ref, $p8, $p31);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p17 := $p32;
    goto $bb11;
}



const xpc_send_gru_msg: ref;

axiom xpc_send_gru_msg == $sub.ref(0, 322216);

procedure xpc_send_gru_msg($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $CurrAddr;



implementation xpc_send_gru_msg($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i39: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i32;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i40: i32;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $i9: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i64;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1361} {:cexpr "xpc_send_gru_msg:arg:msg_size"} boogie_si_record_i64($i2);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i2);
    call {:si_unique_call 1362} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i5);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i6 := gru_send_message_gpa($p0, $p1, $i5);
    call {:si_unique_call 1364} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb4;

  $bb4:
    call $i8, $i10, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i39, $p41, $i42, $i43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i40, $i70, $i71, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_36 := xpc_send_gru_msg_loop_$bb4($p0, $p1, $p3, $p4, $i5, $i8, $i10, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i39, $p41, $i42, $i43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i40, $i70, $i71, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_36);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i8, 1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i40 := $i8;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p68 := $M.19;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} vslice_dummy_var_35 := dev_err.ref.ref.i32($p68, .str.127, $i40);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i9 := 59;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p41, .str);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p4);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 8);
    call {:si_unique_call 1380} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i43);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, .str.124);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p4);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 16);
    call {:si_unique_call 1381} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i46);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, .str.114);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p4);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 24);
    call {:si_unique_call 1382} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i49);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, .str.126);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p4);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 32);
    call {:si_unique_call 1383} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i52);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 367);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p4);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 35);
    call {:si_unique_call 1384} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i55);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p4);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 35);
    call {:si_unique_call 1385} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i58);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    call {:si_unique_call 1386} {:cexpr "__cil_tmp29"} boogie_si_record_i8($i60);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    call {:si_unique_call 1387} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i61);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    call {:si_unique_call 1388} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i62);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i63 := __builtinx_expect.i64.i64($i62, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    call {:si_unique_call 1390} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i70 := gru_send_message_gpa($p0, $p1, $i5);
    call {:si_unique_call 1379} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i70;
    goto $bb20_dummy;

  $bb5:
    assume $i71 == 1;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p66 := $M.19;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_36 := __dynamic_dev_dbg.ref.ref.ref($p4, $p66, .str.126);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p11, .str);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p3);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 8);
    call {:si_unique_call 1365} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, .str.124);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p3);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 16);
    call {:si_unique_call 1366} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, .str.114);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p3);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 24);
    call {:si_unique_call 1367} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, .str.125);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p3);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 32);
    call {:si_unique_call 1368} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i22);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 361);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p3);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 35);
    call {:si_unique_call 1369} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i25);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p3);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 35);
    call {:si_unique_call 1370} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i28);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    call {:si_unique_call 1371} {:cexpr "__cil_tmp18"} boogie_si_record_i8($i30);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    call {:si_unique_call 1372} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i31);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    call {:si_unique_call 1373} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i32);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i33 := __builtinx_expect.i64.i64($i32, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 1375} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_34 := msleep_interruptible(10);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p36 := $M.19;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_33 := __dynamic_dev_dbg.ref.ref.ref($p3, $p36, .str.125);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const gru_send_message_gpa: ref;

axiom gru_send_message_gpa == $sub.ref(0, 323248);

procedure gru_send_message_gpa($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gru_send_message_gpa($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} {:cexpr "gru_send_message_gpa:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1394} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1395} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 324280);

procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1396} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const xpc_get_fifo_entry_uv: ref;

axiom xpc_get_fifo_entry_uv == $sub.ref(0, 325312);

procedure xpc_get_fifo_entry_uv($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation xpc_get_fifo_entry_uv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_spin_lock();
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1401} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 1402} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $i3);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    call {:si_unique_call 1420} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i38);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 16);
    call {:si_unique_call 1421} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i39);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} spin_unlock_irqrestore($p40, $u0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $r := $p41;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1403} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    call {:si_unique_call 1404} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, $i11);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1407} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i19);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 88);
    call {:si_unique_call 1408} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 1409} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 88);
    call {:si_unique_call 1410} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 1411} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i24);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i20);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 1412} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i27);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 88);
    call {:si_unique_call 1413} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i28);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1414} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i30);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 1415} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i32);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    call {:si_unique_call 1416} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i33);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i34 := __builtinx_expect.i64.i64($i33, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i36 == 1;
    call {:si_unique_call 1419} devirtbounce.7(0, .str.114, 990, 12);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call xpc_get_fifo_entry_uv_loop_$bb8();
    goto $bb8_last;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 1405} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 8);
    call {:si_unique_call 1406} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;
}



const xpc_allocate_msg_slot_uv: ref;

axiom xpc_allocate_msg_slot_uv == $sub.ref(0, 326344);

procedure xpc_allocate_msg_slot_uv($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.30, $M.14, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation xpc_allocate_msg_slot_uv($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} {:cexpr "xpc_allocate_msg_slot_uv:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i3 := $add.i64(432, 24);
    call {:si_unique_call 1424} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1425} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $i3);
    call {:si_unique_call 1426} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p7 := xpc_get_fifo_entry_uv($p6);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1428} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i9);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p8);
    call {:si_unique_call 1429} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i10);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $i9);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p12 := $p7;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $i17, $i18, $i19, $i20, $p21, $p22, $i23, $i24 := xpc_allocate_msg_slot_uv_loop_$bb4($p0, $i1, $p6, $i9, $p13, $i14, $i15, $i17, $i18, $i19, $i20, $p21, $p22, $i23, $i24);
    goto $bb4_last;

  $bb7:
    call {:si_unique_call 1430} {:cexpr "xpc_allocate_msg_slot_uv:arg:__cil_tmp17"} boogie_si_record_i32($i1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i1, 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $i17 := xpc_allocate_msg_wait($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 1432} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 10);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $p21 := xpc_get_fifo_entry_uv($p6);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 1434} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i23);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i9);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p13 := $p21;
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb18_dummy;

  $bb5:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p12 := $p13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p2, $p12);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i17, 9);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb10;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i16 := 7;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 327376);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const xpc_free_msg_slot_uv: ref;

axiom xpc_free_msg_slot_uv == $sub.ref(0, 328408);

procedure xpc_free_msg_slot_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.21, $M.0, $M.1, $CurrAddr;



implementation xpc_free_msg_slot_uv($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i2 := $add.i64(432, 24);
    call {:si_unique_call 1435} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 1436} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $i2);
    call {:si_unique_call 1437} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} xpc_put_fifo_entry_uv($p5, $p6);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 1439} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 104);
    call {:si_unique_call 1440} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i10 := atomic_read($p9);
    call {:si_unique_call 1442} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1443} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 112);
    call {:si_unique_call 1444} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} __wake_up($p14, 3, 1, $0.ref);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_put_fifo_entry_uv: ref;

axiom xpc_put_fifo_entry_uv == $sub.ref(0, 329440);

procedure xpc_put_fifo_entry_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation xpc_put_fifo_entry_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ldv_spin_lock();
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1447} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1448} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 8);
    call {:si_unique_call 1449} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 1450} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, $i3);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 1453} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 8);
    call {:si_unique_call 1454} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1455} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i19);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 88);
    call {:si_unique_call 1456} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 1457} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 88);
    call {:si_unique_call 1458} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 1459} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i24);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i20);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 1460} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i27);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 16);
    call {:si_unique_call 1461} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i28);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} spin_unlock_irqrestore($p29, $u0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1451} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 8);
    call {:si_unique_call 1452} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_allocate_msg_wait: ref;

axiom xpc_allocate_msg_wait == $sub.ref(0, 330472);

procedure xpc_allocate_msg_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation xpc_allocate_msg_wait($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i34: i1;
  var $i35: i32;
  var $i33: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1463} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 80);
    call {:si_unique_call 1464} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 1465} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 131072);
    call {:si_unique_call 1466} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i5);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1469} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i12);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 104);
    call {:si_unique_call 1470} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} atomic_inc($p14);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 1472} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 112);
    call {:si_unique_call 1473} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i18 := interruptible_sleep_on_timeout($p17, 1);
    call {:si_unique_call 1475} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 1476} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1477} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 104);
    call {:si_unique_call 1478} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} atomic_dec($p22);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    call {:si_unique_call 1480} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i23);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 80);
    call {:si_unique_call 1481} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 1482} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i26);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 131072);
    call {:si_unique_call 1483} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i27);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i19, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i33 := $i35;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i35 := 9;
    goto $bb10;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 1484} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i29);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 84);
    call {:si_unique_call 1485} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 1486} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb7;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 1467} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 84);
    call {:si_unique_call 1468} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const interruptible_sleep_on_timeout: ref;

axiom interruptible_sleep_on_timeout == $sub.ref(0, 331504);

procedure interruptible_sleep_on_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation interruptible_sleep_on_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1487} {:cexpr "interruptible_sleep_on_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1488} $i2 := __VERIFIER_nondet_long();
    call {:si_unique_call 1489} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i2);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_n_of_fifo_entries_uv: ref;

axiom xpc_n_of_fifo_entries_uv == $sub.ref(0, 332536);

procedure xpc_n_of_fifo_entries_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_n_of_fifo_entries_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1490} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 88);
    call {:si_unique_call 1491} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const xpc_send_activate_IRQ_part_uv: ref;

axiom xpc_send_activate_IRQ_part_uv == $sub.ref(0, 333568);

procedure xpc_send_activate_IRQ_part_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $M.28, $CurrAddr, assertsPassed, $M.3;



implementation xpc_send_activate_IRQ_part_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} {:cexpr "xpc_send_activate_IRQ_part_uv:arg:msg_size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1493} {:cexpr "xpc_send_activate_IRQ_part_uv:arg:msg_type"} boogie_si_record_i32($i3);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i4 := xpc_send_activate_IRQ_uv($p0, $p1, $i2, $i3);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 1495} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1496} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i6);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1497} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i8 := __builtinx_expect.i64.i64($i7, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    call {:si_unique_call 1499} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} xpc_deactivate_partition(748, $p0, $i4);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const xpc_send_activate_IRQ_uv: ref;

axiom xpc_send_activate_IRQ_uv == $sub.ref(0, 334600);

procedure xpc_send_activate_IRQ_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $M.28, $CurrAddr, $M.21, assertsPassed, $M.3;



implementation xpc_send_activate_IRQ_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i8;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i16;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i54: i64;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i84: i32;
  var $i92: i32;
  var $i53: i32;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} {:cexpr "xpc_send_activate_IRQ_uv:arg:msg_size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1502} {:cexpr "xpc_send_activate_IRQ_uv:arg:msg_type"} boogie_si_record_i32($i3);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1503} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 576);
    call {:si_unique_call 1504} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    call {:si_unique_call 1505} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 7);
    call {:si_unique_call 1506} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i3);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i9);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p4);
    call {:si_unique_call 1507} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 4);
    call {:si_unique_call 1508} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, xp_partition_id);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i13);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i14);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p4);
    call {:si_unique_call 1509} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 6);
    call {:si_unique_call 1510} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 1511} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i18);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 112);
    call {:si_unique_call 1512} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i17);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p4);
    call {:si_unique_call 1513} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 8);
    call {:si_unique_call 1514} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p25 := $M.15;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    call {:si_unique_call 1515} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 24);
    call {:si_unique_call 1516} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i24);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p7);
    call {:si_unique_call 1517} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 40);
    call {:si_unique_call 1518} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i32);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} mutex_lock_nested($p33, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i54, $i55, $p57, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $p76, $i77, $i78, $p79, $p80, $p81, $i82, $i83, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i84 := xpc_send_activate_IRQ_uv_loop_$bb1($p1, $i2, $p7, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i54, $i55, $p57, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $p76, $i77, $i78, $p79, $p80, $p81, $i82, $i83, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i84);
    goto $bb1_last;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 280);
    call {:si_unique_call 1521} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i35);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    call {:si_unique_call 1522} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i37);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    call {:si_unique_call 1523} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i38);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p7);
    call {:si_unique_call 1550} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i77);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 32);
    call {:si_unique_call 1551} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i78);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i82 := xpc_send_gru_msg($p81, $p1, $i2);
    call {:si_unique_call 1553} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i92 := $i84;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i53 := $i92;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p7);
    call {:si_unique_call 1531} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i93);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 40);
    call {:si_unique_call 1532} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i94);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} mutex_unlock($p95);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb15:
    assume $i83 == 1;
    call {:si_unique_call 1554} devirtbounce.4(0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p7);
    call {:si_unique_call 1555} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i85);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 280);
    call {:si_unique_call 1556} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i86);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 1557} {:cexpr "__cil_tmp62"} boogie_si_record_i32($i88);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 1);
    call {:si_unique_call 1558} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i89);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i91 := $i82;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb20;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb17_dummy;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i39 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p7);
    call {:si_unique_call 1524} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i40);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 32);
    call {:si_unique_call 1525} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i41);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1526} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i45);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p44);
    call {:si_unique_call 1527} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i46);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, $i45);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $p58 := $p43;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p7);
    call {:si_unique_call 1536} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i59);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 24);
    call {:si_unique_call 1537} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i60);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    call {:si_unique_call 1538} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i62);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $i63 := xpc_cache_remote_gru_mq_desc_uv($p58, $i62);
    call {:si_unique_call 1540} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_spin_lock();
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p7);
    call {:si_unique_call 1542} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i66);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 280);
    call {:si_unique_call 1543} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i67);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p7);
    call {:si_unique_call 1544} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 280);
    call {:si_unique_call 1545} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i69);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    call {:si_unique_call 1546} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i71);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i67);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p7);
    call {:si_unique_call 1547} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i74);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 208);
    call {:si_unique_call 1548} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i75);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} spin_unlock_irqrestore($p76, $u0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i53 := $i65;
    goto $bb8;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $p48 := kmalloc(32, 208);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1529} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i50);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p49);
    call {:si_unique_call 1530} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i51);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, $i50);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p7);
    call {:si_unique_call 1534} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i54);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 32);
    call {:si_unique_call 1535} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i55);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i55);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p48);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p58 := $p48;
    goto $bb10;

  $bb6:
    assume $i52 == 1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i53 := 13;
    goto $bb8;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p7);
    call {:si_unique_call 1520} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i34);
    goto corral_source_split_3211;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 335632);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 336664);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var vslice_dummy_var_37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1561} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_check_alloc_flags($i1);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_37 := ldv_kmalloc_12($i0, $i1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const xpc_cache_remote_gru_mq_desc_uv: ref;

axiom xpc_cache_remote_gru_mq_desc_uv == $sub.ref(0, 337696);

procedure xpc_cache_remote_gru_mq_desc_uv($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation xpc_cache_remote_gru_mq_desc_uv($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} {:cexpr "xpc_cache_remote_gru_mq_desc_uv:arg:gru_mq_desc_gpa"} boogie_si_record_i64($i1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i3 := uv_gpa($p2);
    call {:si_unique_call 1566} {:cexpr "tmp"} boogie_si_record_i64($i3);
    call {:si_unique_call 1567} {:cexpr "xpc_cache_remote_gru_mq_desc_uv:arg:__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, xp_remote_memcpy);
    call {:si_unique_call 1568} $i5 := devirtbounce.21($p4, $i3, $i1, 32);
    call {:si_unique_call 1569} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 338728);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    return;
}



const uv_gpa: ref;

axiom uv_gpa == $sub.ref(0, 339760);

procedure uv_gpa($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation uv_gpa($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1570} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i2 := __phys_addr($i1);
    call {:si_unique_call 1572} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i3 := uv_soc_phys_ram_to_gpa($i2);
    call {:si_unique_call 1574} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 340792);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1577} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const uv_soc_phys_ram_to_gpa: ref;

axiom uv_soc_phys_ram_to_gpa == $sub.ref(0, 341824);

procedure uv_soc_phys_ram_to_gpa($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation uv_soc_phys_ram_to_gpa($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} {:cexpr "uv_soc_phys_ram_to_gpa:arg:paddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1579} $i1 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1580} {:cexpr "tcp_ptr_____0"} boogie_si_record_i64($i1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 1581} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i3);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 32);
    call {:si_unique_call 1582} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i4);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 1583} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i6);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i6, $i0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i16 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1591} {:cexpr "tcp_ptr_____1"} boogie_si_record_i64($i16);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    call {:si_unique_call 1592} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i18);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 24);
    call {:si_unique_call 1593} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i19);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    call {:si_unique_call 1594} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i21);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i22 := $or.i64($i21, $i15);
    call {:si_unique_call 1595} {:cexpr "paddr"} boogie_si_record_i64($i22);
    call {:si_unique_call 1596} $i23 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1597} {:cexpr "tcp_ptr_____2"} boogie_si_record_i64($i23);
    call {:si_unique_call 1598} $i24 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1599} {:cexpr "tcp_ptr_____3"} boogie_si_record_i64($i24);
    call {:si_unique_call 1600} $i25 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1601} {:cexpr "tcp_ptr_____4"} boogie_si_record_i64($i25);
    call {:si_unique_call 1602} $i26 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1603} {:cexpr "tcp_ptr_____5"} boogie_si_record_i64($i26);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    call {:si_unique_call 1604} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 23);
    call {:si_unique_call 1605} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i29);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    call {:si_unique_call 1606} {:cexpr "__cil_tmp31"} boogie_si_record_i8($i31);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    call {:si_unique_call 1607} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i32);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i25);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    call {:si_unique_call 1608} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 57);
    call {:si_unique_call 1609} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i35);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    call {:si_unique_call 1610} {:cexpr "__cil_tmp36"} boogie_si_record_i8($i37);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    call {:si_unique_call 1611} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i38);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i64($i22, $i39);
    call {:si_unique_call 1612} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i40);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i32);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i42 := $shl.i64($i40, $i41);
    call {:si_unique_call 1613} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i42);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i24);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    call {:si_unique_call 1614} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 22);
    call {:si_unique_call 1615} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    call {:si_unique_call 1616} {:cexpr "__cil_tmp43"} boogie_si_record_i8($i47);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    call {:si_unique_call 1617} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i48);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i23);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 1618} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i50);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 22);
    call {:si_unique_call 1619} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i51);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    call {:si_unique_call 1620} {:cexpr "__cil_tmp48"} boogie_si_record_i8($i53);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    call {:si_unique_call 1621} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i54);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i56 := $shl.i64($i22, $i55);
    call {:si_unique_call 1622} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i56);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i48);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i64($i56, $i57);
    call {:si_unique_call 1623} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i58);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i59 := $or.i64($i58, $i42);
    call {:si_unique_call 1624} {:cexpr "paddr"} boogie_si_record_i64($i59);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1584} $i8 := devirtbounce.27(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1585} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i8);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 1586} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i10);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 40);
    call {:si_unique_call 1587} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i11);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 1588} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i13);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i13, $i0);
    call {:si_unique_call 1589} {:cexpr "paddr"} boogie_si_record_i64($i14);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const ldv_kmalloc_12: ref;

axiom ldv_kmalloc_12 == $sub.ref(0, 342856);

procedure ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} {:cexpr "ldv_kmalloc_12:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1626} {:cexpr "ldv_kmalloc_12:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 343888);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1629} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p2 := ldv_malloc($i0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 344920);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1632} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1633} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $p3 := malloc($i0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i4 := ldv_is_err($p3);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} __VERIFIER_assume($i7);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 345952);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1637} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 346984);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const xpc_init_fifo_uv: ref;

axiom xpc_init_fifo_uv == $sub.ref(0, 348016);

procedure xpc_init_fifo_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation xpc_init_fifo_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var vslice_dummy_var_38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 1639} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 8);
    call {:si_unique_call 1640} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 1641} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i6);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 16);
    call {:si_unique_call 1642} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i7);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} vslice_dummy_var_38 := spinlock_check($p8);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1644} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i10);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 16);
    call {:si_unique_call 1645} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i11);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} __raw_spin_lock_init($p12, .str.128, $p1);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 1647} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 88);
    call {:si_unique_call 1648} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 349048);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 350080);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    return;
}



const xpc_allocate_send_msg_slot_uv: ref;

axiom xpc_allocate_send_msg_slot_uv == $sub.ref(0, 351112);

procedure xpc_allocate_send_msg_slot_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation xpc_allocate_send_msg_slot_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i27: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i50: i64;
  var $i51: i16;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $i10: i32;
  var $i56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1649} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 432);
    call {:si_unique_call 1650} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1651} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 96);
    call {:si_unique_call 1652} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 1653} {:cexpr "__cil_tmp13"} boogie_si_record_i16($i7);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 1654} {:cexpr "nentries"} boogie_si_record_i32($i8);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i56 := 13;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb4;

  $bb4:
    call $i11, $i12, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i57, $i58, $i10 := xpc_allocate_send_msg_slot_uv_loop_$bb4($p3, $i11, $i12, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i57, $i58, $i10);
    goto $bb4_last;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    call {:si_unique_call 1655} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i12 := $mul.i64($i11, 32);
    call {:si_unique_call 1656} {:cexpr "nbytes"} boogie_si_record_i64($i12);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p13 := kzalloc($i12, 208);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p3);
    call {:si_unique_call 1658} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 1659} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i15);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p13);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1660} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p3);
    call {:si_unique_call 1661} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 8);
    call {:si_unique_call 1662} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 1663} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, $i18);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i25 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32(0, $i25);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_spin_lock();
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 1675} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i43);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 96);
    call {:si_unique_call 1676} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i44);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    call {:si_unique_call 1677} {:cexpr "__cil_tmp35"} boogie_si_record_i16($i46);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    call {:si_unique_call 1678} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i47);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, $i25);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 1681} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i53);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 8);
    call {:si_unique_call 1682} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i54);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} spin_unlock_irqrestore($p55, $u0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb21;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 1679} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i49);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 96);
    call {:si_unique_call 1680} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i50);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i25);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i50);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i51);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb13:
    call $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $i27 := xpc_allocate_send_msg_slot_uv_loop_$bb13($p3, $i25, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $i27);
    goto $bb13_last;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    call {:si_unique_call 1665} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i28);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p3);
    call {:si_unique_call 1666} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i29);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 8);
    call {:si_unique_call 1667} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($i28, 32));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    call {:si_unique_call 1668} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i34);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 8);
    call {:si_unique_call 1669} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i35);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i27);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p3);
    call {:si_unique_call 1670} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 24);
    call {:si_unique_call 1671} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p33);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} xpc_put_fifo_entry_uv($p39, $p40);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i27, 1);
    call {:si_unique_call 1673} {:cexpr "entry"} boogie_si_record_i32($i41);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, $i25);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i41;
    goto $bb15_dummy;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i10, 1);
    call {:si_unique_call 1664} {:cexpr "nentries"} boogie_si_record_i32($i57);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i57;
    goto $bb22_dummy;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3468;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;
}



const xpc_allocate_recv_msg_slot_uv: ref;

axiom xpc_allocate_recv_msg_slot_uv == $sub.ref(0, 352144);

procedure xpc_allocate_recv_msg_slot_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation xpc_allocate_recv_msg_slot_uv($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i31: i32;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $i58: i16;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $i10: i32;
  var $i63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1684} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 432);
    call {:si_unique_call 1685} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1686} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 98);
    call {:si_unique_call 1687} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 1688} {:cexpr "__cil_tmp12"} boogie_si_record_i16($i7);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 1689} {:cexpr "nentries"} boogie_si_record_i32($i8);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i63 := 13;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $r := $i63;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb4;

  $bb4:
    call $i11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i64, $i65, $i10 := xpc_allocate_recv_msg_slot_uv_loop_$bb4($p0, $p3, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i64, $i65, $i10);
    goto $bb4_last;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 1690} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 94);
    call {:si_unique_call 1691} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    call {:si_unique_call 1692} {:cexpr "__cil_tmp15"} boogie_si_record_i16($i14);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    call {:si_unique_call 1693} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i15);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, $i10);
    call {:si_unique_call 1694} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i16);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 1695} {:cexpr "nbytes"} boogie_si_record_i64($i17);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p3);
    call {:si_unique_call 1696} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 16);
    call {:si_unique_call 1697} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $p20 := kzalloc($i17, 208);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i19);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1699} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p3);
    call {:si_unique_call 1700} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 16);
    call {:si_unique_call 1701} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    call {:si_unique_call 1702} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i27);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, $i22);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i29 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32(0, $i29);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} ldv_spin_lock();
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 1716} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i50);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 98);
    call {:si_unique_call 1717} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i51);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    call {:si_unique_call 1718} {:cexpr "__cil_tmp41"} boogie_si_record_i16($i53);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    call {:si_unique_call 1719} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i54);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, $i29);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p0);
    call {:si_unique_call 1722} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i60);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 8);
    call {:si_unique_call 1723} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i61);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} spin_unlock_irqrestore($p62, $u0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb21;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    call {:si_unique_call 1720} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i56);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 98);
    call {:si_unique_call 1721} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i57);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i29);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i57);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i58);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb13:
    call $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $i31 := xpc_allocate_recv_msg_slot_uv_loop_$bb13($p0, $p3, $i29, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $i31);
    goto $bb13_last;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 1704} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i32);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 94);
    call {:si_unique_call 1705} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i33);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    call {:si_unique_call 1706} {:cexpr "__cil_tmp28"} boogie_si_record_i16($i35);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    call {:si_unique_call 1707} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i36);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i36, $i31);
    call {:si_unique_call 1708} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i37);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    call {:si_unique_call 1709} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i38);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p3);
    call {:si_unique_call 1710} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i39);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 16);
    call {:si_unique_call 1711} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i40);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref($i38, 24));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    call {:si_unique_call 1712} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i45);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 12);
    call {:si_unique_call 1713} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i46);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i31);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i31, 1);
    call {:si_unique_call 1714} {:cexpr "entry"} boogie_si_record_i32($i48);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, $i29);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i48;
    goto $bb15_dummy;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i10, 1);
    call {:si_unique_call 1703} {:cexpr "nentries"} boogie_si_record_i32($i64);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i65 == 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i64;
    goto $bb22_dummy;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3558;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;
}



const xpc_send_activate_IRQ_ch_uv: ref;

axiom xpc_send_activate_IRQ_ch_uv == $sub.ref(0, 353176);

procedure xpc_send_activate_IRQ_ch_uv($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $M.28, $M.21, $CurrAddr, assertsPassed, $M.3;



implementation xpc_send_activate_IRQ_ch_uv($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32)
{
  var $p5: ref;
  var $i6: i16;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} {:cexpr "xpc_send_activate_IRQ_ch_uv:arg:msg_size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1726} {:cexpr "xpc_send_activate_IRQ_ch_uv:arg:msg_type"} boogie_si_record_i32($i4);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1727} {:cexpr "__cil_tmp9"} boogie_si_record_i16($i6);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i64($i6);
    call {:si_unique_call 1728} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p8 := $M.4;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($i7, 872));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $i10 := xpc_send_activate_IRQ_uv($p9, $p2, $i3, $i4);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 1730} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1731} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i12);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 1732} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $i14 := __builtinx_expect.i64.i64($i13, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 1734} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1735} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    call {:si_unique_call 1736} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, $i17);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} xpc_deactivate_partition(763, $p9, $i10);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1742} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p1);
    call {:si_unique_call 1743} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i25);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i24);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_spin_lock();
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1737} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 8);
    call {:si_unique_call 1738} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p1);
    call {:si_unique_call 1739} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i23);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} spin_unlock_irqrestore($p22, $i23);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const xpc_send_local_activate_IRQ_uv: ref;

axiom xpc_send_local_activate_IRQ_uv == $sub.ref(0, 354208);

procedure xpc_send_local_activate_IRQ_uv($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.0;



implementation xpc_send_local_activate_IRQ_uv($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i8;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} {:cexpr "xpc_send_local_activate_IRQ_uv:arg:act_state_req"} boogie_si_record_i32($i1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1746} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 576);
    call {:si_unique_call 1747} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_spin_lock();
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1749} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 285);
    call {:si_unique_call 1750} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 1751} {:cexpr "__cil_tmp9"} boogie_si_record_i8($i8);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 1752} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i9);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p4);
    call {:si_unique_call 1754} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 285);
    call {:si_unique_call 1755} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i1);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i14);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i11 := $M.28;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.28 := $i12;
    call {:si_unique_call 1753} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i12);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const uv_bios_reserved_page_pa: ref;

axiom uv_bios_reserved_page_pa == $sub.ref(0, 355240);

procedure uv_bios_reserved_page_pa($i0: i64, $p1: ref, $p2: ref, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation uv_bios_reserved_page_pa($i0: i64, $p1: ref, $p2: ref, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1758} {:cexpr "uv_bios_reserved_page_pa:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const xpc_activate_partition: ref;

axiom xpc_activate_partition == $sub.ref(0, 356272);

procedure xpc_activate_partition($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation xpc_activate_partition($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i16;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p1 := $M.4;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 1761} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 1762} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, $i2);
    call {:si_unique_call 1763} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i64($i4, 896);
    call {:si_unique_call 1764} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i16($i5);
    call {:si_unique_call 1765} {:cexpr "partid"} boogie_si_record_i16($i6);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_spin_lock();
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 1767} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i7);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 112);
    call {:si_unique_call 1768} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1769} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i10);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 116);
    call {:si_unique_call 1770} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i11);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 24);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 1771} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 120);
    call {:si_unique_call 1772} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 613);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 1773} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 40);
    call {:si_unique_call 1774} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i17);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} spin_unlock_irqrestore($p18, $u0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i19 := $sext.i16.i64($i6);
    call {:si_unique_call 1776} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i19);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i21 := $sext.i16.i32($i6);
    call {:si_unique_call 1777} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i21);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $p22 := kthread_create_on_node.ref.ref.i32.ref.i32(xpc_activating, $p20, $sub.i32(0, 1), .str.4, $i21);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} $i24 := IS_ERR($p23);
    call {:si_unique_call 1780} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p22);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} $i28 := IS_ERR($p27);
    call {:si_unique_call 1783} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} ldv_spin_lock();
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 1785} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 112);
    call {:si_unique_call 1786} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 1787} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i33);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 116);
    call {:si_unique_call 1788} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i34);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 25);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 1789} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 120);
    call {:si_unique_call 1790} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 622);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 1791} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i39);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 40);
    call {:si_unique_call 1792} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i40);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} vslice_dummy_var_39 := wake_up_process($p22);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_activating: ref;

axiom xpc_activating == $sub.ref(0, 357304);

procedure xpc_activating($p0: ref) returns ($r: i32);



const xpc_setup_ch_structures: ref;

axiom xpc_setup_ch_structures == $sub.ref(0, 358336);

procedure xpc_setup_ch_structures($p0: ref) returns ($r: i32);



const xpc_mark_partition_active: ref;

axiom xpc_mark_partition_active == $sub.ref(0, 359368);

procedure xpc_mark_partition_active($p0: ref) returns ($r: i32);



const xpc_channel_mgr: ref;

axiom xpc_channel_mgr == $sub.ref(0, 360400);

procedure xpc_channel_mgr($p0: ref);



const xpc_teardown_ch_structures: ref;

axiom xpc_teardown_ch_structures == $sub.ref(0, 361432);

procedure xpc_teardown_ch_structures($p0: ref);



const xpc_mark_partition_inactive: ref;

axiom xpc_mark_partition_inactive == $sub.ref(0, 362464);

procedure xpc_mark_partition_inactive($p0: ref);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 363496);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);



const xpc_process_sent_chctl_flags: ref;

axiom xpc_process_sent_chctl_flags == $sub.ref(0, 364528);

procedure xpc_process_sent_chctl_flags($p0: ref);



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 365560);

procedure atomic_set($p0: ref, $i1: i32);



const xpc_process_openclose_chctl_flags: ref;

axiom xpc_process_openclose_chctl_flags == $sub.ref(0, 366592);

procedure xpc_process_openclose_chctl_flags($p0: ref, $i1: i32, $i2: i8);



const xpc_process_disconnect: ref;

axiom xpc_process_disconnect == $sub.ref(0, 367624);

procedure xpc_process_disconnect($p0: ref, $p1: ref);



const xpc_connect_channel: ref;

axiom xpc_connect_channel == $sub.ref(0, 368656);

procedure xpc_connect_channel($p0: ref) returns ($r: i32);



const mutex_trylock: ref;

axiom mutex_trylock == $sub.ref(0, 369688);

procedure mutex_trylock($p0: ref) returns ($r: i32);



const xpc_process_connect: ref;

axiom xpc_process_connect == $sub.ref(0, 370720);

procedure xpc_process_connect($p0: ref, $p1: ref);



const complete_: ref;

axiom complete_ == $sub.ref(0, 371752);

procedure complete_($p0: ref);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 372784);

procedure spin_lock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 373816);

procedure spin_unlock($p0: ref);



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 374848);

procedure ldv_spin_unlock_5($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 375880);

procedure _raw_spin_unlock($p0: ref);



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 376912);

procedure ldv_spin_lock_1($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 377944);

procedure _raw_spin_lock($p0: ref);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 378976);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);



const init_completion: ref;

axiom init_completion == $sub.ref(0, 380008);

procedure init_completion($p0: ref);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 381040);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    return;
}



const xpc_handle_activate_IRQ_uv: ref;

axiom xpc_handle_activate_IRQ_uv == $sub.ref(0, 382072);

procedure xpc_handle_activate_IRQ_uv($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $M.0, $M.1, $M.28, $CurrAddr, $M.14, $M.21, $M.3, assertsPassed;



implementation xpc_handle_activate_IRQ_uv($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1795} {:cexpr "xpc_handle_activate_IRQ_uv:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p2, 0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p3 := $M.18;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 1796} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 48);
    call {:si_unique_call 1797} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $p9 := gru_get_next_message($p8);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1799} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    call {:si_unique_call 1800} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, $i11);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p14 := $p9;
    goto $bb4;

  $bb4:
    call $p14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $i22, $i24, $i25, $p26, $i27, $i29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, vslice_dummy_var_40, vslice_dummy_var_41 := xpc_handle_activate_IRQ_uv_loop_$bb4($p2, $i11, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $i22, $i24, $i25, $p26, $i27, $i29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, vslice_dummy_var_40, vslice_dummy_var_41);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    call {:si_unique_call 1802} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 4);
    call {:si_unique_call 1803} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    call {:si_unique_call 1804} {:cexpr "partid"} boogie_si_record_i16($i18);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i19 := $sext.i16.i32($i18);
    call {:si_unique_call 1805} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i19);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i18);
    call {:si_unique_call 1808} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i24);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 255);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i29 := $sext.i16.i64($i18);
    call {:si_unique_call 1818} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p30 := $M.4;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($i29, 872));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $i32 := xpc_part_ref($p31);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 1820} {:cexpr "part_referenced"} boogie_si_record_i32($i32);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} xpc_handle_activate_mq_msg_uv($p31, $p14, $i32, $p2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $M.18;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 1809} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i35);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 48);
    call {:si_unique_call 1810} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i36);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p14);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} gru_free_message($p39, $p40);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p41 := $M.18;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    call {:si_unique_call 1812} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i42);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 48);
    call {:si_unique_call 1813} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i43);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $p47 := gru_get_next_message($p46);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    call {:si_unique_call 1815} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i49);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, $i11);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p14 := $p47;
    goto $bb17_dummy;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.58, $p2);
    call {:si_unique_call 1801} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i51);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} xpc_part_deref($p31);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p26 := $M.6;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i18);
    call {:si_unique_call 1816} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i27);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} vslice_dummy_var_41 := dev_err.ref.ref.i32($p26, .str.115, $i27);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p21 := $M.6;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i22 := $sext.i16.i32($i18);
    call {:si_unique_call 1806} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i22);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_40 := dev_err.ref.ref.i32($p21, .str.115, $i22);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const xpc_handle_notify_IRQ_uv: ref;

axiom xpc_handle_notify_IRQ_uv == $sub.ref(0, 383104);

procedure xpc_handle_notify_IRQ_uv($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.0, $M.21, $M.14, $CurrAddr, $M.3, assertsPassed;



implementation xpc_handle_notify_IRQ_uv($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p13: ref;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} {:cexpr "xpc_handle_notify_IRQ_uv:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p2 := $M.17;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 1825} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i3);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 48);
    call {:si_unique_call 1826} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i4);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $p8 := gru_get_next_message($p7);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1828} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i10);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    call {:si_unique_call 1829} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i11);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $i10);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    goto $bb4;

  $bb4:
    call $i14, $i15, $p16, $i17, $i18, $i19, $p20, $i21, $i23, $i24, $p25, $i26, $i28, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p13, vslice_dummy_var_42, vslice_dummy_var_43 := xpc_handle_notify_IRQ_uv_loop_$bb4($i10, $i14, $i15, $p16, $i17, $i18, $i19, $p20, $i21, $i23, $i24, $p25, $i26, $i28, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p13, vslice_dummy_var_42, vslice_dummy_var_43);
    goto $bb4_last;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    call {:si_unique_call 1830} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i14);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 1831} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i15);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    call {:si_unique_call 1832} {:cexpr "partid"} boogie_si_record_i16($i17);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i18 := $sext.i16.i32($i17);
    call {:si_unique_call 1833} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i18);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32($i17);
    call {:si_unique_call 1836} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i23);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 255);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i64($i17);
    call {:si_unique_call 1846} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i28);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p29 := $M.4;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($i28, 872));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i31 := xpc_part_ref($p30);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 1848} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $M.17;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    call {:si_unique_call 1837} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i34);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 48);
    call {:si_unique_call 1838} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i35);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p13);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} gru_free_message($p38, $p39);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p40 := $M.17;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    call {:si_unique_call 1840} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i41);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 48);
    call {:si_unique_call 1841} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i42);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $p46 := gru_get_next_message($p45);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    call {:si_unique_call 1843} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i48);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i10);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p46;
    goto $bb15_dummy;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} xpc_handle_notify_mq_msg_uv($p30, $p13);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} xpc_part_deref($p30);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p25 := $M.6;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i26 := $sext.i16.i32($i17);
    call {:si_unique_call 1844} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i26);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} vslice_dummy_var_43 := dev_err.ref.ref.i32($p25, .str.117, $i26);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p20 := $M.6;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i21 := $sext.i16.i32($i17);
    call {:si_unique_call 1834} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i21);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} vslice_dummy_var_42 := dev_err.ref.ref.i32($p20, .str.117, $i21);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;
}



const xpc_handle_notify_mq_msg_uv: ref;

axiom xpc_handle_notify_mq_msg_uv == $sub.ref(0, 384136);

procedure xpc_handle_notify_mq_msg_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.0, $M.21, $M.14, $CurrAddr, $M.3, assertsPassed;



implementation xpc_handle_notify_mq_msg_uv($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i32;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i16;
  var $i28: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i96: i32;
  var $i97: i64;
  var $i98: i1;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i8;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i64;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1851} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i2);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 576);
    call {:si_unique_call 1852} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i3);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 1853} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i5);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 10);
    call {:si_unique_call 1854} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i6);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 1855} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i8);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 1856} {:cexpr "ch_number"} boogie_si_record_i32($i9);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1857} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i10);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 364);
    call {:si_unique_call 1858} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i11);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 1859} {:cexpr "__cil_tmp22"} boogie_si_record_i8($i13);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 1860} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i14);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, $i9);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 1861} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i16);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 1862} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i17);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i18 := __builtinx_expect.i64.i64($i17, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    call {:si_unique_call 1864} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i9);
    call {:si_unique_call 1884} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i44);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    call {:si_unique_call 1885} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i45);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 376);
    call {:si_unique_call 1886} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i46);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref($i44, 720));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} xpc_msgqueue_ref($p49);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 1888} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i50);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 80);
    call {:si_unique_call 1889} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i51);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    call {:si_unique_call 1890} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i53);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 1024);
    call {:si_unique_call 1891} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i54);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p1);
    call {:si_unique_call 1893} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i56);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 11);
    call {:si_unique_call 1894} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i57);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    call {:si_unique_call 1895} {:cexpr "__cil_tmp53"} boogie_si_record_i8($i59);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    call {:si_unique_call 1896} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i60);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p49);
    call {:si_unique_call 1899} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i62);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 432);
    call {:si_unique_call 1900} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i63);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p49);
    call {:si_unique_call 1901} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i65);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 94);
    call {:si_unique_call 1902} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i66);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    call {:si_unique_call 1903} {:cexpr "__cil_tmp59"} boogie_si_record_i16($i68);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    call {:si_unique_call 1904} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i69);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p49);
    call {:si_unique_call 1905} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i70);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 98);
    call {:si_unique_call 1906} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i71);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    call {:si_unique_call 1907} {:cexpr "__cil_tmp63"} boogie_si_record_i16($i73);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    call {:si_unique_call 1908} {:cexpr "__cil_tmp64"} boogie_si_record_i32($i74);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p1);
    call {:si_unique_call 1909} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i75);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 12);
    call {:si_unique_call 1910} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i76);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 1911} {:cexpr "__cil_tmp68"} boogie_si_record_i32($i78);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i79 := $urem.i32($i78, $i74);
    call {:si_unique_call 1912} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i79);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i80 := $mul.i32($i79, $i69);
    call {:si_unique_call 1913} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i80);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    call {:si_unique_call 1914} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i81);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p64);
    call {:si_unique_call 1915} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i82);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 16);
    call {:si_unique_call 1916} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i83);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref($i81, 24));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    call {:si_unique_call 1917} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i88);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 11);
    call {:si_unique_call 1918} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i89);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    call {:si_unique_call 1919} {:cexpr "__cil_tmp79"} boogie_si_record_i8($i91);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    call {:si_unique_call 1920} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i92);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i32($i93);
    call {:si_unique_call 1921} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i94);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    call {:si_unique_call 1922} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i95);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i96 := __builtinx_expect.i64.i64($i95, 0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    call {:si_unique_call 1924} {:cexpr "tmp___0"} boogie_si_record_i64($i97);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p1);
    call {:si_unique_call 1926} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i99);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 11);
    call {:si_unique_call 1927} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i100);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    call {:si_unique_call 1928} {:cexpr "__cil_tmp86"} boogie_si_record_i8($i102);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i64($i102);
    call {:si_unique_call 1929} {:cexpr "__len"} boogie_si_record_i64($i103);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p87);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p1);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 1930} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p104, $p105, $i103, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p64);
    call {:si_unique_call 1931} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i106);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 120);
    call {:si_unique_call 1932} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i107);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i107);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p87);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} xpc_put_fifo_entry_uv($p108, $p109);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p49);
    call {:si_unique_call 1934} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i110);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 80);
    call {:si_unique_call 1935} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i111);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i111);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    call {:si_unique_call 1936} {:cexpr "__cil_tmp95"} boogie_si_record_i32($i113);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 512);
    call {:si_unique_call 1937} {:cexpr "__cil_tmp96"} boogie_si_record_i32($i114);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} xpc_msgqueue_deref($p49);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i115 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p49);
    call {:si_unique_call 1938} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i116);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i117 := $add.i64($i116, 328);
    call {:si_unique_call 1939} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i117);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p118 := $i2p.i64.ref($i117);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i119 := atomic_read($p118);
    call {:si_unique_call 1941} {:cexpr "tmp___1"} boogie_si_record_i32($i119);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i119, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i120 == 1);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p49);
    call {:si_unique_call 1945} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i124);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 92);
    call {:si_unique_call 1946} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i125);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    call {:si_unique_call 1947} {:cexpr "__cil_tmp107"} boogie_si_record_i16($i127);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    call {:si_unique_call 1948} {:cexpr "__cil_tmp108"} boogie_si_record_i32($i128);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} xpc_send_chctl_local_msgrequest_uv($p0, $i128);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i120 == 1;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p49);
    call {:si_unique_call 1942} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i121);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 344);
    call {:si_unique_call 1943} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i122);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i122);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} __wake_up($p123, 3, 1, $0.ref);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i98 == 1;
    call {:si_unique_call 1925} devirtbounce.7(0, .str.114, 1467, 12);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call xpc_handle_notify_mq_msg_uv_loop_$bb16();
    goto $bb16_last;

  $bb11:
    assume $i61 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} xpc_handle_notify_mq_ack_uv($p49, $p1);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} xpc_msgqueue_deref($p49);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i55 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} xpc_msgqueue_deref($p49);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p21 := $M.6;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p22 := $M.4;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 1865} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i23);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 1866} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i24);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i24, $i23);
    call {:si_unique_call 1867} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i25);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i26 := $sdiv.i64($i25, 896);
    call {:si_unique_call 1868} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i26);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i16($i26);
    call {:si_unique_call 1869} {:cexpr "__cil_tmp31"} boogie_si_record_i16($i27);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i27);
    call {:si_unique_call 1870} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i28);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} vslice_dummy_var_44 := dev_err.ref.ref.i32.i32($p21, .str.118, $i9, $i28);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_spin_lock();
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p4);
    call {:si_unique_call 1873} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i30);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 285);
    call {:si_unique_call 1874} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i31);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    call {:si_unique_call 1875} {:cexpr "__cil_tmp35"} boogie_si_record_i8($i33);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    call {:si_unique_call 1876} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i34);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p4);
    call {:si_unique_call 1878} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i38);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 285);
    call {:si_unique_call 1879} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i39);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 3);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p4);
    call {:si_unique_call 1880} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i41);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 288);
    call {:si_unique_call 1881} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i42);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 60);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i35 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i36 := $M.28;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.28 := $i37;
    call {:si_unique_call 1877} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i37);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;
}



const gru_free_message: ref;

axiom gru_free_message == $sub.ref(0, 385168);

procedure gru_free_message($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation gru_free_message($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    return;
}



const gru_get_next_message: ref;

axiom gru_get_next_message == $sub.ref(0, 386200);

procedure gru_get_next_message($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gru_get_next_message($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $p1 := external_alloc();
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const xpc_handle_notify_mq_ack_uv: ref;

axiom xpc_handle_notify_mq_ack_uv == $sub.ref(0, 387232);

procedure xpc_handle_notify_mq_ack_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.21, $M.1, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation xpc_handle_notify_mq_ack_uv($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i32;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1952} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 96);
    call {:si_unique_call 1953} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    call {:si_unique_call 1954} {:cexpr "__cil_tmp8"} boogie_si_record_i16($i5);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 1955} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i6);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    call {:si_unique_call 1956} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i7);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 12);
    call {:si_unique_call 1957} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 1958} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i10);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i11 := $urem.i32($i10, $i6);
    call {:si_unique_call 1959} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i11);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 1960} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i13 := $add.i64(432, 8);
    call {:si_unique_call 1961} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 1962} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i13);
    call {:si_unique_call 1963} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i15);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($i12, 32));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    call {:si_unique_call 1964} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i19);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 12);
    call {:si_unique_call 1965} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i20);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 1966} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i22);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p18);
    call {:si_unique_call 1967} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i23);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 8);
    call {:si_unique_call 1968} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i24);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 1969} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i26);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, $i22);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 1970} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i28);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    call {:si_unique_call 1971} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i29);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i30 := __builtinx_expect.i64.i64($i29, 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    call {:si_unique_call 1973} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p18);
    call {:si_unique_call 1975} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 8);
    call {:si_unique_call 1976} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i34);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    call {:si_unique_call 1977} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 96);
    call {:si_unique_call 1978} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i36);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    call {:si_unique_call 1979} {:cexpr "__cil_tmp34"} boogie_si_record_i16($i38);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    call {:si_unique_call 1980} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p18);
    call {:si_unique_call 1981} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i40);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 8);
    call {:si_unique_call 1982} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i41);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 1983} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i43);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i39);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i34);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1984} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i46);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p18);
    call {:si_unique_call 1985} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i47);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 16);
    call {:si_unique_call 1986} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i48);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    call {:si_unique_call 1987} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i51);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i46);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} xpc_free_msg_slot_uv($p0, $p18);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i52 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} xpc_notify_sender_uv($p0, $p18, 5);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i32 == 1;
    call {:si_unique_call 1974} devirtbounce.7(0, .str.114, 1409, 12);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call xpc_handle_notify_mq_ack_uv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const xpc_send_chctl_local_msgrequest_uv: ref;

axiom xpc_send_chctl_local_msgrequest_uv == $sub.ref(0, 388264);

procedure xpc_send_chctl_local_msgrequest_uv($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.14, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation xpc_send_chctl_local_msgrequest_uv($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} {:cexpr "xpc_send_chctl_local_msgrequest_uv:arg:ch_number"} boogie_si_record_i32($i1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} ldv_spin_lock();
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i3 := $mul.i64($i2, 1);
    call {:si_unique_call 1992} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i4 := $add.i64(0, $i3);
    call {:si_unique_call 1993} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i5 := $add.i64(384, $i4);
    call {:si_unique_call 1994} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 1995} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i5);
    call {:si_unique_call 1996} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 1);
    call {:si_unique_call 1997} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i10 := $add.i64(0, $i9);
    call {:si_unique_call 1998} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i11 := $add.i64(384, $i10);
    call {:si_unique_call 1999} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 2000} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, $i11);
    call {:si_unique_call 2001} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 2002} {:cexpr "__cil_tmp14"} boogie_si_record_i8($i15);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 2003} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 32);
    call {:si_unique_call 2004} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i17);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i7);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 2005} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 392);
    call {:si_unique_call 2006} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const xpc_handle_activate_mq_msg_uv: ref;

axiom xpc_handle_activate_mq_msg_uv == $sub.ref(0, 389296);

procedure xpc_handle_activate_mq_msg_uv($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.28, $M.58, $M.3, $M.14, $M.21, $CurrAddr, assertsPassed;



implementation xpc_handle_activate_mq_msg_uv($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i124: i16;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i64;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $i158: i64;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $p164: ref;
  var $i165: i64;
  var $i166: i64;
  var $p167: ref;
  var $i168: i1;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $p172: ref;
  var $i173: i16;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $i181: i64;
  var $i182: i64;
  var $p183: ref;
  var $i184: i16;
  var $i185: i32;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i64;
  var $i190: i64;
  var $i191: i64;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i8;
  var $p197: ref;
  var $i198: i64;
  var $i199: i64;
  var $p200: ref;
  var $i201: i1;
  var $p202: ref;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $i206: i16;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $i214: i64;
  var $i215: i64;
  var $i216: i64;
  var $p217: ref;
  var $i218: i16;
  var $p219: ref;
  var $i220: i64;
  var $i221: i64;
  var $i222: i64;
  var $i223: i64;
  var $p224: ref;
  var $i225: i16;
  var $p226: ref;
  var $i227: i64;
  var $i228: i64;
  var $p229: ref;
  var $i230: i16;
  var $i231: i32;
  var $i232: i64;
  var $i233: i64;
  var $i234: i64;
  var $i235: i64;
  var $i236: i64;
  var $i237: i64;
  var $i238: i64;
  var $i239: i64;
  var $p240: ref;
  var $i241: i16;
  var $i242: i32;
  var $i243: i64;
  var $i244: i64;
  var $i245: i64;
  var $i246: i64;
  var $i247: i64;
  var $i248: i64;
  var $p249: ref;
  var $i250: i8;
  var $i251: i32;
  var $i252: i32;
  var $i253: i8;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $p257: ref;
  var $i258: i1;
  var $p259: ref;
  var $i260: i64;
  var $i261: i64;
  var $p262: ref;
  var $i263: i16;
  var $i264: i64;
  var $i265: i64;
  var $i266: i64;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $i271: i64;
  var $i272: i64;
  var $i273: i64;
  var $p274: ref;
  var $i275: i16;
  var $p276: ref;
  var $i277: i64;
  var $i278: i64;
  var $i279: i64;
  var $i280: i64;
  var $p281: ref;
  var $i282: i16;
  var $p283: ref;
  var $i284: i64;
  var $i285: i64;
  var $i286: i64;
  var $i287: i64;
  var $p288: ref;
  var $i289: i64;
  var $p290: ref;
  var $i291: i64;
  var $i292: i64;
  var $p293: ref;
  var $i294: i16;
  var $i295: i32;
  var $i296: i64;
  var $i297: i64;
  var $i298: i64;
  var $i299: i64;
  var $i300: i64;
  var $i301: i64;
  var $i302: i64;
  var $i303: i64;
  var $p304: ref;
  var $i305: i16;
  var $i306: i32;
  var $i307: i64;
  var $i308: i64;
  var $i309: i64;
  var $i310: i64;
  var $i311: i64;
  var $i312: i64;
  var $p313: ref;
  var $i314: i8;
  var $i315: i32;
  var $i316: i32;
  var $i317: i8;
  var $p318: ref;
  var $i319: i64;
  var $i320: i64;
  var $p321: ref;
  var $i322: i1;
  var $p323: ref;
  var $i324: i64;
  var $i325: i64;
  var $p326: ref;
  var $i327: i16;
  var $i328: i32;
  var $i329: i64;
  var $i330: i64;
  var $i331: i64;
  var $i332: i64;
  var $i333: i64;
  var $i334: i64;
  var $i335: i64;
  var $i336: i64;
  var $p337: ref;
  var $i338: i16;
  var $i339: i32;
  var $i340: i64;
  var $i341: i64;
  var $i342: i64;
  var $i343: i64;
  var $i344: i64;
  var $i345: i64;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i8;
  var $p351: ref;
  var $i352: i64;
  var $i353: i64;
  var $p354: ref;
  var $i355: i64;
  var $i356: i64;
  var $i357: i64;
  var $i358: i64;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $p362: ref;
  var $i363: i64;
  var $i364: i64;
  var $p365: ref;
  var $i366: i64;
  var $i367: i64;
  var $i368: i64;
  var $i369: i64;
  var $p370: ref;
  var $i371: i32;
  var $i372: i32;
  var $p373: ref;
  var $i374: i64;
  var $i375: i64;
  var $p376: ref;
  var $p377: ref;
  var $i378: i64;
  var $i379: i64;
  var $p380: ref;
  var $i381: i8;
  var $i382: i32;
  var $p383: ref;
  var $i384: i64;
  var $i385: i64;
  var $i386: i64;
  var $i387: i64;
  var $i388: i16;
  var $i389: i32;
  var $i391: i64;
  var $i392: i64;
  var $p393: ref;
  var $i394: i8;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i32;
  var $i399: i64;
  var $i400: i64;
  var $p401: ref;
  var $i402: i64;
  var $i403: i64;
  var $p404: ref;
  var $i405: i32;
  var $i406: i32;
  var $i407: i64;
  var $i408: i64;
  var $p409: ref;
  var $i410: i64;
  var $i411: i64;
  var $i412: i64;
  var $p413: ref;
  var $i414: i64;
  var $i415: i1;
  var $i416: i64;
  var $i417: i64;
  var $p418: ref;
  var $i419: i64;
  var $i420: i1;
  var $i421: i64;
  var $i422: i64;
  var $p423: ref;
  var $i424: i8;
  var $i425: i32;
  var $i426: i1;
  var $i427: i32;
  var $i428: i32;
  var $i429: i64;
  var $i430: i64;
  var $p431: ref;
  var $i432: i32;
  var $i433: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} {:cexpr "xpc_handle_activate_mq_msg_uv:arg:part_setup"} boogie_si_record_i32($i2);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 2010} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i4);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 576);
    call {:si_unique_call 2011} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i5);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    call {:si_unique_call 2012} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i7);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 284);
    call {:si_unique_call 2013} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i8);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 2014} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i9);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 6);
    call {:si_unique_call 2015} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i10);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i8);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 2016} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i14);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 7);
    call {:si_unique_call 2017} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i15);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 2018} {:cexpr "__cil_tmp30"} boogie_si_record_i8($i17);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i17);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i17);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i17);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 3);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i17);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i17);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 5);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i17);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 6);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i17);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 7);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i33 == 1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i17);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 8);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i35 == 1);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i17);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 9);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p377 := $M.6;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p1);
    call {:si_unique_call 2047} {:cexpr "__cil_tmp262"} boogie_si_record_i64($i378);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i379 := $add.i64($i378, 7);
    call {:si_unique_call 2048} {:cexpr "__cil_tmp263"} boogie_si_record_i64($i379);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p380 := $i2p.i64.ref($i379);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.0, $p380);
    call {:si_unique_call 2049} {:cexpr "__cil_tmp264"} boogie_si_record_i8($i381);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i381);
    call {:si_unique_call 2050} {:cexpr "__cil_tmp265"} boogie_si_record_i32($i382);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p383 := $M.4;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i384 := $p2i.ref.i64($p383);
    call {:si_unique_call 2051} {:cexpr "__cil_tmp266"} boogie_si_record_i64($i384);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i385 := $p2i.ref.i64($p0);
    call {:si_unique_call 2052} {:cexpr "__cil_tmp267"} boogie_si_record_i64($i385);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i386 := $sub.i64($i385, $i384);
    call {:si_unique_call 2053} {:cexpr "__cil_tmp268"} boogie_si_record_i64($i386);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i387 := $sdiv.i64($i386, 896);
    call {:si_unique_call 2054} {:cexpr "__cil_tmp269"} boogie_si_record_i64($i387);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i64.i16($i387);
    call {:si_unique_call 2055} {:cexpr "__cil_tmp270"} boogie_si_record_i16($i388);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i389 := $sext.i16.i32($i388);
    call {:si_unique_call 2056} {:cexpr "__cil_tmp271"} boogie_si_record_i32($i389);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} vslice_dummy_var_45 := dev_err.ref.ref.i32.i32($p377, .str.116, $i382, $i389);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} ldv_spin_lock();
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i391 := $p2i.ref.i64($p6);
    call {:si_unique_call 2059} {:cexpr "__cil_tmp272"} boogie_si_record_i64($i391);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i392 := $add.i64($i391, 285);
    call {:si_unique_call 2060} {:cexpr "__cil_tmp273"} boogie_si_record_i64($i392);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p393 := $i2p.i64.ref($i392);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i394 := $load.i8($M.0, $p393);
    call {:si_unique_call 2061} {:cexpr "__cil_tmp274"} boogie_si_record_i8($i394);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i395 := $zext.i8.i32($i394);
    call {:si_unique_call 2062} {:cexpr "__cil_tmp275"} boogie_si_record_i32($i395);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i399 := $p2i.ref.i64($p6);
    call {:si_unique_call 2288} {:cexpr "__cil_tmp276"} boogie_si_record_i64($i399);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i400 := $add.i64($i399, 285);
    call {:si_unique_call 2289} {:cexpr "__cil_tmp277"} boogie_si_record_i64($i400);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p401 := $i2p.i64.ref($i400);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p401, 3);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i402 := $p2i.ref.i64($p6);
    call {:si_unique_call 2290} {:cexpr "__cil_tmp278"} boogie_si_record_i64($i402);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i403 := $add.i64($i402, 288);
    call {:si_unique_call 2291} {:cexpr "__cil_tmp279"} boogie_si_record_i64($i403);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p404 := $i2p.i64.ref($i403);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p404, 61);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i405 := $load.i32($M.58, $p3);
    call {:si_unique_call 2293} {:cexpr "__cil_tmp280"} boogie_si_record_i32($i405);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i406 := $add.i32($i405, 1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p3, $i406);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    return;

  $bb61:
    assume $i396 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i397 := $M.28;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i398 := $add.i32($i397, 1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.28 := $i398;
    call {:si_unique_call 2287} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i398);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb28:
    assume $i37 == 1;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} ldv_spin_lock();
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p6);
    call {:si_unique_call 2039} {:cexpr "__cil_tmp253"} boogie_si_record_i64($i366);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i367 := $add.i64($i366, 280);
    call {:si_unique_call 2040} {:cexpr "__cil_tmp254"} boogie_si_record_i64($i367);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i368 := $p2i.ref.i64($p6);
    call {:si_unique_call 2041} {:cexpr "__cil_tmp255"} boogie_si_record_i64($i368);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i369 := $add.i64($i368, 280);
    call {:si_unique_call 2042} {:cexpr "__cil_tmp256"} boogie_si_record_i64($i369);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p370 := $i2p.i64.ref($i369);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i371 := $load.i32($M.0, $p370);
    call {:si_unique_call 2043} {:cexpr "__cil_tmp257"} boogie_si_record_i32($i371);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i372 := $and.i32($i371, $sub.i32(0, 3));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p373 := $i2p.i64.ref($i367);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p373, $i372);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i374 := $p2i.ref.i64($p6);
    call {:si_unique_call 2044} {:cexpr "__cil_tmp258"} boogie_si_record_i64($i374);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i375 := $add.i64($i374, 208);
    call {:si_unique_call 2045} {:cexpr "__cil_tmp259"} boogie_si_record_i64($i375);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p376 := $i2p.i64.ref($i375);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} spin_unlock_irqrestore($p376, $u0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p0);
    call {:si_unique_call 2063} {:cexpr "__cil_tmp281"} boogie_si_record_i64($i407);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i408 := $add.i64($i407, 8);
    call {:si_unique_call 2064} {:cexpr "__cil_tmp282"} boogie_si_record_i64($i408);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p409 := $i2p.i64.ref($i408);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i410 := $load.i64($M.0, $p409);
    call {:si_unique_call 2065} {:cexpr "__cil_tmp283"} boogie_si_record_i64($i410);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p1);
    call {:si_unique_call 2066} {:cexpr "__cil_tmp284"} boogie_si_record_i64($i411);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i412 := $add.i64($i411, 8);
    call {:si_unique_call 2067} {:cexpr "__cil_tmp285"} boogie_si_record_i64($i412);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p413 := $i2p.i64.ref($i412);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i414 := $load.i64($M.0, $p413);
    call {:si_unique_call 2068} {:cexpr "__cil_tmp286"} boogie_si_record_i64($i414);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i415 := $ne.i64($i414, $i410);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb76:
    assume $i415 == 1;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i416 := $p2i.ref.i64($p0);
    call {:si_unique_call 2294} {:cexpr "__cil_tmp287"} boogie_si_record_i64($i416);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i417 := $add.i64($i416, 8);
    call {:si_unique_call 2295} {:cexpr "__cil_tmp288"} boogie_si_record_i64($i417);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p418 := $i2p.i64.ref($i417);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i419 := $load.i64($M.0, $p418);
    call {:si_unique_call 2296} {:cexpr "__cil_tmp289"} boogie_si_record_i64($i419);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i420 := $ne.i64($i419, 0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume $i420 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} ldv_spin_lock();
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i421 := $p2i.ref.i64($p6);
    call {:si_unique_call 2298} {:cexpr "__cil_tmp290"} boogie_si_record_i64($i421);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i422 := $add.i64($i421, 285);
    call {:si_unique_call 2299} {:cexpr "__cil_tmp291"} boogie_si_record_i64($i422);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p423 := $i2p.i64.ref($i422);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i424 := $load.i8($M.0, $p423);
    call {:si_unique_call 2300} {:cexpr "__cil_tmp292"} boogie_si_record_i8($i424);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i425 := $zext.i8.i32($i424);
    call {:si_unique_call 2301} {:cexpr "__cil_tmp293"} boogie_si_record_i32($i425);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i425, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p6);
    call {:si_unique_call 2303} {:cexpr "__cil_tmp294"} boogie_si_record_i64($i429);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i430 := $add.i64($i429, 285);
    call {:si_unique_call 2304} {:cexpr "__cil_tmp295"} boogie_si_record_i64($i430);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p431 := $i2p.i64.ref($i430);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p431, 2);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i432 := $load.i32($M.58, $p3);
    call {:si_unique_call 2306} {:cexpr "__cil_tmp296"} boogie_si_record_i32($i432);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i433 := $add.i32($i432, 1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p3, $i433);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i426 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i427 := $M.28;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i427, 1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.28 := $i428;
    call {:si_unique_call 2302} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i428);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} ldv_spin_lock();
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i355 := $p2i.ref.i64($p6);
    call {:si_unique_call 2030} {:cexpr "__cil_tmp245"} boogie_si_record_i64($i355);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i356 := $add.i64($i355, 280);
    call {:si_unique_call 2031} {:cexpr "__cil_tmp246"} boogie_si_record_i64($i356);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i357 := $p2i.ref.i64($p6);
    call {:si_unique_call 2032} {:cexpr "__cil_tmp247"} boogie_si_record_i64($i357);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i358 := $add.i64($i357, 280);
    call {:si_unique_call 2033} {:cexpr "__cil_tmp248"} boogie_si_record_i64($i358);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p359 := $i2p.i64.ref($i358);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.0, $p359);
    call {:si_unique_call 2034} {:cexpr "__cil_tmp249"} boogie_si_record_i32($i360);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i361 := $or.i32($i360, 2);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p362 := $i2p.i64.ref($i356);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p362, $i361);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p6);
    call {:si_unique_call 2035} {:cexpr "__cil_tmp250"} boogie_si_record_i64($i363);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i364 := $add.i64($i363, 208);
    call {:si_unique_call 2036} {:cexpr "__cil_tmp251"} boogie_si_record_i64($i364);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p365 := $i2p.i64.ref($i364);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} spin_unlock_irqrestore($p365, $u0);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i33 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i2, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p1);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} ldv_spin_lock();
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    call {:si_unique_call 2262} {:cexpr "__cil_tmp221"} boogie_si_record_i64($i324);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i325 := $add.i64($i324, 16);
    call {:si_unique_call 2263} {:cexpr "__cil_tmp222"} boogie_si_record_i64($i325);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p326 := $i2p.i64.ref($i325);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i327 := $load.i16($M.0, $p326);
    call {:si_unique_call 2264} {:cexpr "__cil_tmp223"} boogie_si_record_i16($i327);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i328 := $sext.i16.i32($i327);
    call {:si_unique_call 2265} {:cexpr "__cil_tmp224"} boogie_si_record_i32($i328);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i329 := $sext.i32.i64($i328);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i330 := $mul.i64($i329, 1);
    call {:si_unique_call 2266} {:cexpr "__cil_tmp225"} boogie_si_record_i64($i330);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i331 := $add.i64(0, $i330);
    call {:si_unique_call 2267} {:cexpr "__cil_tmp226"} boogie_si_record_i64($i331);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i332 := $add.i64(384, $i331);
    call {:si_unique_call 2268} {:cexpr "__cil_tmp227"} boogie_si_record_i64($i332);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i333 := $p2i.ref.i64($p0);
    call {:si_unique_call 2269} {:cexpr "__cil_tmp228"} boogie_si_record_i64($i333);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i334 := $add.i64($i333, $i332);
    call {:si_unique_call 2270} {:cexpr "__cil_tmp229"} boogie_si_record_i64($i334);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i335 := $p2i.ref.i64($p323);
    call {:si_unique_call 2271} {:cexpr "__cil_tmp230"} boogie_si_record_i64($i335);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i336 := $add.i64($i335, 16);
    call {:si_unique_call 2272} {:cexpr "__cil_tmp231"} boogie_si_record_i64($i336);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p337 := $i2p.i64.ref($i336);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i338 := $load.i16($M.0, $p337);
    call {:si_unique_call 2273} {:cexpr "__cil_tmp232"} boogie_si_record_i16($i338);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i339 := $sext.i16.i32($i338);
    call {:si_unique_call 2274} {:cexpr "__cil_tmp233"} boogie_si_record_i32($i339);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i340 := $sext.i32.i64($i339);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i341 := $mul.i64($i340, 1);
    call {:si_unique_call 2275} {:cexpr "__cil_tmp234"} boogie_si_record_i64($i341);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i342 := $add.i64(0, $i341);
    call {:si_unique_call 2276} {:cexpr "__cil_tmp235"} boogie_si_record_i64($i342);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i343 := $add.i64(384, $i342);
    call {:si_unique_call 2277} {:cexpr "__cil_tmp236"} boogie_si_record_i64($i343);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p0);
    call {:si_unique_call 2278} {:cexpr "__cil_tmp237"} boogie_si_record_i64($i344);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i345 := $add.i64($i344, $i343);
    call {:si_unique_call 2279} {:cexpr "__cil_tmp238"} boogie_si_record_i64($i345);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p346 := $i2p.i64.ref($i345);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.0, $p346);
    call {:si_unique_call 2280} {:cexpr "__cil_tmp239"} boogie_si_record_i8($i347);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    call {:si_unique_call 2281} {:cexpr "__cil_tmp240"} boogie_si_record_i32($i348);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i349 := $or.i32($i348, 16);
    call {:si_unique_call 2282} {:cexpr "__cil_tmp241"} boogie_si_record_i32($i349);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i32.i8($i349);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p351 := $i2p.i64.ref($i334);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p351, $i350);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p0);
    call {:si_unique_call 2283} {:cexpr "__cil_tmp242"} boogie_si_record_i64($i352);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i353 := $add.i64($i352, 392);
    call {:si_unique_call 2284} {:cexpr "__cil_tmp243"} boogie_si_record_i64($i353);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p354 := $i2p.i64.ref($i353);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} spin_unlock_irqrestore($p354, $u0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i322 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i2, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p1);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    call {:si_unique_call 2215} {:cexpr "__cil_tmp176"} boogie_si_record_i64($i260);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i261 := $add.i64($i260, 16);
    call {:si_unique_call 2216} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i261);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p262 := $i2p.i64.ref($i261);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i263 := $load.i16($M.0, $p262);
    call {:si_unique_call 2217} {:cexpr "__cil_tmp178"} boogie_si_record_i16($i263);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i264 := $sext.i16.i64($i263);
    call {:si_unique_call 2218} {:cexpr "__cil_tmp179"} boogie_si_record_i64($i264);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i265 := $p2i.ref.i64($p0);
    call {:si_unique_call 2219} {:cexpr "__cil_tmp180"} boogie_si_record_i64($i265);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i266 := $add.i64($i265, 472);
    call {:si_unique_call 2220} {:cexpr "__cil_tmp181"} boogie_si_record_i64($i266);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p267 := $i2p.i64.ref($i266);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($p268, $mul.ref($i264, 16));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i270 := $p2i.ref.i64($p269);
    call {:si_unique_call 2221} {:cexpr "__cil_tmp183"} boogie_si_record_i64($i270);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i271 := $add.i64($i270, 4);
    call {:si_unique_call 2222} {:cexpr "__cil_tmp184"} boogie_si_record_i64($i271);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p259);
    call {:si_unique_call 2223} {:cexpr "__cil_tmp185"} boogie_si_record_i64($i272);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i273 := $add.i64($i272, 18);
    call {:si_unique_call 2224} {:cexpr "__cil_tmp186"} boogie_si_record_i64($i273);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p274 := $i2p.i64.ref($i273);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i275 := $load.i16($M.0, $p274);
    call {:si_unique_call 2225} {:cexpr "__cil_tmp187"} boogie_si_record_i16($i275);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p276 := $i2p.i64.ref($i271);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p276, $i275);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p269);
    call {:si_unique_call 2226} {:cexpr "__cil_tmp188"} boogie_si_record_i64($i277);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i278 := $add.i64($i277, 6);
    call {:si_unique_call 2227} {:cexpr "__cil_tmp189"} boogie_si_record_i64($i278);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p259);
    call {:si_unique_call 2228} {:cexpr "__cil_tmp190"} boogie_si_record_i64($i279);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i280 := $add.i64($i279, 20);
    call {:si_unique_call 2229} {:cexpr "__cil_tmp191"} boogie_si_record_i64($i280);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p281 := $i2p.i64.ref($i280);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i282 := $load.i16($M.0, $p281);
    call {:si_unique_call 2230} {:cexpr "__cil_tmp192"} boogie_si_record_i16($i282);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p283 := $i2p.i64.ref($i278);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, $i282);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p269);
    call {:si_unique_call 2231} {:cexpr "__cil_tmp193"} boogie_si_record_i64($i284);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i285 := $add.i64($i284, 8);
    call {:si_unique_call 2232} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i285);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p259);
    call {:si_unique_call 2233} {:cexpr "__cil_tmp195"} boogie_si_record_i64($i286);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i287 := $add.i64($i286, 24);
    call {:si_unique_call 2234} {:cexpr "__cil_tmp196"} boogie_si_record_i64($i287);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p288 := $i2p.i64.ref($i287);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i289 := $load.i64($M.0, $p288);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p290 := $i2p.i64.ref($i285);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p290, $i289);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_spin_lock();
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p259);
    call {:si_unique_call 2236} {:cexpr "__cil_tmp197"} boogie_si_record_i64($i291);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i292 := $add.i64($i291, 16);
    call {:si_unique_call 2237} {:cexpr "__cil_tmp198"} boogie_si_record_i64($i292);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p293 := $i2p.i64.ref($i292);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i294 := $load.i16($M.0, $p293);
    call {:si_unique_call 2238} {:cexpr "__cil_tmp199"} boogie_si_record_i16($i294);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i295 := $sext.i16.i32($i294);
    call {:si_unique_call 2239} {:cexpr "__cil_tmp200"} boogie_si_record_i32($i295);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i296 := $sext.i32.i64($i295);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i297 := $mul.i64($i296, 1);
    call {:si_unique_call 2240} {:cexpr "__cil_tmp201"} boogie_si_record_i64($i297);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i298 := $add.i64(0, $i297);
    call {:si_unique_call 2241} {:cexpr "__cil_tmp202"} boogie_si_record_i64($i298);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i299 := $add.i64(384, $i298);
    call {:si_unique_call 2242} {:cexpr "__cil_tmp203"} boogie_si_record_i64($i299);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p0);
    call {:si_unique_call 2243} {:cexpr "__cil_tmp204"} boogie_si_record_i64($i300);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i301 := $add.i64($i300, $i299);
    call {:si_unique_call 2244} {:cexpr "__cil_tmp205"} boogie_si_record_i64($i301);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p259);
    call {:si_unique_call 2245} {:cexpr "__cil_tmp206"} boogie_si_record_i64($i302);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i303 := $add.i64($i302, 16);
    call {:si_unique_call 2246} {:cexpr "__cil_tmp207"} boogie_si_record_i64($i303);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p304 := $i2p.i64.ref($i303);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i305 := $load.i16($M.0, $p304);
    call {:si_unique_call 2247} {:cexpr "__cil_tmp208"} boogie_si_record_i16($i305);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i306 := $sext.i16.i32($i305);
    call {:si_unique_call 2248} {:cexpr "__cil_tmp209"} boogie_si_record_i32($i306);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i307 := $sext.i32.i64($i306);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i308 := $mul.i64($i307, 1);
    call {:si_unique_call 2249} {:cexpr "__cil_tmp210"} boogie_si_record_i64($i308);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i309 := $add.i64(0, $i308);
    call {:si_unique_call 2250} {:cexpr "__cil_tmp211"} boogie_si_record_i64($i309);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i310 := $add.i64(384, $i309);
    call {:si_unique_call 2251} {:cexpr "__cil_tmp212"} boogie_si_record_i64($i310);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i311 := $p2i.ref.i64($p0);
    call {:si_unique_call 2252} {:cexpr "__cil_tmp213"} boogie_si_record_i64($i311);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i312 := $add.i64($i311, $i310);
    call {:si_unique_call 2253} {:cexpr "__cil_tmp214"} boogie_si_record_i64($i312);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p313 := $i2p.i64.ref($i312);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i314 := $load.i8($M.0, $p313);
    call {:si_unique_call 2254} {:cexpr "__cil_tmp215"} boogie_si_record_i8($i314);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i315 := $zext.i8.i32($i314);
    call {:si_unique_call 2255} {:cexpr "__cil_tmp216"} boogie_si_record_i32($i315);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i316 := $or.i32($i315, 8);
    call {:si_unique_call 2256} {:cexpr "__cil_tmp217"} boogie_si_record_i32($i316);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i8($i316);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p318 := $i2p.i64.ref($i301);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p318, $i317);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i319 := $p2i.ref.i64($p0);
    call {:si_unique_call 2257} {:cexpr "__cil_tmp218"} boogie_si_record_i64($i319);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i320 := $add.i64($i319, 392);
    call {:si_unique_call 2258} {:cexpr "__cil_tmp219"} boogie_si_record_i64($i320);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p321 := $i2p.i64.ref($i320);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} spin_unlock_irqrestore($p321, $u0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i258 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i2, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    call {:si_unique_call 2173} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i203);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i204 := $add.i64($i203, 16);
    call {:si_unique_call 2174} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i204);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p205 := $i2p.i64.ref($i204);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.0, $p205);
    call {:si_unique_call 2175} {:cexpr "__cil_tmp137"} boogie_si_record_i16($i206);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i207 := $sext.i16.i64($i206);
    call {:si_unique_call 2176} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i207);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p0);
    call {:si_unique_call 2177} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i208);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i209 := $add.i64($i208, 472);
    call {:si_unique_call 2178} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i209);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p210 := $i2p.i64.ref($i209);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p211, $mul.ref($i207, 16));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    call {:si_unique_call 2179} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i213);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i214 := $add.i64($i213, 2);
    call {:si_unique_call 2180} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i214);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p202);
    call {:si_unique_call 2181} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i215);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i216 := $add.i64($i215, 18);
    call {:si_unique_call 2182} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i216);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p217 := $i2p.i64.ref($i216);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i218 := $load.i16($M.0, $p217);
    call {:si_unique_call 2183} {:cexpr "__cil_tmp146"} boogie_si_record_i16($i218);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p219 := $i2p.i64.ref($i214);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, $i218);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p212);
    call {:si_unique_call 2184} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i220);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i220, 6);
    call {:si_unique_call 2185} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i221);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p202);
    call {:si_unique_call 2186} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i222);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i223 := $add.i64($i222, 20);
    call {:si_unique_call 2187} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i223);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p224 := $i2p.i64.ref($i223);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i225 := $load.i16($M.0, $p224);
    call {:si_unique_call 2188} {:cexpr "__cil_tmp151"} boogie_si_record_i16($i225);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p226 := $i2p.i64.ref($i221);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p226, $i225);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} ldv_spin_lock();
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p202);
    call {:si_unique_call 2190} {:cexpr "__cil_tmp152"} boogie_si_record_i64($i227);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i228 := $add.i64($i227, 16);
    call {:si_unique_call 2191} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i228);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p229 := $i2p.i64.ref($i228);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i230 := $load.i16($M.0, $p229);
    call {:si_unique_call 2192} {:cexpr "__cil_tmp154"} boogie_si_record_i16($i230);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i231 := $sext.i16.i32($i230);
    call {:si_unique_call 2193} {:cexpr "__cil_tmp155"} boogie_si_record_i32($i231);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i231);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i233 := $mul.i64($i232, 1);
    call {:si_unique_call 2194} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i233);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i234 := $add.i64(0, $i233);
    call {:si_unique_call 2195} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i234);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i235 := $add.i64(384, $i234);
    call {:si_unique_call 2196} {:cexpr "__cil_tmp158"} boogie_si_record_i64($i235);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i236 := $p2i.ref.i64($p0);
    call {:si_unique_call 2197} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i236);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i237 := $add.i64($i236, $i235);
    call {:si_unique_call 2198} {:cexpr "__cil_tmp160"} boogie_si_record_i64($i237);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p202);
    call {:si_unique_call 2199} {:cexpr "__cil_tmp161"} boogie_si_record_i64($i238);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i239 := $add.i64($i238, 16);
    call {:si_unique_call 2200} {:cexpr "__cil_tmp162"} boogie_si_record_i64($i239);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p240 := $i2p.i64.ref($i239);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i241 := $load.i16($M.0, $p240);
    call {:si_unique_call 2201} {:cexpr "__cil_tmp163"} boogie_si_record_i16($i241);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i242 := $sext.i16.i32($i241);
    call {:si_unique_call 2202} {:cexpr "__cil_tmp164"} boogie_si_record_i32($i242);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i242);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i244 := $mul.i64($i243, 1);
    call {:si_unique_call 2203} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i244);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i245 := $add.i64(0, $i244);
    call {:si_unique_call 2204} {:cexpr "__cil_tmp166"} boogie_si_record_i64($i245);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i246 := $add.i64(384, $i245);
    call {:si_unique_call 2205} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i246);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p0);
    call {:si_unique_call 2206} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i247);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i248 := $add.i64($i247, $i246);
    call {:si_unique_call 2207} {:cexpr "__cil_tmp169"} boogie_si_record_i64($i248);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p249 := $i2p.i64.ref($i248);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.0, $p249);
    call {:si_unique_call 2208} {:cexpr "__cil_tmp170"} boogie_si_record_i8($i250);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i250);
    call {:si_unique_call 2209} {:cexpr "__cil_tmp171"} boogie_si_record_i32($i251);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i252 := $or.i32($i251, 4);
    call {:si_unique_call 2210} {:cexpr "__cil_tmp172"} boogie_si_record_i32($i252);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i32.i8($i252);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p254 := $i2p.i64.ref($i237);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p254, $i253);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p0);
    call {:si_unique_call 2211} {:cexpr "__cil_tmp173"} boogie_si_record_i64($i255);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i256 := $add.i64($i255, 392);
    call {:si_unique_call 2212} {:cexpr "__cil_tmp174"} boogie_si_record_i64($i256);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p257 := $i2p.i64.ref($i256);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} spin_unlock_irqrestore($p257, $u0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i201 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i2, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p1);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} ldv_spin_lock();
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    call {:si_unique_call 2148} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i170);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i171 := $add.i64($i170, 16);
    call {:si_unique_call 2149} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i171);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p172 := $i2p.i64.ref($i171);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i173 := $load.i16($M.0, $p172);
    call {:si_unique_call 2150} {:cexpr "__cil_tmp113"} boogie_si_record_i16($i173);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i174 := $sext.i16.i32($i173);
    call {:si_unique_call 2151} {:cexpr "__cil_tmp114"} boogie_si_record_i32($i174);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64($i174);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i176 := $mul.i64($i175, 1);
    call {:si_unique_call 2152} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i176);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i177 := $add.i64(0, $i176);
    call {:si_unique_call 2153} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i177);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i178 := $add.i64(384, $i177);
    call {:si_unique_call 2154} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i178);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p0);
    call {:si_unique_call 2155} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i179);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, $i178);
    call {:si_unique_call 2156} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i180);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p169);
    call {:si_unique_call 2157} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i181);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i182 := $add.i64($i181, 16);
    call {:si_unique_call 2158} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i182);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p183 := $i2p.i64.ref($i182);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i184 := $load.i16($M.0, $p183);
    call {:si_unique_call 2159} {:cexpr "__cil_tmp122"} boogie_si_record_i16($i184);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i185 := $sext.i16.i32($i184);
    call {:si_unique_call 2160} {:cexpr "__cil_tmp123"} boogie_si_record_i32($i185);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64($i185);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i187 := $mul.i64($i186, 1);
    call {:si_unique_call 2161} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i187);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i188 := $add.i64(0, $i187);
    call {:si_unique_call 2162} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i188);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i189 := $add.i64(384, $i188);
    call {:si_unique_call 2163} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i189);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p0);
    call {:si_unique_call 2164} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i190);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i191 := $add.i64($i190, $i189);
    call {:si_unique_call 2165} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i191);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p192 := $i2p.i64.ref($i191);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    call {:si_unique_call 2166} {:cexpr "__cil_tmp129"} boogie_si_record_i8($i193);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    call {:si_unique_call 2167} {:cexpr "__cil_tmp130"} boogie_si_record_i32($i194);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i195 := $or.i32($i194, 2);
    call {:si_unique_call 2168} {:cexpr "__cil_tmp131"} boogie_si_record_i32($i195);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i8($i195);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p197 := $i2p.i64.ref($i180);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p197, $i196);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p0);
    call {:si_unique_call 2169} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i198);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i199 := $add.i64($i198, 392);
    call {:si_unique_call 2170} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i199);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p200 := $i2p.i64.ref($i199);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} spin_unlock_irqrestore($p200, $u0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i168 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i2, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    call {:si_unique_call 2112} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i121);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 16);
    call {:si_unique_call 2113} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i122);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i122);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.0, $p123);
    call {:si_unique_call 2114} {:cexpr "__cil_tmp79"} boogie_si_record_i16($i124);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i125 := $sext.i16.i64($i124);
    call {:si_unique_call 2115} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i125);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p0);
    call {:si_unique_call 2116} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i126);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 472);
    call {:si_unique_call 2117} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i127);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref($i125, 16));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p120);
    call {:si_unique_call 2118} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i131);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i131, 20);
    call {:si_unique_call 2119} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i132);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i132);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    call {:si_unique_call 2120} {:cexpr "__cil_tmp86"} boogie_si_record_i32($i134);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p130);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, $i135);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} ldv_spin_lock();
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p120);
    call {:si_unique_call 2122} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i137);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i138 := $add.i64($i137, 16);
    call {:si_unique_call 2123} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i138);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p139 := $i2p.i64.ref($i138);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.0, $p139);
    call {:si_unique_call 2124} {:cexpr "__cil_tmp89"} boogie_si_record_i16($i140);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i141 := $sext.i16.i32($i140);
    call {:si_unique_call 2125} {:cexpr "__cil_tmp90"} boogie_si_record_i32($i141);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i141);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i143 := $mul.i64($i142, 1);
    call {:si_unique_call 2126} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i143);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i144 := $add.i64(0, $i143);
    call {:si_unique_call 2127} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i144);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i145 := $add.i64(384, $i144);
    call {:si_unique_call 2128} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i145);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p0);
    call {:si_unique_call 2129} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i146);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i147 := $add.i64($i146, $i145);
    call {:si_unique_call 2130} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i147);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p120);
    call {:si_unique_call 2131} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i148);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, 16);
    call {:si_unique_call 2132} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i149);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p150 := $i2p.i64.ref($i149);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p150);
    call {:si_unique_call 2133} {:cexpr "__cil_tmp98"} boogie_si_record_i16($i151);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i152 := $sext.i16.i32($i151);
    call {:si_unique_call 2134} {:cexpr "__cil_tmp99"} boogie_si_record_i32($i152);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i152);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i154 := $mul.i64($i153, 1);
    call {:si_unique_call 2135} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i154);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i155 := $add.i64(0, $i154);
    call {:si_unique_call 2136} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i155);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i156 := $add.i64(384, $i155);
    call {:si_unique_call 2137} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i156);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p0);
    call {:si_unique_call 2138} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i157);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i158 := $add.i64($i157, $i156);
    call {:si_unique_call 2139} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i158);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p159 := $i2p.i64.ref($i158);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    call {:si_unique_call 2140} {:cexpr "__cil_tmp105"} boogie_si_record_i8($i160);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    call {:si_unique_call 2141} {:cexpr "__cil_tmp106"} boogie_si_record_i32($i161);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i162 := $or.i32($i161, 1);
    call {:si_unique_call 2142} {:cexpr "__cil_tmp107"} boogie_si_record_i32($i162);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p164 := $i2p.i64.ref($i147);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p164, $i163);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p0);
    call {:si_unique_call 2143} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i165);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i166 := $add.i64($i165, 392);
    call {:si_unique_call 2144} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i166);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p167 := $i2p.i64.ref($i166);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} spin_unlock_irqrestore($p167, $u0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i119 == 1;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} ldv_spin_lock();
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p6);
    call {:si_unique_call 2025} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i99);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 285);
    call {:si_unique_call 2026} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i100);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    call {:si_unique_call 2027} {:cexpr "__cil_tmp68"} boogie_si_record_i8($i102);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    call {:si_unique_call 2028} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i103);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p6);
    call {:si_unique_call 2104} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i107);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 285);
    call {:si_unique_call 2105} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i108);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 3);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p6);
    call {:si_unique_call 2106} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i110);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 288);
    call {:si_unique_call 2107} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i111);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p98);
    call {:si_unique_call 2108} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i112);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 16);
    call {:si_unique_call 2109} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i113);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i111);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.58, $p3);
    call {:si_unique_call 2111} {:cexpr "__cil_tmp76"} boogie_si_record_i32($i117);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p3, $i118);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i104 == 1;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i105 := $M.28;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.28 := $i106;
    call {:si_unique_call 2103} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i106);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} ldv_spin_lock();
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p6);
    call {:si_unique_call 2020} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 285);
    call {:si_unique_call 2021} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i40);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    call {:si_unique_call 2022} {:cexpr "__cil_tmp33"} boogie_si_record_i8($i42);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    call {:si_unique_call 2023} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i43);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p6);
    call {:si_unique_call 2070} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i47);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 285);
    call {:si_unique_call 2071} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i48);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 1);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 2072} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i50);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 16);
    call {:si_unique_call 2073} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i51);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p38);
    call {:si_unique_call 2074} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i52);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 16);
    call {:si_unique_call 2075} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i53);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i51);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p0);
    call {:si_unique_call 2076} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i57);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 8);
    call {:si_unique_call 2077} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i58);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p1);
    call {:si_unique_call 2078} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i59);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 8);
    call {:si_unique_call 2079} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i60);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i58);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i62);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p38);
    call {:si_unique_call 2080} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i64);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 24);
    call {:si_unique_call 2081} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i65);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p6);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, $i67);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p6);
    call {:si_unique_call 2082} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i69);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 24);
    call {:si_unique_call 2083} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i70);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    call {:si_unique_call 2084} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i72);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p38);
    call {:si_unique_call 2085} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i73);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 32);
    call {:si_unique_call 2086} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i74);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    call {:si_unique_call 2087} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i76);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, $i72);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.58, $p3);
    call {:si_unique_call 2102} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i96);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 1);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p3, $i97);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39:
    assume $i77 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} ldv_spin_lock();
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p6);
    call {:si_unique_call 2089} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i78);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 280);
    call {:si_unique_call 2090} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i79);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p6);
    call {:si_unique_call 2091} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i80);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 280);
    call {:si_unique_call 2092} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i81);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    call {:si_unique_call 2093} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i83);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, $sub.i32(0, 2));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i79);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p6);
    call {:si_unique_call 2094} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i86);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 208);
    call {:si_unique_call 2095} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i87);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} spin_unlock_irqrestore($p88, $u0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p6);
    call {:si_unique_call 2097} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i89);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 24);
    call {:si_unique_call 2098} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i90);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p38);
    call {:si_unique_call 2099} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i91);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 32);
    call {:si_unique_call 2100} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i92);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i90);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p95, $i94);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i44 == 1;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i45 := $M.28;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.28 := $i46;
    call {:si_unique_call 2069} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i46);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb35;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 390328);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 391360);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 392392);

procedure main();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.28, $M.14, $M.29, $M.21, $M.30, $M.58, $M.6, $M.19, $M.13, $M.4, $M.16, $M.27, $M.11, $M.12, $M.10, $M.20, $M.23, $M.22, $M.9, $M.8, $M.5, $M.15, $M.3, $M.116, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.17, $M.18, $M.7, $CurrAddr, assertsPassed;



implementation main()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i66: i32;
  var $i67: i16;
  var $i68: i32;
  var $i69: i8;
  var $i74: i32;
  var $i75: i1;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i64;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    call {:si_unique_call 2307} $initialize();
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} ldv_initialize();
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2311} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2313} {:cexpr "tmp___0"} boogie_si_record_i32($i0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} ldv_check_final_state();
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i49, $i50, $i51, $i52, $i59, $i60, $i61, $i62, $i66, $i67, $i68, $i69, $i74, $i75, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61 := main_loop_$bb4($i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i49, $i50, $i51, $i52, $i59, $i60, $i61, $i62, $i66, $i67, $i68, $i69, $i74, $i75, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2314} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2315} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2316} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 3);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i6 == 1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 4);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i7 == 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 5);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i8 == 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 6);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i9 == 1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 7);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i10 == 1);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 8);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i11 == 1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, 9);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i12 == 1);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 10);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i13 == 1);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 11);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i14 == 1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, 12);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i15 == 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i2, 13);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i16 == 1);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, 14);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i17 == 1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i2, 15);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i18 == 1);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i2, 16);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i19 == 1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 17);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i20 == 1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i2, 18);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i21 == 1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i2, 19);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i22 == 1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i2, 20);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i23 == 1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i2, 21);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i24 == 1);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i2, 22);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i25 == 1);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i2, 23);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i26 == 1);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i2, 24);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i27 == 1);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i2, 25);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i28 == 1);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i2, 26);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i29 == 1);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i2, 27);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i30 == 1);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i2, 28);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i31 == 1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i2, 29);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i32 == 1);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i2, 30);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i33 == 1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i2, 31);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i34 == 1);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i2, 32);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i35 == 1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i2, 33);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i36 == 1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i2, 34);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i37 == 1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i2, 35);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i38 == 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i2, 36);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i39 == 1);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i2, 37);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i40 == 1);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i2, 38);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i41 == 1);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 39);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i42 == 1);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i2, 40);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i43 == 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i2, 41);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i44 == 1);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i2, 42);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i45 == 1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2376} $i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 2377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i74);
    call {:si_unique_call 2378} {:cexpr "tmp___0"} boogie_si_record_i32($i74);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i75 == 1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb185_dummy;

  $bb132:
    assume $i45 == 1;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} vslice_dummy_var_61 := xpc_handle_notify_IRQ_uv($u2, $u8);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb129:
    assume $i44 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} vslice_dummy_var_60 := xpc_handle_activate_IRQ_uv($u2, $u8);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i43 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} xpc_notify_senders_of_disconnect_uv($u12);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb123:
    assume $i42 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} xpc_received_payload_uv($u12, $u8);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i41 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} vslice_dummy_var_59 := xpc_get_deliverable_payload_uv($u12);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb117:
    assume $i40 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($u10);
    call {:si_unique_call 2362} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i66);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    call {:si_unique_call 2363} {:cexpr "__cil_tmp43"} boogie_si_record_i16($i67);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($u13);
    call {:si_unique_call 2364} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i68);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    call {:si_unique_call 2365} {:cexpr "__cil_tmp45"} boogie_si_record_i8($i69);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} vslice_dummy_var_58 := xpc_send_payload_uv($u12, $u2, $u8, $i67, $i69, $u7, $u8);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i39 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} vslice_dummy_var_57 := xpc_n_of_deliverable_payloads_uv($u12);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb111:
    assume $i38 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} vslice_dummy_var_56 := xpc_any_partition_engaged_uv();
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb108:
    assume $i37 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i61 := $sext.i16.i32($u10);
    call {:si_unique_call 2357} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i61);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    call {:si_unique_call 2358} {:cexpr "__cil_tmp41"} boogie_si_record_i16($i62);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} vslice_dummy_var_55 := xpc_partition_engaged_uv($i62);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb105:
    assume $i36 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($u10);
    call {:si_unique_call 2354} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i59);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    call {:si_unique_call 2355} {:cexpr "__cil_tmp39"} boogie_si_record_i16($i60);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} xpc_assume_partition_disengaged_uv($i60);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb102:
    assume $i35 == 1;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} xpc_indicate_partition_disengaged_uv($u11);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i34 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} xpc_indicate_partition_engaged_uv($u11);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i33 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} xpc_teardown_msg_structures_uv($u12);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb93:
    assume $i32 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} vslice_dummy_var_54 := xpc_setup_msg_structures_uv($u12);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i31 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vslice_dummy_var_53 := xpc_save_remote_msgqueue_pa_uv($u12, $u0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb87:
    assume $i30 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} xpc_process_msg_chctl_flags_uv($u11, $u2);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i29 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} xpc_send_chctl_opencomplete_uv($u12, $u5);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i28 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} xpc_send_chctl_openreply_uv($u12, $u5);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i27 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} xpc_send_chctl_openrequest_uv($u12, $u5);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i26 == 1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} xpc_send_chctl_closereply_uv($u12, $u5);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i25 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} xpc_send_chctl_closerequest_uv($u12, $u5);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i24 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} vslice_dummy_var_52 := xpc_get_chctl_all_flags_uv($u11);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb66:
    assume $i23 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} vslice_dummy_var_51 := xpc_make_first_contact_uv($u11);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i22 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} xpc_teardown_ch_structures_uv($u11);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb60:
    assume $i21 == 1;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} vslice_dummy_var_50 := xpc_setup_ch_structures_uv($u11);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb57:
    assume $i20 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} xpc_cancel_partition_deactivation_request_uv($u11);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb54:
    assume $i19 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} xpc_request_partition_deactivation_uv($u11);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i18 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} xpc_request_partition_reactivation_uv($u11);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb48:
    assume $i17 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} xpc_request_partition_activation_uv($u9, $u0, $u2);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i16 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} vslice_dummy_var_49 := xpc_get_remote_heartbeat_uv($u11);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb42:
    assume $i15 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} xpc_heartbeat_exit_uv();
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb39:
    assume $i14 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} xpc_heartbeat_init_uv();
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb36:
    assume $i13 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} xpc_online_heartbeat_uv();
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb33:
    assume $i12 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} xpc_offline_heartbeat_uv();
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb30:
    assume $i11 == 1;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} xpc_increment_heartbeat_uv();
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb27:
    assume $i10 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} xpc_disallow_all_hbs_uv();
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb24:
    assume $i9 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i51 := $sext.i16.i32($u10);
    call {:si_unique_call 2325} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i51);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    call {:si_unique_call 2326} {:cexpr "__cil_tmp37"} boogie_si_record_i16($i52);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} xpc_disallow_hb_uv($i52);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb21:
    assume $i8 == 1;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i49 := $sext.i16.i32($u10);
    call {:si_unique_call 2322} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i49);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    call {:si_unique_call 2323} {:cexpr "__cil_tmp35"} boogie_si_record_i16($i50);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} xpc_allow_hb_uv($i50);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb18:
    assume $i7 == 1;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} vslice_dummy_var_48 := xpc_setup_rsvd_page_uv($u9);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb15:
    assume $i6 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} vslice_dummy_var_47 := xpc_get_partition_rsvd_page_pa_uv($u8, $u5, $u5, $u5);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb12:
    assume $i5 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} xpc_process_activate_IRQ_rcvd_uv();
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} xpc_teardown_partitions_uv();
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} vslice_dummy_var_46 := xpc_setup_partitions_uv();
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb185_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 393424);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2380} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 1} true;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 394456);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 395488);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 396520);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 397552);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 398584);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 399616);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 400648);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 401680);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 402712);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 403744);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 404776);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 405808);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 406840);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2381} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2382} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2383} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2384} __VERIFIER_assume($i4);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 407872);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 408904);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 409936);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 410968);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 412000);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2385} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2386} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2387} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2388} __VERIFIER_assume($i4);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 413032);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 414064);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 415096);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 416128);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 417160);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2389} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2390} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2391} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2392} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2393} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2394} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2395} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2396} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2397} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2398} __VERIFIER_assume($i7);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2399} __VERIFIER_assume($i11);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 418192);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 419224);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 420256);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 421288);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 422320);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 423352);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 424384);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 425416);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 426448);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2400} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2401} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2402} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 427480);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2403} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2404} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 428512);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 429544);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2405} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2406} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 430576);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 431608);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 432640);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 433672);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.19, $M.13, $M.4, $M.16, $M.27, $M.11, $M.12, $M.10, $M.20, $M.23, $M.22, $M.9, $M.8, $M.5, $M.1, $M.15, $M.3, $M.28, $M.29, $M.116, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.17, $M.18, $M.7;



implementation __SMACK_static_init()
{

  $bb0:
    $M.0 := $store.ref($M.0, xpc_dbg_name, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, xpc_part_dbg_subname, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(80, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(272, 1)), xpc_dbg_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(200, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(336, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(512, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(516, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(520, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(521, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(524, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(576, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(584, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(912, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(920, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(928, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(936, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(944, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(944, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(960, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(968, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(968, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(968, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(992, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1000, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1004, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1080, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, xpc_chan_dbg_subname, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(80, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(272, 1)), xpc_dbg_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(200, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(208, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(336, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(344, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(424, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(512, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(516, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(520, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(521, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(524, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(576, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(584, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(288, 1)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(912, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(920, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(928, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(936, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(944, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(944, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(960, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(968, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(968, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(968, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(992, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1000, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1004, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1080, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1096, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1152)), $mul.ref(1144, 1)), $0.ref);
    $M.6 := xpc_part_dbg_subname;
    $M.19 := xpc_chan_dbg_subname;
    $M.13 := 90;
    call {:si_unique_call 2407} {:cexpr "xpc_disengage_timelimit"} boogie_si_record_i32(90);
    $M.0 := $store.i32($M.0, xpc_activate_IRQ_rcvd_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, xpc_activate_IRQ_wq, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(xpc_activate_IRQ_wq, $mul.ref(72, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(xpc_activate_IRQ_wq, $mul.ref(72, 1)));
    $M.4 := $0.ref;
    $M.16 := $0.ref;
    $M.27 := $0.ref;
    $M.11 := $0.ref;
    $M.12 := $0.ref;
    $M.10 := $0.ref;
    $M.20 := $0.ref;
    $M.23 := $0.ref;
    $M.22 := $0.ref;
    $M.9 := $0.ref;
    $M.8 := $0.ref;
    $M.5 := $0.ref;
    call {:si_unique_call 2408} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 2409} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 2410} {:cexpr "xpc_nasid_mask_nlongs"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.3 := 0;
    call {:si_unique_call 2411} {:cexpr "xpc_disengage_timedout"} boogie_si_record_i32(0);
    call {:si_unique_call 2412} {:cexpr "xpc_exiting"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 2413} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32(0);
    $M.29 := $0.ref;
    $M.0 := $store.i32($M.0, xpc_discovery_exited, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.86);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(xpc_discovery_exited, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(xpc_discovery_exited, $mul.ref(80, 1)));
    $M.0 := $store.i32($M.0, xpc_hb_checker_exited, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.83);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(xpc_hb_checker_exited, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(xpc_hb_checker_exited, $mul.ref(80, 1)));
    $M.116 := $store.ref($M.116, xpc_hb_timer, $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.116 := $store.i64($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), 0);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(24, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), $0.ref);
    $M.116 := $store.i64($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.116 := $store.i32($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(48, 1)), 0);
    $M.116 := $store.i32($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(52, 1)), 0);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.116 := $store.ref($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.116 := $store.i32($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    call {:si_unique_call 2414} {:cexpr "xpc_hb_check_timeout"} boogie_si_record_i64(0);
    $M.0 := $store.ref($M.0, xpc_die_notifier, xpc_system_die);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_die_notifier, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_die_notifier, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, xpc_reboot_notifier, xpc_system_reboot);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xpc_reboot_notifier, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(xpc_reboot_notifier, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 2415} {:cexpr "xpc_disengage_max_timelimit"} boogie_si_record_i32(120);
    call {:si_unique_call 2416} {:cexpr "xpc_disengage_min_timelimit"} boogie_si_record_i32(0);
    $M.120 := $store.i32($M.120, xpc_hb_check_max_interval, 120);
    call {:si_unique_call 2417} {:cexpr "xpc_hb_check_max_interval"} boogie_si_record_i32(120);
    $M.121 := $store.i32($M.121, xpc_hb_check_min_interval, 10);
    call {:si_unique_call 2418} {:cexpr "xpc_hb_check_min_interval"} boogie_si_record_i32(10);
    $M.122 := $store.i32($M.122, xpc_hb_check_interval, 20);
    call {:si_unique_call 2419} {:cexpr "xpc_hb_check_interval"} boogie_si_record_i32(20);
    $M.120 := $store.i32($M.120, xpc_hb_max_interval, 10);
    call {:si_unique_call 2420} {:cexpr "xpc_hb_max_interval"} boogie_si_record_i32(10);
    $M.121 := $store.i32($M.121, xpc_hb_min_interval, 1);
    call {:si_unique_call 2421} {:cexpr "xpc_hb_min_interval"} boogie_si_record_i32(1);
    $M.122 := $store.i32($M.122, xpc_hb_interval, 5);
    call {:si_unique_call 2422} {:cexpr "xpc_hb_interval"} boogie_si_record_i32(5);
    $M.123 := $store.ref($M.123, xpc_sys_xpc_hb_dir, .str.75);
    $M.124 := $store.ref($M.124, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(8, 1)), xpc_hb_interval);
    $M.125 := $store.i32($M.125, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(16, 1)), 4);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(20, 1)), 420);
    $M.127 := $store.ref($M.127, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(32, 1)), proc_dointvec_minmax);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(48, 1)), xpc_hb_min_interval);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(56, 1)), xpc_hb_max_interval);
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(0, 1)), .str.76);
    $M.124 := $store.ref($M.124, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(8, 1)), xpc_hb_check_interval);
    $M.125 := $store.i32($M.125, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(16, 1)), 4);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(20, 1)), 420);
    $M.127 := $store.ref($M.127, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(32, 1)), proc_dointvec_minmax);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(48, 1)), xpc_hb_check_min_interval);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(56, 1)), xpc_hb_check_max_interval);
    $M.123 := $store.ref($M.123, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(8, 1)), $0.ref);
    $M.125 := $store.i32($M.125, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.127 := $store.ref($M.127, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(24, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(32, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(40, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(48, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(56, 1)), $0.ref);
    $M.132 := $store.ref($M.132, xpc_sys_xpc_dir, .str.73);
    $M.133 := $store.ref($M.133, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(8, 1)), $0.ref);
    $M.134 := $store.i32($M.134, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.135 := $store.i16($M.135, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(20, 1)), 365);
    $M.136 := $store.ref($M.136, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(24, 1)), xpc_sys_xpc_hb_dir);
    $M.137 := $store.ref($M.137, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(0, 1)), .str.74);
    $M.133 := $store.ref($M.133, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(8, 1)), xpc_disengage_timelimit);
    $M.134 := $store.i32($M.134, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(16, 1)), 4);
    $M.135 := $store.i16($M.135, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(20, 1)), 420);
    $M.136 := $store.ref($M.136, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(32, 1)), proc_dointvec_minmax);
    $M.138 := $store.ref($M.138, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(48, 1)), xpc_disengage_min_timelimit);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(56, 1)), xpc_disengage_max_timelimit);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(8, 1)), $0.ref);
    $M.134 := $store.i32($M.134, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.135 := $store.i16($M.135, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.136 := $store.ref($M.136, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, xpc_sys_dir, .str);
    $M.142 := $store.ref($M.142, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(8, 1)), $0.ref);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.144 := $store.i16($M.144, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(20, 1)), 365);
    $M.145 := $store.ref($M.145, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(24, 1)), xpc_sys_xpc_dir);
    $M.146 := $store.ref($M.146, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(32, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(48, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(0, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(8, 1)), $0.ref);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.144 := $store.i16($M.144, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.145 := $store.ref($M.145, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(32, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(48, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(56, 1)), $0.ref);
    $M.17 := $0.ref;
    $M.18 := $0.ref;
    call {:si_unique_call 2423} {:cexpr "xpc_nasid_mask_nbytes"} boogie_si_record_i32(0);
    $M.7 := $0.ref;
    call {:si_unique_call 2424} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 434704);

procedure devirtbounce(funcPtr: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce(funcPtr: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(xpc_any_partition_engaged_uv, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_setup_partitions_uv, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 2425} $i1 := xpc_setup_partitions_uv();
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 2426} $i2 := xpc_any_partition_engaged_uv();
    $r := $i2;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 435736);

procedure devirtbounce.1(funcPtr: ref, arg: i16) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i16) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(xpc_partition_engaged_uv, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2427} $i1 := xpc_partition_engaged_uv(arg);
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 436768);

procedure devirtbounce.2(funcPtr: ref, arg: i16);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation devirtbounce.2(funcPtr: ref, arg: i16)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(xpc_assume_partition_disengaged_uv, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i3 == 1);
    $i2 := $eq.ref(xpc_disallow_hb_uv, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i2 == 1);
    $i1 := $eq.ref(xpc_allow_hb_uv, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2428} xpc_allow_hb_uv(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2429} xpc_disallow_hb_uv(arg);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 2430} xpc_assume_partition_disengaged_uv(arg);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 437800);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.1, $M.28, $M.14, $CurrAddr, assertsPassed, $M.3;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(xpc_request_partition_deactivation_uv, $p0);
    assume true;
    goto $bb33, $bb31;

  $bb31:
    assume !($i15 == 1);
    $i14 := $eq.ref(xpc_indicate_partition_engaged_uv, $p0);
    assume true;
    goto $bb32, $bb29;

  $bb29:
    assume !($i14 == 1);
    $i13 := $eq.ref(xpc_indicate_partition_disengaged_uv, $p0);
    assume true;
    goto $bb30, $bb27;

  $bb27:
    assume !($i13 == 1);
    $i12 := $eq.ref(xpc_notify_senders_of_disconnect_uv, $p0);
    assume true;
    goto $bb28, $bb25;

  $bb25:
    assume !($i12 == 1);
    $i11 := $eq.ref(xpc_request_partition_deactivation_uv, $p0);
    assume true;
    goto $bb26, $bb23;

  $bb23:
    assume !($i11 == 1);
    $i10 := $eq.ref(xpc_indicate_partition_engaged_uv, $p0);
    assume true;
    goto $bb24, $bb21;

  $bb21:
    assume !($i10 == 1);
    $i9 := $eq.ref(xpc_indicate_partition_disengaged_uv, $p0);
    assume true;
    goto $bb22, $bb19;

  $bb19:
    assume !($i9 == 1);
    $i8 := $eq.ref(xpc_notify_senders_of_disconnect_uv, $p0);
    assume true;
    goto $bb20, $bb18;

  $bb18:
    assume !($i8 == 1);
    $i7 := $eq.ref(xpc_teardown_msg_structures_uv, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_teardown_ch_structures_uv, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_cancel_partition_deactivation_request_uv, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i5 == 1);
    $i4 := $eq.ref(xpc_request_partition_reactivation_uv, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2431} xpc_request_partition_reactivation_uv(arg);
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2432} xpc_cancel_partition_deactivation_request_uv(arg);
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 2433} xpc_teardown_ch_structures_uv(arg);
    return;

  $bb5:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2434} xpc_teardown_msg_structures_uv($p1);
    return;

  $bb20:
    assume $i8 == 1;
    goto $bb10;

  $bb10:
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2439} xpc_notify_senders_of_disconnect_uv($p3);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i9 == 1;
    goto $bb11;

  $bb11:
    call {:si_unique_call 2440} xpc_indicate_partition_disengaged_uv(arg);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i10 == 1;
    goto $bb12;

  $bb12:
    call {:si_unique_call 2441} xpc_indicate_partition_engaged_uv(arg);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i11 == 1;
    goto $bb13;

  $bb13:
    call {:si_unique_call 2442} xpc_request_partition_deactivation_uv(arg);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i12 == 1;
    goto $bb10;

  $bb30:
    assume $i13 == 1;
    goto $bb11;

  $bb32:
    assume $i14 == 1;
    goto $bb12;

  $bb33:
    assume $i15 == 1;
    goto $bb13;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 438832);

procedure devirtbounce.4(funcPtr: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.28, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation devirtbounce.4(funcPtr: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(xpc_process_activate_IRQ_rcvd_uv, $p0);
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i9 == 1);
    $i8 := $eq.ref(xpc_process_activate_IRQ_rcvd_uv, $p0);
    assume true;
    goto $bb20, $bb18;

  $bb18:
    assume !($i8 == 1);
    $i7 := $eq.ref(xpc_heartbeat_exit_uv, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_heartbeat_init_uv, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_online_heartbeat_uv, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i5 == 1);
    $i4 := $eq.ref(xpc_offline_heartbeat_uv, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_increment_heartbeat_uv, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i3 == 1);
    $i2 := $eq.ref(xpc_disallow_all_hbs_uv, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i2 == 1);
    $i1 := $eq.ref(xpc_teardown_partitions_uv, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2443} xpc_teardown_partitions_uv();
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2444} xpc_disallow_all_hbs_uv();
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 2445} xpc_increment_heartbeat_uv();
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 2446} xpc_offline_heartbeat_uv();
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 2447} xpc_online_heartbeat_uv();
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 2448} xpc_heartbeat_init_uv();
    return;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 2449} xpc_heartbeat_exit_uv();
    return;

  $bb20:
    assume $i8 == 1;
    goto $bb10;

  $bb10:
    call {:si_unique_call 2451} xpc_process_activate_IRQ_rcvd_uv();
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i9 == 1;
    goto $bb10;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 439864);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(xpc_get_chctl_all_flags_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2452} $i2 := xpc_get_chctl_all_flags_uv($p1);
    $r := $i2;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 440896);

procedure devirtbounce.6(funcPtr: ref, arg: i64, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i64, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_expect, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2453} $i1 := __builtinx_expect();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 441928);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 442960);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(xpc_received_payload_uv, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_send_chctl_opencomplete_uv, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_send_chctl_openreply_uv, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i5 == 1);
    $i4 := $eq.ref(xpc_send_chctl_openrequest_uv, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_send_chctl_closereply_uv, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i3 == 1);
    $i2 := $eq.ref(xpc_send_chctl_closerequest_uv, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2454} xpc_send_chctl_closerequest_uv(arg, arg1);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1;
    call {:si_unique_call 2455} xpc_send_chctl_closereply_uv(arg, arg1);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i4 == 1;
    call {:si_unique_call 2456} xpc_send_chctl_openrequest_uv(arg, arg1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    call {:si_unique_call 2457} xpc_send_chctl_openreply_uv(arg, arg1);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i6 == 1;
    call {:si_unique_call 2458} xpc_send_chctl_opencomplete_uv(arg, arg1);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2459} xpc_received_payload_uv(arg, $p1);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 443992);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(xpc_system_die, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i11 == 1);
    $i10 := $eq.ref(xpc_system_reboot, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2460} $i4 := xpc_system_reboot($p1, $i2, $p3);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    $r := $i4;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 2461} $i5 := __builtinx_expect();
    $r := $i5;
    return;

  $bb4:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $i7 := $zext.i32.i64(arg1);
    $p8 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2462} $i9 := xpc_system_die($p6, $i7, $p8);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    $r := $i9;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 445024);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 446056);

procedure devirtbounce.11(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref, arg4: ref);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 447088);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref);



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 448120);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(xpc_received_payload_uv, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(xpc_send_chctl_opencomplete_uv, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(xpc_send_chctl_openreply_uv, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(xpc_send_chctl_openrequest_uv, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(xpc_send_chctl_closereply_uv, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(xpc_send_chctl_closerequest_uv, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2463} xpc_send_chctl_closerequest_uv($p1, $p2);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2464} xpc_send_chctl_closereply_uv($p3, $p4);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2465} xpc_send_chctl_openrequest_uv($p5, $p6);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2466} xpc_send_chctl_openreply_uv($p7, $p8);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2467} xpc_send_chctl_opencomplete_uv($p9, $p10);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2468} xpc_received_payload_uv($p11, $p12);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 449152);

procedure devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: ref);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 450184);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 451216);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2469} $i1 := __builtinx_expect();
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2470} $i3 := autoremove_wake_function($p2, arg1, arg2, arg3);
    $r := $i3;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 452248);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 2471} $i1 := __builtinx_expect();
    $r := $i1;
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2472} $i4 := autoremove_wake_function($p2, arg1, arg2, $p3);
    $r := $i4;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 453280);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 2473} $i1 := __builtinx_expect();
    $r := $i1;
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2474} $i4 := autoremove_wake_function($p2, arg1, arg2, $p3);
    $r := $i4;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 454312);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 2475} $i1 := __builtinx_expect();
    $r := $i1;
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2476} $i4 := autoremove_wake_function($p2, arg1, arg2, $p3);
    $r := $i4;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 455344);

procedure devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(xpc_get_chctl_all_flags_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2477} $i2 := xpc_get_chctl_all_flags_uv($p1);
    $r := $i2;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 456376);

procedure devirtbounce.21(funcPtr: ref, arg: i64, arg1: i64, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: i64, arg1: i64, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_expect, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2478} $i1 := __builtinx_expect();
    $r := $i1;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 457408);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 458440);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 459472);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 460504);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 461536);

procedure devirtbounce.26(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.26(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 462568);

procedure devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 463600);

procedure devirtbounce.28(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 464632);

procedure devirtbounce.29(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 465664);

procedure devirtbounce.30(funcPtr: ref, arg: ref) returns ($r: i64);



const devirtbounce.31: ref;

axiom devirtbounce.31 == $sub.ref(0, 466696);

procedure devirtbounce.31(funcPtr: ref, arg: ref, arg1: i32);



const devirtbounce.32: ref;

axiom devirtbounce.32 == $sub.ref(0, 467728);

procedure devirtbounce.32(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);



const devirtbounce.33: ref;

axiom devirtbounce.33 == $sub.ref(0, 468760);

procedure devirtbounce.33(funcPtr: ref, arg: ref);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u10: i16;

const $u11: ref;

const $u12: ref;

const $u13: i8;

const $u2: i32;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.19, $M.13, $M.4, $M.16, $M.27, $M.11, $M.12, $M.10, $M.20, $M.23, $M.22, $M.9, $M.8, $M.5, $M.1, $M.15, $M.3, $M.28, $M.29, $M.116, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.17, $M.18, $M.7, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2479} __SMACK_static_init();
    call {:si_unique_call 2480} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr();
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.1, $M.28, $M.14, $M.29, $M.21, $M.30, $M.58, $M.6, $M.19, $M.13, $M.4, $M.16, $M.27, $M.11, $M.12, $M.10, $M.20, $M.23, $M.22, $M.9, $M.8, $M.5, $M.15, $M.3, $M.116, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.17, $M.18, $M.7, $CurrAddr;



implementation {:entrypoint} main_SeqInstr()
{

  start:
    assertsPassed := true;
    call main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation xpc_do_exit_loop_$bb5(in_$i0: i32, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i26: i32, in_$i27: i64, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i16, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i46: i32, in_$i47: i64) returns (out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i26: i32, out_$i27: i64, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i16, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i46: i32, out_$i47: i64)
{

  entry:
    out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47 := in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i26, in_$i27, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i12, in_$i13, in_$i14, in_$i46, in_$i47;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  $bb17:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i27, out_$i41, out_$i26;
    goto $bb17_dummy;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47 := out_$i26, out_$i27;
    assume true;
    goto $bb17;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, out_$i43);
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i16.i32(out_$i41);
    call {:si_unique_call 33} {:cexpr "__cil_tmp31"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i16.i32(out_$i42);
    call {:si_unique_call 32} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    call {:si_unique_call 31} {:cexpr "partid"} boogie_si_record_i16(out_$i41);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    call {:si_unique_call 30} {:cexpr "__cil_tmp29"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i16.i32(out_$i13);
    call {:si_unique_call 29} {:cexpr "__cil_tmp28"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_87;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i28, out_$i38;
    goto $bb11;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i14, out_$i12;
    goto $bb11;

  $bb9:
    assume out_$i25 == 1;
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    call {:si_unique_call 28} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    call {:si_unique_call 27} {:cexpr "__cil_tmp20"} boogie_si_record_i8(out_$i23);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$p22 := $i2p.i64.ref(out_$i21);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i20, 112);
    call {:si_unique_call 26} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p17);
    call {:si_unique_call 25} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_77;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_74;

  SeqInstr_15:
    call {:si_unique_call 24} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_73;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_$i18 := xpc_partition_disengaged(out_$p17);
    goto SeqInstr_14;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref(out_$i15, 872));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$p16 := $M.4;
    goto corral_source_split_71;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i16.i64(out_$i13);
    call {:si_unique_call 22} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  $bb15:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := out_$i12;
    goto $bb16;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb16;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    call {:si_unique_call 41} {:cexpr "disengage_timeout"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$p36 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 128);
    call {:si_unique_call 40} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p17);
    call {:si_unique_call 39} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_104;

  $bb14:
    assume out_$i33 == 1;
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i33 := $ugt.i64(out_$i32, out_$i12);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 38} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p31 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 128);
    call {:si_unique_call 37} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p17);
    call {:si_unique_call 36} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_97;

  SeqInstr_18:
    goto corral_source_split_96;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} xpc_deactivate_partition(1011, out_$p17, in_$i0);
    goto SeqInstr_17;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i14, 1);
    call {:si_unique_call 34} {:cexpr "active_part_count"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_95;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47 := xpc_do_exit_loop_$bb5(in_$i0, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47);
    return;

  exit:
    return;
}



procedure xpc_do_exit_loop_$bb5(in_$i0: i32, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i26: i32, in_$i27: i64, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i16, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i46: i32, in_$i47: i64) returns (out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i26: i32, out_$i27: i64, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i16, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i46: i32, out_$i47: i64);
  modifies $M.3, $M.0, $M.1, $M.21, $M.28, $M.14, $CurrAddr, assertsPassed;



implementation xpc_do_exit_loop_$bb1(in_$i0: i32, in_$i4: i64, in_$i5: i32, in_$i6: i64, in_$i7: i16, in_$i8: i32, in_$i9: i1, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i26: i32, in_$i27: i64, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i16, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i46: i32, in_$i47: i64, in_$i10: i32, in_$i11: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$i59: i64, in_$i60: i64, in_$i63: i1, in_$i64: i1, in_$p65: ref, in_$i71: i32, in_$i61: i64, in_$i62: i32, in_$i72: i64, in_$i73: i32, in_vslice_dummy_var_10: i32, in_vslice_dummy_var_11: i32, in_vslice_dummy_var_13: i64) returns (out_$i4: i64, out_$i5: i32, out_$i6: i64, out_$i7: i16, out_$i8: i32, out_$i9: i1, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i26: i32, out_$i27: i64, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i16, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i46: i32, out_$i47: i64, out_$i10: i32, out_$i11: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$i59: i64, out_$i60: i64, out_$i63: i1, out_$i64: i1, out_$p65: ref, out_$i71: i32, out_$i61: i64, out_$i62: i32, out_$i72: i64, out_$i73: i32, out_vslice_dummy_var_10: i32, out_vslice_dummy_var_11: i32, out_vslice_dummy_var_13: i64)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47, out_$i10, out_$i11, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$i63, out_$i64, out_$p65, out_$i71, out_$i61, out_$i62, out_$i72, out_$i73, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_13 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i26, in_$i27, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i12, in_$i13, in_$i14, in_$i46, in_$i47, in_$i10, in_$i11, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i59, in_$i60, in_$i63, in_$i64, in_$p65, in_$i71, in_$i61, in_$i62, in_$i72, in_$i73, in_vslice_dummy_var_10, in_vslice_dummy_var_11, in_vslice_dummy_var_13;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$i4, out_$i5, out_$i6 := out_$i72, out_$i73, out_$i11;
    goto corral_source_split_154_dummy;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} out_vslice_dummy_var_13 := msleep_interruptible(300);
    goto corral_source_split_154;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  $bb21:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i4, out_$i5;
    goto $bb35;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i61, out_$i62;
    goto $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i61, out_$i62 := out_$i4, out_$i71;
    goto $bb24;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i61, out_$i62 := out_$i60, 1;
    goto $bb24;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i59, 2500);
    call {:si_unique_call 51} {:cexpr "printmsg_time"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, jiffies);
    call {:si_unique_call 50} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_127;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_vslice_dummy_var_10 := _dev_info.ref.ref.i64(out_$p54, .str.87, out_$i57);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i57 := $udiv.i64(out_$i56, 250);
    call {:si_unique_call 48} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i56 := $sub.i64(out_$i11, out_$i55);
    call {:si_unique_call 47} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, jiffies);
    call {:si_unique_call 46} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p54 := $M.6;
    goto corral_source_split_122;

  $bb22:
    assume out_$i53 == 1;
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i64(out_$i52, 0);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(out_$i4, out_$i51);
    call {:si_unique_call 45} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, jiffies);
    call {:si_unique_call 44} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_117;

  $bb20:
    assume out_$i50 == 1;
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_114;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p48 := $M.5;
    call {:si_unique_call 42} out_$i49 := devirtbounce(out_$p48);
    call {:si_unique_call 43} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_113;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb4;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := out_$i46, out_$i47;
    goto $bb4;

  $bb18:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47 := out_$i26, out_$i27;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, out_$i43);
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i16.i32(out_$i41);
    call {:si_unique_call 33} {:cexpr "__cil_tmp31"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i16.i32(out_$i42);
    call {:si_unique_call 32} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    call {:si_unique_call 31} {:cexpr "partid"} boogie_si_record_i16(out_$i41);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    call {:si_unique_call 30} {:cexpr "__cil_tmp29"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i16.i32(out_$i13);
    call {:si_unique_call 29} {:cexpr "__cil_tmp28"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_87;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i28, out_$i38;
    goto $bb11;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i14, out_$i12;
    goto $bb11;

  $bb9:
    assume out_$i25 == 1;
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    call {:si_unique_call 28} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    call {:si_unique_call 27} {:cexpr "__cil_tmp20"} boogie_si_record_i8(out_$i23);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$p22 := $i2p.i64.ref(out_$i21);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i20, 112);
    call {:si_unique_call 26} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p17);
    call {:si_unique_call 25} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_77;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_74;

  SeqInstr_15:
    call {:si_unique_call 24} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_73;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_$i18 := xpc_partition_disengaged(out_$p17);
    goto SeqInstr_14;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref(out_$i15, 872));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$p16 := $M.4;
    goto corral_source_split_71;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i16.i64(out_$i13);
    call {:si_unique_call 22} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47 := xpc_do_exit_loop_$bb5(in_$i0, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i6, 0, 0;
    goto $bb5;

  $bb17:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i27, out_$i41, out_$i26;
    assume false;
    return;

  $bb2:
    assume out_$i9 == 1;
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := 0, out_$i6;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(0, out_$i8);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i16.i32(out_$i7);
    call {:si_unique_call 21} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_60;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  $bb15:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := out_$i12;
    goto $bb16;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb16;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    call {:si_unique_call 41} {:cexpr "disengage_timeout"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$p36 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 128);
    call {:si_unique_call 40} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p17);
    call {:si_unique_call 39} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_104;

  $bb14:
    assume out_$i33 == 1;
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i33 := $ugt.i64(out_$i32, out_$i12);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 38} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p31 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 128);
    call {:si_unique_call 37} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p17);
    call {:si_unique_call 36} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_97;

  SeqInstr_18:
    goto corral_source_split_96;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} xpc_deactivate_partition(1011, out_$p17, in_$i0);
    goto SeqInstr_17;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i14, 1);
    call {:si_unique_call 34} {:cexpr "active_part_count"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_95;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb26:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := out_$i5;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i71 := 0;
    goto $bb34;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_vslice_dummy_var_11 := _dev_info.ref.ref(out_$p65, .str.88);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$p65 := $M.6;
    goto corral_source_split_139;

  $bb27:
    assume out_$i64 == 1;
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i5, 0);
    goto corral_source_split_136;

  $bb25:
    assume out_$i63 == 1;
    goto corral_source_split_135;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i63 := $sgt.i32(out_$i10, 0);
    goto corral_source_split_131;

  $bb23:
    assume !(out_$i53 == 1);
    goto corral_source_split_130;

  corral_source_split_154_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47, out_$i10, out_$i11, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$i63, out_$i64, out_$p65, out_$i71, out_$i61, out_$i62, out_$i72, out_$i73, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_13 := xpc_do_exit_loop_$bb1(in_$i0, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i26, out_$i27, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i12, out_$i13, out_$i14, out_$i46, out_$i47, out_$i10, out_$i11, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$i63, out_$i64, out_$p65, out_$i71, out_$i61, out_$i62, out_$i72, out_$i73, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_13);
    return;

  exit:
    return;
}



procedure xpc_do_exit_loop_$bb1(in_$i0: i32, in_$i4: i64, in_$i5: i32, in_$i6: i64, in_$i7: i16, in_$i8: i32, in_$i9: i1, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i26: i32, in_$i27: i64, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i16, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i46: i32, in_$i47: i64, in_$i10: i32, in_$i11: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$i59: i64, in_$i60: i64, in_$i63: i1, in_$i64: i1, in_$p65: ref, in_$i71: i32, in_$i61: i64, in_$i62: i32, in_$i72: i64, in_$i73: i32, in_vslice_dummy_var_10: i32, in_vslice_dummy_var_11: i32, in_vslice_dummy_var_13: i64) returns (out_$i4: i64, out_$i5: i32, out_$i6: i64, out_$i7: i16, out_$i8: i32, out_$i9: i1, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i26: i32, out_$i27: i64, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i16, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i46: i32, out_$i47: i64, out_$i10: i32, out_$i11: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$i59: i64, out_$i60: i64, out_$i63: i1, out_$i64: i1, out_$p65: ref, out_$i71: i32, out_$i61: i64, out_$i62: i32, out_$i72: i64, out_$i73: i32, out_vslice_dummy_var_10: i32, out_vslice_dummy_var_11: i32, out_vslice_dummy_var_13: i64);
  modifies $M.0, $CurrAddr, $M.3, $M.1, $M.21, $M.28, $M.14, assertsPassed;



implementation xpc_destroy_gru_mq_uv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} xpc_destroy_gru_mq_uv_loop_$bb3();
    return;

  exit:
    return;
}



procedure xpc_destroy_gru_mq_uv_loop_$bb3();



implementation xpc_gru_mq_watchlist_free_uv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} xpc_gru_mq_watchlist_free_uv_loop_$bb3();
    return;

  exit:
    return;
}



procedure xpc_gru_mq_watchlist_free_uv_loop_$bb3();



implementation xpc_partition_going_down_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p42: ref, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$i58: i8, in_$i59: i32, in_$i60: i1, in_$i46: i32) returns (out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$i58: i8, out_$i59: i32, out_$i60: i1, out_$i46: i32)
{

  entry:
    out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i46 := in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i46;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  $bb13:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i57;
    goto $bb13_dummy;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$i60 := $sgt.i32(out_$i59, out_$i57);
    goto corral_source_split_652;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    call {:si_unique_call 328} {:cexpr "__cil_tmp40"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.0, in_$p42);
    call {:si_unique_call 327} {:cexpr "__cil_tmp39"} boogie_si_record_i8(out_$i58);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i46, 1);
    call {:si_unique_call 326} {:cexpr "ch_number"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_649;

  SeqInstr_51:
    goto corral_source_split_648;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} xpc_msgqueue_deref(out_$p52);
    goto SeqInstr_50;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} spin_unlock_irqrestore(out_$p55, out_$i56);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, in_$p2);
    call {:si_unique_call 323} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$p55 := $i2p.i64.ref(out_$i54);
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, 8);
    call {:si_unique_call 322} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    call {:si_unique_call 321} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_643;

  SeqInstr_48:
    goto corral_source_split_642;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} xpc_disconnect_channel(653, out_$p52, in_$i1, in_$p2);
    goto SeqInstr_47;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_spin_lock();
    goto corral_source_split_641;

  SeqInstr_45:
    goto corral_source_split_640;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} xpc_msgqueue_ref(out_$p52);
    goto SeqInstr_44;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref(out_$i47, 720));
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$p50 := $i2p.i64.ref(out_$i49);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i48, 376);
    call {:si_unique_call 317} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 316} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_635;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    call {:si_unique_call 315} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i46 := xpc_partition_going_down_loop_$bb11(in_$p0, in_$i1, in_$p2, in_$p42, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i46);
    return;

  exit:
    return;
}



procedure xpc_partition_going_down_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p42: ref, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$i58: i8, in_$i59: i32, in_$i60: i1, in_$i46: i32) returns (out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$i58: i8, out_$i59: i32, out_$i60: i1, out_$i46: i32);
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation xpc_create_kthreads_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} xpc_create_kthreads_loop_$bb12();
    return;

  exit:
    return;
}



procedure xpc_create_kthreads_loop_$bb12();



implementation xpc_create_kthreads_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i14: i64, in_$p19: ref, in_$i24: i1, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$i99: i32, in_$i100: i1, in_$i23: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32) returns (out_$i24: i1, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$i99: i32, out_$i100: i1, out_$i23: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i99, out_$i100, out_$i23, out_vslice_dummy_var_21, out_vslice_dummy_var_22 := in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p73, in_$i74, in_$i75, in_$i99, in_$i100, in_$i23, in_vslice_dummy_var_21, in_vslice_dummy_var_22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;

  $bb41:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i99;
    goto $bb41_dummy;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(out_$i23, 0);
    goto corral_source_split_1056;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i23, 1);
    call {:si_unique_call 539} {:cexpr "needed"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1055;

  $bb30:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i74, 0);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out_$i74 := IS_ERR(out_$p73);
    call {:si_unique_call 514} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_1015;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_1014;

  $bb27:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_vslice_dummy_var_22 := wake_up_process(out_$p68);
    goto corral_source_split_1012;

  $bb26:
    assume out_$i71 == 1;
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i64(out_$i70, 0);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_$i70 := IS_ERR(out_$p69);
    call {:si_unique_call 511} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} out_$p68 := kthread_create_on_node.ref.ref.i32.ref.i32.i32(xpc_kthread_start, out_$p59, $sub.i32(0, 1), .str.9, out_$i62, out_$i67);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 508} {:cexpr "__cil_tmp56"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.0, out_$p65);
    call {:si_unique_call 507} {:cexpr "__cil_tmp55"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$p65 := $i2p.i64.ref(out_$i64);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i64(out_$i63, 92);
    call {:si_unique_call 506} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 505} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i16.i32(out_$i61);
    call {:si_unique_call 504} {:cexpr "__cil_tmp52"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i16($M.0, out_$p60);
    call {:si_unique_call 503} {:cexpr "__cil_tmp51"} boogie_si_record_i16(out_$i61);
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$p59 := $i2p.i64.ref(in_$i14);
    goto corral_source_split_997;

  SeqInstr_114:
    goto corral_source_split_996;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} xpc_msgqueue_ref(in_$p0);
    goto SeqInstr_113;

  SeqInstr_111:
    goto corral_source_split_995;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_vslice_dummy_var_21 := xpc_part_ref(in_$p19);
    goto SeqInstr_110;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_108:
    goto corral_source_split_993;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$p57 := $M.23;
    call {:si_unique_call 500} devirtbounce.3(out_$p57, in_$p19);
    goto SeqInstr_107;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 1);
    goto corral_source_split_990;

  SeqInstr_105:
    call {:si_unique_call 499} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_989;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_$i55 := atomic_add_return(1, out_$p54);
    goto SeqInstr_104;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$p54 := $i2p.i64.ref(out_$i53);
    goto corral_source_split_988;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i64(out_$i52, 372);
    call {:si_unique_call 497} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(in_$p19);
    call {:si_unique_call 496} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_986;

  $bb17:
    assume out_$i51 == 1;
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 1);
    goto corral_source_split_983;

  SeqInstr_102:
    call {:si_unique_call 495} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_982;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_$i50 := atomic_add_return(1, out_$p49);
    goto SeqInstr_101;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$p49 := $i2p.i64.ref(out_$i48);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, 320);
    call {:si_unique_call 493} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 492} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_979;

  $bb16:
    assume !(out_$i46 == 1);
    goto corral_source_split_978;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, 131072);
    call {:si_unique_call 490} {:cexpr "__cil_tmp43"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    call {:si_unique_call 489} {:cexpr "__cil_tmp42"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    out_$p43 := $i2p.i64.ref(out_$i42);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i41, 80);
    call {:si_unique_call 488} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_968;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 487} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_967;

  $bb9:
    assume !(out_$i29 == 1);
    goto corral_source_split_966;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} out_$i28 := atomic_add_unless(out_$p27, 1, 0);
    call {:si_unique_call 478} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p27 := $i2p.i64.ref(out_$i26);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i25, 320);
    call {:si_unique_call 476} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 475} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_947;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(in_$i2, 0);
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i99, out_$i100, out_$i23, out_vslice_dummy_var_21, out_vslice_dummy_var_22 := xpc_create_kthreads_loop_$bb4(in_$p0, in_$i2, in_$i14, in_$p19, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i99, out_$i100, out_$i23, out_vslice_dummy_var_21, out_vslice_dummy_var_22);
    return;

  exit:
    return;
}



procedure xpc_create_kthreads_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i14: i64, in_$p19: ref, in_$i24: i1, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$i99: i32, in_$i100: i1, in_$i23: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32) returns (out_$i24: i1, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$i99: i32, out_$i100: i1, out_$i23: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32);
  modifies $M.0, $M.14, $M.1, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i12: i32, in_$i11: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$i19: i32, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i32, in_$i27: i64, in_$i28: i1) returns (out_$i12: i32, out_$i11: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$i19: i32, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i32, out_$i27: i64, out_$i28: i1)
{

  entry:
    out_$i12, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := in_$i12, in_$i11, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i15;
    goto $bb11_dummy;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    call {:si_unique_call 638} {:cexpr "tmp"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_$i26 := __builtinx_expect.i64.i64(out_$i25, 0);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    call {:si_unique_call 636} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    call {:si_unique_call 635} {:cexpr "__cil_tmp9"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1258;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i15, in_$i2);
    goto corral_source_split_1257;

  $bb9:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i11;
    assume true;
    goto $bb9;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    call {:si_unique_call 634} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} out_$i19 := __builtinx_expect.i64.i64(out_$i18, 1);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    call {:si_unique_call 632} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i32(out_$i16);
    call {:si_unique_call 631} {:cexpr "__cil_tmp12"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, out_$i11);
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} out_$i15 := atomic_cmpxchg(in_$p0, out_$i11, out_$i14);
    call {:si_unique_call 630} {:cexpr "old"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1247;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i11, in_$i1);
    call {:si_unique_call 628} {:cexpr "__cil_tmp11"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1246;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i12, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i12, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i12: i32, in_$i11: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$i19: i32, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i32, in_$i27: i64, in_$i28: i1) returns (out_$i12: i32, out_$i11: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$i19: i32, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i32, out_$i27: i64, out_$i28: i1);
  modifies $M.0;



implementation xpc_die_deactivate_loop_$bb27(in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i54: i32, in_$i55: i32, in_$i56: i16, in_$i57: i16, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i45: i16, in_vslice_dummy_var_26: i32) returns (out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i54: i32, out_$i55: i32, out_$i56: i16, out_$i57: i16, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i45: i16, out_vslice_dummy_var_26: i32)
{

  entry:
    out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i45, out_vslice_dummy_var_26 := in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i45, in_vslice_dummy_var_26;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1402;

  $bb32:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i56;
    goto $bb32_dummy;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, out_$i58);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i16.i32(out_$i56);
    call {:si_unique_call 703} {:cexpr "__cil_tmp32"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i16.i32(out_$i57);
    call {:si_unique_call 702} {:cexpr "__cil_tmp31"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i32.i16(out_$i55);
    call {:si_unique_call 701} {:cexpr "partid"} boogie_si_record_i16(out_$i56);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i54, 1);
    call {:si_unique_call 700} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_1415;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i16.i32(out_$i45);
    call {:si_unique_call 699} {:cexpr "__cil_tmp29"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1414;

  $bb30:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} out_vslice_dummy_var_26 := _dev_info.ref.ref.i32(out_$p51, .str.90, out_$i52);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i16.i32(out_$i45);
    call {:si_unique_call 697} {:cexpr "__cil_tmp28"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$p51 := $M.6;
    goto corral_source_split_1410;

  $bb29:
    assume out_$i50 == 1;
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$p48 := $M.8;
    call {:si_unique_call 695} out_$i49 := devirtbounce.1(out_$p48, out_$i47);
    call {:si_unique_call 696} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i46);
    call {:si_unique_call 694} {:cexpr "__cil_tmp26"} boogie_si_record_i16(out_$i47);
    goto corral_source_split_1405;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i16.i32(out_$i45);
    call {:si_unique_call 693} {:cexpr "__cil_tmp25"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i45, out_vslice_dummy_var_26 := xpc_die_deactivate_loop_$bb27(out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i45, out_vslice_dummy_var_26);
    return;

  exit:
    return;
}



procedure xpc_die_deactivate_loop_$bb27(in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i54: i32, in_$i55: i32, in_$i56: i16, in_$i57: i16, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i45: i16, in_vslice_dummy_var_26: i32) returns (out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i54: i32, out_$i55: i32, out_$i56: i16, out_$i57: i16, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i45: i16, out_vslice_dummy_var_26: i32);



implementation xpc_die_deactivate_loop_$bb18(in_$i36: i64, in_$i37: i64, in_$i40: i64, in_$i41: i1, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$i64: i64, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_vslice_dummy_var_27: i32) returns (out_$i36: i64, out_$i37: i64, out_$i40: i64, out_$i41: i1, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$i64: i64, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_vslice_dummy_var_27: i32)
{

  entry:
    out_$i36, out_$i37, out_$i40, out_$i41, out_$i61, out_$i62, out_$p63, out_$i64, out_$i66, out_$p67, out_$i68, out_$i69, out_vslice_dummy_var_27 := in_$i36, in_$i37, in_$i40, in_$i41, in_$i61, in_$i62, in_$p63, in_$i64, in_$i66, in_$p67, in_$i68, in_$i69, in_vslice_dummy_var_27;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb39:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i66, out_$i40;
    goto $bb39_dummy;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$p67 := $M.5;
    call {:si_unique_call 708} out_$i68 := devirtbounce(out_$p67);
    call {:si_unique_call 709} {:cexpr "any_engaged"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} ___udelay(859000);
    goto corral_source_split_1433;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1432;

  $bb37:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := out_$i61;
    goto $bb38;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i66 := 50000;
    goto $bb38;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out_vslice_dummy_var_27 := _dev_info.ref.ref.i64(out_$p63, .str.87, out_$i64);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$i64 := $sdiv.i64(out_$i40, 5000);
    call {:si_unique_call 705} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$p63 := $M.6;
    goto corral_source_split_1428;

  $bb36:
    assume out_$i62 == 1;
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i64(out_$i36, 0);
    goto corral_source_split_1425;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i64(out_$i36, 1);
    call {:si_unique_call 704} {:cexpr "wait_to_print"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_1424;

  $bb23:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i37, 0);
    goto corral_source_split_1393;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i64(out_$i37, 1);
    call {:si_unique_call 691} {:cexpr "keep_waiting"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_1392;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i40, out_$i41, out_$i61, out_$i62, out_$p63, out_$i64, out_$i66, out_$p67, out_$i68, out_$i69, out_vslice_dummy_var_27 := xpc_die_deactivate_loop_$bb18(out_$i36, out_$i37, out_$i40, out_$i41, out_$i61, out_$i62, out_$p63, out_$i64, out_$i66, out_$p67, out_$i68, out_$i69, out_vslice_dummy_var_27);
    return;

  exit:
    return;
}



procedure xpc_die_deactivate_loop_$bb18(in_$i36: i64, in_$i37: i64, in_$i40: i64, in_$i41: i1, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$i64: i64, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_vslice_dummy_var_27: i32) returns (out_$i36: i64, out_$i37: i64, out_$i40: i64, out_$i41: i1, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$i64: i64, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_vslice_dummy_var_27: i32);
  modifies $M.0, $CurrAddr;



implementation xpc_die_deactivate_loop_$bb4(in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i16, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i16, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i4: i16) returns (out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i16, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i16, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i4: i16)
{

  entry:
    out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i4 := in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  $bb12:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i25;
    goto $bb12_dummy;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, out_$i27);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i16.i32(out_$i25);
    call {:si_unique_call 682} {:cexpr "__cil_tmp20"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1370;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i16.i32(out_$i26);
    call {:si_unique_call 681} {:cexpr "__cil_tmp19"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, xp_max_npartitions);
    goto corral_source_split_1368;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i16(out_$i24);
    call {:si_unique_call 680} {:cexpr "partid"} boogie_si_record_i16(out_$i25);
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i23, 1);
    call {:si_unique_call 679} {:cexpr "__cil_tmp18"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1366;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i16.i32(out_$i4);
    call {:si_unique_call 678} {:cexpr "__cil_tmp17"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1365;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_153:
    goto corral_source_split_1355;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$p14 := $M.22;
    call {:si_unique_call 673} devirtbounce.3(out_$p14, out_$p7);
    goto SeqInstr_152;

  SeqInstr_150:
    goto corral_source_split_1354;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$p13 := $M.12;
    call {:si_unique_call 672} devirtbounce.3(out_$p13, out_$p7);
    goto SeqInstr_149;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$p10 := $M.8;
    call {:si_unique_call 670} out_$i11 := devirtbounce.1(out_$p10, out_$i9);
    call {:si_unique_call 671} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$i9 := $trunc.i32.i16(out_$i8);
    call {:si_unique_call 669} {:cexpr "__cil_tmp12"} boogie_si_record_i16(out_$i9);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i16.i32(out_$i4);
    call {:si_unique_call 668} {:cexpr "__cil_tmp11"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p6, $mul.ref(out_$i5, 872));
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p6 := $M.4;
    goto corral_source_split_1346;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i16.i64(out_$i4);
    call {:si_unique_call 667} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i5);
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_159:
    goto corral_source_split_1375;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$p22 := $M.22;
    call {:si_unique_call 684} devirtbounce.3(out_$p22, out_$p7);
    goto SeqInstr_158;

  SeqInstr_156:
    goto corral_source_split_1374;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$p21 := $M.12;
    call {:si_unique_call 683} devirtbounce.3(out_$p21, out_$p7);
    goto SeqInstr_155;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_1373;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    call {:si_unique_call 677} {:cexpr "__cil_tmp16"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, out_$p17);
    call {:si_unique_call 676} {:cexpr "__cil_tmp15"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, 112);
    call {:si_unique_call 675} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p7);
    call {:si_unique_call 674} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_1358;

  $bb7:
    assume !(out_$i12 == 1);
    goto corral_source_split_1357;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i4 := xpc_die_deactivate_loop_$bb4(out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i4);
    return;

  exit:
    return;
}



procedure xpc_die_deactivate_loop_$bb4(in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i16, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i16, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i4: i16) returns (out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i16, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i16, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i4: i16);
  modifies $M.0, $M.21, $M.1, $M.28, $M.14, $CurrAddr, assertsPassed, $M.3;



implementation xpc_setup_partitions_uv_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i64, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i16: i64, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i1, in_$i2: i16, in_vslice_dummy_var_28: ref) returns (out_$i3: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i64, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i16: i64, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i1, out_$i2: i16, out_vslice_dummy_var_28: ref)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i2, out_vslice_dummy_var_28 := in_$i3, in_$p4, in_$p5, in_$i6, in_$i7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$p14, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i2, in_vslice_dummy_var_28;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1441;

  $bb3:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i24;
    goto $bb3_dummy;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$i26 := $sle.i32(out_$i25, 255);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i16.i32(out_$i24);
    call {:si_unique_call 730} {:cexpr "__cil_tmp22"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i23);
    call {:si_unique_call 729} {:cexpr "partid"} boogie_si_record_i16(out_$i24);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 1);
    call {:si_unique_call 728} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i16.i32(out_$i2);
    call {:si_unique_call 727} {:cexpr "__cil_tmp20"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p21, 0);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i20);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 284);
    call {:si_unique_call 726} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p8);
    call {:si_unique_call 725} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __raw_spin_lock_init(out_$p18, .str.123, in_$p1);
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$p18 := $i2p.i64.ref(out_$i17);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i64(out_$i16, 208);
    call {:si_unique_call 723} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p8);
    call {:si_unique_call 722} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} out_vslice_dummy_var_28 := spinlock_check(out_$p14);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$p14 := $i2p.i64.ref(out_$i13);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, 208);
    call {:si_unique_call 720} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p8);
    call {:si_unique_call 719} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __mutex_init(out_$p11, .str.122, in_$p0);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p11 := $i2p.i64.ref(out_$i10);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i64(out_$i9, 40);
    call {:si_unique_call 717} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    call {:si_unique_call 716} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$p8 := $i2p.i64.ref(out_$i7);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i64(out_$i6, 576);
    call {:si_unique_call 715} {:cexpr "__cil_tmp8"} boogie_si_record_i64(out_$i7);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    call {:si_unique_call 714} {:cexpr "__cil_tmp7"} boogie_si_record_i64(out_$i6);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(out_$p4, $mul.ref(out_$i3, 872));
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$p4 := $M.4;
    goto corral_source_split_1444;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $sext.i16.i64(out_$i2);
    call {:si_unique_call 713} {:cexpr "__cil_tmp5"} boogie_si_record_i64(out_$i3);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i2, out_vslice_dummy_var_28 := xpc_setup_partitions_uv_loop_$bb1(in_$p0, in_$p1, out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i2, out_vslice_dummy_var_28);
    return;

  exit:
    return;
}



procedure xpc_setup_partitions_uv_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i64, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i16: i64, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i1, in_$i2: i16, in_vslice_dummy_var_28: ref) returns (out_$i3: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i64, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i16: i64, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i1, out_$i2: i16, out_vslice_dummy_var_28: ref);
  modifies $M.0;



implementation xpc_teardown_partitions_uv_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$i8: i64, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i0: i16) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i64, out_$p6: ref, out_$i7: i64, out_$i8: i64, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i0: i16)
{

  entry:
    out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i0 := in_$i1, in_$p2, in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1475;

  $bb6:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i40;
    goto $bb6_dummy;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$i42 := $sle.i32(out_$i41, 255);
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i16.i32(out_$i40);
    call {:si_unique_call 761} {:cexpr "__cil_tmp36"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    call {:si_unique_call 760} {:cexpr "partid"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 1);
    call {:si_unique_call 759} {:cexpr "__cil_tmp35"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1525;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i16.i32(out_$i0);
    call {:si_unique_call 758} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1524;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} mutex_unlock(out_$p37);
    goto corral_source_split_1522;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    out_$p37 := $i2p.i64.ref(out_$i36);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i64(out_$i35, 40);
    call {:si_unique_call 756} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 755} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, $0.ref);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$p34 := $i2p.i64.ref(out_$i33);
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, 32);
    call {:si_unique_call 754} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_1516;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 753} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} kfree(out_$p31);
    goto corral_source_split_1514;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$p30 := $i2p.i64.ref(out_$i29);
    goto corral_source_split_1512;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i64(out_$i28, 32);
    call {:si_unique_call 751} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_1511;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 750} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} spin_unlock_irqrestore(out_$p27, $u0);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$p27 := $i2p.i64.ref(out_$i26);
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i25, 208);
    call {:si_unique_call 748} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 747} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p24, out_$i23);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$p24 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, $sub.i32(0, 2));
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    call {:si_unique_call 746} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i20);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 280);
    call {:si_unique_call 745} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 744} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, 280);
    call {:si_unique_call 743} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 742} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_spin_lock();
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} mutex_lock_nested(out_$p16, 0);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, 40);
    call {:si_unique_call 739} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 738} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_1492;

  $bb3:
    assume out_$i13 == 1;
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, out_$i7);
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    call {:si_unique_call 737} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$p10 := $i2p.i64.ref(out_$i9);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i64(out_$i8, 32);
    call {:si_unique_call 736} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 735} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i8);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 734} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i7);
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$p6 := $i2p.i64.ref(out_$i5);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$i5 := $add.i64(out_$i4, 576);
    call {:si_unique_call 733} {:cexpr "__cil_tmp7"} boogie_si_record_i64(out_$i5);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i4 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 732} {:cexpr "__cil_tmp6"} boogie_si_record_i64(out_$i4);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref(out_$p2, $mul.ref(out_$i1, 872));
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$p2 := $M.4;
    goto corral_source_split_1478;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $sext.i16.i64(out_$i0);
    call {:si_unique_call 731} {:cexpr "__cil_tmp4"} boogie_si_record_i64(out_$i1);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i0 := xpc_teardown_partitions_uv_loop_$bb1(out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i0);
    return;

  exit:
    return;
}



procedure xpc_teardown_partitions_uv_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$i8: i64, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i0: i16) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i64, out_$p6: ref, out_$i7: i64, out_$i8: i64, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i0: i16);
  modifies $M.0, $M.1;



implementation xpc_process_activate_IRQ_rcvd_uv_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb28_dummy:
    call {:si_unique_call 1} xpc_process_activate_IRQ_rcvd_uv_loop_$bb28();
    return;

  exit:
    return;
}



procedure xpc_process_activate_IRQ_rcvd_uv_loop_$bb28();



implementation xpc_process_activate_IRQ_rcvd_uv_loop_$bb9()
{

  entry:
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb9_dummy:
    call {:si_unique_call 1} xpc_process_activate_IRQ_rcvd_uv_loop_$bb9();
    return;

  exit:
    return;
}



procedure xpc_process_activate_IRQ_rcvd_uv_loop_$bb9();



implementation xpc_process_activate_IRQ_rcvd_uv_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i64, in_$i6: i64, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$i17: i32, in_$i18: i64, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$i25: i64, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i16, in_$i63: i32, in_$i64: i1, in_$i0: i16) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i64, out_$i6: i64, out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$i17: i32, out_$i18: i64, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$i25: i64, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i16, out_$i63: i32, out_$i64: i1, out_$i0: i16)
{

  entry:
    out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i0 := in_$i1, in_$p2, in_$p3, in_$i4, in_$i5, in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  $bb34:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i62;
    goto $bb34_dummy;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i64 := $sle.i32(out_$i63, 255);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i16.i32(out_$i62);
    call {:si_unique_call 772} {:cexpr "__cil_tmp50"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i61);
    call {:si_unique_call 771} {:cexpr "partid"} boogie_si_record_i16(out_$i62);
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    call {:si_unique_call 770} {:cexpr "__cil_tmp49"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_1551;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i16.i32(out_$i0);
    call {:si_unique_call 769} {:cexpr "__cil_tmp48"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1550;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 0);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(out_$i8);
    call {:si_unique_call 768} {:cexpr "__cil_tmp12"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i8($M.0, out_$p7);
    call {:si_unique_call 767} {:cexpr "__cil_tmp11"} boogie_si_record_i8(out_$i8);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$p7 := $i2p.i64.ref(out_$i6);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i64(out_$i5, out_$i4);
    call {:si_unique_call 766} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i6);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i5 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 765} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i5);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i4 := $add.i64(576, 285);
    call {:si_unique_call 764} {:cexpr "__cil_tmp8"} boogie_si_record_i64(out_$i4);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref(out_$p2, $mul.ref(out_$i1, 872));
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$p2 := $M.4;
    goto corral_source_split_1538;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $sext.i16.i64(out_$i0);
    call {:si_unique_call 763} {:cexpr "__cil_tmp6"} boogie_si_record_i64(out_$i1);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb31:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i58 := $M.28;
    goto corral_source_split_1637;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} ldv_spin_lock();
    goto corral_source_split_1636;

  $bb12:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} xpc_activate_partition(out_$p3);
    goto corral_source_split_1592;

  $bb13:
    assume out_$i36 == 1;
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    call {:si_unique_call 791} {:cexpr "__cil_tmp27"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    call {:si_unique_call 790} {:cexpr "__cil_tmp26"} boogie_si_record_i8(out_$i34);
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$p33 := $i2p.i64.ref(out_$i32);
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i64(out_$i31, 112);
    call {:si_unique_call 789} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 788} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_1584;

  $bb11:
    assume out_$i30 == 1;
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i24);
    call {:si_unique_call 787} {:cexpr "__cil_tmp23"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $u0);
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p28, 0);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    out_$p28 := $i2p.i64.ref(out_$i27);
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i64(out_$i26, out_$i25);
    call {:si_unique_call 785} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 784} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(576, 285);
    call {:si_unique_call 783} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    call {:si_unique_call 782} {:cexpr "act_state_req"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    out_$p23 := $i2p.i64.ref(out_$i22);
    goto corral_source_split_1572;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, out_$i20);
    call {:si_unique_call 781} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 780} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_1570;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(576, 285);
    call {:si_unique_call 779} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1569;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} out_$i17 := __builtinx_expect.i64.i64(out_$i16, 0);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    call {:si_unique_call 775} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i32(out_$i14);
    call {:si_unique_call 774} {:cexpr "__cil_tmp13"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i13, 0);
    goto corral_source_split_1560;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$i13 := $M.28;
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.28 := out_$i12;
    call {:si_unique_call 773} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i11, 1);
    goto corral_source_split_1557;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i11 := $M.28;
    goto corral_source_split_1556;

  $bb4:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_162:
    goto corral_source_split_1603;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} xpc_deactivate_partition(409, out_$p3, 21);
    goto SeqInstr_161;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 4);
    goto corral_source_split_1600;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    call {:si_unique_call 796} {:cexpr "__cil_tmp31"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    call {:si_unique_call 795} {:cexpr "__cil_tmp30"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$p39 := $i2p.i64.ref(out_$i38);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, 112);
    call {:si_unique_call 794} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 793} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_1595;

  $bb14:
    assume !(out_$i36 == 1);
    goto corral_source_split_1594;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_165:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} xpc_activate_partition(out_$p3);
    goto corral_source_split_1622;

  $bb21:
    assume out_$i50 == 1;
    goto corral_source_split_1621;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 0);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    call {:si_unique_call 802} {:cexpr "__cil_tmp38"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    call {:si_unique_call 801} {:cexpr "__cil_tmp37"} boogie_si_record_i8(out_$i48);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p47 := $i2p.i64.ref(out_$i46);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i45, 112);
    call {:si_unique_call 800} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 799} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_1610;

  $bb19:
    assume out_$i44 == 1;
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 2);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i24);
    call {:si_unique_call 798} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_1606;

  $bb17:
    assume !(out_$i42 == 1);
    goto corral_source_split_1605;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} xpc_deactivate_partition(415, out_$p3, 21);
    goto SeqInstr_164;

  $bb22:
    assume !(out_$i50 == 1);
    goto corral_source_split_1624;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_168:
    goto corral_source_split_1632;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} xpc_deactivate_partition(418, out_$p3, out_$i57);
    goto SeqInstr_167;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    call {:si_unique_call 809} {:cexpr "__cil_tmp47"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p56 := $i2p.i64.ref(out_$i55);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, out_$i53);
    call {:si_unique_call 808} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 807} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i64(576, 288);
    call {:si_unique_call 806} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_1627;

  $bb25:
    assume out_$i52 == 1;
    goto corral_source_split_1626;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 3);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i24);
    call {:si_unique_call 803} {:cexpr "__cil_tmp41"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1618;

  $bb20:
    assume !(out_$i44 == 1);
    goto corral_source_split_1617;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i0 := xpc_process_activate_IRQ_rcvd_uv_loop_$bb1(out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i0);
    return;

  exit:
    return;
}



procedure xpc_process_activate_IRQ_rcvd_uv_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i64, in_$i6: i64, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$i17: i32, in_$i18: i64, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$i25: i64, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i16, in_$i63: i32, in_$i64: i1, in_$i0: i16) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i64, out_$i6: i64, out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$i17: i32, out_$i18: i64, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$i25: i64, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i16, out_$i63: i32, out_$i64: i1, out_$i0: i16);
  modifies $M.1, $M.0, $M.28, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_setup_ch_structures_uv_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i8: i64, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i7: i32) returns (out_$i8: i64, out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i7 := in_$i8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i23;
    goto $bb6_dummy;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i25, out_$i23);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    call {:si_unique_call 946} {:cexpr "__cil_tmp20"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, in_$p3);
    call {:si_unique_call 945} {:cexpr "__cil_tmp19"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i7, 1);
    call {:si_unique_call 944} {:cexpr "ch_number"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} xpc_init_fifo_uv(out_$p22);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p22 := $i2p.i64.ref(out_$i21);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i20, 120);
    call {:si_unique_call 942} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p16);
    call {:si_unique_call 941} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} xpc_init_fifo_uv(out_$p19);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p19 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, 24);
    call {:si_unique_call 939} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    call {:si_unique_call 938} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, 432);
    call {:si_unique_call 937} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    call {:si_unique_call 936} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref(out_$i8, 720));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p11 := $i2p.i64.ref(out_$i10);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i64(out_$i9, 376);
    call {:si_unique_call 935} {:cexpr "__cil_tmp6"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 934} {:cexpr "__cil_tmp5"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_1925;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    call {:si_unique_call 933} {:cexpr "__cil_tmp4"} boogie_si_record_i64(out_$i8);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i7 := xpc_setup_ch_structures_uv_loop_$bb4(in_$p0, in_$p3, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i7);
    return;

  exit:
    return;
}



procedure xpc_setup_ch_structures_uv_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i8: i64, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i7: i32) returns (out_$i8: i64, out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i7: i32);
  modifies $M.0, $CurrAddr;



implementation xpc_make_first_contact_uv_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i8, in_$i31: i64, in_$i32: i64, in_$i33: i32, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i16, in_$i43: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_vslice_dummy_var_29: i32, in_vslice_dummy_var_30: i64) returns (out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i8, out_$i31: i64, out_$i32: i64, out_$i33: i32, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i16, out_$i43: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_vslice_dummy_var_29: i32, out_vslice_dummy_var_30: i64)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_vslice_dummy_var_29, out_vslice_dummy_var_30 := in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_vslice_dummy_var_29, in_vslice_dummy_var_30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(576, 284);
    call {:si_unique_call 955} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_1963;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb13_dummy;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 2);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    call {:si_unique_call 986} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2031;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, in_$p7);
    call {:si_unique_call 985} {:cexpr "__cil_tmp33"} boogie_si_record_i8(out_$i57);
    goto corral_source_split_2030;

  $bb10:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 4);
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    call {:si_unique_call 982} {:cexpr "__cil_tmp26"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    call {:si_unique_call 981} {:cexpr "__cil_tmp25"} boogie_si_record_i8(out_$i49);
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$p48 := $i2p.i64.ref(out_$i47);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i64(out_$i46, 112);
    call {:si_unique_call 980} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 979} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_2015;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} out_vslice_dummy_var_30 := msleep_interruptible(250);
    goto corral_source_split_2014;

  $bb7:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_vslice_dummy_var_29 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p2, out_$p36, .str.130, out_$i43);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i16.i32(out_$i42);
    call {:si_unique_call 976} {:cexpr "__cil_tmp22"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i64.i16(out_$i41);
    call {:si_unique_call 975} {:cexpr "__cil_tmp21"} boogie_si_record_i16(out_$i42);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i41 := $sdiv.i64(out_$i40, 896);
    call {:si_unique_call 974} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i64(out_$i39, out_$i38);
    call {:si_unique_call 973} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 972} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    call {:si_unique_call 971} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p37 := $M.4;
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$p36 := $M.6;
    goto corral_source_split_2004;

  $bb6:
    assume out_$i35 == 1;
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    call {:si_unique_call 970} {:cexpr "tmp"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} out_$i33 := __builtinx_expect.i64.i64(out_$i32, 0);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i64(out_$i31, 1);
    call {:si_unique_call 968} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i64(out_$i30);
    call {:si_unique_call 967} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    call {:si_unique_call 966} {:cexpr "__cil_tmp13"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p29 := $i2p.i64.ref(out_$i28);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(out_$i27, 35);
    call {:si_unique_call 965} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, 0);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p26 := $i2p.i64.ref(out_$i25);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(out_$i24, 35);
    call {:si_unique_call 964} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, 1067);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$p23 := $i2p.i64.ref(out_$i22);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 32);
    call {:si_unique_call 963} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, .str.130);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$p20 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, 24);
    call {:si_unique_call 962} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, .str.114);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, 16);
    call {:si_unique_call 961} {:cexpr "__cil_tmp8"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, .str.129);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$p14 := $i2p.i64.ref(out_$i13);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, 8);
    call {:si_unique_call 960} {:cexpr "__cil_tmp7"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p11, .str);
    goto corral_source_split_1972;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1971;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume out_$i66 == 1;
    goto corral_source_split_2036;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 3);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    call {:si_unique_call 959} {:cexpr "__cil_tmp40"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    call {:si_unique_call 958} {:cexpr "__cil_tmp39"} boogie_si_record_i8(out_$i64);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$p63 := $i2p.i64.ref(out_$i62);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, out_$i60);
    call {:si_unique_call 957} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 956} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_1964;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_vslice_dummy_var_29, out_vslice_dummy_var_30 := xpc_make_first_contact_uv_loop_$bb4(in_$p0, in_$p2, in_$p7, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_vslice_dummy_var_29, out_vslice_dummy_var_30);
    return;

  exit:
    return;
}



procedure xpc_make_first_contact_uv_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i8, in_$i31: i64, in_$i32: i64, in_$i33: i32, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i16, in_$i43: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_vslice_dummy_var_29: i32, in_vslice_dummy_var_30: i64) returns (out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i8, out_$i31: i64, out_$i32: i64, out_$i33: i32, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i16, out_$i43: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_vslice_dummy_var_29: i32, out_vslice_dummy_var_30: i64);
  modifies $M.0, $M.14;



implementation xpc_any_partition_engaged_uv_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i14: i32, in_$i15: i32, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i0: i16) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i64, out_$p6: ref, out_$i7: i64, out_$i8: i64, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i14: i32, out_$i15: i32, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i0: i16)
{

  entry:
    out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i0 := in_$i1, in_$p2, in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  $bb7:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i16;
    goto $bb7_dummy;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i18 := $sle.i32(out_$i17, 255);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i16.i32(out_$i16);
    call {:si_unique_call 1140} {:cexpr "__cil_tmp13"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i16(out_$i15);
    call {:si_unique_call 1139} {:cexpr "partid"} boogie_si_record_i16(out_$i16);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, 1);
    call {:si_unique_call 1138} {:cexpr "__cil_tmp12"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2356;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i16.i32(out_$i0);
    call {:si_unique_call 1137} {:cexpr "__cil_tmp11"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2355;

  $bb4:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 2);
    call {:si_unique_call 1136} {:cexpr "__cil_tmp10"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    call {:si_unique_call 1135} {:cexpr "__cil_tmp9"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p9 := $i2p.i64.ref(out_$i8);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i64(out_$i7, 280);
    call {:si_unique_call 1134} {:cexpr "__cil_tmp8"} boogie_si_record_i64(out_$i8);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    call {:si_unique_call 1133} {:cexpr "__cil_tmp7"} boogie_si_record_i64(out_$i7);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$p6 := $i2p.i64.ref(out_$i5);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i5 := $add.i64(out_$i4, 576);
    call {:si_unique_call 1132} {:cexpr "__cil_tmp6"} boogie_si_record_i64(out_$i5);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i4 := $p2i.ref.i64(out_$p3);
    call {:si_unique_call 1131} {:cexpr "__cil_tmp5"} boogie_si_record_i64(out_$i4);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref(out_$p2, $mul.ref(out_$i1, 872));
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p2 := $M.4;
    goto corral_source_split_2339;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $sext.i16.i64(out_$i0);
    call {:si_unique_call 1130} {:cexpr "__cil_tmp3"} boogie_si_record_i64(out_$i1);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i0 := xpc_any_partition_engaged_uv_loop_$bb1(out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i0);
    return;

  exit:
    return;
}



procedure xpc_any_partition_engaged_uv_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i14: i32, in_$i15: i32, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i0: i16) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i64, out_$p6: ref, out_$i7: i64, out_$i8: i64, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i14: i32, out_$i15: i32, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i0: i16);



implementation xpc_notify_senders_of_disconnect_uv_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i8: i64, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i7: i32) returns (out_$i8: i64, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i7 := in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;

  $bb13:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i31;
    goto $bb13_dummy;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i33, out_$i31);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    call {:si_unique_call 1281} {:cexpr "__cil_tmp27"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, in_$p3);
    call {:si_unique_call 1280} {:cexpr "__cil_tmp26"} boogie_si_record_i16(out_$i32);
    goto corral_source_split_2668;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1279} {:cexpr "entry"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2667;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_243:
    goto corral_source_split_2665;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} xpc_notify_sender_uv(in_$p0, out_$p19, out_$i30);
    goto SeqInstr_242;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 1277} {:cexpr "__cil_tmp23"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p29 := $i2p.i64.ref(out_$i28);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(out_$i27, 84);
    call {:si_unique_call 1276} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1275} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_2661;

  $bb10:
    assume out_$i26 == 1;
    goto corral_source_split_2660;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, out_$i20);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    call {:si_unique_call 1274} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$p23 := $i2p.i64.ref(out_$i22);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 16);
    call {:si_unique_call 1273} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p19);
    call {:si_unique_call 1272} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1271} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p18, $mul.ref(out_$i13, 32));
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, out_$i14);
    call {:si_unique_call 1270} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1269} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i64(432, 8);
    call {:si_unique_call 1268} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_2646;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i7);
    call {:si_unique_call 1267} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_2645;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out_$i11 := atomic_read(out_$p10);
    call {:si_unique_call 1266} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$p10 := $i2p.i64.ref(out_$i9);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i64(out_$i8, 204);
    call {:si_unique_call 1264} {:cexpr "__cil_tmp6"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_2638;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1263} {:cexpr "__cil_tmp5"} boogie_si_record_i64(out_$i8);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i7 := xpc_notify_senders_of_disconnect_uv_loop_$bb4(in_$p0, in_$p3, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i7);
    return;

  exit:
    return;
}



procedure xpc_notify_senders_of_disconnect_uv_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i8: i64, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i7: i32) returns (out_$i8: i64, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i7: i32);
  modifies $M.0, $M.14, $CurrAddr, $M.1, $M.21, $M.28, assertsPassed, $M.3;



implementation xpc_send_gru_msg_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i8: i32, in_$i10: i1, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i8, in_$i31: i64, in_$i32: i64, in_$i33: i32, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$i39: i1, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$i60: i8, in_$i61: i64, in_$i62: i64, in_$i63: i32, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$i40: i32, in_$i70: i32, in_$i71: i1, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i64, in_vslice_dummy_var_36: i32) returns (out_$i8: i32, out_$i10: i1, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i8, out_$i31: i64, out_$i32: i64, out_$i33: i32, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$i39: i1, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$i60: i8, out_$i61: i64, out_$i62: i64, out_$i63: i32, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$i40: i32, out_$i70: i32, out_$i71: i1, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i64, out_vslice_dummy_var_36: i32)
{

  entry:
    out_$i8, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i70, out_$i71, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_36 := in_$i8, in_$i10, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i39, in_$p41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i40, in_$i70, in_$i71, in_vslice_dummy_var_33, in_vslice_dummy_var_34, in_vslice_dummy_var_36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := out_$i70;
    goto $bb20_dummy;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    goto corral_source_split_2893;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} out_$i70 := gru_send_message_gpa(in_$p0, in_$p1, in_$i5);
    call {:si_unique_call 1379} {:cexpr "ret"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_2892;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} out_vslice_dummy_var_34 := msleep_interruptible(10);
    goto corral_source_split_2890;

  $bb11:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} out_vslice_dummy_var_33 := __dynamic_dev_dbg.ref.ref.ref(in_$p3, out_$p36, .str.125);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$p36 := $M.19;
    goto corral_source_split_2887;

  $bb10:
    assume out_$i35 == 1;
    goto corral_source_split_2886;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    call {:si_unique_call 1375} {:cexpr "tmp"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} out_$i33 := __builtinx_expect.i64.i64(out_$i32, 0);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i64(out_$i31, 1);
    call {:si_unique_call 1373} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i64(out_$i30);
    call {:si_unique_call 1372} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    call {:si_unique_call 1371} {:cexpr "__cil_tmp18"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$p29 := $i2p.i64.ref(out_$i28);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(out_$i27, 35);
    call {:si_unique_call 1370} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, 0);
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    out_$p26 := $i2p.i64.ref(out_$i25);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(out_$i24, 35);
    call {:si_unique_call 1369} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, 361);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$p23 := $i2p.i64.ref(out_$i22);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 32);
    call {:si_unique_call 1368} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, .str.125);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$p20 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, 24);
    call {:si_unique_call 1367} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, .str.114);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, 16);
    call {:si_unique_call 1366} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, .str.124);
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p14 := $i2p.i64.ref(out_$i13);
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, 8);
    call {:si_unique_call 1365} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p11, .str);
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2851;

  $bb8:
    assume out_$i10 == 1;
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 2);
    goto corral_source_split_2848;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} out_vslice_dummy_var_36 := __dynamic_dev_dbg.ref.ref.ref(in_$p4, out_$p66, .str.126);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$p66 := $M.19;
    goto corral_source_split_2933;

  $bb16:
    assume out_$i65 == 1;
    goto corral_source_split_2932;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i63);
    call {:si_unique_call 1390} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i63 := __builtinx_expect.i64.i64(out_$i62, 0);
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i64(out_$i61, 1);
    call {:si_unique_call 1388} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i64(out_$i60);
    call {:si_unique_call 1387} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_2922;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.0, out_$p59);
    call {:si_unique_call 1386} {:cexpr "__cil_tmp29"} boogie_si_record_i8(out_$i60);
    goto corral_source_split_2921;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$p59 := $i2p.i64.ref(out_$i58);
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 35);
    call {:si_unique_call 1385} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p56, 0);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$p56 := $i2p.i64.ref(out_$i55);
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 35);
    call {:si_unique_call 1384} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p53, 367);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$p53 := $i2p.i64.ref(out_$i52);
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 32);
    call {:si_unique_call 1383} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p50, .str.126);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p50 := $i2p.i64.ref(out_$i49);
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i48, 24);
    call {:si_unique_call 1382} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p47, .str.114);
    goto corral_source_split_2905;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$p47 := $i2p.i64.ref(out_$i46);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i45, 16);
    call {:si_unique_call 1381} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_2903;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p44, .str.124);
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$p44 := $i2p.i64.ref(out_$i43);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i42, 8);
    call {:si_unique_call 1380} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p41, .str);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2896;

  $bb14:
    assume out_$i39 == 1;
    goto corral_source_split_2895;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i8;
    assume true;
    goto $bb14;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i8, 1);
    goto corral_source_split_2884;

  $bb9:
    assume !(out_$i10 == 1);
    goto corral_source_split_2883;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i8, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i70, out_$i71, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_36 := xpc_send_gru_msg_loop_$bb4(in_$p0, in_$p1, in_$p3, in_$p4, in_$i5, out_$i8, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i70, out_$i71, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure xpc_send_gru_msg_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i8: i32, in_$i10: i1, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i8, in_$i31: i64, in_$i32: i64, in_$i33: i32, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$i39: i1, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$i60: i8, in_$i61: i64, in_$i62: i64, in_$i63: i32, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$i40: i32, in_$i70: i32, in_$i71: i1, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i64, in_vslice_dummy_var_36: i32) returns (out_$i8: i32, out_$i10: i1, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i8, out_$i31: i64, out_$i32: i64, out_$i33: i32, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$i39: i1, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$i60: i8, out_$i61: i64, out_$i62: i64, out_$i63: i32, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$i40: i32, out_$i70: i32, out_$i71: i1, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i64, out_vslice_dummy_var_36: i32);
  modifies $M.0, $M.14;



implementation xpc_get_fifo_entry_uv_loop_$bb8()
{

  entry:
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} xpc_get_fifo_entry_uv_loop_$bb8();
    return;

  exit:
    return;
}



procedure xpc_get_fifo_entry_uv_loop_$bb8();



implementation xpc_allocate_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$i9: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24 := in_$p13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb18_dummy;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p21;
    assume true;
    goto $bb18;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i9);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    call {:si_unique_call 1434} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_3040;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} out_$p21 := xpc_get_fifo_entry_uv(in_$p6);
    goto corral_source_split_3039;

  $bb13:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i17;
    assume true;
    goto $bb15;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i17, 9);
    goto corral_source_split_3035;

  $bb12:
    assume out_$i18 == 1;
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 10);
    goto corral_source_split_3032;

  SeqInstr_249:
    call {:si_unique_call 1432} {:cexpr "ret"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3031;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} out_$i17 := xpc_allocate_msg_wait(in_$p0);
    goto SeqInstr_248;

  $bb9:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_3025;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(in_$i1, 1);
    goto corral_source_split_3024;

  $bb7:
    call {:si_unique_call 1430} {:cexpr "xpc_allocate_msg_slot_uv:arg:__cil_tmp17"} boogie_si_record_i32(in_$i1);
    goto corral_source_split_3023;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24 := xpc_allocate_msg_slot_uv_loop_$bb4(in_$p0, in_$i1, in_$p6, in_$i9, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure xpc_allocate_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$i9: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1);
  modifies $M.1, $M.0, $M.14, $M.21, $CurrAddr, $M.28, assertsPassed, $M.3;



implementation xpc_send_activate_IRQ_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p7: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p61: ref, in_$i62: i64, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i84: i32) returns (out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p61: ref, out_$i62: i64, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i84: i32)
{

  entry:
    out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i54, out_$i55, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i84 := in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i54, in_$i55, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i84;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1520} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_3211;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i90 == 1;
    goto $bb17_dummy;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i82;
    assume true;
    goto $bb17;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 1);
    call {:si_unique_call 1558} {:cexpr "__cil_tmp63"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    call {:si_unique_call 1557} {:cexpr "__cil_tmp62"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 280);
    call {:si_unique_call 1556} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1555} {:cexpr "__cil_tmp60"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_3283;

  SeqInstr_267:
    goto corral_source_split_3282;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  $bb15:
    assume out_$i83 == 1;
    call {:si_unique_call 1554} devirtbounce.4(0);
    goto SeqInstr_266;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i82;
    assume true;
    goto $bb15;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} out_$i82 := xpc_send_gru_msg(out_$p81, in_$p1, in_$i2);
    call {:si_unique_call 1553} {:cexpr "ret"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$p79 := $i2p.i64.ref(out_$i78);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, 32);
    call {:si_unique_call 1551} {:cexpr "__cil_tmp56"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_3275;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1550} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_3274;

  $bb3:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} spin_unlock_irqrestore(out_$p76, $u0);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$p76 := $i2p.i64.ref(out_$i75);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i64(out_$i74, 208);
    call {:si_unique_call 1548} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1547} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, out_$i72);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p73 := $i2p.i64.ref(out_$i67);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i72 := $or.i32(out_$i71, 1);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    call {:si_unique_call 1546} {:cexpr "__cil_tmp51"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p70 := $i2p.i64.ref(out_$i69);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i64(out_$i68, 280);
    call {:si_unique_call 1545} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1544} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i64(out_$i66, 280);
    call {:si_unique_call 1543} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1542} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_3260;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_spin_lock();
    goto corral_source_split_3259;

  $bb12:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i63;
    assume true;
    goto $bb12;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_3255;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_$i63 := xpc_cache_remote_gru_mq_desc_uv(out_$p58, out_$i62);
    call {:si_unique_call 1540} {:cexpr "ret"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i64($M.0, out_$p61);
    call {:si_unique_call 1538} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$p61 := $i2p.i64.ref(out_$i60);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i59, 24);
    call {:si_unique_call 1537} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1536} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_3250;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3249;

  $bb5:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$p58 := out_$p43;
    goto $bb10;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$p58 := out_$p48;
    goto $bb10;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p57, out_$p48);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$p57 := $i2p.i64.ref(out_$i55);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 32);
    call {:si_unique_call 1535} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_3244;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1534} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_3243;

  $bb7:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i64(out_$i51, out_$i50);
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p49);
    call {:si_unique_call 1530} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1529} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_3230;

  SeqInstr_264:
    goto corral_source_split_3229;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} out_$p48 := kmalloc(32, 208);
    goto SeqInstr_263;

  $bb4:
    assume out_$i47 == 1;
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, out_$i45);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p44);
    call {:si_unique_call 1527} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1526} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$p42 := $i2p.i64.ref(out_$i41);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i64(out_$i40, 32);
    call {:si_unique_call 1525} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1524} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_3219;

  $bb2:
    assume out_$i39 == 1;
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 1);
    call {:si_unique_call 1523} {:cexpr "__cil_tmp31"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    call {:si_unique_call 1522} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$p36 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 280);
    call {:si_unique_call 1521} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_3212;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i54, out_$i55, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i84 := xpc_send_activate_IRQ_uv_loop_$bb1(in_$p1, in_$i2, in_$p7, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i54, out_$i55, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i84);
    return;

  exit:
    return;
}



procedure xpc_send_activate_IRQ_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p7: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p61: ref, in_$i62: i64, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i84: i32) returns (out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p61: ref, out_$i62: i64, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i84: i32);
  modifies $M.1, $M.0, $M.28, $M.14, $M.21, $CurrAddr, $M.3, assertsPassed;



implementation xpc_allocate_send_msg_slot_uv_loop_$bb13(in_$p3: ref, in_$i25: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i27: i32) returns (out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i27: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i27 := in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i27;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3468;

  $bb15:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i41;
    goto $bb15_dummy;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, in_$i25);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1673} {:cexpr "entry"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} xpc_put_fifo_entry_uv(out_$p39, out_$p40);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$p39 := $i2p.i64.ref(out_$i38);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, 24);
    call {:si_unique_call 1671} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1670} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p36, out_$i27);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$p36 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 8);
    call {:si_unique_call 1669} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    call {:si_unique_call 1668} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p32, $mul.ref(out_$i28, 32));
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$p31 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 8);
    call {:si_unique_call 1667} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1666} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_3471;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    call {:si_unique_call 1665} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i27 := xpc_allocate_send_msg_slot_uv_loop_$bb13(in_$p3, in_$i25, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i27);
    return;

  exit:
    return;
}



procedure xpc_allocate_send_msg_slot_uv_loop_$bb13(in_$p3: ref, in_$i25: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i27: i32) returns (out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i27: i32);
  modifies $M.0, $M.1;



implementation xpc_allocate_send_msg_slot_uv_loop_$bb4(in_$p3: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i57: i32, in_$i58: i1, in_$i10: i32) returns (out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i57: i32, out_$i58: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i57, out_$i58, out_$i10 := in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i57, in_$i58, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;

  $bb22:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i57;
    goto $bb22_dummy;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 0);
    goto corral_source_split_3462;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i57 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 1664} {:cexpr "nentries"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, out_$i18);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    call {:si_unique_call 1663} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i20);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 8);
    call {:si_unique_call 1662} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1661} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1660} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, out_$p13);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, 8);
    call {:si_unique_call 1659} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1658} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_3446;

  SeqInstr_273:
    goto corral_source_split_3445;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} out_$p13 := kzalloc(out_$i12, 208);
    goto SeqInstr_272;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i12 := $mul.i64(out_$i11, 32);
    call {:si_unique_call 1656} {:cexpr "nbytes"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_3444;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    call {:si_unique_call 1655} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i57, out_$i58, out_$i10 := xpc_allocate_send_msg_slot_uv_loop_$bb4(in_$p3, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i57, out_$i58, out_$i10);
    return;

  exit:
    return;
}



procedure xpc_allocate_send_msg_slot_uv_loop_$bb4(in_$p3: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i57: i32, in_$i58: i1, in_$i10: i32) returns (out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i57: i32, out_$i58: i1, out_$i10: i32);
  modifies $M.0, assertsPassed;



implementation xpc_allocate_recv_msg_slot_uv_loop_$bb13(in_$p0: ref, in_$p3: ref, in_$i29: i32, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i31: i32) returns (out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i31: i32)
{

  entry:
    out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i31 := in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i31;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3558;

  $bb15:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i48;
    goto $bb15_dummy;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, in_$i29);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i31, 1);
    call {:si_unique_call 1714} {:cexpr "entry"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p47, out_$i31);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$p47 := $i2p.i64.ref(out_$i46);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i45, 12);
    call {:si_unique_call 1713} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    call {:si_unique_call 1712} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p43, $mul.ref(out_$i38, 24));
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    out_$p41 := $i2p.i64.ref(out_$i40);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i64(out_$i39, 16);
    call {:si_unique_call 1711} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1710} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    call {:si_unique_call 1709} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$i37 := $mul.i32(out_$i36, out_$i31);
    call {:si_unique_call 1708} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    call {:si_unique_call 1707} {:cexpr "__cil_tmp29"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    call {:si_unique_call 1706} {:cexpr "__cil_tmp28"} boogie_si_record_i16(out_$i35);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$p34 := $i2p.i64.ref(out_$i33);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, 94);
    call {:si_unique_call 1705} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_3561;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1704} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i31 := xpc_allocate_recv_msg_slot_uv_loop_$bb13(in_$p0, in_$p3, in_$i29, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i31);
    return;

  exit:
    return;
}



procedure xpc_allocate_recv_msg_slot_uv_loop_$bb13(in_$p0: ref, in_$p3: ref, in_$i29: i32, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i31: i32) returns (out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i31: i32);
  modifies $M.0;



implementation xpc_allocate_recv_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$i64: i32, in_$i65: i1, in_$i10: i32) returns (out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$i64: i32, out_$i65: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i64, out_$i65, out_$i10 := in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i64, in_$i65, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  $bb22:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i64;
    goto $bb22_dummy;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i64, 0);
    goto corral_source_split_3552;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 1703} {:cexpr "nentries"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i28 == 1;
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i64(out_$i27, out_$i22);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    call {:si_unique_call 1702} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_3546;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$p25 := $i2p.i64.ref(out_$i24);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i23, 16);
    call {:si_unique_call 1701} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1700} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1699} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_3541;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p21, out_$p20);
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_3539;

  SeqInstr_276:
    goto corral_source_split_3538;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_$p20 := kzalloc(out_$i17, 208);
    goto SeqInstr_275;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, 16);
    call {:si_unique_call 1697} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(in_$p3);
    call {:si_unique_call 1696} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    call {:si_unique_call 1695} {:cexpr "nbytes"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_3535;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    out_$i16 := $mul.i32(out_$i15, out_$i10);
    call {:si_unique_call 1694} {:cexpr "__cil_tmp17"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3534;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    call {:si_unique_call 1693} {:cexpr "__cil_tmp16"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    call {:si_unique_call 1692} {:cexpr "__cil_tmp15"} boogie_si_record_i16(out_$i14);
    goto corral_source_split_3532;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$p13 := $i2p.i64.ref(out_$i12);
    goto corral_source_split_3531;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i64(out_$i11, 94);
    call {:si_unique_call 1691} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_3530;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1690} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_3529;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i64, out_$i65, out_$i10 := xpc_allocate_recv_msg_slot_uv_loop_$bb4(in_$p0, in_$p3, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i64, out_$i65, out_$i10);
    return;

  exit:
    return;
}



procedure xpc_allocate_recv_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$i64: i32, in_$i65: i1, in_$i10: i32) returns (out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$i64: i32, out_$i65: i1, out_$i10: i32);
  modifies $M.0, assertsPassed;



implementation xpc_handle_activate_IRQ_uv_loop_$bb4(in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i16, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i16, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i24, out_$i25, out_$p26, out_$i27, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i24, in_$i25, in_$p26, in_$i27, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_vslice_dummy_var_40, in_vslice_dummy_var_41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$p14 := out_$p47;
    goto $bb17_dummy;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, in_$i11);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    call {:si_unique_call 1815} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} out_$p47 := gru_get_next_message(out_$p46);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$p44 := $i2p.i64.ref(out_$i43);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i42, 48);
    call {:si_unique_call 1813} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    call {:si_unique_call 1812} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$p41 := $M.18;
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} gru_free_message(out_$p39, out_$p40);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$p37 := $i2p.i64.ref(out_$i36);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i64(out_$i35, 48);
    call {:si_unique_call 1810} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    call {:si_unique_call 1809} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_3766;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p34 := $M.18;
    goto corral_source_split_3765;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} out_vslice_dummy_var_40 := dev_err.ref.ref.i32(out_$p21, .str.115, out_$i22);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i16.i32(out_$i18);
    call {:si_unique_call 1806} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p21 := $M.6;
    goto corral_source_split_3757;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 0);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i16.i32(out_$i18);
    call {:si_unique_call 1805} {:cexpr "__cil_tmp19"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i16($M.0, out_$p17);
    call {:si_unique_call 1804} {:cexpr "partid"} boogie_si_record_i16(out_$i18);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, 4);
    call {:si_unique_call 1803} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_3750;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    call {:si_unique_call 1802} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_3749;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} out_vslice_dummy_var_41 := dev_err.ref.ref.i32(out_$p26, .str.115, out_$i27);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i16.i32(out_$i18);
    call {:si_unique_call 1816} {:cexpr "__cil_tmp24"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$p26 := $M.6;
    goto corral_source_split_3785;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_3784;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 255);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i16.i32(out_$i18);
    call {:si_unique_call 1808} {:cexpr "__cil_tmp22"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3762;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_3761;

  $bb15:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_291:
    goto corral_source_split_3798;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} xpc_part_deref(out_$p31);
    goto SeqInstr_290;

  $bb14:
    assume out_$i33 == 1;
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3795;

  SeqInstr_288:
    goto corral_source_split_3794;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} xpc_handle_activate_mq_msg_uv(out_$p31, out_$p14, out_$i32, in_$p2);
    goto SeqInstr_287;

  SeqInstr_285:
    call {:si_unique_call 1820} {:cexpr "part_referenced"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3793;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_$i32 := xpc_part_ref(out_$p31);
    goto SeqInstr_284;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref(out_$i29, 872));
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$p30 := $M.4;
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i16.i64(out_$i18);
    call {:si_unique_call 1818} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_3790;

  $bb12:
    assume !(out_$i25 == 1);
    goto corral_source_split_3789;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i24, out_$i25, out_$p26, out_$i27, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := xpc_handle_activate_IRQ_uv_loop_$bb4(in_$p2, in_$i11, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i24, out_$i25, out_$p26, out_$i27, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_vslice_dummy_var_40, out_vslice_dummy_var_41);
    return;

  exit:
    return;
}



procedure xpc_handle_activate_IRQ_uv_loop_$bb4(in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i16, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i16, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32);
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed, $M.58;



implementation xpc_handle_notify_IRQ_uv_loop_$bb4(in_$i10: i64, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p13: ref, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32) returns (out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p13: ref, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32)
{

  entry:
    out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p13, out_vslice_dummy_var_42, out_vslice_dummy_var_43 := in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i23, in_$i24, in_$p25, in_$i26, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p13, in_vslice_dummy_var_42, in_vslice_dummy_var_43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  $bb15:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p46;
    goto $bb15_dummy;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i10);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    call {:si_unique_call 1843} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} out_$p46 := gru_get_next_message(out_$p45);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$p43 := $i2p.i64.ref(out_$i42);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i41, 48);
    call {:si_unique_call 1841} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    call {:si_unique_call 1840} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$p40 := $M.17;
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} gru_free_message(out_$p38, out_$p39);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$p36 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 48);
    call {:si_unique_call 1838} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    call {:si_unique_call 1837} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_3837;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p33 := $M.17;
    goto corral_source_split_3836;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_vslice_dummy_var_42 := dev_err.ref.ref.i32(out_$p20, .str.117, out_$i21);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i16.i32(out_$i17);
    call {:si_unique_call 1834} {:cexpr "__cil_tmp13"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p20 := $M.6;
    goto corral_source_split_3828;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 0);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i16.i32(out_$i17);
    call {:si_unique_call 1833} {:cexpr "__cil_tmp11"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.0, out_$p16);
    call {:si_unique_call 1832} {:cexpr "partid"} boogie_si_record_i16(out_$i17);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, 8);
    call {:si_unique_call 1831} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_3821;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    call {:si_unique_call 1830} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} out_vslice_dummy_var_43 := dev_err.ref.ref.i32(out_$p25, .str.117, out_$i26);
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i16.i32(out_$i17);
    call {:si_unique_call 1844} {:cexpr "__cil_tmp16"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p25 := $M.6;
    goto corral_source_split_3856;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_3855;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, 255);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i16.i32(out_$i17);
    call {:si_unique_call 1836} {:cexpr "__cil_tmp14"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3833;

  $bb7:
    assume !(out_$i19 == 1);
    goto corral_source_split_3832;

  $bb13:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_300:
    goto corral_source_split_3869;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} xpc_part_deref(out_$p30);
    goto SeqInstr_299;

  SeqInstr_297:
    goto corral_source_split_3868;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} xpc_handle_notify_mq_msg_uv(out_$p30, out_$p13);
    goto SeqInstr_296;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3865;

  SeqInstr_294:
    call {:si_unique_call 1848} {:cexpr "tmp"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3864;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} out_$i31 := xpc_part_ref(out_$p30);
    goto SeqInstr_293;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref(out_$i28, 872));
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$p29 := $M.4;
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i16.i64(out_$i17);
    call {:si_unique_call 1846} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3861;

  $bb10:
    assume !(out_$i24 == 1);
    goto corral_source_split_3860;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p13, out_vslice_dummy_var_42, out_vslice_dummy_var_43 := xpc_handle_notify_IRQ_uv_loop_$bb4(in_$i10, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p13, out_vslice_dummy_var_42, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure xpc_handle_notify_IRQ_uv_loop_$bb4(in_$i10: i64, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p13: ref, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32) returns (out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p13: ref, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32);
  modifies $M.0, $M.3, $M.14, $M.1, $M.28, $M.21, $CurrAddr, assertsPassed;



implementation xpc_handle_notify_mq_msg_uv_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} xpc_handle_notify_mq_msg_uv_loop_$bb16();
    return;

  exit:
    return;
}



procedure xpc_handle_notify_mq_msg_uv_loop_$bb16();



implementation xpc_handle_notify_mq_ack_uv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} xpc_handle_notify_mq_ack_uv_loop_$bb3();
    return;

  exit:
    return;
}



procedure xpc_handle_notify_mq_ack_uv_loop_$bb3();



implementation main_loop_$bb4(in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i49: i32, in_$i50: i16, in_$i51: i32, in_$i52: i16, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i66: i32, in_$i67: i16, in_$i68: i32, in_$i69: i8, in_$i74: i32, in_$i75: i1, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: ref, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i49: i32, out_$i50: i16, out_$i51: i32, out_$i52: i16, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i66: i32, out_$i67: i16, out_$i68: i32, out_$i69: i8, out_$i74: i32, out_$i75: i1, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: ref, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i49, out_$i50, out_$i51, out_$i52, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$i68, out_$i69, out_$i74, out_$i75, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i49, in_$i50, in_$i51, in_$i52, in_$i59, in_$i60, in_$i61, in_$i62, in_$i66, in_$i67, in_$i68, in_$i69, in_$i74, in_$i75, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb185:
    assume {:verifier.code 0} true;
    assume out_$i75 == 1;
    goto $bb185_dummy;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_5050;

  $bb139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2376} out_$i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 2377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i74);
    call {:si_unique_call 2378} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_5049;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} out_vslice_dummy_var_46 := xpc_setup_partitions_uv();
    goto corral_source_split_4736;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i2, 0);
    goto corral_source_split_4729;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2314} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2315} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 2316} {:cexpr "tmp"} boogie_si_record_i32(out_$i2);
    goto corral_source_split_4728;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} xpc_teardown_partitions_uv();
    goto corral_source_split_4743;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_4738;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i2, 1);
    goto corral_source_split_4734;

  $bb7:
    assume !(out_$i3 == 1);
    goto corral_source_split_4733;

  SeqInstr_342:
    goto corral_source_split_4750;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} xpc_process_activate_IRQ_rcvd_uv();
    goto SeqInstr_341;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i5 == 1;
    goto corral_source_split_4745;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i2, 2);
    goto corral_source_split_4741;

  $bb10:
    assume !(out_$i4 == 1);
    goto corral_source_split_4740;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} out_vslice_dummy_var_47 := xpc_get_partition_rsvd_page_pa_uv($u8, $u5, $u5, $u5);
    goto corral_source_split_4757;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i6 == 1;
    goto corral_source_split_4752;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i2, 3);
    goto corral_source_split_4748;

  $bb13:
    assume !(out_$i5 == 1);
    goto corral_source_split_4747;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} out_vslice_dummy_var_48 := xpc_setup_rsvd_page_uv($u9);
    goto corral_source_split_4764;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i7 == 1;
    goto corral_source_split_4759;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i2, 4);
    goto corral_source_split_4755;

  $bb16:
    assume !(out_$i6 == 1);
    goto corral_source_split_4754;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} xpc_allow_hb_uv(out_$i50);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i16(out_$i49);
    call {:si_unique_call 2323} {:cexpr "__cil_tmp35"} boogie_si_record_i16(out_$i50);
    goto corral_source_split_4772;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i16.i32($u10);
    call {:si_unique_call 2322} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_4771;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i8 == 1;
    goto corral_source_split_4766;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i2, 5);
    goto corral_source_split_4762;

  $bb19:
    assume !(out_$i7 == 1);
    goto corral_source_split_4761;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} xpc_disallow_hb_uv(out_$i52);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i16(out_$i51);
    call {:si_unique_call 2326} {:cexpr "__cil_tmp37"} boogie_si_record_i16(out_$i52);
    goto corral_source_split_4781;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i16.i32($u10);
    call {:si_unique_call 2325} {:cexpr "__cil_tmp36"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4780;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i9 == 1;
    goto corral_source_split_4775;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i2, 6);
    goto corral_source_split_4769;

  $bb22:
    assume !(out_$i8 == 1);
    goto corral_source_split_4768;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} xpc_disallow_all_hbs_uv();
    goto corral_source_split_4789;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i10 == 1;
    goto corral_source_split_4784;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i2, 7);
    goto corral_source_split_4778;

  $bb25:
    assume !(out_$i9 == 1);
    goto corral_source_split_4777;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} xpc_increment_heartbeat_uv();
    goto corral_source_split_4796;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i11 == 1;
    goto corral_source_split_4791;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i2, 8);
    goto corral_source_split_4787;

  $bb28:
    assume !(out_$i10 == 1);
    goto corral_source_split_4786;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} xpc_offline_heartbeat_uv();
    goto corral_source_split_4803;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i12 == 1;
    goto corral_source_split_4798;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i2, 9);
    goto corral_source_split_4794;

  $bb31:
    assume !(out_$i11 == 1);
    goto corral_source_split_4793;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} xpc_online_heartbeat_uv();
    goto corral_source_split_4810;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i13 == 1;
    goto corral_source_split_4805;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i2, 10);
    goto corral_source_split_4801;

  $bb34:
    assume !(out_$i12 == 1);
    goto corral_source_split_4800;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} xpc_heartbeat_init_uv();
    goto corral_source_split_4817;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i14 == 1;
    goto corral_source_split_4812;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i2, 11);
    goto corral_source_split_4808;

  $bb37:
    assume !(out_$i13 == 1);
    goto corral_source_split_4807;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} xpc_heartbeat_exit_uv();
    goto corral_source_split_4824;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume out_$i15 == 1;
    goto corral_source_split_4819;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i2, 12);
    goto corral_source_split_4815;

  $bb40:
    assume !(out_$i14 == 1);
    goto corral_source_split_4814;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} out_vslice_dummy_var_49 := xpc_get_remote_heartbeat_uv($u11);
    goto corral_source_split_4831;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i16 == 1;
    goto corral_source_split_4826;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i2, 13);
    goto corral_source_split_4822;

  $bb43:
    assume !(out_$i15 == 1);
    goto corral_source_split_4821;

  SeqInstr_345:
    goto corral_source_split_4838;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} xpc_request_partition_activation_uv($u9, $u0, $u2);
    goto SeqInstr_344;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i17 == 1;
    goto corral_source_split_4833;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i2, 14);
    goto corral_source_split_4829;

  $bb46:
    assume !(out_$i16 == 1);
    goto corral_source_split_4828;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} xpc_request_partition_reactivation_uv($u11);
    goto corral_source_split_4845;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i18 == 1;
    goto corral_source_split_4840;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i2, 15);
    goto corral_source_split_4836;

  $bb49:
    assume !(out_$i17 == 1);
    goto corral_source_split_4835;

  SeqInstr_348:
    goto corral_source_split_4852;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} xpc_request_partition_deactivation_uv($u11);
    goto SeqInstr_347;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i19 == 1;
    goto corral_source_split_4847;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i2, 16);
    goto corral_source_split_4843;

  $bb52:
    assume !(out_$i18 == 1);
    goto corral_source_split_4842;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} xpc_cancel_partition_deactivation_request_uv($u11);
    goto corral_source_split_4859;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume out_$i20 == 1;
    goto corral_source_split_4854;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i2, 17);
    goto corral_source_split_4850;

  $bb55:
    assume !(out_$i19 == 1);
    goto corral_source_split_4849;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} out_vslice_dummy_var_50 := xpc_setup_ch_structures_uv($u11);
    goto corral_source_split_4866;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i21 == 1;
    goto corral_source_split_4861;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i2, 18);
    goto corral_source_split_4857;

  $bb58:
    assume !(out_$i20 == 1);
    goto corral_source_split_4856;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} xpc_teardown_ch_structures_uv($u11);
    goto corral_source_split_4873;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i22 == 1;
    goto corral_source_split_4868;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i2, 19);
    goto corral_source_split_4864;

  $bb61:
    assume !(out_$i21 == 1);
    goto corral_source_split_4863;

  SeqInstr_351:
    goto corral_source_split_4880;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} out_vslice_dummy_var_51 := xpc_make_first_contact_uv($u11);
    goto SeqInstr_350;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i23 == 1;
    goto corral_source_split_4875;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i2, 20);
    goto corral_source_split_4871;

  $bb64:
    assume !(out_$i22 == 1);
    goto corral_source_split_4870;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} out_vslice_dummy_var_52 := xpc_get_chctl_all_flags_uv($u11);
    goto corral_source_split_4887;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume out_$i24 == 1;
    goto corral_source_split_4882;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i2, 21);
    goto corral_source_split_4878;

  $bb67:
    assume !(out_$i23 == 1);
    goto corral_source_split_4877;

  SeqInstr_354:
    goto corral_source_split_4894;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} xpc_send_chctl_closerequest_uv($u12, $u5);
    goto SeqInstr_353;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume out_$i25 == 1;
    goto corral_source_split_4889;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i2, 22);
    goto corral_source_split_4885;

  $bb70:
    assume !(out_$i24 == 1);
    goto corral_source_split_4884;

  SeqInstr_357:
    goto corral_source_split_4901;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} xpc_send_chctl_closereply_uv($u12, $u5);
    goto SeqInstr_356;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i26 == 1;
    goto corral_source_split_4896;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i2, 23);
    goto corral_source_split_4892;

  $bb73:
    assume !(out_$i25 == 1);
    goto corral_source_split_4891;

  SeqInstr_360:
    goto corral_source_split_4908;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} xpc_send_chctl_openrequest_uv($u12, $u5);
    goto SeqInstr_359;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i27 == 1;
    goto corral_source_split_4903;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i2, 24);
    goto corral_source_split_4899;

  $bb76:
    assume !(out_$i26 == 1);
    goto corral_source_split_4898;

  SeqInstr_363:
    goto corral_source_split_4915;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} xpc_send_chctl_openreply_uv($u12, $u5);
    goto SeqInstr_362;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume out_$i28 == 1;
    goto corral_source_split_4910;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i2, 25);
    goto corral_source_split_4906;

  $bb79:
    assume !(out_$i27 == 1);
    goto corral_source_split_4905;

  SeqInstr_366:
    goto corral_source_split_4922;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} xpc_send_chctl_opencomplete_uv($u12, $u5);
    goto SeqInstr_365;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i29 == 1;
    goto corral_source_split_4917;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i2, 26);
    goto corral_source_split_4913;

  $bb82:
    assume !(out_$i28 == 1);
    goto corral_source_split_4912;

  SeqInstr_369:
    goto corral_source_split_4929;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} xpc_process_msg_chctl_flags_uv($u11, $u2);
    goto SeqInstr_368;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume out_$i30 == 1;
    goto corral_source_split_4924;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i2, 27);
    goto corral_source_split_4920;

  $bb85:
    assume !(out_$i29 == 1);
    goto corral_source_split_4919;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} out_vslice_dummy_var_53 := xpc_save_remote_msgqueue_pa_uv($u12, $u0);
    goto corral_source_split_4936;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume out_$i31 == 1;
    goto corral_source_split_4931;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i2, 28);
    goto corral_source_split_4927;

  $bb88:
    assume !(out_$i30 == 1);
    goto corral_source_split_4926;

  SeqInstr_372:
    goto corral_source_split_4943;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} out_vslice_dummy_var_54 := xpc_setup_msg_structures_uv($u12);
    goto SeqInstr_371;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume out_$i32 == 1;
    goto corral_source_split_4938;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i2, 29);
    goto corral_source_split_4934;

  $bb91:
    assume !(out_$i31 == 1);
    goto corral_source_split_4933;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} xpc_teardown_msg_structures_uv($u12);
    goto corral_source_split_4950;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume out_$i33 == 1;
    goto corral_source_split_4945;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i2, 30);
    goto corral_source_split_4941;

  $bb94:
    assume !(out_$i32 == 1);
    goto corral_source_split_4940;

  SeqInstr_375:
    goto corral_source_split_4957;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} xpc_indicate_partition_engaged_uv($u11);
    goto SeqInstr_374;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb99:
    assume out_$i34 == 1;
    goto corral_source_split_4952;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i2, 31);
    goto corral_source_split_4948;

  $bb97:
    assume !(out_$i33 == 1);
    goto corral_source_split_4947;

  SeqInstr_378:
    goto corral_source_split_4964;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} xpc_indicate_partition_disengaged_uv($u11);
    goto SeqInstr_377;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume out_$i35 == 1;
    goto corral_source_split_4959;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i2, 32);
    goto corral_source_split_4955;

  $bb100:
    assume !(out_$i34 == 1);
    goto corral_source_split_4954;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} xpc_assume_partition_disengaged_uv(out_$i60);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i16(out_$i59);
    call {:si_unique_call 2355} {:cexpr "__cil_tmp39"} boogie_si_record_i16(out_$i60);
    goto corral_source_split_4972;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i16.i32($u10);
    call {:si_unique_call 2354} {:cexpr "__cil_tmp38"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_4971;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb105:
    assume out_$i36 == 1;
    goto corral_source_split_4966;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i2, 33);
    goto corral_source_split_4962;

  $bb103:
    assume !(out_$i35 == 1);
    goto corral_source_split_4961;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} out_vslice_dummy_var_55 := xpc_partition_engaged_uv(out_$i62);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i61);
    call {:si_unique_call 2358} {:cexpr "__cil_tmp41"} boogie_si_record_i16(out_$i62);
    goto corral_source_split_4981;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i16.i32($u10);
    call {:si_unique_call 2357} {:cexpr "__cil_tmp40"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_4980;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i37 == 1;
    goto corral_source_split_4975;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i2, 34);
    goto corral_source_split_4969;

  $bb106:
    assume !(out_$i36 == 1);
    goto corral_source_split_4968;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} out_vslice_dummy_var_56 := xpc_any_partition_engaged_uv();
    goto corral_source_split_4989;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb111:
    assume out_$i38 == 1;
    goto corral_source_split_4984;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i2, 35);
    goto corral_source_split_4978;

  $bb109:
    assume !(out_$i37 == 1);
    goto corral_source_split_4977;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} out_vslice_dummy_var_57 := xpc_n_of_deliverable_payloads_uv($u12);
    goto corral_source_split_4996;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume out_$i39 == 1;
    goto corral_source_split_4991;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i2, 36);
    goto corral_source_split_4987;

  $bb112:
    assume !(out_$i38 == 1);
    goto corral_source_split_4986;

  SeqInstr_381:
    goto corral_source_split_5007;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} out_vslice_dummy_var_58 := xpc_send_payload_uv($u12, $u2, $u8, out_$i67, out_$i69, $u7, $u8);
    goto SeqInstr_380;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i32.i8(out_$i68);
    call {:si_unique_call 2365} {:cexpr "__cil_tmp45"} boogie_si_record_i8(out_$i69);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32($u13);
    call {:si_unique_call 2364} {:cexpr "__cil_tmp44"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i32.i16(out_$i66);
    call {:si_unique_call 2363} {:cexpr "__cil_tmp43"} boogie_si_record_i16(out_$i67);
    goto corral_source_split_5004;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i32($u10);
    call {:si_unique_call 2362} {:cexpr "__cil_tmp42"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_5003;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume out_$i40 == 1;
    goto corral_source_split_4998;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i2, 37);
    goto corral_source_split_4994;

  $bb115:
    assume !(out_$i39 == 1);
    goto corral_source_split_4993;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} out_vslice_dummy_var_59 := xpc_get_deliverable_payload_uv($u12);
    goto corral_source_split_5014;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume out_$i41 == 1;
    goto corral_source_split_5009;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i2, 38);
    goto corral_source_split_5001;

  $bb118:
    assume !(out_$i40 == 1);
    goto corral_source_split_5000;

  SeqInstr_384:
    goto corral_source_split_5021;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} xpc_received_payload_uv($u12, $u8);
    goto SeqInstr_383;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb123:
    assume out_$i42 == 1;
    goto corral_source_split_5016;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i2, 39);
    goto corral_source_split_5012;

  $bb121:
    assume !(out_$i41 == 1);
    goto corral_source_split_5011;

  SeqInstr_387:
    goto corral_source_split_5028;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} xpc_notify_senders_of_disconnect_uv($u12);
    goto SeqInstr_386;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume out_$i43 == 1;
    goto corral_source_split_5023;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i2, 40);
    goto corral_source_split_5019;

  $bb124:
    assume !(out_$i42 == 1);
    goto corral_source_split_5018;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5037;

  SeqInstr_390:
    goto corral_source_split_5036;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} out_vslice_dummy_var_60 := xpc_handle_activate_IRQ_uv($u2, $u8);
    goto SeqInstr_389;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5035;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb129:
    assume out_$i44 == 1;
    goto corral_source_split_5030;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i2, 41);
    goto corral_source_split_5026;

  $bb127:
    assume !(out_$i43 == 1);
    goto corral_source_split_5025;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5045;

  SeqInstr_393:
    goto corral_source_split_5044;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} out_vslice_dummy_var_61 := xpc_handle_notify_IRQ_uv($u2, $u8);
    goto SeqInstr_392;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5043;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume out_$i45 == 1;
    goto corral_source_split_5039;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i2, 42);
    goto corral_source_split_5033;

  $bb130:
    assume !(out_$i44 == 1);
    goto corral_source_split_5032;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133:
    assume !(out_$i45 == 1);
    goto corral_source_split_5041;

  $bb185_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i49, out_$i50, out_$i51, out_$i52, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$i68, out_$i69, out_$i74, out_$i75, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61 := main_loop_$bb4(out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i49, out_$i50, out_$i51, out_$i52, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$i68, out_$i69, out_$i74, out_$i75, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure main_loop_$bb4(in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i49: i32, in_$i50: i16, in_$i51: i32, in_$i52: i16, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i66: i32, in_$i67: i16, in_$i68: i32, in_$i69: i8, in_$i74: i32, in_$i75: i1, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: ref, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i49: i32, out_$i50: i16, out_$i51: i32, out_$i52: i16, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i66: i32, out_$i67: i16, out_$i68: i32, out_$i69: i8, out_$i74: i32, out_$i75: i1, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: ref, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32);
  modifies $M.0, $CurrAddr, $M.1, $M.28, $M.14, $M.21, $M.3, assertsPassed, $M.29, $M.30, $M.58;


